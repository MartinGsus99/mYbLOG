{"total":84,"pageSize":12,"pageCount":7,"data":[{"title":"前端面筋","uid":"ea16d4275e7521767b51128cd8bf6cd4","slug":"前端面经","date":"2023-03-27T10:51:45.000Z","updated":"2023-05-25T12:53:43.059Z","comments":true,"path":"api/articles/前端面经.json","cover":"img/bg11.jpg","text":"前端三大件一、HTML二、CSS1.Flex布局 Flex布局包括容器和Item两部分；一个容器的所有子元素都成为他的item成员； flex-direction:主轴方向，row，row-reverse，column，column-recerse； flex-wrap:默认所有...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"面试笔记","slug":"面试笔记","count":4,"path":"api/tags/面试笔记.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数据可视化","uid":"4895101f3675479202285ec0ba9daedf","slug":"数据可视化基础","date":"2023-03-27T10:51:45.000Z","updated":"2023-03-27T11:05:51.744Z","comments":true,"path":"api/articles/数据可视化基础.json","cover":"img/bg10.jpg","text":"数据可视化一、什么是数据可视化？ Anything that converts data into a visual representation. Charts\\Graphs\\Maps\\Tables… 1.数据可视化分类 科学可视化：科学实验数据的直观展示； 信息可视化：对抽象...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"可视化","slug":"可视化","count":2,"path":"api/tags/可视化.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"跨端技术概述","uid":"9e5c5d85c6ecb493e815e549e0c2b04d","slug":"跨端技术概述","date":"2023-03-27T10:51:45.000Z","updated":"2023-03-27T11:07:06.979Z","comments":true,"path":"api/articles/跨端技术概述.json","cover":"img/bg15.jpg","text":"跨端技术概述一、跨端是什么？1.跨端背景 PC端（Windows,Mac） 移动端（iOS，Android） Web端 IoT端（车载设备，穿戴设备） 2.常见痛点 各端功能几乎一致，各端需要单独配置开发人员； 开发、维护成本高； 安卓、IOS发版周期长； … 3.跨端技术方案目...","link":"","photos":[],"count_time":{"symbolsCount":665,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"面试笔记","slug":"面试笔记","count":4,"path":"api/tags/面试笔记.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vuex","uid":"d5f81ad13155fc328e81b1032965290d","slug":"Vuex","date":"2023-03-27T07:18:45.000Z","updated":"2023-03-27T11:21:04.292Z","comments":true,"path":"api/articles/Vuex.json","cover":"img/vue.png","text":"Vuex一、基础概念1.Vuex是什么？状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 2.状态管理模式举个栗子🌰 const Counter &#x3D; &#123; &#x2F;&#x2F; 状态 data () &#...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"VUE","slug":"VUE","count":17,"path":"api/tags/VUE.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"Webpack体系","date":"2022-11-11T18:51:45.000Z","updated":"2023-04-04T13:34:57.918Z","comments":true,"path":"api/articles/Webpack体系.json","cover":"img/vue.png","text":"Webpack知识体系 理解前端工程话概念、工具、目标； 团队需要有人熟悉webpack； 高阶前端必经之路； 一、什么是webpack?1.前端项目构成 多媒体文件 CSS JS HTML VUE 手动管理 比如引入50个js文件，操作过程繁琐； 当代码文件之间有依赖时，得严格...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"VUE","slug":"VUE","count":17,"path":"api/tags/VUE.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数字水印","uid":"4dfb251717ac84fb0a3aa43b49610c5f","slug":"数字水印","date":"2022-10-29T07:09:01.000Z","updated":"2022-10-29T07:59:07.766Z","comments":true,"path":"api/articles/数字水印.json","cover":"img/axios.png","text":"数字水印一、基本原理1.背景信息隐藏： 伪装通信、隐秘传输； 数字水印： 版权保护； 区别： 信息隐藏 数字水印 目标 隐藏信息 承载标记 精准度 精确 不需要 健壮 一般 强 特点：永久嵌入在其他数据中，提供鉴别的信号或模式，并不影响宿主数据的可用性；安全、可证明、不可感知、健...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数字水印","slug":"数字水印","count":1,"path":"api/categories/数字水印.json"}],"tags":[{"name":"数字水印","slug":"数字水印","count":1,"path":"api/tags/数字水印.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"图像信号处理基础","uid":"0f623956fafb0472df452b34429c8c33","slug":"图像信号处理基础","date":"2022-10-29T07:09:00.000Z","updated":"2022-10-29T07:59:07.765Z","comments":true,"path":"api/articles/图像信号处理基础.json","cover":"img/2.jpg","text":"图像信号处理基础一、图像信号基础1.图像表示像素点 2.图像压缩方法JPEG等； 3.常用图像处理方法 二维DFT 二维DWT 二维DCT 二、信息隐藏基本原理1.信息隐藏概念不可视通信，阈下通信$$C 载体对象；M 秘密信息； C’伪装对象；$$ 纯粹安全性：第三方有没有能力将...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"信息隐藏","slug":"信息隐藏","count":1,"path":"api/categories/信息隐藏.json"}],"tags":[{"name":"信息隐藏","slug":"信息隐藏","count":1,"path":"api/tags/信息隐藏.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Axios详解","uid":"497057504cdf696233ca7859e8edacd2","slug":"Axios详解","date":"2022-10-27T08:09:00.000Z","updated":"2022-10-27T08:11:25.944Z","comments":true,"path":"api/articles/Axios详解.json","cover":"img/axios.png","text":"Axios基于promise可以用于浏览器和node.js的网络请求库一、基础定义Promise1.promise一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。 basic 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JS","slug":"JS","count":2,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"JS","date":"2022-10-11T18:51:45.000Z","updated":"2023-04-04T13:35:28.254Z","comments":true,"path":"api/articles/JS.json","cover":"img/vue.png","text":"JS一、各司其职 HTML、CSS、JS职能分离 二、组件封装 好的UI组件具有正确性、拓展性、复用性 1.结构轮播图其实是一个列表结构； 通过css将图片层叠在一起； 2.展现效果3.行为API 功能 Event 控制流：使用自定义的事件来解耦 4.改进空间 解耦+ 三、过程抽...","link":"","photos":[],"count_time":{"symbolsCount":835,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"JS基础","date":"2022-09-11T18:51:45.000Z","updated":"2023-04-04T13:35:41.643Z","comments":true,"path":"api/articles/JS基础.json","cover":"img/vue.png","text":"JS高级程序设计一、基础基础基础1.基础语法 for-in //for-in语法是一种精准的迭代语句，可以用来枚举对象的属性； for(property in expression)&#123; statement; &#125; for(var propName in wind...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"排序","uid":"2a1893ca085cc0c5b7d1cdcd8c0b1c91","slug":"Ch8排序","date":"2021-08-31T12:57:45.000Z","updated":"2021-08-31T12:51:24.000Z","comments":true,"path":"api/articles/Ch8排序.json","cover":"img/bg20.jpg","text":"排序算法一、插入排序每次将一个待排序的记录插入到前面已经排序的序列； void InsertSort(RecordType R[],int num) &#123; int index1,index2; for(index1=2;index1&lt;=num;index1++) &...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2021-08-29T10:03:45.000Z","updated":"2021-08-30T13:37:44.000Z","comments":true,"path":"api/articles/贪心算法.json","cover":"img/bg15.jpg","text":"贪心算法思想：每一步都选择局部最优解 #问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集； #解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台； # 州名 states_need = set([\"a\", ...","link":"","photos":[],"count_time":{"symbolsCount":789,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":4,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"贪心算法","slug":"贪心算法","count":1,"path":"api/tags/贪心算法.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}