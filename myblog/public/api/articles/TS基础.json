{"title":"TS 基础","uid":"4fcf6f790a74def036d077b002f61038","slug":"TS基础","date":"2023-06-26T13:33:45.000Z","updated":"2023-07-04T09:34:14.790Z","comments":true,"path":"api/articles/TS基础.json","keywords":"Love And Freedom","cover":"img/bg3.jpg","content":"<h1 id=\"TS-基础\"><a href=\"#TS-基础\" class=\"headerlink\" title=\"TS 基础\"></a>TS 基础</h1><h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"一、什么是TypeScript\"><a href=\"#一、什么是TypeScript\" class=\"headerlink\" title=\"一、什么是TypeScript?\"></a>一、什么是TypeScript?</h2><h3 id=\"1-Why-we-choose-TypeScript\"><a href=\"#1-Why-we-choose-TypeScript\" class=\"headerlink\" title=\"1.Why we choose TypeScript?\"></a>1.Why we choose TypeScript?</h3><ul>\n<li>JavaScript构建大型复杂Web应用系统不容易；</li>\n<li>TypeScript为JS的超集，具有可选的类型且可以编译为纯JS。从技术上讲，TS是具有静态类型的JS。</li>\n<li></li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/80/v2-9be3e79b82f92d9476b42040d6af894f_720w.webp\"></p>\n<h3 id=\"2-为什么需要向JS添加静态类型？\"><a href=\"#2-为什么需要向JS添加静态类型？\" class=\"headerlink\" title=\"2.为什么需要向JS添加静态类型？\"></a>2.为什么需要向JS添加静态类型？</h3><ul>\n<li>避免经典的错误“undefined is not a function.”</li>\n<li>在不严重破坏代码的情况下，重构代码更容易。</li>\n<li>使大型复杂的应用源码更加容易阅读。动态类型的自由特性经常会导致错误，错误不仅会降低程序员的呢工作效率，还会由于增加新代码的成本而使开发陷入停顿。JavaScript无法合并类型以及编译时缺乏错误检查，使它不适合作为企业和大型代码库中服务器端代码。</li>\n</ul>\n<h2 id=\"二、基础\"><a href=\"#二、基础\" class=\"headerlink\" title=\"二、基础\"></a>二、基础</h2><h3 id=\"1-基础类型\"><a href=\"#1-基础类型\" class=\"headerlink\" title=\"1.基础类型\"></a>1.基础类型</h3><p>TS拥有和JS几乎一样的数据类型，此外还添加了枚举类型；</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">\n<span class=\"token number\">1.</span>布尔型\n<span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">2.</span>数字<span class=\"token operator\">:</span><span class=\"token constant\">TS</span>里面的所有数字都是浮点数；\n<span class=\"token keyword\">let</span> decLiteral<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hexLiteral<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> binaryLiteral<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> oct<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">3.</span>字符串 “” <span class=\"token string\">''</span>\n<span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token operator\">=</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n\n模板为字符串<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Gene</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sentence<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello,my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,and I will be </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>age<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> years old next month;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sentence<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, my name is \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".\\n\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"I'll be \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" years old next month.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">4.</span>数组 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n数组泛型\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">5.</span>元组 <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">6.</span>枚举 <span class=\"token keyword\">enum</span>\n<span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span>Color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Color<span class=\"token punctuation\">&#123;</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span>Color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Color<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>g<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span>Color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span>\n\n枚举提供的遍历是可以通过枚举的值得到他的名字；\n<span class=\"token keyword\">enum</span> Color<span class=\"token punctuation\">&#123;</span>red<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> colorName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token operator\">=</span>Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//g</span>\n\n<span class=\"token number\">7.</span>任意值 <span class=\"token builtin\">any</span>：有时候我们想要在编程阶段还哦不清楚的类型指定一个类型，这些值可能是动态的；\n<span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnotSure<span class=\"token operator\">=</span><span class=\"token string\">\"May be a string \"</span><span class=\"token punctuation\">;</span>\nnotSure<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nObject类型的变量只是允许你给它赋任意值 <span class=\"token operator\">-</span> 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：\n<span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnotSure<span class=\"token punctuation\">.</span><span class=\"token function\">ifExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnotSure<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> prettySure<span class=\"token operator\">:</span>Object<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nprettySure<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//error;</span>\n只知道一部分数据的类型时，<span class=\"token builtin\">any</span>类型也是有用的。比如，你有一个数组，它包含了不同的类型的数据：\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"String\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">8.</span>空值\n<span class=\"token keyword\">function</span> <span class=\"token function\">wanuser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a warning message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n声明一个<span class=\"token keyword\">void</span>类型的变量没有什么大用，因为你只能为它赋予<span class=\"token keyword\">undefined</span>和<span class=\"token keyword\">null</span>\n默认情况下<span class=\"token keyword\">null</span>和<span class=\"token keyword\">undefined</span>是所有类型的子类型。 就是说你可以把<span class=\"token keyword\">null</span>和<span class=\"token keyword\">undefined</span>赋值给<span class=\"token builtin\">number</span>类型的变量。\n当你指定了<span class=\"token operator\">--</span>strictNullChecks标记，<span class=\"token keyword\">null</span>和<span class=\"token keyword\">undefined</span>只能赋值给<span class=\"token keyword\">void</span>和它们各自。\n\n<span class=\"token number\">9</span><span class=\"token punctuation\">.</span>Never\n<span class=\"token comment\">// 返回never的函数必须存在无法达到的终点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推断的返回值类型为never</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 返回never的函数必须存在无法达到的终点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token number\">10.</span>断言类型\n有时我会比编译器更清楚某个值的详细信息；\n通过断言可以告诉编译器，不进行特殊的数据检查和结构。运行时无影响只在编译时起作用；\n\n“尖括号“语法\n<span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token operator\">=</span><span class=\"token string\">\"this is a strong\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> strLenght<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">someValue).length;\nas 语法\nlet someValue:any=\"this is a string\";\nlet strl:number=(someValue as string).length;\n两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；\n 然而，当你在TypeScript里使用JSX时，只有as语法断言是被允许的。\n尽可能地使用let来代替var\n\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"类型守卫\"><a href=\"#类型守卫\" class=\"headerlink\" title=\"类型守卫\"></a>类型守卫</h4><blockquote>\n<p>类型保护是可执行运行时检查得一种表达式，用于确保该类型在一定得范围内。换句话说，类型保护可以保证一个字符串是一个字符串。尽管他的值可以为一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值；</p>\n</blockquote>\n<ul>\n<li>in关键字</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//in</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  privileges<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  startDate<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">unknownEmployee</span> <span class=\"token operator\">=</span> Admin <span class=\"token operator\">|</span> Employee\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printEmployeeInformation</span><span class=\"token punctuation\">(</span>emp<span class=\"token operator\">:</span> unknownEmployee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Name: '</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'privileges'</span> <span class=\"token keyword\">in</span> emp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Privileges: '</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span>privileges<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'startDate'</span> <span class=\"token keyword\">in</span> emp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start Date: '</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span>startDate<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> e1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span>\n  privileges<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'create-server'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printEmployeeInformation</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>typeof</li>\n</ul>\n<p>typeof 类型保护只支持两种形式：typeof v === “typename” 和 typeof v !== typename，”typename” 必须是 “number”， “string”，”boolean” 或 “symbol”。 但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。</p>\n<ul>\n<li><p>instanceof</p>\n</li>\n<li><h4 id=\"自定义类型保护的类型谓词\"><a href=\"#自定义类型保护的类型谓词\" class=\"headerlink\" title=\"自定义类型保护的类型谓词\"></a>自定义类型保护的类型谓词</h4></li>\n</ul>\n<h4 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h4><h3 id=\"2-变量声明\"><a href=\"#2-变量声明\" class=\"headerlink\" title=\"2.变量声明\"></a>2.变量声明</h3><p><code>let</code>和<code>const</code>是JavaScript里相对较新的变量声明方式。</p>\n<p><code>let</code>在很多方面与<code>var</code>是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 <code>const</code>是对<code>let</code>的一个增强，它能阻止对一个变量再次赋值。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// capture the current state of 'i'</span>\n    <span class=\"token comment\">// by invoking a function with its current value</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//需要复习</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"let-vs-const\"><a href=\"#let-vs-const\" class=\"headerlink\" title=\"let vs. const\"></a>let vs. const</h5><p> 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。 使用<code>const</code>也可以让我们更容易的推测数据的流动。</p>\n<h5 id=\"属性重命名\"><a href=\"#属性重命名\" class=\"headerlink\" title=\"属性重命名\"></a>属性重命名</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> newName1<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> newName2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> newName1 <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newName2 <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//指示类型</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"解构-VS展开\"><a href=\"#解构-VS展开\" class=\"headerlink\" title=\"解构 VS展开\"></a>解构 VS展开</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">    <span class=\"token keyword\">let</span> first<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> second<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> both<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"spicy\"</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">:</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">,</span> ambiance<span class=\"token operator\">:</span> <span class=\"token string\">\"noisy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> search <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>defaults<span class=\"token punctuation\">,</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"rich\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//search的值为&#123; food: \"rich\", price: \"$$\", ambiance: \"noisy\" &#125;。展开对象后面的属性会覆盖前面的属性。</span>\n<span class=\"token comment\">//对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">&#123;</span>\n  p <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>c <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nclone<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\nclone<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-接口\"><a href=\"#3-接口\" class=\"headerlink\" title=\"3.接口\"></a>3.接口</h3><p>TS的核心原则之一就是对值所具有的结构进行类型检查。</p>\n<p>在TS里接口的作用就是为这些类型命名和为你的代码或者第三方代码定义契约。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">prinLabel</span><span class=\"token punctuation\">(</span>labelObj<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>label<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labelObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//类型检查器会查看printLabel的调用。 printLabel有一个参数，并要求这个对象参数有一个名为label类型为string的属性。</span>\n<span class=\"token comment\">//下面是接口描述</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabelValue</span><span class=\"token punctuation\">&#123;</span>\n    label<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>labelObj<span class=\"token operator\">:</span>LabelValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labelObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>size<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Size 10 Object\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//只要传入的对象满足上面提到的必要条件，那么它就是被允许的。类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</span>\n\n\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接口里的属性不全都是必需的。有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</span>\n    color<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span>SquareConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> area<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> newSquare<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>area<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        newSquare<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        newSquare<span class=\"token punctuation\">.</span>area<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> newSquare<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> mySquare<span class=\"token operator\">=</span><span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p>\n<h5 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span><span class=\"token punctuation\">&#123;</span>\n    reaoly color<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ro<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//只读数组</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CreateSquare</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span>SquareConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>area<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> newSquare<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>area<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        newSquare<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        newSquare<span class=\"token punctuation\">.</span>area<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> newSquare<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> mySquare<span class=\"token operator\">=</span><span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span><span class=\"token string\">\"blcak\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</span>\n<span class=\"token comment\">// error: 'colour' not expected in type 'SquareConfig'</span>\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> colour<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用<code>const</code>，若做为属性则使用<code>readonly</code>。</p>\n<h5 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h5><p>绕开检查非常简单，常用的使用断言：</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> mySquare<span class=\"token operator\">=</span><span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>width<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>opacity<span class=\"token operator\">:</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> SquareConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最佳方式是添加一个字符串索引签名，前提是能够确定这个对象可能具有某些作为特殊用途使用的额外属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareCOnfig</span><span class=\"token punctuation\">&#123;</span>\n    color<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为<code>squareOptions</code>不会经过额外属性检查，所以编译器不会报错。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> squareOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> colour<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span>squareOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h5><p>除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>subStrimg<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</span>\n<span class=\"token keyword\">let</span> mySearch<span class=\"token operator\">:</span>SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>subString<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//函数的参数名不需要与接口里定义的名字相匹配。</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> sub<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-类\"><a href=\"#4-类\" class=\"headerlink\" title=\"4.类\"></a>4.类</h3><h5 id=\"类的实例\"><a href=\"#类的实例\" class=\"headerlink\" title=\"类的实例\"></a>类的实例</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span><span class=\"token punctuation\">&#123;</span>\n    greeting<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>greeting<span class=\"token operator\">=</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> greeter<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>distanceInMeters<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Animal moved </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>distanceInMeters<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> m.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adnimal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woof!Woof!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> dog<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一个更加复杂的例子</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">theName</span><span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>theName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span>number<span class=\"token operator\">=</span><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        consloe<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> moved </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>distance<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> m.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Snake</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adnimal</span><span class=\"token punctuation\">&#123;</span>    \n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//派生类包含了一个构造函数，它必须调用super()，它会执行基类的构造函数。 </span>\n    <span class=\"token punctuation\">&#125;</span>             <span class=\"token comment\">//在构造函数里访问this的属性之前，一定要调用super()。 TypeScript强制执行的一条重要规则。</span>\n    \n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span>number<span class=\"token operator\">=</span><span class=\"token number\">5</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        consloe<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Slithering...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//调用父类方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Horse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adnimal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">distance<span class=\"token operator\">=</span><span class=\"token number\">45</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Galloping...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> sam<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sammy the Python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nley tom<span class=\"token operator\">:</span>Animal<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Horse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tommy the palomino.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsam<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntom<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Slithering...</span>\n<span class=\"token comment\">//Sammy the Python moved 5m.</span>\n<span class=\"token comment\">//Galloping...</span>\n<span class=\"token comment\">//Tommy the Palomino moved 34m.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"公有、私有、受保护的修饰符\"><a href=\"#公有、私有、受保护的修饰符\" class=\"headerlink\" title=\"公有、私有、受保护的修饰符\"></a>公有、私有、受保护的修饰符</h5><p>TS中，所有的成员都默认为Public；</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>theName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>theName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>distance<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'move~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>private 不能在声明它的类的外部访问。</p>\n<p>TS使用的是结构类型系统。如果所有成员的类型都是兼容的，就认为是类相兼容的。</p>\n<p>protected 和private 相似，但是它的成员可以在派生类访问。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> department<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>department<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>department<span class=\"token operator\">=</span>department<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//派生类访问</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> and i work in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defartment<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> howard<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Howard\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sales\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>howard<span class=\"token punctuation\">.</span><span class=\"token function\">getPitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>howard<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//error;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h5><p>你可以使用<code>readonly</code>关键字将属性设置为只读的。 只读属性必须在  声明时或  构造函数里被初始化。</p>\n<h5 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h5><p>TS支持通过getters/setters来截取对对象成员的访问。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> password<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> _fullname<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_fullname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">set</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>password <span class=\"token operator\">&amp;&amp;</span> password<span class=\"token operator\">==</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_fullName<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                consloe<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You have not permissiond.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"static静态属性\"><a href=\"#static静态属性\" class=\"headerlink\" title=\"static静态属性\"></a>static静态属性</h5><p>静态成员的属性只存在于类本身上而不是类的实例上。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> origin<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">calDisFromOriginPoint</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> xDist<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span>Grid<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> yDist<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>Grid<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>xDist<span class=\"token operator\">*</span>xDist<span class=\"token operator\">+</span>yDist<span class=\"token operator\">*</span>yDist<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">construtor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> scale<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> grid1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> grid2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">roaming the earch...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://typescript.bootcss.com/classes.html\">https://typescript.bootcss.com/classes.html</a></p>\n<p>抽象类作为其他派生类的基类使用。一般不会直接实例化。</p>\n<p>不同于接口。抽象类可以包含成员的实现细节；</p>\n<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法与接口方法类似。</p>\n<p>两者都是定义方法签名但是不包含方法体；</p>\n<p>抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Department</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deartment name:'</span> <span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">abstract</span> <span class=\"token function\">printMeeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountingDepartment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Department</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accounting and auditing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//派生类构造函数必须吊桶super（）；</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//父类的抽象类在子类必须实现；</span>\n    <span class=\"token function\">printMeeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The account ing meets each monday.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">generateReports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"把类当接口使用\"><a href=\"#把类当接口使用\" class=\"headerlink\" title=\"把类当接口使用\"></a>把类当接口使用</h5><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Poing</span><span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point3D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">&#123;</span>\n    z<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> point3d<span class=\"token operator\">:</span>Point3D<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    z<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h3><h5 id=\"完整函数类型\"><a href=\"#完整函数类型\" class=\"headerlink\" title=\"完整函数类型\"></a>完整函数类型</h5><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function-variable function\">number</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\nx<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</p>\n<p>可选参数必须跟在必须参数后面。 </p>\n<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入<code>undefined</code>值来获得默认值。 例如，我们重写最后一个例子，让<code>firstName</code>是带默认值的参数：</p>\n<h5 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h5><p>在JavaScript里，你可以使用<code>arguments</code>来访问所有传入的参数。</p>\n<p>在TypeScript里，你可以把所有参数收集到一个变量里：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restOfName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> restOfName<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> employeeName <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joseph\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Samuel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lucas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MacKinzie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h5>","text":"TS 基础TypeScript一、什么是TypeScript?1.Why we choose TypeScript? JavaScript构建大型复杂Web应用系统不容易； TypeScript为JS的超集，具有可选的类型且可以编译为纯JS。从技术上讲，TS是具有静态类型的JS。...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"VUE","slug":"VUE","count":17,"path":"api/tags/VUE.json"},{"name":"TS","slug":"TS","count":2,"path":"api/tags/TS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TS-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">TS 基础</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TypeScript\"><span class=\"toc-text\">TypeScript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFTypeScript\"><span class=\"toc-text\">一、什么是TypeScript?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Why-we-choose-TypeScript\"><span class=\"toc-text\">1.Why we choose TypeScript?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%90%91JS%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">2.为什么需要向JS添加静态类型？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">二、基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.基础类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">类型守卫</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%B0%93%E8%AF%8D\"><span class=\"toc-text\">自定义类型保护的类型谓词</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">联合类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">2.变量声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#let-vs-const\"><span class=\"toc-text\">let vs. const</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7%E9%87%8D%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">属性重命名</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84-VS%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">解构 VS展开</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">可选属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A2%9D%E5%A4%96%E7%9A%84%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">额外的属性检查</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">函数类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%B1%BB\"><span class=\"toc-text\">4.类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">类的实例</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%AC%E6%9C%89%E3%80%81%E7%A7%81%E6%9C%89%E3%80%81%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">公有、私有、受保护的修饰符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#readonly\"><span class=\"toc-text\">readonly</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%8F%96%E5%99%A8\"><span class=\"toc-text\">存取器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#static%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">static静态属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">抽象类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8A%8A%E7%B1%BB%E5%BD%93%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">把类当接口使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5.函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">完整函数类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">剩余参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#this\"><span class=\"toc-text\">this</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何高效整理论文","uid":"6ef5dcf5728b7f68617c675eff6caf49","slug":"如何高效整理论文？","date":"2023-06-27T23:51:45.000Z","updated":"2023-06-28T01:25:21.647Z","comments":true,"path":"api/articles/如何高效整理论文？.json","keywords":"Love And Freedom","cover":"img/bg17.jpg","text":"如何高效整理论文？https://www.bilibili.com/video/BV1354y1h7Vf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f47a1518b7d14573404f9ef42bc4a4...","link":"","photos":[],"count_time":{"symbolsCount":515,"symbolsTime":"1 mins."},"categories":[{"name":"日常","slug":"日常","count":5,"path":"api/categories/日常.json"}],"tags":[{"name":"科研","slug":"科研","count":1,"path":"api/tags/科研.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Web Audio API","uid":"b9697662cdffe977cb41ca0017dc8bf9","slug":"Web Audio","date":"2023-06-26T13:13:45.000Z","updated":"2023-07-03T09:35:40.499Z","comments":true,"path":"api/articles/Web Audio.json","keywords":"Love And Freedom","cover":"img/bg3.jpg","text":"Web Audio API 实现功能可视化、音色合成器、动态混音、声音特效、3D空间音频、均衡器、环境混响 一、基础使用1.AudioContext为音频处理提供一个上下文环境，相当于一个中央控制器，控制音频路由的各个模块； 1.1音频结点AudioNode音频路由中的基本单位，...","link":"","photos":[],"count_time":{"symbolsCount":456,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"},{"name":"TS","slug":"TS","count":2,"path":"api/tags/TS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}