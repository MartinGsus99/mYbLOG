{"title":"Session And Cookie","uid":"26bc2020d08ea791ee82a8707889b8be","slug":"Session And Cookie","date":"2023-04-06T11:51:45.000Z","updated":"2023-04-06T03:26:21.125Z","comments":true,"path":"api/articles/Session And Cookie.json","keywords":"Love And Freedom","cover":"img/bg10.jpg","content":"<h1 id=\"Session-And-Cookie\"><a href=\"#Session-And-Cookie\" class=\"headerlink\" title=\"Session And Cookie\"></a>Session And Cookie</h1><h2 id=\"一、Session和Cookie简介\"><a href=\"#一、Session和Cookie简介\" class=\"headerlink\" title=\"一、Session和Cookie简介\"></a>一、Session和Cookie简介</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><blockquote>\n<p>Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录；</p>\n<p>cookie作用就是让服务器认识你；</p>\n</blockquote>\n<ul>\n<li>cookie可以认为是一个变量，形如name=value,存储在浏览器；</li>\n<li>一个session可以理解为一个数据结构，多数情况是<code>映射</code>，存储在服务器上；</li>\n</ul>\n<blockquote>\n<p>cookie可以在服务器通过http的SetCookie字段设置Cookie；</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Name<span class=\"token punctuation\">:</span><span class=\"token char\">'Martin'</span><span class=\"token punctuation\">,</span>\n        Value<span class=\"token punctuation\">:</span><span class=\"token char\">'128'</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n      http<span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Name<span class=\"token punctuation\">:</span><span class=\"token char\">'Jacy'</span><span class=\"token punctuation\">,</span>\n        Value<span class=\"token punctuation\">:</span><span class=\"token char\">'129'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>当浏览器访问对应网址时，通过浏览器的开发者工具查看此次HTTP通信的喜姐，可以看见服务器的回应发出来两次SetCookie命令；</p>\n<p>此后，浏览器请求中的Cookie都会带上这两个字段；</p>\n</blockquote>\n<h3 id=\"2-cookie的问题\"><a href=\"#2-cookie的问题\" class=\"headerlink\" title=\"2. cookie的问题\"></a>2. cookie的问题</h3><p>cookie字段存储在HTTP Header中，如果cookie的信息越来越多，会消耗更多的带宽；</p>\n<h3 id=\"3-session-cookie\"><a href=\"#3-session-cookie\" class=\"headerlink\" title=\"3. session + cookie\"></a>3. session + cookie</h3><ul>\n<li>一个cookie存储一个变量 sessionID=’123456’;</li>\n<li>仅仅将一个cookie传递给服务器，服务器通过ID查询对应的session，这个session是一个数据结构，存储了各种用户的信息，有效解决了追踪用户的问题。</li>\n<li>session是一个数据结构，由网站的开发者设计，可以承载各种数据；</li>\n<li>由于存储在服务器，所以session会有过期时间，一般是定期删除过期的session；</li>\n</ul>\n<h2 id=\"二、Session的实现\"><a href=\"#二、Session的实现\" class=\"headerlink\" title=\"二、Session的实现\"></a>二、Session的实现</h2><h3 id=\"1-实现\"><a href=\"#1-实现\" class=\"headerlink\" title=\"1.实现\"></a>1.实现</h3><ul>\n<li>Manager</li>\n<li>Provider</li>\n<li>Session</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/04/06/d80d75f3d72fd150.png\"></p>\n<ol>\n<li>浏览器通过HTTP协议向服务器请求资源，对应路径上有个Handler函数接受请求，解析HTTPheader中的cookie，得到SessionID，发送给Manager；</li>\n<li>Manager充当session管理器的角色，主要存储一些配置信息，比如session存活时间，cookie的名字等；所有的session存在Manager内部的Provider中，Manager会把sessionID传递给Provider；</li>\n<li>Provider是一个容器，散列表，将sessionID和session一一对应，收到Manager的sid后，查询session并返回；</li>\n<li>Handler根据session中的信息，进行处理，返回对应的HTML信息；</li>\n</ol>\n<h3 id=\"2-为什么要划分Manager、Provider、Session\"><a href=\"#2-为什么要划分Manager、Provider、Session\" class=\"headerlink\" title=\"2.为什么要划分Manager、Provider、Session\"></a>2.为什么要划分Manager、Provider、Session</h3><ul>\n<li>session结构可能不止一个哈希表，还存储辅助数据等；</li>\n<li>session可能有不同的存储方式：比如村粗缓存数据库redis或者存入Mysql；因此session结构提供一层抽象，屏蔽不同存储方式的差异；</li>\n<li>Provider内部会很复杂，需要适应不同的算法比如LRU缓存淘汰算法，来存储session；</li>\n<li> Manager 主要就是⼀个参数集合，⽐如 session 的存活时间，清理过期 session 的策略，以及 session 的可⽤存储⽅式。 Manager 屏蔽了操作的具体 细节，我们可以通过 Manager 灵活地配置 session 机制。</li>\n</ul>\n","text":"Session And Cookie一、Session和Cookie简介1.简介 Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录； cookie作用就是让服务器认识你； cookie可以认为是一个变量，形如name=v...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"session","slug":"session","count":1,"path":"api/tags/session.json"},{"name":"cookie","slug":"cookie","count":1,"path":"api/tags/cookie.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Session-And-Cookie\"><span class=\"toc-text\">Session And Cookie</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Session%E5%92%8CCookie%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">一、Session和Cookie简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-cookie%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2. cookie的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-session-cookie\"><span class=\"toc-text\">3. session + cookie</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Session%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">二、Session的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%92%E5%88%86Manager%E3%80%81Provider%E3%80%81Session\"><span class=\"toc-text\">2.为什么要划分Manager、Provider、Session</span></a></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"CSS实现响应式布局","date":"2023-04-06T12:51:38.239Z","updated":"2023-04-06T13:44:24.362Z","comments":true,"path":"api/articles/CSS实现响应式布局.json","keywords":"Love And Freedom","cover":null,"text":"css实现响应式布局1.响应式布局 响应式布局指同一页面在不同屏幕尺寸下有不同的布局； 传统方式是PC端开发一套，手机端开发一套； 使用响应式布局只需要开发一套就够了； 检测视口分辨率，针对不同客户端来做代码处理，展现不同的布局和内容； css3媒体查询可以让我们针对不同的媒体类...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux Shell","uid":"e9cc1e6aaaea90ce1263cf8fa336b7a8","slug":"Linux Shell","date":"2023-04-06T10:51:45.000Z","updated":"2023-04-06T03:26:47.795Z","comments":true,"path":"api/articles/Linux Shell.json","keywords":"Love And Freedom","cover":"img/bg11.jpg","text":"Linux Shell 标准输入和命令参数的区别； 后台运行命令在推出中断后也全部退出； 单引号和双引号表示字符串的区别； 有的命令和sudo一起用就会Command not found; 一、标准输入和参数的区别1.标准输入和参数#错误 where connect.sh | r...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"},{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}