{"title":"CH7 查找","uid":"35fa380e6c3de504a5cc1614ac079c98","slug":"CH7 查找","date":"2021-08-25T12:57:45.000Z","updated":"2021-08-25T14:30:44.000Z","comments":true,"path":"api/articles/CH7 查找.json","keywords":"Love And Freedom","cover":"img/bg3.jpg","content":"<h2 id=\"一、顺序查找\"><a href=\"#一、顺序查找\" class=\"headerlink\" title=\"一、顺序查找\"></a>一、顺序查找</h2><p>MSL最大查找长度，ASL平均查找长度；</p>\n<p>ASL成功=SumPi（n-i+1） ASL失败=n+1</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> keyType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> SElemType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    SElemType <span class=\"token operator\">*</span>elem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> SeqTable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Search_Seq</span><span class=\"token punctuation\">(</span>SeqTable ST<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the target:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>ST<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">!=</span>key<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span>ST<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find in %d\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    SeqTable SQT<span class=\"token punctuation\">;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n    SElemType Data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    SQT<span class=\"token punctuation\">.</span>elem<span class=\"token operator\">=</span>Data<span class=\"token punctuation\">;</span>\n    SQT<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n    index<span class=\"token operator\">=</span><span class=\"token function\">Search_Seq</span><span class=\"token punctuation\">(</span>SQT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//若找不到报错，检查scanf函数是否添加了&amp;符号v(#｀-_ゝ-)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"二、折半查找-静态\"><a href=\"#二、折半查找-静态\" class=\"headerlink\" title=\"二、折半查找(静态)\"></a>二、折半查找(静态)</h2><p>必须使用顺序存贮且元素按照关键字升序；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> keyType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SElemType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    SElemType <span class=\"token operator\">*</span>elem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SeqTable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">SearchBin</span><span class=\"token punctuation\">(</span>SeqTable ST<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">;</span>\n    low<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    high<span class=\"token operator\">=</span>ST<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    keyType target<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the target:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"low:%d,mid:%d,high:%d\\n\"</span><span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">==</span>ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find in position %d.\"</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">&lt;</span>ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            high<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            low<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        SeqTable T<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n        SElemType DATA<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        T<span class=\"token punctuation\">.</span>elem<span class=\"token operator\">=</span>DATA<span class=\"token punctuation\">;</span>\n        T<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">=</span><span class=\"token function\">SearchBin</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> keyType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SElemType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    SElemType <span class=\"token operator\">*</span>elem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SeqTable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">SearchBin</span><span class=\"token punctuation\">(</span>SeqTable ST<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">;</span>\n    low<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    high<span class=\"token operator\">=</span>ST<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    keyType target<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the target:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"low:%d,mid:%d,high:%d\\n\"</span><span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">==</span>ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find in position %d.\"</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">&lt;</span>ST<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            high<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            low<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        SeqTable T<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n        SElemType DATA<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        T<span class=\"token punctuation\">.</span>elem<span class=\"token operator\">=</span>DATA<span class=\"token punctuation\">;</span>\n        T<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">=</span><span class=\"token function\">SearchBin</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"三、二叉排序树查找（动态）\"><a href=\"#三、二叉排序树查找（动态）\" class=\"headerlink\" title=\"三、二叉排序树查找（动态）\"></a>三、二叉排序树查找（动态）</h2><p>二叉树中所有的左孩子小于其父节点，右孩子大于其父节点</p>\n<p>若根节点的左右子树高度差不超过1，则称为平衡二叉树；ASL=log2（n）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> keyType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span>\n<span class=\"token punctuation\">&#123;</span>\n    keyType key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>BTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span>\n\nBiTree <span class=\"token function\">SearchBSTree</span><span class=\"token punctuation\">(</span>BTNode <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>keyType key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>T<span class=\"token operator\">||</span>key<span class=\"token operator\">==</span>T<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">SearchBSTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">SearchBSTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBTNode <span class=\"token operator\">*</span><span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span>BTNode <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>keyType key<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>flag<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BTNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pre<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//flag==1，查找成功，返回该元素节点；否则查找失败，返回访问的最后一个节点；</span>\n    <span class=\"token operator\">*</span>flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">*</span>flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">=</span>T<span class=\"token punctuation\">;</span>\n    pre<span class=\"token operator\">=</span>T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token operator\">!=</span>p<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        pre<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token operator\">==</span>p<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">*</span>flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">*</span>flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBTNode <span class=\"token operator\">*</span><span class=\"token function\">InsertBSTNode</span><span class=\"token punctuation\">(</span>BTNode <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>keyType key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BTNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//查找是否存在相同节点</span>\n    p<span class=\"token operator\">=</span><span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-></span>key<span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>keyType key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    BiTree T<span class=\"token punctuation\">;</span>\n    T<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asaign the memory failurely.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    T<span class=\"token operator\">-></span>key<span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n    T<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>T<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">VisitNode</span><span class=\"token punctuation\">(</span>keyType key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InorderTree</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">InorderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">VisitNode</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">InorderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    BTNode <span class=\"token operator\">*</span>ST<span class=\"token punctuation\">;</span>\n    keyType mykey<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the nodes' number:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the root's data:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>mykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ST<span class=\"token operator\">=</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>mykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        keyType tmp_key<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the %d node:\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tmp_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ST<span class=\"token operator\">=</span><span class=\"token function\">InsertBSTNode</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>tmp_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">InorderTree</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the target data:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>mykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ST<span class=\"token operator\">=</span><span class=\"token function\">SearchBSTree</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>mykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ST<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find it:%d!\"</span><span class=\"token punctuation\">,</span>mykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"四、哈希表\"><a href=\"#四、哈希表\" class=\"headerlink\" title=\"四、哈希表\"></a>四、哈希表</h2><h3 id=\"1-适用于动态查找和静态查找\"><a href=\"#1-适用于动态查找和静态查找\" class=\"headerlink\" title=\"1.适用于动态查找和静态查找\"></a>1.适用于动态查找和静态查找</h3><h3 id=\"2-常见哈希函数\"><a href=\"#2-常见哈希函数\" class=\"headerlink\" title=\"2.常见哈希函数\"></a>2.常见哈希函数</h3><p>（1）直接定址：适合连续的分布；</p>\n<p>（2）除留取余：假定哈希表长m,取p&lt;=m，一般选择不大于m的最大质数；</p>\n<h3 id=\"3-处理冲突的方法\"><a href=\"#3-处理冲突的方法\" class=\"headerlink\" title=\"3.处理冲突的方法\"></a>3.处理冲突的方法</h3><p>（1）开放地址：Hi=(H(Key)+di)%m;</p>\n<p>​        i.线性探测法：若计算出的地址冲突，则一次向后顺延；容易造成聚集（堆积），降低查找效率；</p>\n<p>​        ii.平方探测法：若计算出的地址冲突，则一次向后/前顺延i^2个地址；</p>\n<p>（2）链地址：在冲突的数据位置设置链表；</p>\n","text":"一、顺序查找MSL最大查找长度，ASL平均查找长度； ASL成功=SumPi（n-i+1） ASL失败=n+1 #include &lt;stdio.h> #include &lt;stdlib.h> #define MAXSIZE 100 typedef int keyType...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">一、顺序查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE-%E9%9D%99%E6%80%81\"><span class=\"toc-text\">二、折半查找(静态)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E6%9F%A5%E6%89%BE%EF%BC%88%E5%8A%A8%E6%80%81%EF%BC%89\"><span class=\"toc-text\">三、二叉排序树查找（动态）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8\"><span class=\"toc-text\">四、哈希表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%80%82%E7%94%A8%E4%BA%8E%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">1.适用于动态查找和静态查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E8%A7%81%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.常见哈希函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.处理冲突的方法</span></a></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2021-08-29T10:03:45.000Z","updated":"2021-08-30T13:37:44.000Z","comments":true,"path":"api/articles/贪心算法.json","keywords":"Love And Freedom","cover":"img/bg15.jpg","text":"贪心算法思想：每一步都选择局部最优解 #问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集； #解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台； # 州名 states_need = set([\"a\", ...","link":"","photos":[],"count_time":{"symbolsCount":789,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"贪心算法","slug":"贪心算法","count":1,"path":"api/tags/贪心算法.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Sound of Walking Away","uid":"0456a819f148a1e76c28ca6cd747afa8","slug":"Sound of Walking Away","date":"2021-08-22T16:00:46.000Z","updated":"2021-08-22T15:52:14.000Z","comments":true,"path":"api/articles/Sound of Walking Away.json","keywords":"Love And Freedom","cover":"img/bg14.jpg","text":" Don’t come find me, I won’t be here waiting请别试图寻找我 我不会再原地等待I so can do it alone, you’re not worth staying我自己可以过得很好 你不值得我再多停留 Weren’t listen...","link":"","photos":[],"count_time":{"symbolsCount":475,"symbolsTime":"1 mins."},"categories":[{"name":"日常","slug":"日常","count":5,"path":"api/categories/日常.json"}],"tags":[{"name":"日常","slug":"日常","count":2,"path":"api/tags/日常.json"},{"name":"音乐推荐","slug":"音乐推荐","count":1,"path":"api/tags/音乐推荐.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}