{"title":"Pytorch教程","uid":"11784e9025a4e48a02c37f1ca4086871","slug":"Pytorch教程","date":"2023-07-26T02:00:00.000Z","updated":"2023-07-27T02:06:33.476Z","comments":true,"path":"api/articles/Pytorch教程.json","keywords":"Love And Freedom","cover":"img/bg3.jpg","content":"<h1 id=\"Pytorch-教程\"><a href=\"#Pytorch-教程\" class=\"headerlink\" title=\"Pytorch 教程\"></a>Pytorch 教程</h1><h2 id=\"一、入门\"><a href=\"#一、入门\" class=\"headerlink\" title=\"一、入门\"></a>一、入门</h2><h3 id=\"1-用处\"><a href=\"#1-用处\" class=\"headerlink\" title=\"1.用处\"></a>1.用处</h3><ul>\n<li>NumPy 的替代品、可以利用 GPU 的性能进行计算。</li>\n<li>深度学习研究平台拥有猪狗多灵活性和速度</li>\n</ul>\n<h3 id=\"2-Tensors（张量）\"><a href=\"#2-Tensors（张量）\" class=\"headerlink\" title=\"2.Tensors（张量）\"></a>2.Tensors（张量）</h3><p>Tensors 类似于 NumPy 的 ndarrays,可以使用 GPU 进行计算</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function\n<span class=\"token keyword\">import</span> torch\n\n<span class=\"token comment\">#构造一个3*3的未初始化矩阵</span>\nx<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#构造一个3*3的随机初始化矩阵</span>\ny<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#构造一个全为0，类型为long的矩阵</span>\nz<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#构造一个含有数据的张量</span>\na<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#获取其维度信息</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#torch.size是一个元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-操作\"><a href=\"#3-操作\" class=\"headerlink\" title=\"3.操作\"></a>3.操作</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\nresult<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#指定输出</span>\ntorch<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>out<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#改变大小</span>\nx <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ny<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#-1表示自适应(拉直)，8表示列数</span>\nz<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-自动微分\"><a href=\"#4-自动微分\" class=\"headerlink\" title=\"4.自动微分\"></a>4.自动微分</h3><p><code>autograd</code>是 PyTorch 中所有网络神经的核心，为 Tensors 上苏哦有的操作提供自动微分</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from __future__ import print_function\nimport torch\n\nx&#x3D;torch.ones(2,2,requires_grad&#x3D;True)\ny&#x3D;x+2\nz&#x3D;y*y*3\nout&#x3D;z.mean()\nout.backward()\nprint(x.grad)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-神经网络\"><a href=\"#5-神经网络\" class=\"headerlink\" title=\"5.神经网络\"></a>5.神经网络</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>神经网络可以通过 torch.nn 包来创建</p>\n<p>神经网络是基于自动梯度来定义一些模型。一个 nn.Module 包括层和一个方法 forward(input)和输出</p></blockquote>\n<p><img src=\"http://pytorchchina.com/wp-content/uploads/2018/12/mnist.png\" alt=\"img\"></p>\n<p>​ 图上是一个简单的前馈神经网络，接受输入，输入一个接一个通过层，最后给出输出。</p>\n<h4 id=\"典型神经网络训练过程特点\"><a href=\"#典型神经网络训练过程特点\" class=\"headerlink\" title=\"典型神经网络训练过程特点\"></a>典型神经网络训练过程特点</h4><ul>\n<li><p>定义一个可训练参数的神经网络</p>\n</li>\n<li><p>迭代整个输入</p>\n</li>\n<li><p>通过神经网络处理输入</p>\n</li>\n<li><p>计算 loss</p>\n</li>\n<li><p>反向传播梯度到神经网络的参数</p>\n</li>\n<li><p>更新网络的参数，典型的一个更新方法为</p>\n<p>$$<br>weight=weight-learningRate*gradient<br>$$</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">as</span> optim\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#1 input image channel</span>\n    self<span class=\"token punctuation\">.</span>conv1<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#kernel</span>\n    self<span class=\"token punctuation\">.</span>conv2<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#an affine operation: y=Wx+b</span>\n    self<span class=\"token punctuation\">.</span>fc1<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>fc2<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>fc3<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#max pooling over a (2,2) window</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>max_pool2d<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>max_pool2d<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>num_flat_features<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>fc3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">num_flat_features</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    num_features<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> size<span class=\"token punctuation\">:</span>\n      num_features<span class=\"token operator\">*=</span>s\n    <span class=\"token keyword\">return</span> num_features\n\nnet<span class=\"token operator\">=</span>Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#创建一个32*32的输入</span>\n<span class=\"token builtin\">input</span><span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token operator\">=</span>net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将所有参数梯度缓存区置0，用随机的梯度来反向传播</span>\nnet<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#损失函数:需要一对输入：模型输出和目标，计算一个值来评估输出距离目标有多远</span>\n<span class=\"token comment\">#有一些不同的损失函数在nn包中，一个简单的损失函数是nn.MSELoss，计算输出和目标的均方误差</span>\ntarget<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ntarget<span class=\"token operator\">=</span>target<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncriterion<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nloss<span class=\"token operator\">=</span>criterion<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOSS:\"</span><span class=\"token punctuation\">,</span>loss<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>grad_fn<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># MSELoss</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>grad_fn<span class=\"token punctuation\">.</span>next_functions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Linear</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>grad_fn<span class=\"token punctuation\">.</span>next_functions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next_functions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ReLU</span>\n\nnet<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#反向传播</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CONV1.bias.grad before backward'</span><span class=\"token punctuation\">,</span>net<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>grad<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CONV1.bias.grad after backward'</span><span class=\"token punctuation\">,</span>net<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>grad<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#更新神经网络参数</span>\n<span class=\"token comment\">#最简单的更新规则是随机梯度下降</span>\n<span class=\"token comment\"># create your optimizer</span>\noptimizer <span class=\"token operator\">=</span> optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\noptimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># Does the update</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你是用神经网络，你想使用不同的更新规则，类似于 SGD, Nesterov-SGD, Adam, RMSProp, 等。为了让这可行，我们建立了一个小包：torch.optim 实现了所有的方法。使用它非常的简单。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">as</span> optim\n\n<span class=\"token comment\"># create your optimizer</span>\noptimizer <span class=\"token operator\">=</span> optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># in your training loop:</span>\noptimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># zero the gradient buffers</span>\noutput <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\nloss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\nloss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># Does the update</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"6-PyTorch-图像分类器\"><a href=\"#6-PyTorch-图像分类器\" class=\"headerlink\" title=\"6.PyTorch 图像分类器\"></a>6.PyTorch 图像分类器</h3><p>​ 通常来说，处理图像、文本、或者视频数据的时候，可以使用 python 包将数据加载成 numpy 数组格式。数组转换为<code>torch.*Tensor</code></p>\n<ul>\n<li>图像：Pillow、OpenCV</li>\n<li>语音：scipy、librosa</li>\n<li>文本：NLTK 和 SpaCy</li>\n</ul>\n<h4 id=\"训练一个图像分类器\"><a href=\"#训练一个图像分类器\" class=\"headerlink\" title=\"训练一个图像分类器\"></a>训练一个图像分类器</h4><ul>\n<li>使用<code>torchvision</code>加载并且归一下 CIFAR10 的训练和测试数据集</li>\n<li>定义一个卷积神经网络</li>\n<li>定义一个损失函数</li>\n<li>在训练样本数据上训练网络</li>\n<li>在测试样本数据集上测试网络</li>\n</ul>\n<p><code>⭐Note：</code>数据集：CIFAR10，包含是个类别，图像尺寸为 33232，RGB 3 32*32</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n<span class=\"token keyword\">import</span> torchvision<span class=\"token punctuation\">.</span>transforms <span class=\"token keyword\">as</span> transforms\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F\n\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">as</span> optim\n\n<span class=\"token comment\">#定义一个卷积神经网络，修改为3通道的图片</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n     <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>conv1<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>pool<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>conv2<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>fc1<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>fc2<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n     self<span class=\"token punctuation\">.</span>fc3<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>F<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>fc3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\nnet<span class=\"token operator\">=</span>Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义一个损失函数和优化器，分类交叉熵做损失函数、动量SGD做优化器</span>\ncriteria<span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer<span class=\"token operator\">=</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span>momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#torchvision数据集的输出是范围在[0,1]之间的PILImage图像，我们将他们转换为归一化范围为[-1,1]之间的张量Tensors</span>\ntransforms<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n\ntrainSet<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'./picData'</span><span class=\"token punctuation\">,</span>train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>download<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">)</span>\ntrainloader<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>trainSet<span class=\"token punctuation\">,</span>batch_size<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>num_workers<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ntestSet<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'./picData'</span><span class=\"token punctuation\">,</span>train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>download<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">)</span>\ntestloader<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>testSet<span class=\"token punctuation\">,</span>batch_size<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>num_workers<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nclasses<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'plane'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bird'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'deer'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'frog'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'horse'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ship'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'truck'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 展示一些训练中的图片</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">showPic</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span>\n    npimg<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>npimg<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndataIter<span class=\"token operator\">=</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>trainloader<span class=\"token punctuation\">)</span>\nimages<span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>dataIter<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># showPic(torchvision.utils.make_grid(images))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'%5s'</span> <span class=\"token operator\">%</span> classes<span class=\"token punctuation\">[</span>labels<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#在数据迭代器上循环传给网络和优化器输入</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  running_loss<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>data <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>trainloader<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    inputs<span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span>data\n    optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    outputs<span class=\"token operator\">=</span>net<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    loss<span class=\"token operator\">=</span>criteria<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span>labels<span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    running_loss<span class=\"token operator\">+=</span>loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#输出loss</span>\n    <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2000</span><span class=\"token operator\">==</span><span class=\"token number\">1999</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[%d,%5d] loss:%.3f'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>running_loss<span class=\"token operator\">/</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      running_loss<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished Training'</span><span class=\"token punctuation\">)</span>\n\noutputs<span class=\"token operator\">=</span>net<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n_<span class=\"token punctuation\">,</span>predicted<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Predicted:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"%5s\"</span> <span class=\"token operator\">%</span> classes<span class=\"token punctuation\">[</span>predicted<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#查看在整个数据集上的表现</span>\ncorrect<span class=\"token operator\">=</span><span class=\"token number\">0</span>\ntotal<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> testloader<span class=\"token punctuation\">:</span>\n    images<span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span>data\n    outputs<span class=\"token operator\">=</span>net<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n    _<span class=\"token punctuation\">,</span>predicted<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    total<span class=\"token operator\">+=</span>labels<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    correct<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>predicted<span class=\"token operator\">==</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nclass_correct<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nclass_total<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> testloader<span class=\"token punctuation\">:</span>\n    images<span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span>data\n    outputs<span class=\"token operator\">=</span>net<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n    _<span class=\"token punctuation\">,</span>predicted<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>predicted<span class=\"token operator\">==</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      class_correct<span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      class_total<span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy of %5s : %2d %%\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token operator\">*</span>class_correct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>class_total<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"转移到-GPU-上\"><a href=\"#转移到-GPU-上\" class=\"headerlink\" title=\"转移到 GPU 上\"></a>转移到 GPU 上</h4><ul>\n<li>检测 GPU</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Assume that we are on a CUDA machine, then this should print a CUDA device:</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\nnet<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#记住你也必须在每一个步骤向GPU发送输入和目标：</span>\ninputs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-数据并行处理\"><a href=\"#7-数据并行处理\" class=\"headerlink\" title=\"7.数据并行处理\"></a>7.数据并行处理</h3><h3 id=\"8-数据加载和处理\"><a href=\"#8-数据加载和处理\" class=\"headerlink\" title=\"8.数据加载和处理\"></a>8.数据加载和处理</h3><ul>\n<li><h4 id=\"scikit-image-用于图像的-IO-和变换\"><a href=\"#scikit-image-用于图像的-IO-和变换\" class=\"headerlink\" title=\"scikit-image:用于图像的 IO 和变换\"></a>scikit-image:用于图像的 IO 和变换</h4></li>\n<li><h4 id=\"pandas-用于更容易地进行-CSV-解析\"><a href=\"#pandas-用于更容易地进行-CSV-解析\" class=\"headerlink\" title=\"pandas:用于更容易地进行 CSV 解析\"></a>pandas:用于更容易地进行 CSV 解析</h4></li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span>division\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> skimage <span class=\"token keyword\">import</span> io<span class=\"token punctuation\">,</span>transform\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> dataset<span class=\"token punctuation\">,</span>dataloader\n<span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms<span class=\"token punctuation\">,</span>utils\n\n<span class=\"token keyword\">import</span> warnings\n<span class=\"token comment\">#忽略警告</span>\nwarnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">\"ignore\"</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>ion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_landmarks</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> landmarks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示带有地标的图片\"\"\"</span>\n    plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>landmarks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> landmarks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> marker<span class=\"token operator\">=</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>pause<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># pause a bit so that plots are updated</span>\n\n\n<span class=\"token comment\">#读取数据集</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_data_set</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  landmarks_frame<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n  n<span class=\"token operator\">=</span><span class=\"token number\">65</span>\n  img_name<span class=\"token operator\">=</span>landmarks_frame<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  landmarks<span class=\"token operator\">=</span>landmarks_frame<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  landmarks<span class=\"token operator\">=</span>landmarks<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Image name:&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>img_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Landmarks shape:&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>landmarks<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First 4 landmarks:&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>landmarks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">#展示图片</span>\n  face_data<span class=\"token operator\">=</span><span class=\"token string\">\"./data/faces\"</span>\n  plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  show_landmarks<span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>face_data<span class=\"token punctuation\">,</span> img_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>landmarks<span class=\"token punctuation\">)</span>\n  plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  read_data_set<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/faces/face_landmarks.csv\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"数据集类\"><a href=\"#数据集类\" class=\"headerlink\" title=\"数据集类\"></a>数据集类</h4><p><code>torch.utils.data.dataset</code>是表示数据集的抽象类，因此自定义数据集应继承<code>dataset</code>并覆盖以下方法<code>__len__</code>实现返还数据集的尺寸。<code>__getitem__</code>用来获取一些索引数据。</p>\n<h4 id=\"建立数据集类\"><a href=\"#建立数据集类\" class=\"headerlink\" title=\"建立数据集类\"></a>建立数据集类</h4><p>在<code>__init__</code>中读取 CSV 文件内容，在<code>__getitem__</code>中读取图片，这样为了节省内存空间，只有在需要用到图片的时候才读取而不是一开始就把图片全部存进内存。</p>\n<p>我们的数据样本按照字典<code>&#123;&#39;image&#39;:image,&#39;landmarks&#39;:landmarks&#125;</code>组织。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FaceLandmarksDataset</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>csv_file<span class=\"token punctuation\">,</span>root_dir<span class=\"token punctuation\">,</span>transform<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>landmarks_frame<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>root_dir<span class=\"token operator\">=</span>root_dir\n    self<span class=\"token punctuation\">.</span>transform<span class=\"token operator\">=</span>transform\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>landmarks_frame<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_name<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>paht<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_dir<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>landmarks_frame<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    image<span class=\"token operator\">=</span>io<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>img_name<span class=\"token punctuation\">)</span>\n    landmarks<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>landmarks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    landmarks<span class=\"token operator\">=</span>landmarks<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sample<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">:</span>image<span class=\"token punctuation\">,</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">:</span>landmarks<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">:</span>\n      sample<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>sample<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> sample<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">data_visualization</span><span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  face_dataset<span class=\"token operator\">=</span>FaceLandmarksDataset<span class=\"token punctuation\">(</span>csv_file<span class=\"token operator\">=</span>csv_file<span class=\"token punctuation\">,</span>root_dir<span class=\"token operator\">=</span>path<span class=\"token punctuation\">)</span>\n  fig<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>face_dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sample<span class=\"token operator\">=</span>face_dataset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>sample<span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span>sample<span class=\"token punctuation\">[</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n    ax<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Sample #&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ax<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\n    show_landmarks<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>sample<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n      plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"数据变换\"><a href=\"#数据变换\" class=\"headerlink\" title=\"数据变换\"></a>数据变换</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过上面的例子可以发现图片并不是相同的尺寸，绝大多数神经网络都假定图片的尺寸相同，因此我们需要进行一些预处理。</p></blockquote>\n<ul>\n<li><code>rescale</code>：缩放图片</li>\n<li><code>randomCrop</code>：随机裁剪</li>\n<li><code>ToTensor</code>：把 numpy<code>格式图片转换为torch</code>格式的图片</li>\n</ul>\n<p>把它们写成可调用的类的形式而不是简单的函数，这样就不需要每次调用时传递一遍参数。我们只需要实现<code>__call__</code>方法，必要的时候实现 <code>__init__</code>方法。我们可以这样调用这些转换:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tsfm <span class=\"token operator\">=</span> Transform<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\ntransformed_sample <span class=\"token operator\">=</span> tsfm<span class=\"token punctuation\">(</span>sample<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"变换方法\"><a href=\"#变换方法\" class=\"headerlink\" title=\"变换方法\"></a>变换方法</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#图像处理类</span>\n<span class=\"token comment\">#缩放</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rescale</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>output_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>output_size<span class=\"token operator\">=</span>output_size\n  <span class=\"token triple-quoted-string string\">\"\"\"将样本中的图像重新缩放到给定大小。.\n  Args:\n      output_size（tuple或int）：所需的输出大小。 如果是元组，则输出为\n        与output_size匹配。 如果是int，则匹配较小的图像边缘到output_size保持纵横比相同。\n  \"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    image<span class=\"token punctuation\">,</span>landmarks<span class=\"token operator\">=</span>sample<span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sample<span class=\"token punctuation\">[</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">]</span>\n\n    h<span class=\"token punctuation\">,</span>w<span class=\"token operator\">=</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> h<span class=\"token operator\">></span>w<span class=\"token punctuation\">:</span>\n        new_h<span class=\"token punctuation\">,</span>new_w<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token operator\">*</span>h<span class=\"token operator\">/</span>w<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token operator\">*</span>w<span class=\"token operator\">/</span>h\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        new_h<span class=\"token punctuation\">,</span>new_w<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token operator\">*</span>w<span class=\"token operator\">/</span>h\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        new_h<span class=\"token punctuation\">,</span>new_w<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>output_size<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>output_size\n    new_h<span class=\"token punctuation\">,</span>new_w<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>new_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>new_w<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token operator\">=</span>transform<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>new_h<span class=\"token punctuation\">,</span>new_w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    landmarks<span class=\"token operator\">=</span>landmarks<span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>new_w<span class=\"token operator\">/</span>w<span class=\"token punctuation\">,</span>new_h<span class=\"token operator\">/</span>h<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">:</span>img<span class=\"token punctuation\">,</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">:</span>landmarks<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#随机裁切</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomCrop</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"随机裁剪样本中的图像.\n\n  Args:\n      output_size（tuple或int）：所需的输出大小。 如果是int，方形裁剪是。\n  \"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          self<span class=\"token punctuation\">.</span>output_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n          self<span class=\"token punctuation\">.</span>output_size <span class=\"token operator\">=</span> output_size\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      image<span class=\"token punctuation\">,</span> landmarks <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">[</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">]</span>\n\n      h<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n      new_h<span class=\"token punctuation\">,</span> new_w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>output_size\n      top <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">-</span> new_h<span class=\"token punctuation\">)</span>\n      left <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">-</span> new_w<span class=\"token punctuation\">)</span>\n      image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">:</span> top <span class=\"token operator\">+</span> new_h<span class=\"token punctuation\">,</span>\n                    left<span class=\"token punctuation\">:</span> left <span class=\"token operator\">+</span> new_w<span class=\"token punctuation\">]</span>\n\n      landmarks <span class=\"token operator\">=</span> landmarks <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">:</span> image<span class=\"token punctuation\">,</span> <span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">:</span> landmarks<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#转换为Tensors</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ToTensor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"将样本中的ndarrays转换为Tensors.\"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image<span class=\"token punctuation\">,</span> landmarks <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">[</span><span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># 交换颜色轴因为</span>\n        <span class=\"token comment\"># numpy包的图片是: H * W * C</span>\n        <span class=\"token comment\"># torch包的图片是: C * H * W</span>\n        image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">:</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'landmarks'</span><span class=\"token punctuation\">:</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>landmarks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"组合转换\"><a href=\"#组合转换\" class=\"headerlink\" title=\"组合转换\"></a>组合转换</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">scale <span class=\"token operator\">=</span> Rescale<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\ncrop <span class=\"token operator\">=</span> RandomCrop<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\ncomposed <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Rescale<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                               RandomCrop<span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 在样本上应用上述的每个变换。</span>\nfig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsample <span class=\"token operator\">=</span> face_dataset<span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> tsfrm <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">,</span> crop<span class=\"token punctuation\">,</span> composed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    transformed_sample <span class=\"token operator\">=</span> tsfrm<span class=\"token punctuation\">(</span>sample<span class=\"token punctuation\">)</span>\n\n    ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tsfrm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n    show_landmarks<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>transformed_sample<span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"Pytorch 教程一、入门1.用处 NumPy 的替代品、可以利用 GPU 的性能进行计算。 深度学习研究平台拥有猪狗多灵活性和速度 2.Tensors（张量）Tensors 类似于 NumPy 的 ndarrays,可以使用 GPU 进行计算 from __future__ ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"PyTorch","slug":"PyTorch","count":1,"path":"api/categories/PyTorch.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Pytorch-%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">Pytorch 教程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">一、入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%94%A8%E5%A4%84\"><span class=\"toc-text\">1.用处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Tensors%EF%BC%88%E5%BC%A0%E9%87%8F%EF%BC%89\"><span class=\"toc-text\">2.Tensors（张量）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86\"><span class=\"toc-text\">4.自动微分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">5.神经网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B8%E5%9E%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">典型神经网络训练过程特点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-PyTorch-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E5%99%A8\"><span class=\"toc-text\">6.PyTorch 图像分类器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E5%99%A8\"><span class=\"toc-text\">训练一个图像分类器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E7%A7%BB%E5%88%B0-GPU-%E4%B8%8A\"><span class=\"toc-text\">转移到 GPU 上</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7.数据并行处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">8.数据加载和处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#scikit-image-%E7%94%A8%E4%BA%8E%E5%9B%BE%E5%83%8F%E7%9A%84-IO-%E5%92%8C%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">scikit-image:用于图像的 IO 和变换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pandas-%E7%94%A8%E4%BA%8E%E6%9B%B4%E5%AE%B9%E6%98%93%E5%9C%B0%E8%BF%9B%E8%A1%8C-CSV-%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">pandas:用于更容易地进行 CSV 解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%B1%BB\"><span class=\"toc-text\">数据集类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E7%B1%BB\"><span class=\"toc-text\">建立数据集类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96\"><span class=\"toc-text\">数据可视化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">数据变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%98%E6%8D%A2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">变换方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">组合转换</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"VUE+TS","date":"2023-07-26T07:41:06.094Z","updated":"2023-07-26T09:14:25.483Z","comments":true,"path":"api/articles/VUE+TS.json","keywords":"Love And Freedom","cover":null,"text":"VUE+TS","link":"","photos":[],"count_time":{"symbolsCount":6,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"常用位操作","date":"2023-07-24T01:31:04.499Z","updated":"2023-07-24T02:04:33.848Z","comments":true,"path":"api/articles/常用位操作.json","keywords":"Love And Freedom","cover":[],"text":"常用位操作一、位操作//利用或和空格将英文字符转换为小写 console.log('A' | ' ') console.log('a' | ' ') //转换为大写 console.log('d' &amp; '_') console.log('D' &amp; '_') //大...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}