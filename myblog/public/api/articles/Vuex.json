{"title":"Vuex","uid":"d5f81ad13155fc328e81b1032965290d","slug":"Vuex","date":"2023-03-27T07:18:45.000Z","updated":"2023-03-27T11:21:04.292Z","comments":true,"path":"api/articles/Vuex.json","keywords":"Love And Freedom","cover":"img/vue.png","content":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><h2 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h2><h4 id=\"1-Vuex是什么？\"><a href=\"#1-Vuex是什么？\" class=\"headerlink\" title=\"1.Vuex是什么？\"></a>1.Vuex是什么？</h4><p>状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<h4 id=\"2-状态管理模式\"><a href=\"#2-状态管理模式\" class=\"headerlink\" title=\"2.状态管理模式\"></a>2.状态管理模式</h4><p>举个栗子🌰</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">const Counter &#x3D; &#123;\n  &#x2F;&#x2F; 状态\n  data () &#123;\n    return &#123;\n      count: 0\n    &#125;\n  &#125;,\n  &#x2F;&#x2F; 视图\n  template: &#96;\n    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;\n  &#96;,\n  &#x2F;&#x2F; 操作\n  methods: &#123;\n    increment () &#123;\n      this.count++\n    &#125;\n  &#125;\n&#125;\n\ncreateApp(Counter).mount(&#39;#app&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该APP包含以下部分：</p>\n<ul>\n<li>状态，驱动应用的数据源；</li>\n<li>视图，以声明方式将状态映射到试图；</li>\n<li>操作，响应在视图上的用户输入导致状态变化；</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/d3e085834c6b02a0.png\"></p>\n<ul>\n<li>存在一种多个视图依赖于同一种状态的情况；</li>\n<li>不同视图变更统一状态的情况；</li>\n</ul>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>把组件的共享状态抽取出来，以一个全局单例模式管理；</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且更易于维护；</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/10/29/348dbed9d3ef8569.png\"></p>\n<h4 id=\"3-安装方法\"><a href=\"#3-安装方法\" class=\"headerlink\" title=\"3.安装方法\"></a>3.安装方法</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/path/to/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/path/to/vuex.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vuex@next <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-store基础\"><a href=\"#4-store基础\" class=\"headerlink\" title=\"4. store基础\"></a>4. store基础</h4><p>如果有一部分的状态需要在多个组件实例间共享，可以使用reactive()来创建一个响应式对象，并将它导入到多个组件中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//store.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store<span class=\"token operator\">=</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span><span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&#x2F;&#x2F;componentA\n&lt;script&gt;\n\timport &#123; store &#125; from &#39;.&#x2F;store.js&#39;\n    \n    export default &#123;\n        data()&#123;\n            return&#123;\n                store,\n            &#125;\n        &#125;\n    &#125;\n&lt;&#x2F;script&gt;\n\n&lt;template&gt;\nFrom A:&#123;&#123; store.count &#125;&#125;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&#x2F;&#x2F;componentB\n&lt;script&gt;\n\timport &#123; store &#125; from &#39;.&#x2F;store.js&#39;\n    \n    export default &#123;\n        data()&#123;\n            return&#123;\n                store,\n            &#125;\n        &#125;\n    &#125;\n&lt;&#x2F;script&gt;\n\n&lt;template&gt;\nFrom B:&#123;&#123; store.count &#125;&#125;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，所有引入了store的组件都可以改动count，但是从长远看这种代码是不容易维护的。</p>\n<p>解决方法：在store上定义方法，方法的名字需要能表达意图；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//store.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store<span class=\"token operator\">=</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span><span class=\"token number\">0</span>，\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;button @click&#x3D;&quot;store.increment()&quot;&gt;\n    From B: &#123;&#123; store.count &#125;&#125;\n  &lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-SSR（Server-Side-Rendering）服务端渲染\"><a href=\"#4-SSR（Server-Side-Rendering）服务端渲染\" class=\"headerlink\" title=\"4.SSR（Server-Side Rendering）服务端渲染\"></a>4.SSR（Server-Side Rendering）服务端渲染</h4><blockquote>\n<p>默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。 </p>\n</blockquote>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>更快的首屏加载：服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。</li>\n<li>统一的心智模型</li>\n<li>更好的SEO：搜索引擎爬虫可以直接看到完全渲染的页面。</li>\n</ul>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1-最简单的store\"><a href=\"#1-最简单的store\" class=\"headerlink\" title=\"1.最简单的store\"></a>1.最简单的store</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token comment\">// 创建一个新的 store 实例</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">state</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 根组件 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 将 store 实例作为插件安装</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","text":"Vuex一、基础概念1.Vuex是什么？状态管理模式+库；采用集中式存储管理应用组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 2.状态管理模式举个栗子🌰 const Counter &#x3D; &#123; &#x2F;&#x2F; 状态 data () &#...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"VUE","slug":"VUE","count":17,"path":"api/tags/VUE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vuex\"><span class=\"toc-text\">Vuex</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">一、基础概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Vuex%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1.Vuex是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2.状态管理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.安装方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-store%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">4. store基础</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-SSR%EF%BC%88Server-Side-Rendering%EF%BC%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">4.SSR（Server-Side Rendering）服务端渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二、使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84store\"><span class=\"toc-text\">1.最简单的store</span></a></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"跨端技术概述","uid":"9e5c5d85c6ecb493e815e549e0c2b04d","slug":"跨端技术概述","date":"2023-03-27T10:51:45.000Z","updated":"2023-03-27T11:07:06.979Z","comments":true,"path":"api/articles/跨端技术概述.json","keywords":"Love And Freedom","cover":"img/bg15.jpg","text":"跨端技术概述一、跨端是什么？1.跨端背景 PC端（Windows,Mac） 移动端（iOS，Android） Web端 IoT端（车载设备，穿戴设备） 2.常见痛点 各端功能几乎一致，各端需要单独配置开发人员； 开发、维护成本高； 安卓、IOS发版周期长； … 3.跨端技术方案目...","link":"","photos":[],"count_time":{"symbolsCount":665,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"面试笔记","slug":"面试笔记","count":4,"path":"api/tags/面试笔记.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"Webpack体系","date":"2022-11-11T18:51:45.000Z","updated":"2023-04-04T13:34:57.918Z","comments":true,"path":"api/articles/Webpack体系.json","keywords":"Love And Freedom","cover":"img/vue.png","text":"Webpack知识体系 理解前端工程话概念、工具、目标； 团队需要有人熟悉webpack； 高阶前端必经之路； 一、什么是webpack?1.前端项目构成 多媒体文件 CSS JS HTML VUE 手动管理 比如引入50个js文件，操作过程繁琐； 当代码文件之间有依赖时，得严格...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"VUE","slug":"VUE","count":17,"path":"api/tags/VUE.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}