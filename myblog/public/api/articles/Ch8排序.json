{"title":"排序","uid":"2a1893ca085cc0c5b7d1cdcd8c0b1c91","slug":"Ch8排序","date":"2021-08-31T12:57:45.000Z","updated":"2021-08-31T12:51:24.000Z","comments":true,"path":"api/articles/Ch8排序.json","keywords":"Love And Freedom","cover":"img/bg20.jpg","content":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"一、插入排序\"><a href=\"#一、插入排序\" class=\"headerlink\" title=\"一、插入排序\"></a>一、插入排序</h2><p>每次将一个待排序的记录插入到前面已经排序的序列；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span>RecordType R<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index1<span class=\"token punctuation\">,</span>index2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>index1<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n       R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       index2<span class=\"token operator\">=</span>index1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           R<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           index2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n           R<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>适用于一个基本有序的序列，n^2,稳定的；</p>\n<h2 id=\"二、希尔排序\"><a href=\"#二、希尔排序\" class=\"headerlink\" title=\"二、希尔排序\"></a>二、希尔排序</h2><p>又名缩小增量排序，按照下标增量分成若干个子序列，对每个子序列进行直接插入排序；一轮结束后缩小增量，划分子序列；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>RecordType R<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index1<span class=\"token punctuation\">,</span>index2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> increasement<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//增量</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>increasement<span class=\"token operator\">=</span>num<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>increasement<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>increasement<span class=\"token operator\">=</span>increasement<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">=</span>increasement<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index1<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            index2<span class=\"token operator\">=</span>index1<span class=\"token operator\">-</span>increasement<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index2<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                R<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span>increasement<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                index2<span class=\"token operator\">=</span>index2<span class=\"token operator\">-</span>increasement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            R<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span>increasement<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度O（1），适合大批量杂乱无章的数据序列，不稳定；</p>\n<h2 id=\"三、冒泡排序\"><a href=\"#三、冒泡排序\" class=\"headerlink\" title=\"三、冒泡排序\"></a>三、冒泡排序</h2><p>每一轮按序比较相邻的两个数据，每一轮将最大的一个或最小的一个排序到最后；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>RecordType r<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index1<span class=\"token punctuation\">,</span>index2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> isExchange<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index1<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        isExchange<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index2<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index2<span class=\"token operator\">&lt;=</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">></span>r<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                r<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                r<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                isExchange<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isExchange<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度O（n^2）,空间复杂度O（1），稳定的；</p>\n<h2 id=\"四、快速排序\"><a href=\"#四、快速排序\" class=\"headerlink\" title=\"四、快速排序\"></a>四、快速排序</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>RecordType R<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>R<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">>=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">--</span>high<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        R<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>R<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">&lt;=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">++</span>low<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        R<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    R<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>RecordType R<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> loc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        loc<span class=\"token operator\">=</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>loc<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">,</span>loc<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度O(1),时间复杂度O（n^2）</p>\n<h2 id=\"五、折半插入排序\"><a href=\"#五、折半插入排序\" class=\"headerlink\" title=\"五、折半插入排序\"></a>五、折半插入排序</h2><p>使用直接插入排序，使用折半查找需要插入的位置；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">BinarySort</span><span class=\"token punctuation\">(</span>RecordType R<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index1<span class=\"token punctuation\">,</span>index2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> lowPoint<span class=\"token punctuation\">,</span>highPoint<span class=\"token punctuation\">,</span>midPoint<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index1<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        lowPoint<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        highPoint<span class=\"token operator\">=</span>index1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>lowPoint<span class=\"token operator\">&lt;=</span>highPoint<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            midPoint<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lowPoint<span class=\"token operator\">+</span>highPoint<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">[</span>midPoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                highPoint<span class=\"token operator\">=</span>midPoint<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                lowPoint<span class=\"token operator\">=</span>midPoint<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index2<span class=\"token operator\">=</span>index1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index2<span class=\"token operator\">>=</span>highPoint<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>index2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            R<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        R<span class=\"token punctuation\">[</span>highPoint<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>R<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"排序算法一、插入排序每次将一个待排序的记录插入到前面已经排序的序列； void InsertSort(RecordType R[],int num) &#123; int index1,index2; for(index1=2;index1&lt;=num;index1++) &...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">排序算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">一、插入排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">二、希尔排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">三、冒泡排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">四、快速排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">五、折半插入排序</span></a></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"JS基础","date":"2022-09-11T18:51:45.000Z","updated":"2023-04-04T13:35:41.643Z","comments":true,"path":"api/articles/JS基础.json","keywords":"Love And Freedom","cover":"img/vue.png","text":"JS高级程序设计一、基础基础基础1.基础语法 for-in //for-in语法是一种精准的迭代语句，可以用来枚举对象的属性； for(property in expression)&#123; statement; &#125; for(var propName in wind...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2021-08-29T10:03:45.000Z","updated":"2021-08-30T13:37:44.000Z","comments":true,"path":"api/articles/贪心算法.json","keywords":"Love And Freedom","cover":"img/bg15.jpg","text":"贪心算法思想：每一步都选择局部最优解 #问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集； #解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台； # 州名 states_need = set([\"a\", ...","link":"","photos":[],"count_time":{"symbolsCount":789,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"贪心算法","slug":"贪心算法","count":1,"path":"api/tags/贪心算法.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}