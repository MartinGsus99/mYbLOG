{"title":"特殊矩阵及广义表","uid":"aa3121f0eb296174fb5353bf6a5b23c1","slug":"CH4 特殊矩阵广义表","date":"2021-08-20T12:57:45.000Z","updated":"2021-08-22T15:45:58.000Z","comments":true,"path":"api/articles/CH4 特殊矩阵广义表.json","keywords":"Love And Freedom","cover":"img/bg16.jpg","content":"<p>一、对称矩阵</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintSymetryMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Symetry Matrix:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>row<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>col<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">>=</span>col<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4d \"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">[</span>row<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4d \"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">[</span>col<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​                    </p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Elemtype<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">,</span>colIndex<span class=\"token punctuation\">;</span>\n    Elemtype data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> TriUnitGroup<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    TriUnitGroup data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> unzeroNumber<span class=\"token punctuation\">,</span>colNumber<span class=\"token punctuation\">,</span>rowNumber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> TSMatrix<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    TSMatrix <span class=\"token operator\">*</span>myMatrix<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> myData<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CreateM</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myMatrix<span class=\"token punctuation\">,</span>myData<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PrintTripleUnitMatrix</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">CreateM</span><span class=\"token punctuation\">(</span>TSMatrix <span class=\"token operator\">*</span>M<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>row<span class=\"token operator\">*</span>col<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rowIndex<span class=\"token operator\">=</span>index<span class=\"token operator\">/</span>col<span class=\"token punctuation\">;</span>\n            M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>colIndex<span class=\"token operator\">=</span>index<span class=\"token operator\">%</span>col<span class=\"token punctuation\">;</span>\n            M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d Add data %d successfully.\\n\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data number:%d.\\n\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*Errors here.*/</span>\n        M<span class=\"token operator\">-></span>unzeroNumber<span class=\"token operator\">=</span>count<span class=\"token punctuation\">;</span>\n        M<span class=\"token operator\">-></span>colNumber<span class=\"token operator\">=</span>col<span class=\"token punctuation\">;</span>\n        M<span class=\"token operator\">-></span>rowNumber<span class=\"token operator\">=</span>row<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All data are 0.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintTripleUnitMatrix</span><span class=\"token punctuation\">(</span>TSMatrix <span class=\"token operator\">*</span>M<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*  i  j  value\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index1<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">-></span>unzeroNumber<span class=\"token punctuation\">;</span> index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  %d  %d  %d\\n\"</span><span class=\"token punctuation\">,</span>index1<span class=\"token punctuation\">,</span>M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rowIndex<span class=\"token punctuation\">,</span>M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>colIndex<span class=\"token punctuation\">,</span>M<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintSymmetricArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> col_index<span class=\"token punctuation\">,</span>row_index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>col_index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col_index<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span> col_index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>row_index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row_index<span class=\"token operator\">&lt;</span>row<span class=\"token punctuation\">;</span> row_index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>col_index<span class=\"token operator\">&lt;=</span>row_index<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>row_index<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>row_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>col_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>col_index<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>col_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>row_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintUpTriangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index1<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span> index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index2<span class=\"token operator\">&lt;</span>row<span class=\"token punctuation\">;</span> index2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">&lt;</span>index2<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintDownTriangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index1<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span> index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index2<span class=\"token operator\">&lt;</span>row<span class=\"token punctuation\">;</span> index2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">></span>index2<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>index2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"一、对称矩阵 void PrintSymetryMatrix(int m[],int n) &#123; int row,col; printf(\"Symetry Matrix:\\n\"); for(row=0;row&lt;n;row++) &#123; for(col=0;co...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"树","uid":"01cf899dac80c5a14d5d881768abc55f","slug":"Ch5 树","date":"2021-08-21T12:57:45.000Z","updated":"2021-08-25T14:22:20.000Z","comments":true,"path":"api/articles/Ch5 树.json","keywords":"Love And Freedom","cover":"img/bg22.jpg","text":"Ch 5 树一、二叉树及其性质（1）二叉树可以为空，但是二叉有序树至少三个节点； （2）满二叉树：2^k-1个节点、 （3）非空二叉树第i层的节点数不超过2^i-1个； （4）深度为k的二叉树最少k个节点，最多2^k-1个节点； （5）n0=n2-1; （6）n个节点的二叉树深度...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"队列和栈","uid":"e90fef94527ba0dbff46e9458222830c","slug":"Ch2 队列和栈","date":"2021-08-15T12:57:45.000Z","updated":"2021-08-30T13:31:10.000Z","comments":true,"path":"api/articles/Ch2 队列和栈.json","keywords":"Love And Freedom","cover":"img/bg1.jpg","text":"Ch1 栈和队列 ","link":"","photos":[],"count_time":{"symbolsCount":9,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}