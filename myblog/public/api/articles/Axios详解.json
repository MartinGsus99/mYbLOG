{"title":"Axios详解","uid":"497057504cdf696233ca7859e8edacd2","slug":"Axios详解","date":"2022-10-27T08:09:00.000Z","updated":"2022-10-27T08:11:25.944Z","comments":true,"path":"api/articles/Axios详解.json","keywords":"Love And Freedom","cover":"img/axios.png","content":"<h1 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h1><h4 id=\"基于promise可以用于浏览器和node-js的网络请求库\"><a href=\"#基于promise可以用于浏览器和node-js的网络请求库\" class=\"headerlink\" title=\"基于promise可以用于浏览器和node.js的网络请求库\"></a>基于promise可以用于浏览器和node.js的网络请求库</h4><h3 id=\"一、基础定义Promise\"><a href=\"#一、基础定义Promise\" class=\"headerlink\" title=\"一、基础定义Promise\"></a>一、基础定义Promise</h3><h4 id=\"1-promise\"><a href=\"#1-promise\" class=\"headerlink\" title=\"1.promise\"></a>1.promise</h4><p>一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。</p>\n<pre class=\"line-numbers language-visual\" data-language=\"visual\"><div class=\"caption\"><span>basic</span></div><code class=\"language-visual\"> 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需要暂停等待请求数据的返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected（失败态）；状态一旦改变就不会再变；创造promise实例后会立即执行；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 当参数a大于10且参数fn2是一个方法时 执行fn2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> fn2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> fn2 <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a callback'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</p>\n<p>这时候我们的promise就应运而生、粉墨登场了</p>\n<p>promise主要解决两个问题：</p>\n<ol>\n<li><p>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入；</p>\n</li>\n<li><p>支持多个并发请求，并从请求中获取数据；可以解决异步的问题；</p>\n<pre class=\"line-numbers language-visual\" data-language=\"visual\"><div class=\"caption\"><span>basic</span></div><code class=\"language-visual\">建议使用ES6箭头函数的编码方式，获得数据，处理数据，处理完成，下一步~<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"2-promise用法\"><a href=\"#2-promise用法\" class=\"headerlink\" title=\"2.promise用法\"></a>2.promise用法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//一些异步操作</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功！\"</span><span class=\"token punctuation\">)</span>；\n    <span class=\"token punctuation\">&#125;</span>，<span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//promise的构造函数接受一个函数类型的参数，并且需要传入两个参数：</span>\nresolve：异步操作执行成功之后的回调函数；\nreject：异步操作执行失败后的回调函数；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>then 链式操作：</p>\n<p>表面上，promise只是简化层层回调，实质上，用维护状态、传递状态的方法使得回调函数能够及时调用；</p>\n<p>正确场景：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    cosnsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token constant\">P</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-reject用法\"><a href=\"#3-reject用法\" class=\"headerlink\" title=\"3.reject用法\"></a>3.reject用法</h4><p>把promise的状态设置为rejected，这样在then中就能捕捉到，然后执行“失败”情况的回调；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字太大！\"</span><span class=\"token punctuation\">)</span>；\n                <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>；\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resolved\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rejected\"</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-catch用法\"><a href=\"#4-catch用法\" class=\"headerlink\" title=\"4.catch用法\"></a>4.catch用法</h4><p>catch和then的第二个参数一样用来指定reject的回调；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resolved\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rejected\"</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//抛出异常</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//如果执行resolve的回调时，如果抛出异常，并不会报错停止js，而是进入到catch方法；</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>somedata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//此处的somedata未定义</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-all的用法\"><a href=\"#5-all的用法\" class=\"headerlink\" title=\"5.all的用法\"></a>5.all的用法</h4><p>谁跑得慢，以谁为准执行回调；all接受一个数组参数，里面的值最终都算返回Promise对象；</p>\n<p>all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完成之后才执行回调；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> Promose1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise1<span class=\"token punctuation\">,</span>Promise2<span class=\"token punctuation\">,</span>Promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三个都执行成功则成功\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"只要有失败则失败\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用场景：一个游戏需要很多素材，只有所有素材都下载到本地之后，才开始初始化；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> video<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token function\">funcion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> word<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>video<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">them</span><span class=\"token punctuation\">(</span><span class=\"token function\">funcion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始初始化！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏初始化失败\"</span><span class=\"token punctuation\">)</span>；\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-race用法\"><a href=\"#6-race用法\" class=\"headerlink\" title=\"6.race用法\"></a>6.race用法</h4><p>谁跑的块，以谁为准执行回调；</p>\n<p>可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Img</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        img<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">'img path'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//延时函数，用于计时</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求图片超时！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//调用</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"二、基础定义Axios\"><a href=\"#二、基础定义Axios\" class=\"headerlink\" title=\"二、基础定义Axios\"></a>二、基础定义Axios</h3><h4 id=\"服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\"><a href=\"#服务端它使用原生-node-js-http-模块-而在客户端-浏览端-则使用-XMLHttpRequests。\" class=\"headerlink\" title=\"服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\"></a>服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</h4><h4 id=\"1-特性\"><a href=\"#1-特性\" class=\"headerlink\" title=\"1.特性\"></a>1.特性</h4><ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h4 id=\"2-安装使用\"><a href=\"#2-安装使用\" class=\"headerlink\" title=\"2.安装使用\"></a>2.安装使用</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios\n//yarn\n <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> axios<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//向给定的ID用户发起请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user?ID=12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总是执行的部分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//以上代码可以等价于</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">ID</span><span class=\"token operator\">:</span><span class=\"token number\">12345</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总是执行的部分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">fiestName</span><span class=\"token operator\">:</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span><span class=\"token string\">'Smith'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//多个POST请求</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345/permissions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">getUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getUserPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> acct<span class=\"token operator\">=</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> perm<span class=\"token operator\">=</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-Axops-API\"><a href=\"#3-Axops-API\" class=\"headerlink\" title=\"3.Axops API\"></a>3.Axops API</h4><p>可以向 <code>axios</code> 传递相关配置来创建请求</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//发起一个post请求</span>\n<span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span><span class=\"token string\">'Martin'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span><span class=\"token string\">'Smith'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//在nodeJS用GET请求远程图片</span>\n<span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'http://test/123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">responseType</span><span class=\"token operator\">:</span><span class=\"token string\">'stream'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-请求配置\"><a href=\"#4-请求配置\" class=\"headerlink\" title=\"4.请求配置\"></a>4.请求配置</h4><p>创建请求时可以用配置选项；只有url是必须的，如果没有指定method，则默认使用GET；</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    url<span class=\"token operator\">:</span>'/api/user'<span class=\"token punctuation\">,</span>          <span class=\"token comment\">//用于请求的服务器URL</span>\n    method<span class=\"token operator\">:</span>'get'<span class=\"token punctuation\">,</span>\n    baseUrl<span class=\"token operator\">:</span>'https<span class=\"token operator\">:</span><span class=\"token comment\">//192.168.0.1:35000',\t\t//自动加在url前；</span>\n    transformRequest<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        function(data<span class=\"token punctuation\">,</span>headers)<span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//对即将发送的data进行处理；</span>\n            return processedData;\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    transformResponse<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        function(response)<span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//对收到的响应进行处理；</span>\n            return processedResponse;\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>'X-Requested-With'<span class=\"token operator\">:</span> 'XMLHttpRequest'<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        ID<span class=\"token operator\">:</span><span class=\"token number\">12345</span>\t\t<span class=\"token comment\">//与请求一起发送的url参数；</span>\n    <span class=\"token punctuation\">&#125;</span>，\n    <span class=\"token comment\">//data是作为请求体被发送的数据，仅适用于PUT，POST，DELETE和PATCH方法；</span>\n    <span class=\"token comment\">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span>\n  \t<span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>\n  \t<span class=\"token comment\">// - 浏览器专属: FormData, File, Blob</span>\n  \t<span class=\"token comment\">// - Node 专属: Stream, Buffer</span>\n    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    firstname<span class=\"token operator\">:</span>'Fred'<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 发送请求体数据的可选语法</span>\n      <span class=\"token comment\">// 请求方式 post</span>\n      <span class=\"token comment\">// 只有 value 会被发送，key 则不会</span>\n      data<span class=\"token operator\">:</span> 'Country=Brasil&amp;City=Belo Horizonte'<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">//timeout:指定请求超时的毫秒数；默认0ms；</span>\n\ttimeout<span class=\"token operator\">:</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>  \n\t\n\t<span class=\"token comment\">//跨域时是否需要凭证；</span>\n\twithCredentials<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// `adapter` 允许自定义处理请求，这使测试更加容易。</span>\n  <span class=\"token comment\">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span>\n  adapter<span class=\"token operator\">:</span> function (config) <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `auth` HTTP Basic Auth</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    username<span class=\"token operator\">:</span> 'janedoe'<span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> 's00pers3cret'\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `responseType` 表示浏览器将要响应的数据类型</span>\n  <span class=\"token comment\">// 选项包括: 'arraybuffer', 'document', 'json', 'text', 'stream'</span>\n  <span class=\"token comment\">// 浏览器专属：'blob'</span>\n  responseType<span class=\"token operator\">:</span> 'json'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span>\n\n  <span class=\"token comment\">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span>\n  <span class=\"token comment\">// 注意：忽略 `responseType` 的值为 'stream'，或者是客户端请求</span>\n  <span class=\"token comment\">// Note: Ignored for `responseType` of 'stream' or client-side requests</span>\n  responseEncoding<span class=\"token operator\">:</span> 'utf8'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span>\n\n  <span class=\"token comment\">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span>\n  xsrfCookieName<span class=\"token operator\">:</span> 'XSRF-TOKEN'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span>\n\n  <span class=\"token comment\">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> 'X-XSRF-TOKEN'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span>\n\n  <span class=\"token comment\">// `onUploadProgress` 允许为上传处理进度事件</span>\n  <span class=\"token comment\">// 浏览器专属</span>\n  onUploadProgress<span class=\"token operator\">:</span> function (progressEvent) <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理原生进度事件</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `onDownloadProgress` 允许为下载处理进度事件</span>\n  <span class=\"token comment\">// 浏览器专属</span>\n  onDownloadProgress<span class=\"token operator\">:</span> function (progressEvent) <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理原生进度事件</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span>\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span>\n  maxBodyLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span>\n  <span class=\"token comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span>\n  <span class=\"token comment\">// 则promise 将会 resolved，否则是 rejected。</span>\n  validateStatus<span class=\"token operator\">:</span> function (status) <span class=\"token punctuation\">&#123;</span>\n    return status >= <span class=\"token number\">200</span> &amp;&amp; status &lt; <span class=\"token number\">300</span>; <span class=\"token comment\">// 默认值</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span>\n  <span class=\"token comment\">// 如果设置为0，则不会进行重定向</span>\n  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span>\n\n  <span class=\"token comment\">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span>\n  <span class=\"token comment\">// e.g. '/var/run/docker.sock' 发送请求到 docker 守护进程。</span>\n  <span class=\"token comment\">// 只能指定 `socketPath` 或 `proxy` 。</span>\n  <span class=\"token comment\">// 若都指定，这使用 `socketPath` 。</span>\n  socketPath<span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span>\n  <span class=\"token comment\">// and https requests, respectively, in node.js. This allows options to be added like</span>\n  <span class=\"token comment\">// `keepAlive` that are not enabled by default.</span>\n  httpAgent<span class=\"token operator\">:</span> new http.Agent(<span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token operator\">:</span> new https.Agent(<span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `proxy` 定义了代理服务器的主机名，端口和协议。</span>\n  <span class=\"token comment\">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span>\n  <span class=\"token comment\">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span>\n  <span class=\"token comment\">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span>\n  <span class=\"token comment\">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span>\n  <span class=\"token comment\">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    protocol<span class=\"token operator\">:</span> 'https'<span class=\"token punctuation\">,</span>\n    host<span class=\"token operator\">:</span> '<span class=\"token number\">127.0</span>.<span class=\"token number\">0.1</span>'<span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> 'mikeymike'<span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> 'rapunz3l'\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// see https://axios-http.com/zh/docs/cancellation</span>\n  cancelToken<span class=\"token operator\">:</span> new CancelToken(function (cancel) <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `decompress` indicates whether or not the response body should be decompressed </span>\n  <span class=\"token comment\">// automatically. If set to `true` will also remove the 'content-encoding' header </span>\n  <span class=\"token comment\">// from the responses objects of all decompressed responses</span>\n  <span class=\"token comment\">// - Node only (XHR cannot turn off decompression)</span>\n  decompress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 默认值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-响应结构\"><a href=\"#5-响应结构\" class=\"headerlink\" title=\"5.响应结构\"></a>5.响应结构</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//data为服务器响应</span>\n    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">//状态码</span>\n    status<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">//HTTP状态信息</span>\n    statusText<span class=\"token operator\">:</span>'OK'<span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">//服务器响应头</span>\n    headers<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//axios请求的配置信息；</span>\n    config<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//生成响应的请求</span>\n    <span class=\"token comment\">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span>\n  \t<span class=\"token comment\">// 在浏览器中则是 XMLHttpRequest 实例</span>\n    request<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"三、默认配置\"><a href=\"#三、默认配置\" class=\"headerlink\" title=\"三、默认配置\"></a>三、默认配置</h3><h4 id=\"1-全局axios默认值\"><a href=\"#1-全局axios默认值\" class=\"headerlink\" title=\"1.全局axios默认值\"></a>1.全局axios默认值</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.example.com'</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">AUTH_TOKEN</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-自定义实例默认值\"><a href=\"#2-自定义实例默认值\" class=\"headerlink\" title=\"2.自定义实例默认值\"></a>2.自定义实例默认值</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 创建实例时配置默认值</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://api.example.com'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建实例后修改默认值</span>\ninstance<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">AUTH_TOKEN</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-配置的优先级\"><a href=\"#3-配置的优先级\" class=\"headerlink\" title=\"3.配置的优先级\"></a>3.配置的优先级</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//此时默认超时时间为0</span>\n<span class=\"token keyword\">const</span> instance<span class=\"token operator\">=</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//重写库的超时默认值</span>\ninstance<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2500</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//重写超时时间</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/logout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">5000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-拦截器\"><a href=\"#4-拦截器\" class=\"headerlink\" title=\"4.拦截器\"></a>4.拦截器</h4><p>请求或者响应被then或者catch处理之前拦截</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//添加请求拦截器</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//发送请求前做点啥~</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//对发送中的错误做点啥~</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//添加响应拦截器</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//2xx范围内的状态码都会触发此函数哦~</span>\n    <span class=\"token comment\">//do something.</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//2xx以外的状态码都会触发此函数哦~</span>\n    <span class=\"token comment\">//do something.</span>\n    <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"移除拦截器\"><a href=\"#移除拦截器\" class=\"headerlink\" title=\"移除拦截器\"></a>移除拦截器</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> interceptor<span class=\"token operator\">=</span>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">eject</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"添加拦截器\"><a href=\"#添加拦截器\" class=\"headerlink\" title=\"添加拦截器\"></a>添加拦截器</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-错误处理\"><a href=\"#5-错误处理\" class=\"headerlink\" title=\"5.错误处理\"></a>5.错误处理</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//请求成功发出且服务器响应了状态码，但是状态码超出了2xx</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//请求已经发起成功，但是没有收到响应；</span>\n        <span class=\"token comment\">//error.request是浏览器中XMLHttpRequest的实例；</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//请求发出时出问题</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>coonfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode\"><a href=\"#使用validataStatus配置选项，可以自定义抛出错误HttpCode\" class=\"headerlink\" title=\"使用validataStatus配置选项，可以自定义抛出错误HttpCode;\"></a>使用validataStatus配置选项，可以自定义抛出错误HttpCode;</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> status<span class=\"token operator\">></span><span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"使用-toJSON-可以获取更多关于HTTP错误的信息。\"><a href=\"#使用-toJSON-可以获取更多关于HTTP错误的信息。\" class=\"headerlink\" title=\"使用 toJSON 可以获取更多关于HTTP错误的信息。\"></a>使用 <code>toJSON</code> 可以获取更多关于HTTP错误的信息。</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-取消请求\"><a href=\"#6-取消请求\" class=\"headerlink\" title=\"6.取消请求\"></a>6.取消请求</h4><h5 id=\"fetechAPI-AbortController取消请求\"><a href=\"#fetechAPI-AbortController取消请求\" class=\"headerlink\" title=\"fetechAPI  AbortController取消请求\"></a>fetechAPI  AbortController取消请求</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> comtrollor<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span>controller<span class=\"token punctuation\">.</span>singal\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncontrollor<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"CancelToken-deprecated-已弃用\"><a href=\"#CancelToken-deprecated-已弃用\" class=\"headerlink\" title=\"CancelToken deprecated(已弃用)\"></a>CancelToken deprecated(已弃用)</h5><h4 id=\"7-请求体编码\"><a href=\"#7-请求体编码\" class=\"headerlink\" title=\"7.请求体编码\"></a>7.请求体编码</h4><p>默认情况下，axios将js对象序列化为json；</p>\n<p>以<code>application/x-www-form-urlencoded</code>格式发送数据；</p>\n<h5 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> params<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'param1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'params2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//注意，并不是所有的浏览器都支持URLResearchParams</span>\n\n<span class=\"token comment\">//qs库编码数据</span>\n<span class=\"token keyword\">const</span> qs<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'qs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span>qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'bar'</span><span class=\"token operator\">:</span><span class=\"token number\">123</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n或者<span class=\"token constant\">ES6</span>方法\n\n<span class=\"token keyword\">import</span> qs <span class=\"token keyword\">from</span> <span class=\"token string\">'qs'</span><span class=\"token punctuation\">;</span>\ncosnt data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'bar'</span><span class=\"token operator\">:</span><span class=\"token number\">123</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"NodeJS-使用querystring\"><a href=\"#NodeJS-使用querystring\" class=\"headerlink\" title=\"NodeJS 使用querystring\"></a>NodeJS 使用querystring</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://something.com/'</span><span class=\"token punctuation\">,</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">url<span class=\"token punctuation\">.</span>URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://something.com/'</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 querystring 方法在该用例中存在已知问题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Form Data</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FormData<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form-data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nform<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filed1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span>form<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span>from<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>拦截器</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    retun config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","text":"Axios基于promise可以用于浏览器和node.js的网络请求库一、基础定义Promise1.promise一个对象，用于传递异步操作的消息；本意上可以理解为，承诺过一段时间返回一个结果。 basic 其实就是一个请求发出去以后，并不能马上获得需要的数据，因此整个js代码需...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JS","slug":"JS","count":2,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Axios\"><span class=\"toc-text\">Axios</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Epromise%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8Cnode-js%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%BA%93\"><span class=\"toc-text\">基于promise可以用于浏览器和node.js的网络请求库</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89Promise\"><span class=\"toc-text\">一、基础定义Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-promise\"><span class=\"toc-text\">1.promise</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-promise%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">2.promise用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-reject%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">3.reject用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-catch%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">4.catch用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-all%E7%9A%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">5.all的用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-race%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">6.race用法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89Axios\"><span class=\"toc-text\">二、基础定义Axios</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%83%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F-node-js-http-%E6%A8%A1%E5%9D%97-%E8%80%8C%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%B5%8F%E8%A7%88%E7%AB%AF-%E5%88%99%E4%BD%BF%E7%94%A8-XMLHttpRequests%E3%80%82\"><span class=\"toc-text\">服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1.特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.安装使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Get%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">Get请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">POST请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Axops-API\"><span class=\"toc-text\">3.Axops API</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.请求配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">5.响应结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">三、默认配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E5%B1%80axios%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">1.全局axios默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BE%8B%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">2.自定义实例默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">3.配置的优先级</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">4.拦截器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E9%99%A4%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">移除拦截器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">添加拦截器</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5.错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8validataStatus%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AFHttpCode\"><span class=\"toc-text\">使用validataStatus配置选项，可以自定义抛出错误HttpCode;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-toJSON-%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8EHTTP%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82\"><span class=\"toc-text\">使用 toJSON 可以获取更多关于HTTP错误的信息。</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">6.取消请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#fetechAPI-AbortController%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">fetechAPI  AbortController取消请求</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CancelToken-deprecated-%E5%B7%B2%E5%BC%83%E7%94%A8\"><span class=\"toc-text\">CancelToken deprecated(已弃用)</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E8%AF%B7%E6%B1%82%E4%BD%93%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">7.请求体编码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8\"><span class=\"toc-text\">浏览器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#NodeJS-%E4%BD%BF%E7%94%A8querystring\"><span class=\"toc-text\">NodeJS 使用querystring</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"图像信号处理基础","uid":"0f623956fafb0472df452b34429c8c33","slug":"图像信号处理基础","date":"2022-10-29T07:09:00.000Z","updated":"2022-10-29T07:59:07.765Z","comments":true,"path":"api/articles/图像信号处理基础.json","keywords":"Love And Freedom","cover":"img/2.jpg","text":"图像信号处理基础一、图像信号基础1.图像表示像素点 2.图像压缩方法JPEG等； 3.常用图像处理方法 二维DFT 二维DWT 二维DCT 二、信息隐藏基本原理1.信息隐藏概念不可视通信，阈下通信$$C 载体对象；M 秘密信息； C’伪装对象；$$ 纯粹安全性：第三方有没有能力将...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"信息隐藏","slug":"信息隐藏","count":1,"path":"api/categories/信息隐藏.json"}],"tags":[{"name":"信息隐藏","slug":"信息隐藏","count":1,"path":"api/tags/信息隐藏.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue笔记","uid":"51d3872cd56d489d412dadd4338316da","slug":"JS","date":"2022-10-11T18:51:45.000Z","updated":"2023-04-04T13:35:28.254Z","comments":true,"path":"api/articles/JS.json","keywords":"Love And Freedom","cover":"img/vue.png","text":"JS一、各司其职 HTML、CSS、JS职能分离 二、组件封装 好的UI组件具有正确性、拓展性、复用性 1.结构轮播图其实是一个列表结构； 通过css将图片层叠在一起； 2.展现效果3.行为API 功能 Event 控制流：使用自定义的事件来解耦 4.改进空间 解耦+ 三、过程抽...","link":"","photos":[],"count_time":{"symbolsCount":835,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}