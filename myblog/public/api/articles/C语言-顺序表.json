{"title":"关于C语言的一些奇奇怪怪","uid":"85b49fe66b43ca226c264187ac889eda","slug":"C语言-顺序表","date":"2021-08-08T12:56:45.000Z","updated":"2021-08-14T16:11:00.000Z","comments":true,"path":"api/articles/C语言-顺序表.json","keywords":"Love And Freedom","cover":"img/2.jpg","content":"<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#include &lt;stdio.h></span>\n<span class=\"token preprocessor property\">#include &lt;stdlib.h></span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> INIT_SIZE 5</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> INCREMENT 2</span>\n\ntypedef <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ElemType<span class=\"token punctuation\">;</span>\ntypedef <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n    ElemType <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> list_length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SqList<span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">InitList_Sq</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    L<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ElemType <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>INIT_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ElemType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>list_length<span class=\"token operator\">=</span>INIT_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElemType</span> temp_data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j<span class=\"token punctuation\">;</span>\n    ElemType <span class=\"token operator\">*</span>newBase<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> index<span class=\"token operator\">></span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//realloc重新分配</span>\n        newBase<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ElemType <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>list_length<span class=\"token operator\">+</span>INCREMENT<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ElemType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newBase<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        L<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>newBase<span class=\"token punctuation\">;</span>\n        L<span class=\"token operator\">-></span>list_length<span class=\"token operator\">+=</span>INCREMENT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>index<span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp_data<span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DeleteList</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pos<span class=\"token operator\">></span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong position.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">FindElem</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElemType</span> target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty table.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">==</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find at %d.\\n\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    SqList <span class=\"token operator\">*</span>Mylist<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InitList_Sq</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>count<span class=\"token operator\">&lt;</span>INIT_SIZE<span class=\"token punctuation\">;</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">DeleteList</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find 2 in %d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">FindElem</span><span class=\"token punctuation\">(</span>Mylist<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现了顺序表的初始化、创建、增加（n）、删除(n)、查找(n)；</p>\n","text":"#include &lt;stdio.h> #include &lt;stdlib.h> #define INIT_SIZE 5 #define INCREMENT 2 typedef int ElemType; typedef struct&#123; ElemType *da...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"顺序表","uid":"d9e48ebde6ac3449bf916754850ccddb","slug":"CH1 顺序表基本操作及实现（C）","date":"2021-08-08T12:57:45.000Z","updated":"2021-08-15T14:55:04.000Z","comments":true,"path":"api/articles/CH1 顺序表基本操作及实现（C）.json","keywords":"Love And Freedom","cover":"img/bg1.jpg","text":"CH1 顺序表基本操作及实现（C） #include&lt;stdio.h> #include&lt;stdlib.h> #define MAXSIZE 50 #define Elemtype int typedef struct&#123; Elemtype data[MAXS...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"特殊矩阵及广义表","uid":"aa3121f0eb296174fb5353bf6a5b23c1","slug":"特殊矩阵和广义表","date":"2021-08-08T12:56:45.000Z","updated":"2021-08-07T16:05:24.000Z","comments":true,"path":"api/articles/特殊矩阵和广义表.json","keywords":"Love And Freedom","cover":"img/bg4.jpeg","text":"#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> int main() &#123; //存贮数据的数组 int Myarray[10]=&#123;10,5,7,3,12,20,17,4,23...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}