{"title":"顺序表","uid":"d9e48ebde6ac3449bf916754850ccddb","slug":"CH1 顺序表基本操作及实现（C）","date":"2021-08-08T12:57:45.000Z","updated":"2021-08-15T14:55:04.000Z","comments":true,"path":"api/articles/CH1 顺序表基本操作及实现（C）.json","keywords":"Love And Freedom","cover":"img/bg1.jpg","content":"<p>CH1 顺序表基本操作及实现（C）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#include&lt;stdio.h></span>\n<span class=\"token preprocessor property\">#include&lt;stdlib.h></span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> MAXSIZE 50</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> Elemtype int </span>\n\ntypedef <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n    Elemtype data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Sqlist<span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitSqlist</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Init the list successfully!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateSqlist</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> temp_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp_length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp_length<span class=\"token operator\">></span>MAXSIZE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Overflow!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>temp_length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp_data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">=</span>temp_length<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create the table successfully!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\">Elemtype</span> newData<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp_position<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp_position<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>temp_position<span class=\"token operator\">></span>L<span class=\"token operator\">-></span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong position!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">></span>temp_position<span class=\"token punctuation\">;</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>temp_position<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newData<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add new data successfully!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DeleteDataByElement</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\">Elemtype</span> deletedData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> counter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>deletedData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index1<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>index1<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token operator\">-></span>length<span class=\"token operator\">-=</span>counter<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The counter is %d\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete the data successfully!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DeleteDataByPosition</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> tempDeletePosition<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Elemtype</span> deleted_data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tempDeletePosition<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>tempDeletePosition<span class=\"token operator\">></span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong position!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        deleted_data<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>tempDeletePosition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span>tempDeletePosition<span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n\n            L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        L<span class=\"token operator\">-></span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete the data successfully!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The deleted data is %d\\n\"</span><span class=\"token punctuation\">,</span>deleted_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//按值查找</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Locate_Data</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> L<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElemType</span> targetData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>targetData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Position:%d.\\n\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//计算链表长度</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">CountLinklistLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    LNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List length : %d.\\n\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The list is below:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe length is %d\\n\"</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//不确定是否正确</span>\n<span class=\"token comment\">// void EmptyList(Sqlist *L)</span>\n<span class=\"token comment\">// &#123;</span>\n<span class=\"token comment\">//     free(L->data);</span>\n<span class=\"token comment\">//     L->length=0;</span>\n<span class=\"token comment\">//     return;</span>\n<span class=\"token comment\">// &#125;</span>\n\n\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> my_data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> my_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Sqlist</span> my_list<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Elemtype</span> insertData<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> my_new_position<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> my_abandoned_data<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> my_deleted_position<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">InitSqlist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CreateSqlist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">,</span>my_data<span class=\"token punctuation\">,</span>my_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">,</span>insertData<span class=\"token punctuation\">,</span>my_new_position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DeleteDataByElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">,</span>my_abandoned_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DeleteDataByPosition</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">,</span>my_deleted_position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// EmptyList(&amp;my_list);</span>\n    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>统一使用头节点后的代码实现：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Linklist</span> <span class=\"token function\">Create_Linklist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">LNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>NULL<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//Head node;</span>\n    q<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//q->L;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">LNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pelase enter data %d:\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">//q=L,p赋值</span>\n        p<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>NULL<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//q=L, p->NULL</span>\n        q<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//q->p->NULL==L->p->null;</span>\n        q<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\n    <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t\n    <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">InsertData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> L<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElemType</span> data<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n    index<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//index设置为-1，则从0开始计算链表长度</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span>index<span class=\"token operator\">&lt;</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\">//循环找到目标元素的前一个元素</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token operator\">||</span>index<span class=\"token operator\">></span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\t\t\t\t<span class=\"token comment\">//p的下一个为空则不存在；index大于pos则出错；</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong position.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">LNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//创建新空间</span>\n    s<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">;</span>\t\t\t\t\t\n    s<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//s=target</span>\n    p<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//p->s,s->target</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert the data successfully.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DeleteData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> L<span class=\"token punctuation\">,</span>ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> pos<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//*e可以获得目标元素的地址</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>next<span class=\"token operator\">&amp;&amp;</span>index<span class=\"token operator\">&lt;</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>index<span class=\"token operator\">></span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong position.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    q<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>e<span class=\"token operator\">=</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//将data传入e</span>\n    p<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get the data: %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//合并两个有序链表，且合成的链表也是顺序的</span>\n<span class=\"token return-type class-name\">Linklist</span> <span class=\"token function\">MergeLinklist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> A<span class=\"token punctuation\">,</span><span class=\"token class-name\">Linklist</span> B<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pb<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pc<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>C<span class=\"token punctuation\">;</span>\n    pa<span class=\"token operator\">=</span>A<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    pb<span class=\"token operator\">=</span>B<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    C<span class=\"token operator\">=</span>pc<span class=\"token operator\">=</span>A<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//C=A</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pa<span class=\"token operator\">&amp;&amp;</span>pb<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pa<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;=</span>pb<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            pc<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//c->a1;</span>\n            pc<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//c=a1;</span>\n            pa<span class=\"token operator\">=</span>pa<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//a1=a2</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            pc<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>pb<span class=\"token punctuation\">;</span>\n            pc<span class=\"token operator\">=</span>pb<span class=\"token punctuation\">;</span>\n            pb<span class=\"token operator\">=</span>pb<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    pc<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">?</span>pa<span class=\"token punctuation\">:</span>pb<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> C<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintLinklist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Linklist</span> L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    LNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DATA OUTPUT:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> e<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Linklist</span> MyLinklist<span class=\"token punctuation\">;</span>\n    MyLinklist<span class=\"token operator\">=</span><span class=\"token function\">Create_Linklist</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PrintLinklist</span><span class=\"token punctuation\">(</span>MyLinklist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InsertData</span><span class=\"token punctuation\">(</span>MyLinklist<span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PrintLinklist</span><span class=\"token punctuation\">(</span>MyLinklist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DeleteData</span><span class=\"token punctuation\">(</span>MyLinklist<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//Use &amp; to get data;</span>\n    <span class=\"token function\">PrintLinklist</span><span class=\"token punctuation\">(</span>MyLinklist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>二、双向链表</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Elemtype<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//节点结构</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span> <span class=\"token operator\">*</span> prior<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>DulNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>DulLinkList<span class=\"token punctuation\">;</span>\n\nDulNode<span class=\"token operator\">*</span> <span class=\"token function\">initDulNode</span><span class=\"token punctuation\">(</span>DulNode <span class=\"token operator\">*</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//创建一个首元节点，链表的头指针为L</span>\n    L<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>DulNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DulNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对节点进行初始化</span>\n    L<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点</span>\n    DulNode <span class=\"token operator\">*</span>r<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//创建新的节点并初始化</span>\n        DulNode <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>DulNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DulNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter data %d:\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//新节点与链表最后一个节点建立关系</span>\n        r<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//r永远指向链表中最后一个节点，重点！！！！</span>\n        r<span class=\"token operator\">=</span>r<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//返回新创建的链表</span>\n    <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>DulNode <span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    DulNode <span class=\"token operator\">*</span>temp<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d &lt;-> \"</span><span class=\"token punctuation\">,</span>temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        temp<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//创建一个头指针</span>\n    DulNode <span class=\"token operator\">*</span> L<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用链表创建函数</span>\n    L<span class=\"token operator\">=</span><span class=\"token function\">initDulNode</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//输出创建好的链表</span>\n    <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//显示双链表的优点</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"CH1 顺序表基本操作及实现（C） #include&lt;stdio.h> #include&lt;stdlib.h> #define MAXSIZE 50 #define Elemtype int typedef struct&#123; Elemtype data[MAXS...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Autumn_XDU","uid":"f827cbb80b8c49cdec8fd12f9ea90f25","slug":"XDU-Autumn","date":"2021-08-08T16:00:46.000Z","updated":"2021-08-07T16:14:54.000Z","comments":true,"path":"api/articles/XDU-Autumn.json","keywords":"Love And Freedom","cover":"img/xdu.jpg","text":"XDU的秋天 呜呜呜,XD的秋天也太好看了吧~~ ","link":"","photos":[],"count_time":{"symbolsCount":26,"symbolsTime":"1 mins."},"categories":[{"name":"日常","slug":"日常","count":5,"path":"api/categories/日常.json"}],"tags":[{"name":"摄影","slug":"摄影","count":3,"path":"api/tags/摄影.json"},{"name":"日常","slug":"日常","count":2,"path":"api/tags/日常.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"关于C语言的一些奇奇怪怪","uid":"85b49fe66b43ca226c264187ac889eda","slug":"C语言-顺序表","date":"2021-08-08T12:56:45.000Z","updated":"2021-08-14T16:11:00.000Z","comments":true,"path":"api/articles/C语言-顺序表.json","keywords":"Love And Freedom","cover":"img/2.jpg","text":"#include &lt;stdio.h> #include &lt;stdlib.h> #define INIT_SIZE 5 #define INCREMENT 2 typedef int ElemType; typedef struct&#123; ElemType *da...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}