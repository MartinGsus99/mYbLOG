{"title":"Linux Shell","uid":"e9cc1e6aaaea90ce1263cf8fa336b7a8","slug":"Linux Shell","date":"2023-04-06T10:51:45.000Z","updated":"2023-04-06T03:26:47.795Z","comments":true,"path":"api/articles/Linux Shell.json","keywords":"Love And Freedom","cover":"img/bg11.jpg","content":"<h1 id=\"Linux-Shell\"><a href=\"#Linux-Shell\" class=\"headerlink\" title=\"Linux Shell\"></a>Linux Shell</h1><ul>\n<li>标准输入和命令参数的区别；</li>\n<li>后台运行命令在推出中断后也全部退出；</li>\n<li>单引号和双引号表示字符串的区别；</li>\n<li>有的命令和sudo一起用就会Command not found;</li>\n</ul>\n<h2 id=\"一、标准输入和参数的区别\"><a href=\"#一、标准输入和参数的区别\" class=\"headerlink\" title=\"一、标准输入和参数的区别\"></a>一、标准输入和参数的区别</h2><h3 id=\"1-标准输入和参数\"><a href=\"#1-标准输入和参数\" class=\"headerlink\" title=\"1.标准输入和参数\"></a>1.标准输入和参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#错误</span>\nwhere connect.sh <span class=\"token operator\">|</span> <span class=\"token function\">rm</span>\n\n<span class=\"token comment\">#正确</span>\n<span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>where connect.sh<span class=\"token variable\">)</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>标准输入就是编程语言中诸如scanf或者readline命令，而参数是指程序的main函数传入的args字符数组；</p>\n<p>如果命令能够让终端阻塞，说明该命令接受标准输入，反之不接受；</p>\n</blockquote>\n<h3 id=\"2-后台运行程序\"><a href=\"#2-后台运行程序\" class=\"headerlink\" title=\"2.后台运行程序\"></a>2.后台运行程序</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python manager.py run server <span class=\"token number\">0.0</span>.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>远程登录服务器然后启动Django服务，此时可以通过服务器IP测试，但是终端此时是阻塞状态；</p>\n<p>可以在命令后加上<code>&amp;</code>符号，命令行就不会阻塞，响应后续命令；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>python manager.py runserver <span class=\"token number\">0.0</span>.0.0  <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>每一个终端其实都是一个shell进程，在该终端执行的程序其实都是这个shell进程分出来的子进程；</p>\n<p>正常情况下，shell进程会阻塞，等待子进程退出才重新接受新的命令；</p>\n<p>加上<code>&amp;</code>符号只是让shell进程不在阻塞可以继续响应命令，但是无论如何，一旦终端关闭，所有依附的子进程都会关闭；</p>\n<p>而（cmd &amp;）这样运行命令，则是将cmd命令挂到systemed系统守护进程；</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nohub some_cmd <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-单双引号的区别\"><a href=\"#3-单双引号的区别\" class=\"headerlink\" title=\"3.单双引号的区别\"></a>3.单双引号的区别</h3><blockquote>\n<p>不同的shell会有细微区别；</p>\n<p>对于<code>$</code>,<code>()</code>,这几个符号，单引号包围的字符串不会做任何转义，双引号会；</p>\n</blockquote>\n<ul>\n<li>如果<code>$</code>读出的参数字符包含空格，应该用双引号括起来，否则会出错；</li>\n</ul>\n<h3 id=\"4-sudo找不到命令\"><a href=\"#4-sudo找不到命令\" class=\"headerlink\" title=\"4. sudo找不到命令\"></a>4. sudo找不到命令</h3><p>有时普通用户可以用的命令，加上sudo权限却无法使用；</p>\n<ul>\n<li>原因在于该脚本仅存在于该用户的环境变量中；</li>\n<li>解决方法是使用脚本文件的路径；</li>\n</ul>\n<h2 id=\"二、Linux-Shell提高效率的技巧\"><a href=\"#二、Linux-Shell提高效率的技巧\" class=\"headerlink\" title=\"二、Linux Shell提高效率的技巧\"></a>二、Linux Shell提高效率的技巧</h2><h3 id=\"1-相似文件名\"><a href=\"#1-相似文件名\" class=\"headerlink\" title=\"1.相似文件名\"></a>1.相似文件名</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># onefile twofile threefile</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>one,two,three<span class=\"token punctuation\">&#125;</span>file\n\n<span class=\"token comment\">#one1 one2 one3 two1 two2 two3 three1 three2 three3</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>one,two,three<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1,2</span>,3<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>应用：命令拓展参数</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#给file复制一个file.bak的副本</span>\n<span class=\"token function\">cp</span> /path/file<span class=\"token punctuation\">&#123;</span>,.bak<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token comment\">#删除file&#123;1，3，5&#125;</span>\n<span class=\"token function\">rm</span> file<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1,3</span>,4<span class=\"token punctuation\">&#125;</span>.txt\n\n<span class=\"token comment\">#移动相同类型文件</span>\n<span class=\"token function\">mv</span> *.<span class=\"token punctuation\">&#123;</span>c,cpp<span class=\"token punctuation\">&#125;</span> src/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-输入路径名称太麻烦\"><a href=\"#2-输入路径名称太麻烦\" class=\"headerlink\" title=\"2. 输入路径名称太麻烦\"></a>2. 输入路径名称太麻烦</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#返回home</span>\n<span class=\"token builtin class-name\">cd</span>  \n\n<span class=\"token comment\">#返回上一个目录</span>\n<span class=\"token builtin class-name\">cd</span> -\n\n<span class=\"token comment\"># !$会替换上一次命令最后的路径</span>\n<span class=\"token function\">chmod</span> +x <span class=\"token operator\">!</span>$\n\n<span class=\"token comment\"># !*会替换上一次命令输入的所有文件路径</span>\n<span class=\"token function\">chmod</span> +x <span class=\"token operator\">!</span>*\n\n<span class=\"token comment\"># !! 自动使用上一个命令；</span>\n！！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","text":"Linux Shell 标准输入和命令参数的区别； 后台运行命令在推出中断后也全部退出； 单引号和双引号表示字符串的区别； 有的命令和sudo一起用就会Command not found; 一、标准输入和参数的区别1.标准输入和参数#错误 where connect.sh | r...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"},{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux-Shell\"><span class=\"toc-text\">Linux Shell</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E5%8F%82%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">一、标准输入和参数的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1.标准输入和参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2.后台运行程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.单双引号的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-sudo%E6%89%BE%E4%B8%8D%E5%88%B0%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4. sudo找不到命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Linux-Shell%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">二、Linux Shell提高效率的技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%9B%B8%E4%BC%BC%E6%96%87%E4%BB%B6%E5%90%8D\"><span class=\"toc-text\">1.相似文件名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BE%93%E5%85%A5%E8%B7%AF%E5%BE%84%E5%90%8D%E7%A7%B0%E5%A4%AA%E9%BA%BB%E7%83%A6\"><span class=\"toc-text\">2. 输入路径名称太麻烦</span></a></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Session And Cookie","uid":"26bc2020d08ea791ee82a8707889b8be","slug":"Session And Cookie","date":"2023-04-06T11:51:45.000Z","updated":"2023-04-06T03:26:21.125Z","comments":true,"path":"api/articles/Session And Cookie.json","keywords":"Love And Freedom","cover":"img/bg10.jpg","text":"Session And Cookie一、Session和Cookie简介1.简介 Cookie的出现是因为http是无状态协议，服务器记不住访问者，刷新一次页面可能就需要输入账号密码重新登录； cookie作用就是让服务器认识你； cookie可以认为是一个变量，形如name=v...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":37,"path":"api/categories/前端.json"}],"tags":[{"name":"session","slug":"session","count":1,"path":"api/tags/session.json"},{"name":"cookie","slug":"cookie","count":1,"path":"api/tags/cookie.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"NodeJS From W3C","date":"2023-04-05T07:29:35.904Z","updated":"2023-04-05T08:35:12.085Z","comments":true,"path":"api/articles/NodeJS From W3C.json","keywords":"Love And Freedom","cover":null,"text":"Node JS From W3C一、NodeJS回调函数 异步编程依托于回调来实现； 回调函数完成任务后会被调用，Node使用了大量得回调函数，Node所有Api都支持回调函数； 例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}