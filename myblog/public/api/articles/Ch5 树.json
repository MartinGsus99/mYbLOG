{"title":"树","uid":"01cf899dac80c5a14d5d881768abc55f","slug":"Ch5 树","date":"2021-08-21T12:57:45.000Z","updated":"2021-08-25T14:22:20.000Z","comments":true,"path":"api/articles/Ch5 树.json","keywords":"Love And Freedom","cover":"img/bg22.jpg","content":"<h1 id=\"Ch-5-树\"><a href=\"#Ch-5-树\" class=\"headerlink\" title=\"Ch 5 树\"></a>Ch 5 树</h1><h2 id=\"一、二叉树及其性质\"><a href=\"#一、二叉树及其性质\" class=\"headerlink\" title=\"一、二叉树及其性质\"></a>一、二叉树及其性质</h2><p>（1）二叉树可以为空，但是二叉有序树至少三个节点；</p>\n<p>（2）满二叉树：2^k-1个节点、</p>\n<p>（3）非空二叉树第i层的节点数不超过2^i-1个；</p>\n<p>（4）深度为k的二叉树最少k个节点，最多2^k-1个节点；</p>\n<p>（5）n0=n2-1;</p>\n<p>（6）n个节点的二叉树深度为Log2 N-1；</p>\n<p>（7）完全二叉树中，节点i的双亲节点为[i/2],左孩子2i，有孩子2i+1；</p>\n<h2 id=\"二、二叉树的实现及常用操作\"><a href=\"#二、二叉树的实现及常用操作\" class=\"headerlink\" title=\"二、二叉树的实现及常用操作\"></a>二、二叉树的实现及常用操作</h2><h3 id=\"1-二叉树的基本操作\"><a href=\"#1-二叉树的基本操作\" class=\"headerlink\" title=\"1.二叉树的基本操作\"></a>1.二叉树的基本操作</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXNODE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Elemtype <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTreeNode</span>\n<span class=\"token punctuation\">&#123;</span>\n    Elemtype data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTreeNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> BiTreeNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTreeParNode</span>\n<span class=\"token punctuation\">&#123;</span>\n    Elemtype data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTreeParNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> BiParTreeNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiParTree<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Initiate</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTreeNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    T<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    T<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">CreateTree</span><span class=\"token punctuation\">(</span>Elemtype x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">,</span>Elemtype x<span class=\"token punctuation\">,</span>BiTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a parent.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert data %d to leftchild.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">,</span>Elemtype x<span class=\"token punctuation\">,</span>BiTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a parent.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert data %d to rightchild.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">DeleteTreeLeftNode</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">,</span>BiTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No left child.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiTree <span class=\"token function\">DeleteTreeRightNode</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">,</span>BiTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No left child.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LevelOrderTree</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree Queue<span class=\"token punctuation\">[</span>MAXNODE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span>rear<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    front<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rear<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">!=</span>rear<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>Elemtype data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiTree myTree<span class=\"token punctuation\">;</span>\n    Elemtype rootData<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> numberOfNodes<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the node number:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>numberOfNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the data of root node:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rootData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myTree<span class=\"token operator\">=</span><span class=\"token function\">CreateTree</span><span class=\"token punctuation\">(</span>rootData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>numberOfNodes<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Choice:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the %d data:\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Elemtype nodedata<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>nodedata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Preorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Middleorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Postorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Leverorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LevelOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-线索二叉树的基本操作\"><a href=\"#2-线索二叉树的基本操作\" class=\"headerlink\" title=\"2.线索二叉树的基本操作\"></a>2.线索二叉树的基本操作</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXNODE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Elemtype <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiThrTreeNode</span>\n<span class=\"token punctuation\">&#123;</span>\n    Elemtype data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiThrTreeNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiThrTreeNode</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> ltag<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> rtag<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> BiThrTreeNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiThrTree<span class=\"token punctuation\">;</span>\n\nBiThrTree pre<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>Elemtype data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nBiThrTree <span class=\"token function\">CreateTree</span><span class=\"token punctuation\">(</span>Elemtype x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiThrTree <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiThrTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiThrTree <span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">,</span>Elemtype x<span class=\"token punctuation\">,</span>BiThrTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a parent.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiThrTree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiThrTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>ltag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>ltag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert data %d to leftchild.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiThrTree <span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">,</span>Elemtype x<span class=\"token punctuation\">,</span>BiThrTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such a parent.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiThrTree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiThrTreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty tree.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>rtag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>rtag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert data %d to rightchild.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nBiThrTree <span class=\"token function\">MiddleOrderThr</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span>\n\nBiThrTree <span class=\"token function\">DeleteTreeLeftNode</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">,</span>BiThrTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No left child.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBiThrTree <span class=\"token function\">DeleteTreeRightNode</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">,</span>BiThrTree parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No left child.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token operator\">=</span>parent<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LevelOrderTree</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree Queue<span class=\"token punctuation\">[</span>MAXNODE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span>rear<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    front<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rear<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">!=</span>rear<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BiThrTree myTree<span class=\"token punctuation\">;</span>\n    Elemtype rootData<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> numberOfNodes<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the node number:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>numberOfNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the data of root node:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rootData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myTree<span class=\"token operator\">=</span><span class=\"token function\">CreateTree</span><span class=\"token punctuation\">(</span>rootData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>numberOfNodes<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No %d node's position is:\\n1.Leftchild of Root.\\n2.Rightchild of Root.\\n3.Leftchild of the Root's leftchild.\\n4.Rightchild of the Root's leftchild.\\n5.Leftchild of the Root's rightchild.\\n6.Rightchild of the Root's rightchild.\\n\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Choice:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the %d data:\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Elemtype nodedata<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>nodedata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n            myTree<span class=\"token operator\">=</span><span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">,</span>nodedata<span class=\"token punctuation\">,</span>myTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Preorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Middleorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MiddleOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Postorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LastOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Leverorder:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LevelOrderTree</span><span class=\"token punctuation\">(</span>myTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-哈夫曼树\"><a href=\"#3-哈夫曼树\" class=\"headerlink\" title=\"3.哈夫曼树\"></a>3.哈夫曼树</h3>","text":"Ch 5 树一、二叉树及其性质（1）二叉树可以为空，但是二叉有序树至少三个节点； （2）满二叉树：2^k-1个节点、 （3）非空二叉树第i层的节点数不超过2^i-1个； （4）深度为k的二叉树最少k个节点，最多2^k-1个节点； （5）n0=n2-1; （6）n个节点的二叉树深度...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Ch-5-%E6%A0%91\"><span class=\"toc-text\">Ch 5 树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%85%B6%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">一、二叉树及其性质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">二、二叉树的实现及常用操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1.二叉树的基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.线索二叉树的基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91\"><span class=\"toc-text\">3.哈夫曼树</span></a></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Sound of Walking Away","uid":"0456a819f148a1e76c28ca6cd747afa8","slug":"Sound of Walking Away","date":"2021-08-22T16:00:46.000Z","updated":"2021-08-22T15:52:14.000Z","comments":true,"path":"api/articles/Sound of Walking Away.json","keywords":"Love And Freedom","cover":"img/bg14.jpg","text":" Don’t come find me, I won’t be here waiting请别试图寻找我 我不会再原地等待I so can do it alone, you’re not worth staying我自己可以过得很好 你不值得我再多停留 Weren’t listen...","link":"","photos":[],"count_time":{"symbolsCount":475,"symbolsTime":"1 mins."},"categories":[{"name":"日常","slug":"日常","count":5,"path":"api/categories/日常.json"}],"tags":[{"name":"日常","slug":"日常","count":2,"path":"api/tags/日常.json"},{"name":"音乐推荐","slug":"音乐推荐","count":1,"path":"api/tags/音乐推荐.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"特殊矩阵及广义表","uid":"aa3121f0eb296174fb5353bf6a5b23c1","slug":"CH4 特殊矩阵广义表","date":"2021-08-20T12:57:45.000Z","updated":"2021-08-22T15:45:58.000Z","comments":true,"path":"api/articles/CH4 特殊矩阵广义表.json","keywords":"Love And Freedom","cover":"img/bg16.jpg","text":"一、对称矩阵 void PrintSymetryMatrix(int m[],int n) &#123; int row,col; printf(\"Symetry Matrix:\\n\"); for(row=0;row&lt;n;row++) &#123; for(col=0;co...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":9,"path":"api/categories/编程.json"}],"tags":[{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}