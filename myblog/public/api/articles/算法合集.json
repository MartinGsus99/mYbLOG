{"title":"算法合集","uid":"84b0ca07ba7d83968ba1b32d67af79cc","slug":"算法合集","date":"2023-07-27T02:00:00.000Z","updated":"2023-07-27T02:05:57.413Z","comments":true,"path":"api/articles/算法合集.json","keywords":"Love And Freedom","cover":"img/bg3.jpg","content":"<h1 id=\"算法合集\"><a href=\"#算法合集\" class=\"headerlink\" title=\"算法合集\"></a>算法合集</h1><h3 id=\"969-烧饼排序\"><a href=\"#969-烧饼排序\" class=\"headerlink\" title=\"969.烧饼排序\"></a>969.烧饼排序</h3><p>给你一个整数数组 <code>arr</code> ，请使用 <strong>煎饼翻转</strong> 完成对数组的排序。</p>\n<p>一次煎饼翻转的执行过程如下：</p>\n<ul>\n<li>选择一个整数 <code>k</code> ，<code>1 &lt;= k &lt;= arr.length</code></li>\n<li>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</li>\n</ul>\n<p>例如，<code>arr = [3,2,1,4]</code> ，选择 <code>k = 3</code> 进行一次煎饼翻转，反转子数组 <code>[3,2,1]</code> ，得到 <code>arr = [**1**,**2**,**3**,4]</code> 。</p>\n<p>以数组形式返回能使 <code>arr</code> 有序的煎饼翻转操作所对应的 <code>k</code> 值序列。任何将数组排序且翻转次数在 <code>10 * arr.length</code> 范围内的有效答案都将被判断为正确。</p>\n<h4 id=\"思路：递归\"><a href=\"#思路：递归\" class=\"headerlink\" title=\"思路：递归\"></a>思路：递归</h4><ol>\n<li>找到<code>n</code>个饼中最大的那个</li>\n<li>将其移动到最下面</li>\n<li>找出前<code>n-1</code>个中最大的，移动到倒数第二个</li>\n<li>以此类推</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//假设盘子上有n块面积大小不一的烧饼，如何用一把锅铲进行若干次翻转，使得烧饼大小有序</span>\n<span class=\"token comment\">//每次只能翻转最上面的烧饼</span>\n<span class=\"token comment\">//以数组形式返回能使 arr 有序的煎饼翻转操作所对应的 k 值序列。</span>\n<span class=\"token comment\">//任何将数组排序且翻转次数在 10 * arr.length 范围内的有效答案都将被判断为正确。</span>\n<span class=\"token comment\">/**\n * @param &#123;number[]&#125; arr\n * @return &#123;number[]&#125;\n */</span>\n<span class=\"token comment\">//85.45 70.91</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">pancakeSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cakes<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">let</span> maxCake <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> maxCakeIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxCake<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        maxCakeIndex <span class=\"token operator\">=</span> i\n        maxCake <span class=\"token operator\">=</span> cakes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxCakeIndex<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>maxCakeIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n      arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp\n      i<span class=\"token operator\">++</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> cakes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">pancakeSort</span><span class=\"token punctuation\">(</span>cakes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"算法合集969.烧饼排序给你一个整数数组 arr ，请使用 煎饼翻转 完成对数组的排序。 一次煎饼翻转的执行过程如下： 选择一个整数 k ，1 &lt;= k &lt;= arr.length 反转子数组 arr[0...k-1]（下标从 0 开始） 例如，arr = [3,2,...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":4,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86\"><span class=\"toc-text\">算法合集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#969-%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">969.烧饼排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%EF%BC%9A%E9%80%92%E5%BD%92\"><span class=\"toc-text\">思路：递归</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"VUE+TS","date":"2023-07-26T07:41:06.094Z","updated":"2023-07-26T09:14:25.483Z","comments":true,"path":"api/articles/VUE+TS.json","keywords":"Love And Freedom","cover":null,"text":"VUE+TS","link":"","photos":[],"count_time":{"symbolsCount":6,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}