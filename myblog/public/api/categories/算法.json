{"name":"算法","slug":"算法","count":3,"postlist":[{"title":"数据结构","uid":"81579b6c641dedc829a2b0058112fc0c","slug":"Dijkstra算法","date":"2021-04-09T10:03:45.000Z","updated":"2021-04-09T09:14:40.000Z","comments":true,"path":"api/articles/Dijkstra算法.json","keywords":"Love And Freedom","cover":"img/dijsktra.png","text":"关于Dijkstra算法✔重要 1.基本原理假设它的起点是 a ，要求它到各点的最短距离 Dijkstra 思路是维护一个集合 s ，集合内的点是已经确定最短路的点，可以视为一个大整体，每次操作找出与集合相邻的点中距离起点最近的点加入集合中，并确定它的最短路为它的上家的最短路+该...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"王道考研","slug":"王道考研","count":1,"path":"api/tags/王道考研.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"二叉搜索树集锦","uid":"ea7d19252d7361b5f280a3d0ee2aa6d5","slug":"二叉搜索树集锦","date":"2023-07-07T00:51:45.000Z","updated":"2023-07-07T02:56:13.474Z","comments":true,"path":"api/articles/二叉搜索树集锦.json","keywords":"Love And Freedom","cover":"img/bg16.jpg","text":"二叉搜索树集锦//基础框架 var Traverse = function (root) &#123; //something need to do Traverse(root.left) Traverse(root.right) &#125; //所有结点+1 var plus...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"二叉搜索树","slug":"二叉搜索树","count":1,"path":"api/tags/二叉搜索树.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2021-08-29T10:03:45.000Z","updated":"2021-08-30T13:37:44.000Z","comments":true,"path":"api/articles/贪心算法.json","keywords":"Love And Freedom","cover":"img/bg15.jpg","text":"贪心算法思想：每一步都选择局部最优解 #问题描述：现有几个州需要使用广播电台覆盖，每个广播电台覆盖的范围不一样，找出需要的最小的州的合集； #解：使用贪心算法，（1）选出一个覆盖最多未覆盖州的电台；重复知道覆盖所有电台； # 州名 states_need = set([\"a\", ...","link":"","photos":[],"count_time":{"symbolsCount":789,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":39,"path":"api/tags/笔记.json"},{"name":"贪心算法","slug":"贪心算法","count":1,"path":"api/tags/贪心算法.json"}],"author":{"name":"Martin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Be Myself","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}